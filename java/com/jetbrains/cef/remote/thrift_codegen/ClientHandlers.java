/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jetbrains.cef.remote.thrift_codegen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ClientHandlers {

  public interface Iface {

    public int connect() throws org.apache.thrift.TException;

    public void log(java.lang.String msg) throws org.apache.thrift.TException;

    public java.util.List<CustomScheme> AppHandler_GetRegisteredCustomSchemes() throws org.apache.thrift.TException;

    public void AppHandler_OnContextInitialized() throws org.apache.thrift.TException;

    public Rect RenderHandler_GetViewRect(int bid) throws org.apache.thrift.TException;

    public ScreenInfo RenderHandler_GetScreenInfo(int bid) throws org.apache.thrift.TException;

    public Point RenderHandler_GetScreenPoint(int bid, int viewX, int viewY) throws org.apache.thrift.TException;

    public void RenderHandler_OnPaint(int bid, boolean popup, int dirtyRectsCount, java.lang.String sharedMemName, long sharedMemHandle, int width, int height) throws org.apache.thrift.TException;

    public boolean LifeSpanHandler_OnBeforePopup(int bid, java.lang.String url, java.lang.String frameName, boolean gesture) throws org.apache.thrift.TException;

    public void LifeSpanHandler_OnAfterCreated(int bid) throws org.apache.thrift.TException;

    public boolean LifeSpanHandler_DoClose(int bid) throws org.apache.thrift.TException;

    public void LifeSpanHandler_OnBeforeClose(int bid) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadingStateChange(int bid, boolean isLoading, boolean canGoBack, boolean canGoForward) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadStart(int bid, int transition_type) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadEnd(int bid, int httpStatusCode) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadError(int bid, int errorCode, java.lang.String errorText, java.lang.String failedUrl) throws org.apache.thrift.TException;

    public void DisplayHandler_OnAddressChange(int bid, java.lang.String url) throws org.apache.thrift.TException;

    public void DisplayHandler_OnTitleChange(int bid, java.lang.String title) throws org.apache.thrift.TException;

    public boolean DisplayHandler_OnTooltip(int bid, java.lang.String text) throws org.apache.thrift.TException;

    public void DisplayHandler_OnStatusMessage(int bid, java.lang.String value) throws org.apache.thrift.TException;

    public boolean DisplayHandler_OnConsoleMessage(int bid, int level, java.lang.String message, java.lang.String source, int line) throws org.apache.thrift.TException;

    public boolean KeyboardHandler_OnPreKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) throws org.apache.thrift.TException;

    public boolean KeyboardHandler_OnKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) throws org.apache.thrift.TException;

    public void FocusHandler_OnTakeFocus(int bid, boolean next) throws org.apache.thrift.TException;

    public boolean FocusHandler_OnSetFocus(int bid, java.lang.String source) throws org.apache.thrift.TException;

    public void FocusHandler_OnGotFocus(int bid) throws org.apache.thrift.TException;

    public boolean RequestHandler_OnBeforeBrowse(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean user_gesture, boolean is_redirect) throws org.apache.thrift.TException;

    public boolean RequestHandler_OnOpenURLFromTab(int bid, java.lang.String target_url, boolean user_gesture) throws org.apache.thrift.TException;

    public boolean RequestHandler_GetAuthCredentials(int bid, java.lang.String origin_url, boolean isProxy, java.lang.String host, int port, java.lang.String realm, java.lang.String scheme, com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException;

    public boolean RequestHandler_OnCertificateError(int bid, java.lang.String cert_error, java.lang.String request_url, com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo, com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException;

    public void RequestHandler_OnRenderProcessTerminated(int bid, java.lang.String status) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.RObject RequestHandler_GetResourceRequestHandler(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean isNavigation, boolean isDownload, java.lang.String requestInitiator) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_Dispose(int rrHandler) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.RObject ResourceRequestHandler_GetCookieAccessFilter(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public void CookieAccessFilter_Dispose(int filter) throws org.apache.thrift.TException;

    public boolean CookieAccessFilter_CanSendCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.List<java.lang.String> cookie) throws org.apache.thrift.TException;

    public boolean CookieAccessFilter_CanSaveCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.List<java.lang.String> cookie) throws org.apache.thrift.TException;

    public boolean ResourceRequestHandler_OnBeforeResourceLoad(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.RObject ResourceRequestHandler_GetResourceHandler(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public void ResourceHandler_Dispose(int resourceHandler) throws org.apache.thrift.TException;

    public java.lang.String ResourceRequestHandler_OnResourceRedirect(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String new_url) throws org.apache.thrift.TException;

    public boolean ResourceRequestHandler_OnResourceResponse(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_OnResourceLoadComplete(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String status, long receivedContentLength) throws org.apache.thrift.TException;

    public boolean ResourceRequestHandler_OnProtocolExecution(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean allowOsExecution) throws org.apache.thrift.TException;

    public boolean MessageRouterHandler_onQuery(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, java.lang.String request, boolean persistent, com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback) throws org.apache.thrift.TException;

    public void MessageRouterHandler_onQueryCanceled(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void connect(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void log(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void AppHandler_GetRegisteredCustomSchemes(org.apache.thrift.async.AsyncMethodCallback<java.util.List<CustomScheme>> resultHandler) throws org.apache.thrift.TException;

    public void AppHandler_OnContextInitialized(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void RenderHandler_GetViewRect(int bid, org.apache.thrift.async.AsyncMethodCallback<Rect> resultHandler) throws org.apache.thrift.TException;

    public void RenderHandler_GetScreenInfo(int bid, org.apache.thrift.async.AsyncMethodCallback<ScreenInfo> resultHandler) throws org.apache.thrift.TException;

    public void RenderHandler_GetScreenPoint(int bid, int viewX, int viewY, org.apache.thrift.async.AsyncMethodCallback<Point> resultHandler) throws org.apache.thrift.TException;

    public void RenderHandler_OnPaint(int bid, boolean popup, int dirtyRectsCount, java.lang.String sharedMemName, long sharedMemHandle, int width, int height, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void LifeSpanHandler_OnBeforePopup(int bid, java.lang.String url, java.lang.String frameName, boolean gesture, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void LifeSpanHandler_OnAfterCreated(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void LifeSpanHandler_DoClose(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void LifeSpanHandler_OnBeforeClose(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadingStateChange(int bid, boolean isLoading, boolean canGoBack, boolean canGoForward, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadStart(int bid, int transition_type, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadEnd(int bid, int httpStatusCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void LoadHandler_OnLoadError(int bid, int errorCode, java.lang.String errorText, java.lang.String failedUrl, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void DisplayHandler_OnAddressChange(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void DisplayHandler_OnTitleChange(int bid, java.lang.String title, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void DisplayHandler_OnTooltip(int bid, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void DisplayHandler_OnStatusMessage(int bid, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void DisplayHandler_OnConsoleMessage(int bid, int level, java.lang.String message, java.lang.String source, int line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void KeyboardHandler_OnPreKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void KeyboardHandler_OnKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void FocusHandler_OnTakeFocus(int bid, boolean next, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void FocusHandler_OnSetFocus(int bid, java.lang.String source, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void FocusHandler_OnGotFocus(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void RequestHandler_OnBeforeBrowse(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean user_gesture, boolean is_redirect, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void RequestHandler_OnOpenURLFromTab(int bid, java.lang.String target_url, boolean user_gesture, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void RequestHandler_GetAuthCredentials(int bid, java.lang.String origin_url, boolean isProxy, java.lang.String host, int port, java.lang.String realm, java.lang.String scheme, com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void RequestHandler_OnCertificateError(int bid, java.lang.String cert_error, java.lang.String request_url, com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo, com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void RequestHandler_OnRenderProcessTerminated(int bid, java.lang.String status, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void RequestHandler_GetResourceRequestHandler(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean isNavigation, boolean isDownload, java.lang.String requestInitiator, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_Dispose(int rrHandler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_GetCookieAccessFilter(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException;

    public void CookieAccessFilter_Dispose(int filter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void CookieAccessFilter_CanSendCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.List<java.lang.String> cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void CookieAccessFilter_CanSaveCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.List<java.lang.String> cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_OnBeforeResourceLoad(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_GetResourceHandler(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException;

    public void ResourceHandler_Dispose(int resourceHandler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_OnResourceRedirect(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String new_url, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_OnResourceResponse(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_OnResourceLoadComplete(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String status, long receivedContentLength, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ResourceRequestHandler_OnProtocolExecution(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean allowOsExecution, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouterHandler_onQuery(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, java.lang.String request, boolean persistent, com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouterHandler_onQueryCanceled(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public int connect() throws org.apache.thrift.TException
    {
      send_connect();
      return recv_connect();
    }

    public void send_connect() throws org.apache.thrift.TException
    {
      connect_args args = new connect_args();
      sendBase("connect", args);
    }

    public int recv_connect() throws org.apache.thrift.TException
    {
      connect_result result = new connect_result();
      receiveBase(result, "connect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connect failed: unknown result");
    }

    @Override
    public void log(java.lang.String msg) throws org.apache.thrift.TException
    {
      send_log(msg);
    }

    public void send_log(java.lang.String msg) throws org.apache.thrift.TException
    {
      log_args args = new log_args();
      args.setMsg(msg);
      sendBaseOneway("log", args);
    }

    @Override
    public java.util.List<CustomScheme> AppHandler_GetRegisteredCustomSchemes() throws org.apache.thrift.TException
    {
      send_AppHandler_GetRegisteredCustomSchemes();
      return recv_AppHandler_GetRegisteredCustomSchemes();
    }

    public void send_AppHandler_GetRegisteredCustomSchemes() throws org.apache.thrift.TException
    {
      AppHandler_GetRegisteredCustomSchemes_args args = new AppHandler_GetRegisteredCustomSchemes_args();
      sendBase("AppHandler_GetRegisteredCustomSchemes", args);
    }

    public java.util.List<CustomScheme> recv_AppHandler_GetRegisteredCustomSchemes() throws org.apache.thrift.TException
    {
      AppHandler_GetRegisteredCustomSchemes_result result = new AppHandler_GetRegisteredCustomSchemes_result();
      receiveBase(result, "AppHandler_GetRegisteredCustomSchemes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AppHandler_GetRegisteredCustomSchemes failed: unknown result");
    }

    @Override
    public void AppHandler_OnContextInitialized() throws org.apache.thrift.TException
    {
      send_AppHandler_OnContextInitialized();
      recv_AppHandler_OnContextInitialized();
    }

    public void send_AppHandler_OnContextInitialized() throws org.apache.thrift.TException
    {
      AppHandler_OnContextInitialized_args args = new AppHandler_OnContextInitialized_args();
      sendBase("AppHandler_OnContextInitialized", args);
    }

    public void recv_AppHandler_OnContextInitialized() throws org.apache.thrift.TException
    {
      AppHandler_OnContextInitialized_result result = new AppHandler_OnContextInitialized_result();
      receiveBase(result, "AppHandler_OnContextInitialized");
      return;
    }

    @Override
    public Rect RenderHandler_GetViewRect(int bid) throws org.apache.thrift.TException
    {
      send_RenderHandler_GetViewRect(bid);
      return recv_RenderHandler_GetViewRect();
    }

    public void send_RenderHandler_GetViewRect(int bid) throws org.apache.thrift.TException
    {
      RenderHandler_GetViewRect_args args = new RenderHandler_GetViewRect_args();
      args.setBid(bid);
      sendBase("RenderHandler_GetViewRect", args);
    }

    public Rect recv_RenderHandler_GetViewRect() throws org.apache.thrift.TException
    {
      RenderHandler_GetViewRect_result result = new RenderHandler_GetViewRect_result();
      receiveBase(result, "RenderHandler_GetViewRect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RenderHandler_GetViewRect failed: unknown result");
    }

    @Override
    public ScreenInfo RenderHandler_GetScreenInfo(int bid) throws org.apache.thrift.TException
    {
      send_RenderHandler_GetScreenInfo(bid);
      return recv_RenderHandler_GetScreenInfo();
    }

    public void send_RenderHandler_GetScreenInfo(int bid) throws org.apache.thrift.TException
    {
      RenderHandler_GetScreenInfo_args args = new RenderHandler_GetScreenInfo_args();
      args.setBid(bid);
      sendBase("RenderHandler_GetScreenInfo", args);
    }

    public ScreenInfo recv_RenderHandler_GetScreenInfo() throws org.apache.thrift.TException
    {
      RenderHandler_GetScreenInfo_result result = new RenderHandler_GetScreenInfo_result();
      receiveBase(result, "RenderHandler_GetScreenInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RenderHandler_GetScreenInfo failed: unknown result");
    }

    @Override
    public Point RenderHandler_GetScreenPoint(int bid, int viewX, int viewY) throws org.apache.thrift.TException
    {
      send_RenderHandler_GetScreenPoint(bid, viewX, viewY);
      return recv_RenderHandler_GetScreenPoint();
    }

    public void send_RenderHandler_GetScreenPoint(int bid, int viewX, int viewY) throws org.apache.thrift.TException
    {
      RenderHandler_GetScreenPoint_args args = new RenderHandler_GetScreenPoint_args();
      args.setBid(bid);
      args.setViewX(viewX);
      args.setViewY(viewY);
      sendBase("RenderHandler_GetScreenPoint", args);
    }

    public Point recv_RenderHandler_GetScreenPoint() throws org.apache.thrift.TException
    {
      RenderHandler_GetScreenPoint_result result = new RenderHandler_GetScreenPoint_result();
      receiveBase(result, "RenderHandler_GetScreenPoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RenderHandler_GetScreenPoint failed: unknown result");
    }

    @Override
    public void RenderHandler_OnPaint(int bid, boolean popup, int dirtyRectsCount, java.lang.String sharedMemName, long sharedMemHandle, int width, int height) throws org.apache.thrift.TException
    {
      send_RenderHandler_OnPaint(bid, popup, dirtyRectsCount, sharedMemName, sharedMemHandle, width, height);
      recv_RenderHandler_OnPaint();
    }

    public void send_RenderHandler_OnPaint(int bid, boolean popup, int dirtyRectsCount, java.lang.String sharedMemName, long sharedMemHandle, int width, int height) throws org.apache.thrift.TException
    {
      RenderHandler_OnPaint_args args = new RenderHandler_OnPaint_args();
      args.setBid(bid);
      args.setPopup(popup);
      args.setDirtyRectsCount(dirtyRectsCount);
      args.setSharedMemName(sharedMemName);
      args.setSharedMemHandle(sharedMemHandle);
      args.setWidth(width);
      args.setHeight(height);
      sendBase("RenderHandler_OnPaint", args);
    }

    public void recv_RenderHandler_OnPaint() throws org.apache.thrift.TException
    {
      RenderHandler_OnPaint_result result = new RenderHandler_OnPaint_result();
      receiveBase(result, "RenderHandler_OnPaint");
      return;
    }

    @Override
    public boolean LifeSpanHandler_OnBeforePopup(int bid, java.lang.String url, java.lang.String frameName, boolean gesture) throws org.apache.thrift.TException
    {
      send_LifeSpanHandler_OnBeforePopup(bid, url, frameName, gesture);
      return recv_LifeSpanHandler_OnBeforePopup();
    }

    public void send_LifeSpanHandler_OnBeforePopup(int bid, java.lang.String url, java.lang.String frameName, boolean gesture) throws org.apache.thrift.TException
    {
      LifeSpanHandler_OnBeforePopup_args args = new LifeSpanHandler_OnBeforePopup_args();
      args.setBid(bid);
      args.setUrl(url);
      args.setFrameName(frameName);
      args.setGesture(gesture);
      sendBase("LifeSpanHandler_OnBeforePopup", args);
    }

    public boolean recv_LifeSpanHandler_OnBeforePopup() throws org.apache.thrift.TException
    {
      LifeSpanHandler_OnBeforePopup_result result = new LifeSpanHandler_OnBeforePopup_result();
      receiveBase(result, "LifeSpanHandler_OnBeforePopup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "LifeSpanHandler_OnBeforePopup failed: unknown result");
    }

    @Override
    public void LifeSpanHandler_OnAfterCreated(int bid) throws org.apache.thrift.TException
    {
      send_LifeSpanHandler_OnAfterCreated(bid);
    }

    public void send_LifeSpanHandler_OnAfterCreated(int bid) throws org.apache.thrift.TException
    {
      LifeSpanHandler_OnAfterCreated_args args = new LifeSpanHandler_OnAfterCreated_args();
      args.setBid(bid);
      sendBaseOneway("LifeSpanHandler_OnAfterCreated", args);
    }

    @Override
    public boolean LifeSpanHandler_DoClose(int bid) throws org.apache.thrift.TException
    {
      send_LifeSpanHandler_DoClose(bid);
      return recv_LifeSpanHandler_DoClose();
    }

    public void send_LifeSpanHandler_DoClose(int bid) throws org.apache.thrift.TException
    {
      LifeSpanHandler_DoClose_args args = new LifeSpanHandler_DoClose_args();
      args.setBid(bid);
      sendBase("LifeSpanHandler_DoClose", args);
    }

    public boolean recv_LifeSpanHandler_DoClose() throws org.apache.thrift.TException
    {
      LifeSpanHandler_DoClose_result result = new LifeSpanHandler_DoClose_result();
      receiveBase(result, "LifeSpanHandler_DoClose");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "LifeSpanHandler_DoClose failed: unknown result");
    }

    @Override
    public void LifeSpanHandler_OnBeforeClose(int bid) throws org.apache.thrift.TException
    {
      send_LifeSpanHandler_OnBeforeClose(bid);
    }

    public void send_LifeSpanHandler_OnBeforeClose(int bid) throws org.apache.thrift.TException
    {
      LifeSpanHandler_OnBeforeClose_args args = new LifeSpanHandler_OnBeforeClose_args();
      args.setBid(bid);
      sendBaseOneway("LifeSpanHandler_OnBeforeClose", args);
    }

    @Override
    public void LoadHandler_OnLoadingStateChange(int bid, boolean isLoading, boolean canGoBack, boolean canGoForward) throws org.apache.thrift.TException
    {
      send_LoadHandler_OnLoadingStateChange(bid, isLoading, canGoBack, canGoForward);
    }

    public void send_LoadHandler_OnLoadingStateChange(int bid, boolean isLoading, boolean canGoBack, boolean canGoForward) throws org.apache.thrift.TException
    {
      LoadHandler_OnLoadingStateChange_args args = new LoadHandler_OnLoadingStateChange_args();
      args.setBid(bid);
      args.setIsLoading(isLoading);
      args.setCanGoBack(canGoBack);
      args.setCanGoForward(canGoForward);
      sendBaseOneway("LoadHandler_OnLoadingStateChange", args);
    }

    @Override
    public void LoadHandler_OnLoadStart(int bid, int transition_type) throws org.apache.thrift.TException
    {
      send_LoadHandler_OnLoadStart(bid, transition_type);
    }

    public void send_LoadHandler_OnLoadStart(int bid, int transition_type) throws org.apache.thrift.TException
    {
      LoadHandler_OnLoadStart_args args = new LoadHandler_OnLoadStart_args();
      args.setBid(bid);
      args.setTransition_type(transition_type);
      sendBaseOneway("LoadHandler_OnLoadStart", args);
    }

    @Override
    public void LoadHandler_OnLoadEnd(int bid, int httpStatusCode) throws org.apache.thrift.TException
    {
      send_LoadHandler_OnLoadEnd(bid, httpStatusCode);
    }

    public void send_LoadHandler_OnLoadEnd(int bid, int httpStatusCode) throws org.apache.thrift.TException
    {
      LoadHandler_OnLoadEnd_args args = new LoadHandler_OnLoadEnd_args();
      args.setBid(bid);
      args.setHttpStatusCode(httpStatusCode);
      sendBaseOneway("LoadHandler_OnLoadEnd", args);
    }

    @Override
    public void LoadHandler_OnLoadError(int bid, int errorCode, java.lang.String errorText, java.lang.String failedUrl) throws org.apache.thrift.TException
    {
      send_LoadHandler_OnLoadError(bid, errorCode, errorText, failedUrl);
    }

    public void send_LoadHandler_OnLoadError(int bid, int errorCode, java.lang.String errorText, java.lang.String failedUrl) throws org.apache.thrift.TException
    {
      LoadHandler_OnLoadError_args args = new LoadHandler_OnLoadError_args();
      args.setBid(bid);
      args.setErrorCode(errorCode);
      args.setErrorText(errorText);
      args.setFailedUrl(failedUrl);
      sendBaseOneway("LoadHandler_OnLoadError", args);
    }

    @Override
    public void DisplayHandler_OnAddressChange(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      send_DisplayHandler_OnAddressChange(bid, url);
    }

    public void send_DisplayHandler_OnAddressChange(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      DisplayHandler_OnAddressChange_args args = new DisplayHandler_OnAddressChange_args();
      args.setBid(bid);
      args.setUrl(url);
      sendBaseOneway("DisplayHandler_OnAddressChange", args);
    }

    @Override
    public void DisplayHandler_OnTitleChange(int bid, java.lang.String title) throws org.apache.thrift.TException
    {
      send_DisplayHandler_OnTitleChange(bid, title);
    }

    public void send_DisplayHandler_OnTitleChange(int bid, java.lang.String title) throws org.apache.thrift.TException
    {
      DisplayHandler_OnTitleChange_args args = new DisplayHandler_OnTitleChange_args();
      args.setBid(bid);
      args.setTitle(title);
      sendBaseOneway("DisplayHandler_OnTitleChange", args);
    }

    @Override
    public boolean DisplayHandler_OnTooltip(int bid, java.lang.String text) throws org.apache.thrift.TException
    {
      send_DisplayHandler_OnTooltip(bid, text);
      return recv_DisplayHandler_OnTooltip();
    }

    public void send_DisplayHandler_OnTooltip(int bid, java.lang.String text) throws org.apache.thrift.TException
    {
      DisplayHandler_OnTooltip_args args = new DisplayHandler_OnTooltip_args();
      args.setBid(bid);
      args.setText(text);
      sendBase("DisplayHandler_OnTooltip", args);
    }

    public boolean recv_DisplayHandler_OnTooltip() throws org.apache.thrift.TException
    {
      DisplayHandler_OnTooltip_result result = new DisplayHandler_OnTooltip_result();
      receiveBase(result, "DisplayHandler_OnTooltip");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DisplayHandler_OnTooltip failed: unknown result");
    }

    @Override
    public void DisplayHandler_OnStatusMessage(int bid, java.lang.String value) throws org.apache.thrift.TException
    {
      send_DisplayHandler_OnStatusMessage(bid, value);
    }

    public void send_DisplayHandler_OnStatusMessage(int bid, java.lang.String value) throws org.apache.thrift.TException
    {
      DisplayHandler_OnStatusMessage_args args = new DisplayHandler_OnStatusMessage_args();
      args.setBid(bid);
      args.setValue(value);
      sendBaseOneway("DisplayHandler_OnStatusMessage", args);
    }

    @Override
    public boolean DisplayHandler_OnConsoleMessage(int bid, int level, java.lang.String message, java.lang.String source, int line) throws org.apache.thrift.TException
    {
      send_DisplayHandler_OnConsoleMessage(bid, level, message, source, line);
      return recv_DisplayHandler_OnConsoleMessage();
    }

    public void send_DisplayHandler_OnConsoleMessage(int bid, int level, java.lang.String message, java.lang.String source, int line) throws org.apache.thrift.TException
    {
      DisplayHandler_OnConsoleMessage_args args = new DisplayHandler_OnConsoleMessage_args();
      args.setBid(bid);
      args.setLevel(level);
      args.setMessage(message);
      args.setSource(source);
      args.setLine(line);
      sendBase("DisplayHandler_OnConsoleMessage", args);
    }

    public boolean recv_DisplayHandler_OnConsoleMessage() throws org.apache.thrift.TException
    {
      DisplayHandler_OnConsoleMessage_result result = new DisplayHandler_OnConsoleMessage_result();
      receiveBase(result, "DisplayHandler_OnConsoleMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DisplayHandler_OnConsoleMessage failed: unknown result");
    }

    @Override
    public boolean KeyboardHandler_OnPreKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) throws org.apache.thrift.TException
    {
      send_KeyboardHandler_OnPreKeyEvent(bid, event);
      return recv_KeyboardHandler_OnPreKeyEvent();
    }

    public void send_KeyboardHandler_OnPreKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) throws org.apache.thrift.TException
    {
      KeyboardHandler_OnPreKeyEvent_args args = new KeyboardHandler_OnPreKeyEvent_args();
      args.setBid(bid);
      args.setEvent(event);
      sendBase("KeyboardHandler_OnPreKeyEvent", args);
    }

    public boolean recv_KeyboardHandler_OnPreKeyEvent() throws org.apache.thrift.TException
    {
      KeyboardHandler_OnPreKeyEvent_result result = new KeyboardHandler_OnPreKeyEvent_result();
      receiveBase(result, "KeyboardHandler_OnPreKeyEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "KeyboardHandler_OnPreKeyEvent failed: unknown result");
    }

    @Override
    public boolean KeyboardHandler_OnKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) throws org.apache.thrift.TException
    {
      send_KeyboardHandler_OnKeyEvent(bid, event);
      return recv_KeyboardHandler_OnKeyEvent();
    }

    public void send_KeyboardHandler_OnKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) throws org.apache.thrift.TException
    {
      KeyboardHandler_OnKeyEvent_args args = new KeyboardHandler_OnKeyEvent_args();
      args.setBid(bid);
      args.setEvent(event);
      sendBase("KeyboardHandler_OnKeyEvent", args);
    }

    public boolean recv_KeyboardHandler_OnKeyEvent() throws org.apache.thrift.TException
    {
      KeyboardHandler_OnKeyEvent_result result = new KeyboardHandler_OnKeyEvent_result();
      receiveBase(result, "KeyboardHandler_OnKeyEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "KeyboardHandler_OnKeyEvent failed: unknown result");
    }

    @Override
    public void FocusHandler_OnTakeFocus(int bid, boolean next) throws org.apache.thrift.TException
    {
      send_FocusHandler_OnTakeFocus(bid, next);
    }

    public void send_FocusHandler_OnTakeFocus(int bid, boolean next) throws org.apache.thrift.TException
    {
      FocusHandler_OnTakeFocus_args args = new FocusHandler_OnTakeFocus_args();
      args.setBid(bid);
      args.setNext(next);
      sendBaseOneway("FocusHandler_OnTakeFocus", args);
    }

    @Override
    public boolean FocusHandler_OnSetFocus(int bid, java.lang.String source) throws org.apache.thrift.TException
    {
      send_FocusHandler_OnSetFocus(bid, source);
      return recv_FocusHandler_OnSetFocus();
    }

    public void send_FocusHandler_OnSetFocus(int bid, java.lang.String source) throws org.apache.thrift.TException
    {
      FocusHandler_OnSetFocus_args args = new FocusHandler_OnSetFocus_args();
      args.setBid(bid);
      args.setSource(source);
      sendBase("FocusHandler_OnSetFocus", args);
    }

    public boolean recv_FocusHandler_OnSetFocus() throws org.apache.thrift.TException
    {
      FocusHandler_OnSetFocus_result result = new FocusHandler_OnSetFocus_result();
      receiveBase(result, "FocusHandler_OnSetFocus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FocusHandler_OnSetFocus failed: unknown result");
    }

    @Override
    public void FocusHandler_OnGotFocus(int bid) throws org.apache.thrift.TException
    {
      send_FocusHandler_OnGotFocus(bid);
    }

    public void send_FocusHandler_OnGotFocus(int bid) throws org.apache.thrift.TException
    {
      FocusHandler_OnGotFocus_args args = new FocusHandler_OnGotFocus_args();
      args.setBid(bid);
      sendBaseOneway("FocusHandler_OnGotFocus", args);
    }

    @Override
    public boolean RequestHandler_OnBeforeBrowse(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean user_gesture, boolean is_redirect) throws org.apache.thrift.TException
    {
      send_RequestHandler_OnBeforeBrowse(bid, request, user_gesture, is_redirect);
      return recv_RequestHandler_OnBeforeBrowse();
    }

    public void send_RequestHandler_OnBeforeBrowse(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean user_gesture, boolean is_redirect) throws org.apache.thrift.TException
    {
      RequestHandler_OnBeforeBrowse_args args = new RequestHandler_OnBeforeBrowse_args();
      args.setBid(bid);
      args.setRequest(request);
      args.setUser_gesture(user_gesture);
      args.setIs_redirect(is_redirect);
      sendBase("RequestHandler_OnBeforeBrowse", args);
    }

    public boolean recv_RequestHandler_OnBeforeBrowse() throws org.apache.thrift.TException
    {
      RequestHandler_OnBeforeBrowse_result result = new RequestHandler_OnBeforeBrowse_result();
      receiveBase(result, "RequestHandler_OnBeforeBrowse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestHandler_OnBeforeBrowse failed: unknown result");
    }

    @Override
    public boolean RequestHandler_OnOpenURLFromTab(int bid, java.lang.String target_url, boolean user_gesture) throws org.apache.thrift.TException
    {
      send_RequestHandler_OnOpenURLFromTab(bid, target_url, user_gesture);
      return recv_RequestHandler_OnOpenURLFromTab();
    }

    public void send_RequestHandler_OnOpenURLFromTab(int bid, java.lang.String target_url, boolean user_gesture) throws org.apache.thrift.TException
    {
      RequestHandler_OnOpenURLFromTab_args args = new RequestHandler_OnOpenURLFromTab_args();
      args.setBid(bid);
      args.setTarget_url(target_url);
      args.setUser_gesture(user_gesture);
      sendBase("RequestHandler_OnOpenURLFromTab", args);
    }

    public boolean recv_RequestHandler_OnOpenURLFromTab() throws org.apache.thrift.TException
    {
      RequestHandler_OnOpenURLFromTab_result result = new RequestHandler_OnOpenURLFromTab_result();
      receiveBase(result, "RequestHandler_OnOpenURLFromTab");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestHandler_OnOpenURLFromTab failed: unknown result");
    }

    @Override
    public boolean RequestHandler_GetAuthCredentials(int bid, java.lang.String origin_url, boolean isProxy, java.lang.String host, int port, java.lang.String realm, java.lang.String scheme, com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      send_RequestHandler_GetAuthCredentials(bid, origin_url, isProxy, host, port, realm, scheme, authCallback);
      return recv_RequestHandler_GetAuthCredentials();
    }

    public void send_RequestHandler_GetAuthCredentials(int bid, java.lang.String origin_url, boolean isProxy, java.lang.String host, int port, java.lang.String realm, java.lang.String scheme, com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      RequestHandler_GetAuthCredentials_args args = new RequestHandler_GetAuthCredentials_args();
      args.setBid(bid);
      args.setOrigin_url(origin_url);
      args.setIsProxy(isProxy);
      args.setHost(host);
      args.setPort(port);
      args.setRealm(realm);
      args.setScheme(scheme);
      args.setAuthCallback(authCallback);
      sendBase("RequestHandler_GetAuthCredentials", args);
    }

    public boolean recv_RequestHandler_GetAuthCredentials() throws org.apache.thrift.TException
    {
      RequestHandler_GetAuthCredentials_result result = new RequestHandler_GetAuthCredentials_result();
      receiveBase(result, "RequestHandler_GetAuthCredentials");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestHandler_GetAuthCredentials failed: unknown result");
    }

    @Override
    public boolean RequestHandler_OnCertificateError(int bid, java.lang.String cert_error, java.lang.String request_url, com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo, com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      send_RequestHandler_OnCertificateError(bid, cert_error, request_url, sslInfo, callback);
      return recv_RequestHandler_OnCertificateError();
    }

    public void send_RequestHandler_OnCertificateError(int bid, java.lang.String cert_error, java.lang.String request_url, com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo, com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      RequestHandler_OnCertificateError_args args = new RequestHandler_OnCertificateError_args();
      args.setBid(bid);
      args.setCert_error(cert_error);
      args.setRequest_url(request_url);
      args.setSslInfo(sslInfo);
      args.setCallback(callback);
      sendBase("RequestHandler_OnCertificateError", args);
    }

    public boolean recv_RequestHandler_OnCertificateError() throws org.apache.thrift.TException
    {
      RequestHandler_OnCertificateError_result result = new RequestHandler_OnCertificateError_result();
      receiveBase(result, "RequestHandler_OnCertificateError");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestHandler_OnCertificateError failed: unknown result");
    }

    @Override
    public void RequestHandler_OnRenderProcessTerminated(int bid, java.lang.String status) throws org.apache.thrift.TException
    {
      send_RequestHandler_OnRenderProcessTerminated(bid, status);
    }

    public void send_RequestHandler_OnRenderProcessTerminated(int bid, java.lang.String status) throws org.apache.thrift.TException
    {
      RequestHandler_OnRenderProcessTerminated_args args = new RequestHandler_OnRenderProcessTerminated_args();
      args.setBid(bid);
      args.setStatus(status);
      sendBaseOneway("RequestHandler_OnRenderProcessTerminated", args);
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.RObject RequestHandler_GetResourceRequestHandler(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean isNavigation, boolean isDownload, java.lang.String requestInitiator) throws org.apache.thrift.TException
    {
      send_RequestHandler_GetResourceRequestHandler(bid, request, isNavigation, isDownload, requestInitiator);
      return recv_RequestHandler_GetResourceRequestHandler();
    }

    public void send_RequestHandler_GetResourceRequestHandler(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean isNavigation, boolean isDownload, java.lang.String requestInitiator) throws org.apache.thrift.TException
    {
      RequestHandler_GetResourceRequestHandler_args args = new RequestHandler_GetResourceRequestHandler_args();
      args.setBid(bid);
      args.setRequest(request);
      args.setIsNavigation(isNavigation);
      args.setIsDownload(isDownload);
      args.setRequestInitiator(requestInitiator);
      sendBase("RequestHandler_GetResourceRequestHandler", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.RObject recv_RequestHandler_GetResourceRequestHandler() throws org.apache.thrift.TException
    {
      RequestHandler_GetResourceRequestHandler_result result = new RequestHandler_GetResourceRequestHandler_result();
      receiveBase(result, "RequestHandler_GetResourceRequestHandler");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RequestHandler_GetResourceRequestHandler failed: unknown result");
    }

    @Override
    public void ResourceRequestHandler_Dispose(int rrHandler) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_Dispose(rrHandler);
    }

    public void send_ResourceRequestHandler_Dispose(int rrHandler) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_Dispose_args args = new ResourceRequestHandler_Dispose_args();
      args.setRrHandler(rrHandler);
      sendBaseOneway("ResourceRequestHandler_Dispose", args);
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.RObject ResourceRequestHandler_GetCookieAccessFilter(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_GetCookieAccessFilter(rrHandler, bid, request);
      return recv_ResourceRequestHandler_GetCookieAccessFilter();
    }

    public void send_ResourceRequestHandler_GetCookieAccessFilter(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_GetCookieAccessFilter_args args = new ResourceRequestHandler_GetCookieAccessFilter_args();
      args.setRrHandler(rrHandler);
      args.setBid(bid);
      args.setRequest(request);
      sendBase("ResourceRequestHandler_GetCookieAccessFilter", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.RObject recv_ResourceRequestHandler_GetCookieAccessFilter() throws org.apache.thrift.TException
    {
      ResourceRequestHandler_GetCookieAccessFilter_result result = new ResourceRequestHandler_GetCookieAccessFilter_result();
      receiveBase(result, "ResourceRequestHandler_GetCookieAccessFilter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ResourceRequestHandler_GetCookieAccessFilter failed: unknown result");
    }

    @Override
    public void CookieAccessFilter_Dispose(int filter) throws org.apache.thrift.TException
    {
      send_CookieAccessFilter_Dispose(filter);
    }

    public void send_CookieAccessFilter_Dispose(int filter) throws org.apache.thrift.TException
    {
      CookieAccessFilter_Dispose_args args = new CookieAccessFilter_Dispose_args();
      args.setFilter(filter);
      sendBaseOneway("CookieAccessFilter_Dispose", args);
    }

    @Override
    public boolean CookieAccessFilter_CanSendCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.List<java.lang.String> cookie) throws org.apache.thrift.TException
    {
      send_CookieAccessFilter_CanSendCookie(filter, bid, request, cookie);
      return recv_CookieAccessFilter_CanSendCookie();
    }

    public void send_CookieAccessFilter_CanSendCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.List<java.lang.String> cookie) throws org.apache.thrift.TException
    {
      CookieAccessFilter_CanSendCookie_args args = new CookieAccessFilter_CanSendCookie_args();
      args.setFilter(filter);
      args.setBid(bid);
      args.setRequest(request);
      args.setCookie(cookie);
      sendBase("CookieAccessFilter_CanSendCookie", args);
    }

    public boolean recv_CookieAccessFilter_CanSendCookie() throws org.apache.thrift.TException
    {
      CookieAccessFilter_CanSendCookie_result result = new CookieAccessFilter_CanSendCookie_result();
      receiveBase(result, "CookieAccessFilter_CanSendCookie");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieAccessFilter_CanSendCookie failed: unknown result");
    }

    @Override
    public boolean CookieAccessFilter_CanSaveCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.List<java.lang.String> cookie) throws org.apache.thrift.TException
    {
      send_CookieAccessFilter_CanSaveCookie(filter, bid, request, response, cookie);
      return recv_CookieAccessFilter_CanSaveCookie();
    }

    public void send_CookieAccessFilter_CanSaveCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.List<java.lang.String> cookie) throws org.apache.thrift.TException
    {
      CookieAccessFilter_CanSaveCookie_args args = new CookieAccessFilter_CanSaveCookie_args();
      args.setFilter(filter);
      args.setBid(bid);
      args.setRequest(request);
      args.setResponse(response);
      args.setCookie(cookie);
      sendBase("CookieAccessFilter_CanSaveCookie", args);
    }

    public boolean recv_CookieAccessFilter_CanSaveCookie() throws org.apache.thrift.TException
    {
      CookieAccessFilter_CanSaveCookie_result result = new CookieAccessFilter_CanSaveCookie_result();
      receiveBase(result, "CookieAccessFilter_CanSaveCookie");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieAccessFilter_CanSaveCookie failed: unknown result");
    }

    @Override
    public boolean ResourceRequestHandler_OnBeforeResourceLoad(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_OnBeforeResourceLoad(rrHandler, bid, request);
      return recv_ResourceRequestHandler_OnBeforeResourceLoad();
    }

    public void send_ResourceRequestHandler_OnBeforeResourceLoad(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnBeforeResourceLoad_args args = new ResourceRequestHandler_OnBeforeResourceLoad_args();
      args.setRrHandler(rrHandler);
      args.setBid(bid);
      args.setRequest(request);
      sendBase("ResourceRequestHandler_OnBeforeResourceLoad", args);
    }

    public boolean recv_ResourceRequestHandler_OnBeforeResourceLoad() throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnBeforeResourceLoad_result result = new ResourceRequestHandler_OnBeforeResourceLoad_result();
      receiveBase(result, "ResourceRequestHandler_OnBeforeResourceLoad");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ResourceRequestHandler_OnBeforeResourceLoad failed: unknown result");
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.RObject ResourceRequestHandler_GetResourceHandler(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_GetResourceHandler(rrHandler, bid, request);
      return recv_ResourceRequestHandler_GetResourceHandler();
    }

    public void send_ResourceRequestHandler_GetResourceHandler(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_GetResourceHandler_args args = new ResourceRequestHandler_GetResourceHandler_args();
      args.setRrHandler(rrHandler);
      args.setBid(bid);
      args.setRequest(request);
      sendBase("ResourceRequestHandler_GetResourceHandler", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.RObject recv_ResourceRequestHandler_GetResourceHandler() throws org.apache.thrift.TException
    {
      ResourceRequestHandler_GetResourceHandler_result result = new ResourceRequestHandler_GetResourceHandler_result();
      receiveBase(result, "ResourceRequestHandler_GetResourceHandler");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ResourceRequestHandler_GetResourceHandler failed: unknown result");
    }

    @Override
    public void ResourceHandler_Dispose(int resourceHandler) throws org.apache.thrift.TException
    {
      send_ResourceHandler_Dispose(resourceHandler);
    }

    public void send_ResourceHandler_Dispose(int resourceHandler) throws org.apache.thrift.TException
    {
      ResourceHandler_Dispose_args args = new ResourceHandler_Dispose_args();
      args.setResourceHandler(resourceHandler);
      sendBaseOneway("ResourceHandler_Dispose", args);
    }

    @Override
    public java.lang.String ResourceRequestHandler_OnResourceRedirect(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String new_url) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_OnResourceRedirect(rrHandler, bid, request, response, new_url);
      return recv_ResourceRequestHandler_OnResourceRedirect();
    }

    public void send_ResourceRequestHandler_OnResourceRedirect(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String new_url) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnResourceRedirect_args args = new ResourceRequestHandler_OnResourceRedirect_args();
      args.setRrHandler(rrHandler);
      args.setBid(bid);
      args.setRequest(request);
      args.setResponse(response);
      args.setNew_url(new_url);
      sendBase("ResourceRequestHandler_OnResourceRedirect", args);
    }

    public java.lang.String recv_ResourceRequestHandler_OnResourceRedirect() throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnResourceRedirect_result result = new ResourceRequestHandler_OnResourceRedirect_result();
      receiveBase(result, "ResourceRequestHandler_OnResourceRedirect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ResourceRequestHandler_OnResourceRedirect failed: unknown result");
    }

    @Override
    public boolean ResourceRequestHandler_OnResourceResponse(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_OnResourceResponse(rrHandler, bid, request, response);
      return recv_ResourceRequestHandler_OnResourceResponse();
    }

    public void send_ResourceRequestHandler_OnResourceResponse(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnResourceResponse_args args = new ResourceRequestHandler_OnResourceResponse_args();
      args.setRrHandler(rrHandler);
      args.setBid(bid);
      args.setRequest(request);
      args.setResponse(response);
      sendBase("ResourceRequestHandler_OnResourceResponse", args);
    }

    public boolean recv_ResourceRequestHandler_OnResourceResponse() throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnResourceResponse_result result = new ResourceRequestHandler_OnResourceResponse_result();
      receiveBase(result, "ResourceRequestHandler_OnResourceResponse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ResourceRequestHandler_OnResourceResponse failed: unknown result");
    }

    @Override
    public void ResourceRequestHandler_OnResourceLoadComplete(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String status, long receivedContentLength) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_OnResourceLoadComplete(rrHandler, bid, request, response, status, receivedContentLength);
      recv_ResourceRequestHandler_OnResourceLoadComplete();
    }

    public void send_ResourceRequestHandler_OnResourceLoadComplete(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String status, long receivedContentLength) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnResourceLoadComplete_args args = new ResourceRequestHandler_OnResourceLoadComplete_args();
      args.setRrHandler(rrHandler);
      args.setBid(bid);
      args.setRequest(request);
      args.setResponse(response);
      args.setStatus(status);
      args.setReceivedContentLength(receivedContentLength);
      sendBase("ResourceRequestHandler_OnResourceLoadComplete", args);
    }

    public void recv_ResourceRequestHandler_OnResourceLoadComplete() throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnResourceLoadComplete_result result = new ResourceRequestHandler_OnResourceLoadComplete_result();
      receiveBase(result, "ResourceRequestHandler_OnResourceLoadComplete");
      return;
    }

    @Override
    public boolean ResourceRequestHandler_OnProtocolExecution(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean allowOsExecution) throws org.apache.thrift.TException
    {
      send_ResourceRequestHandler_OnProtocolExecution(rrHandler, bid, request, allowOsExecution);
      return recv_ResourceRequestHandler_OnProtocolExecution();
    }

    public void send_ResourceRequestHandler_OnProtocolExecution(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean allowOsExecution) throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnProtocolExecution_args args = new ResourceRequestHandler_OnProtocolExecution_args();
      args.setRrHandler(rrHandler);
      args.setBid(bid);
      args.setRequest(request);
      args.setAllowOsExecution(allowOsExecution);
      sendBase("ResourceRequestHandler_OnProtocolExecution", args);
    }

    public boolean recv_ResourceRequestHandler_OnProtocolExecution() throws org.apache.thrift.TException
    {
      ResourceRequestHandler_OnProtocolExecution_result result = new ResourceRequestHandler_OnProtocolExecution_result();
      receiveBase(result, "ResourceRequestHandler_OnProtocolExecution");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ResourceRequestHandler_OnProtocolExecution failed: unknown result");
    }

    @Override
    public boolean MessageRouterHandler_onQuery(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, java.lang.String request, boolean persistent, com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback) throws org.apache.thrift.TException
    {
      send_MessageRouterHandler_onQuery(handler, bid, queryId, request, persistent, queryCallback);
      return recv_MessageRouterHandler_onQuery();
    }

    public void send_MessageRouterHandler_onQuery(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, java.lang.String request, boolean persistent, com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback) throws org.apache.thrift.TException
    {
      MessageRouterHandler_onQuery_args args = new MessageRouterHandler_onQuery_args();
      args.setHandler(handler);
      args.setBid(bid);
      args.setQueryId(queryId);
      args.setRequest(request);
      args.setPersistent(persistent);
      args.setQueryCallback(queryCallback);
      sendBase("MessageRouterHandler_onQuery", args);
    }

    public boolean recv_MessageRouterHandler_onQuery() throws org.apache.thrift.TException
    {
      MessageRouterHandler_onQuery_result result = new MessageRouterHandler_onQuery_result();
      receiveBase(result, "MessageRouterHandler_onQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "MessageRouterHandler_onQuery failed: unknown result");
    }

    @Override
    public void MessageRouterHandler_onQueryCanceled(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId) throws org.apache.thrift.TException
    {
      send_MessageRouterHandler_onQueryCanceled(handler, bid, queryId);
    }

    public void send_MessageRouterHandler_onQueryCanceled(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId) throws org.apache.thrift.TException
    {
      MessageRouterHandler_onQueryCanceled_args args = new MessageRouterHandler_onQueryCanceled_args();
      args.setHandler(handler);
      args.setBid(bid);
      args.setQueryId(queryId);
      sendBaseOneway("MessageRouterHandler_onQueryCanceled", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void connect(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connect_call method_call = new connect_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connect_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      public connect_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connect_args args = new connect_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connect();
      }
    }

    @Override
    public void log(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      log_call method_call = new log_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class log_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String msg;
      public log_call(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.msg = msg;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("log", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        log_args args = new log_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void AppHandler_GetRegisteredCustomSchemes(org.apache.thrift.async.AsyncMethodCallback<java.util.List<CustomScheme>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AppHandler_GetRegisteredCustomSchemes_call method_call = new AppHandler_GetRegisteredCustomSchemes_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AppHandler_GetRegisteredCustomSchemes_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CustomScheme>> {
      public AppHandler_GetRegisteredCustomSchemes_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<CustomScheme>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AppHandler_GetRegisteredCustomSchemes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AppHandler_GetRegisteredCustomSchemes_args args = new AppHandler_GetRegisteredCustomSchemes_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<CustomScheme> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AppHandler_GetRegisteredCustomSchemes();
      }
    }

    @Override
    public void AppHandler_OnContextInitialized(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AppHandler_OnContextInitialized_call method_call = new AppHandler_OnContextInitialized_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AppHandler_OnContextInitialized_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public AppHandler_OnContextInitialized_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AppHandler_OnContextInitialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AppHandler_OnContextInitialized_args args = new AppHandler_OnContextInitialized_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_AppHandler_OnContextInitialized();
        return null;
      }
    }

    @Override
    public void RenderHandler_GetViewRect(int bid, org.apache.thrift.async.AsyncMethodCallback<Rect> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RenderHandler_GetViewRect_call method_call = new RenderHandler_GetViewRect_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RenderHandler_GetViewRect_call extends org.apache.thrift.async.TAsyncMethodCall<Rect> {
      private int bid;
      public RenderHandler_GetViewRect_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Rect> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RenderHandler_GetViewRect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RenderHandler_GetViewRect_args args = new RenderHandler_GetViewRect_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Rect getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RenderHandler_GetViewRect();
      }
    }

    @Override
    public void RenderHandler_GetScreenInfo(int bid, org.apache.thrift.async.AsyncMethodCallback<ScreenInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RenderHandler_GetScreenInfo_call method_call = new RenderHandler_GetScreenInfo_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RenderHandler_GetScreenInfo_call extends org.apache.thrift.async.TAsyncMethodCall<ScreenInfo> {
      private int bid;
      public RenderHandler_GetScreenInfo_call(int bid, org.apache.thrift.async.AsyncMethodCallback<ScreenInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RenderHandler_GetScreenInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RenderHandler_GetScreenInfo_args args = new RenderHandler_GetScreenInfo_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public ScreenInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RenderHandler_GetScreenInfo();
      }
    }

    @Override
    public void RenderHandler_GetScreenPoint(int bid, int viewX, int viewY, org.apache.thrift.async.AsyncMethodCallback<Point> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RenderHandler_GetScreenPoint_call method_call = new RenderHandler_GetScreenPoint_call(bid, viewX, viewY, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RenderHandler_GetScreenPoint_call extends org.apache.thrift.async.TAsyncMethodCall<Point> {
      private int bid;
      private int viewX;
      private int viewY;
      public RenderHandler_GetScreenPoint_call(int bid, int viewX, int viewY, org.apache.thrift.async.AsyncMethodCallback<Point> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.viewX = viewX;
        this.viewY = viewY;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RenderHandler_GetScreenPoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RenderHandler_GetScreenPoint_args args = new RenderHandler_GetScreenPoint_args();
        args.setBid(bid);
        args.setViewX(viewX);
        args.setViewY(viewY);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Point getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RenderHandler_GetScreenPoint();
      }
    }

    @Override
    public void RenderHandler_OnPaint(int bid, boolean popup, int dirtyRectsCount, java.lang.String sharedMemName, long sharedMemHandle, int width, int height, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RenderHandler_OnPaint_call method_call = new RenderHandler_OnPaint_call(bid, popup, dirtyRectsCount, sharedMemName, sharedMemHandle, width, height, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RenderHandler_OnPaint_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private boolean popup;
      private int dirtyRectsCount;
      private java.lang.String sharedMemName;
      private long sharedMemHandle;
      private int width;
      private int height;
      public RenderHandler_OnPaint_call(int bid, boolean popup, int dirtyRectsCount, java.lang.String sharedMemName, long sharedMemHandle, int width, int height, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.popup = popup;
        this.dirtyRectsCount = dirtyRectsCount;
        this.sharedMemName = sharedMemName;
        this.sharedMemHandle = sharedMemHandle;
        this.width = width;
        this.height = height;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RenderHandler_OnPaint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RenderHandler_OnPaint_args args = new RenderHandler_OnPaint_args();
        args.setBid(bid);
        args.setPopup(popup);
        args.setDirtyRectsCount(dirtyRectsCount);
        args.setSharedMemName(sharedMemName);
        args.setSharedMemHandle(sharedMemHandle);
        args.setWidth(width);
        args.setHeight(height);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_RenderHandler_OnPaint();
        return null;
      }
    }

    @Override
    public void LifeSpanHandler_OnBeforePopup(int bid, java.lang.String url, java.lang.String frameName, boolean gesture, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LifeSpanHandler_OnBeforePopup_call method_call = new LifeSpanHandler_OnBeforePopup_call(bid, url, frameName, gesture, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LifeSpanHandler_OnBeforePopup_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private java.lang.String url;
      private java.lang.String frameName;
      private boolean gesture;
      public LifeSpanHandler_OnBeforePopup_call(int bid, java.lang.String url, java.lang.String frameName, boolean gesture, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.url = url;
        this.frameName = frameName;
        this.gesture = gesture;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LifeSpanHandler_OnBeforePopup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        LifeSpanHandler_OnBeforePopup_args args = new LifeSpanHandler_OnBeforePopup_args();
        args.setBid(bid);
        args.setUrl(url);
        args.setFrameName(frameName);
        args.setGesture(gesture);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_LifeSpanHandler_OnBeforePopup();
      }
    }

    @Override
    public void LifeSpanHandler_OnAfterCreated(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LifeSpanHandler_OnAfterCreated_call method_call = new LifeSpanHandler_OnAfterCreated_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LifeSpanHandler_OnAfterCreated_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public LifeSpanHandler_OnAfterCreated_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LifeSpanHandler_OnAfterCreated", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        LifeSpanHandler_OnAfterCreated_args args = new LifeSpanHandler_OnAfterCreated_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void LifeSpanHandler_DoClose(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LifeSpanHandler_DoClose_call method_call = new LifeSpanHandler_DoClose_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LifeSpanHandler_DoClose_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      public LifeSpanHandler_DoClose_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LifeSpanHandler_DoClose", org.apache.thrift.protocol.TMessageType.CALL, 0));
        LifeSpanHandler_DoClose_args args = new LifeSpanHandler_DoClose_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_LifeSpanHandler_DoClose();
      }
    }

    @Override
    public void LifeSpanHandler_OnBeforeClose(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LifeSpanHandler_OnBeforeClose_call method_call = new LifeSpanHandler_OnBeforeClose_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LifeSpanHandler_OnBeforeClose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public LifeSpanHandler_OnBeforeClose_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LifeSpanHandler_OnBeforeClose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        LifeSpanHandler_OnBeforeClose_args args = new LifeSpanHandler_OnBeforeClose_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void LoadHandler_OnLoadingStateChange(int bid, boolean isLoading, boolean canGoBack, boolean canGoForward, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LoadHandler_OnLoadingStateChange_call method_call = new LoadHandler_OnLoadingStateChange_call(bid, isLoading, canGoBack, canGoForward, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LoadHandler_OnLoadingStateChange_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private boolean isLoading;
      private boolean canGoBack;
      private boolean canGoForward;
      public LoadHandler_OnLoadingStateChange_call(int bid, boolean isLoading, boolean canGoBack, boolean canGoForward, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.isLoading = isLoading;
        this.canGoBack = canGoBack;
        this.canGoForward = canGoForward;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LoadHandler_OnLoadingStateChange", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        LoadHandler_OnLoadingStateChange_args args = new LoadHandler_OnLoadingStateChange_args();
        args.setBid(bid);
        args.setIsLoading(isLoading);
        args.setCanGoBack(canGoBack);
        args.setCanGoForward(canGoForward);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void LoadHandler_OnLoadStart(int bid, int transition_type, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LoadHandler_OnLoadStart_call method_call = new LoadHandler_OnLoadStart_call(bid, transition_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LoadHandler_OnLoadStart_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int transition_type;
      public LoadHandler_OnLoadStart_call(int bid, int transition_type, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.transition_type = transition_type;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LoadHandler_OnLoadStart", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        LoadHandler_OnLoadStart_args args = new LoadHandler_OnLoadStart_args();
        args.setBid(bid);
        args.setTransition_type(transition_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void LoadHandler_OnLoadEnd(int bid, int httpStatusCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LoadHandler_OnLoadEnd_call method_call = new LoadHandler_OnLoadEnd_call(bid, httpStatusCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LoadHandler_OnLoadEnd_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int httpStatusCode;
      public LoadHandler_OnLoadEnd_call(int bid, int httpStatusCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.httpStatusCode = httpStatusCode;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LoadHandler_OnLoadEnd", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        LoadHandler_OnLoadEnd_args args = new LoadHandler_OnLoadEnd_args();
        args.setBid(bid);
        args.setHttpStatusCode(httpStatusCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void LoadHandler_OnLoadError(int bid, int errorCode, java.lang.String errorText, java.lang.String failedUrl, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      LoadHandler_OnLoadError_call method_call = new LoadHandler_OnLoadError_call(bid, errorCode, errorText, failedUrl, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class LoadHandler_OnLoadError_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int errorCode;
      private java.lang.String errorText;
      private java.lang.String failedUrl;
      public LoadHandler_OnLoadError_call(int bid, int errorCode, java.lang.String errorText, java.lang.String failedUrl, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.errorCode = errorCode;
        this.errorText = errorText;
        this.failedUrl = failedUrl;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("LoadHandler_OnLoadError", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        LoadHandler_OnLoadError_args args = new LoadHandler_OnLoadError_args();
        args.setBid(bid);
        args.setErrorCode(errorCode);
        args.setErrorText(errorText);
        args.setFailedUrl(failedUrl);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void DisplayHandler_OnAddressChange(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DisplayHandler_OnAddressChange_call method_call = new DisplayHandler_OnAddressChange_call(bid, url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DisplayHandler_OnAddressChange_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String url;
      public DisplayHandler_OnAddressChange_call(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.url = url;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DisplayHandler_OnAddressChange", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        DisplayHandler_OnAddressChange_args args = new DisplayHandler_OnAddressChange_args();
        args.setBid(bid);
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void DisplayHandler_OnTitleChange(int bid, java.lang.String title, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DisplayHandler_OnTitleChange_call method_call = new DisplayHandler_OnTitleChange_call(bid, title, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DisplayHandler_OnTitleChange_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String title;
      public DisplayHandler_OnTitleChange_call(int bid, java.lang.String title, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.title = title;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DisplayHandler_OnTitleChange", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        DisplayHandler_OnTitleChange_args args = new DisplayHandler_OnTitleChange_args();
        args.setBid(bid);
        args.setTitle(title);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void DisplayHandler_OnTooltip(int bid, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DisplayHandler_OnTooltip_call method_call = new DisplayHandler_OnTooltip_call(bid, text, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DisplayHandler_OnTooltip_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private java.lang.String text;
      public DisplayHandler_OnTooltip_call(int bid, java.lang.String text, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.text = text;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DisplayHandler_OnTooltip", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DisplayHandler_OnTooltip_args args = new DisplayHandler_OnTooltip_args();
        args.setBid(bid);
        args.setText(text);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DisplayHandler_OnTooltip();
      }
    }

    @Override
    public void DisplayHandler_OnStatusMessage(int bid, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DisplayHandler_OnStatusMessage_call method_call = new DisplayHandler_OnStatusMessage_call(bid, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DisplayHandler_OnStatusMessage_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String value;
      public DisplayHandler_OnStatusMessage_call(int bid, java.lang.String value, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.value = value;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DisplayHandler_OnStatusMessage", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        DisplayHandler_OnStatusMessage_args args = new DisplayHandler_OnStatusMessage_args();
        args.setBid(bid);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void DisplayHandler_OnConsoleMessage(int bid, int level, java.lang.String message, java.lang.String source, int line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DisplayHandler_OnConsoleMessage_call method_call = new DisplayHandler_OnConsoleMessage_call(bid, level, message, source, line, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DisplayHandler_OnConsoleMessage_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private int level;
      private java.lang.String message;
      private java.lang.String source;
      private int line;
      public DisplayHandler_OnConsoleMessage_call(int bid, int level, java.lang.String message, java.lang.String source, int line, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.level = level;
        this.message = message;
        this.source = source;
        this.line = line;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DisplayHandler_OnConsoleMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DisplayHandler_OnConsoleMessage_args args = new DisplayHandler_OnConsoleMessage_args();
        args.setBid(bid);
        args.setLevel(level);
        args.setMessage(message);
        args.setSource(source);
        args.setLine(line);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DisplayHandler_OnConsoleMessage();
      }
    }

    @Override
    public void KeyboardHandler_OnPreKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      KeyboardHandler_OnPreKeyEvent_call method_call = new KeyboardHandler_OnPreKeyEvent_call(bid, event, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class KeyboardHandler_OnPreKeyEvent_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.KeyEvent event;
      public KeyboardHandler_OnPreKeyEvent_call(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.event = event;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("KeyboardHandler_OnPreKeyEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        KeyboardHandler_OnPreKeyEvent_args args = new KeyboardHandler_OnPreKeyEvent_args();
        args.setBid(bid);
        args.setEvent(event);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_KeyboardHandler_OnPreKeyEvent();
      }
    }

    @Override
    public void KeyboardHandler_OnKeyEvent(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      KeyboardHandler_OnKeyEvent_call method_call = new KeyboardHandler_OnKeyEvent_call(bid, event, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class KeyboardHandler_OnKeyEvent_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.KeyEvent event;
      public KeyboardHandler_OnKeyEvent_call(int bid, com.jetbrains.cef.remote.thrift_codegen.KeyEvent event, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.event = event;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("KeyboardHandler_OnKeyEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        KeyboardHandler_OnKeyEvent_args args = new KeyboardHandler_OnKeyEvent_args();
        args.setBid(bid);
        args.setEvent(event);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_KeyboardHandler_OnKeyEvent();
      }
    }

    @Override
    public void FocusHandler_OnTakeFocus(int bid, boolean next, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FocusHandler_OnTakeFocus_call method_call = new FocusHandler_OnTakeFocus_call(bid, next, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FocusHandler_OnTakeFocus_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private boolean next;
      public FocusHandler_OnTakeFocus_call(int bid, boolean next, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.next = next;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FocusHandler_OnTakeFocus", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        FocusHandler_OnTakeFocus_args args = new FocusHandler_OnTakeFocus_args();
        args.setBid(bid);
        args.setNext(next);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void FocusHandler_OnSetFocus(int bid, java.lang.String source, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FocusHandler_OnSetFocus_call method_call = new FocusHandler_OnSetFocus_call(bid, source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FocusHandler_OnSetFocus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private java.lang.String source;
      public FocusHandler_OnSetFocus_call(int bid, java.lang.String source, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.source = source;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FocusHandler_OnSetFocus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FocusHandler_OnSetFocus_args args = new FocusHandler_OnSetFocus_args();
        args.setBid(bid);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FocusHandler_OnSetFocus();
      }
    }

    @Override
    public void FocusHandler_OnGotFocus(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FocusHandler_OnGotFocus_call method_call = new FocusHandler_OnGotFocus_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FocusHandler_OnGotFocus_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public FocusHandler_OnGotFocus_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FocusHandler_OnGotFocus", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        FocusHandler_OnGotFocus_args args = new FocusHandler_OnGotFocus_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void RequestHandler_OnBeforeBrowse(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean user_gesture, boolean is_redirect, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestHandler_OnBeforeBrowse_call method_call = new RequestHandler_OnBeforeBrowse_call(bid, request, user_gesture, is_redirect, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestHandler_OnBeforeBrowse_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private boolean user_gesture;
      private boolean is_redirect;
      public RequestHandler_OnBeforeBrowse_call(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean user_gesture, boolean is_redirect, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.request = request;
        this.user_gesture = user_gesture;
        this.is_redirect = is_redirect;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestHandler_OnBeforeBrowse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestHandler_OnBeforeBrowse_args args = new RequestHandler_OnBeforeBrowse_args();
        args.setBid(bid);
        args.setRequest(request);
        args.setUser_gesture(user_gesture);
        args.setIs_redirect(is_redirect);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestHandler_OnBeforeBrowse();
      }
    }

    @Override
    public void RequestHandler_OnOpenURLFromTab(int bid, java.lang.String target_url, boolean user_gesture, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestHandler_OnOpenURLFromTab_call method_call = new RequestHandler_OnOpenURLFromTab_call(bid, target_url, user_gesture, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestHandler_OnOpenURLFromTab_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private java.lang.String target_url;
      private boolean user_gesture;
      public RequestHandler_OnOpenURLFromTab_call(int bid, java.lang.String target_url, boolean user_gesture, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.target_url = target_url;
        this.user_gesture = user_gesture;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestHandler_OnOpenURLFromTab", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestHandler_OnOpenURLFromTab_args args = new RequestHandler_OnOpenURLFromTab_args();
        args.setBid(bid);
        args.setTarget_url(target_url);
        args.setUser_gesture(user_gesture);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestHandler_OnOpenURLFromTab();
      }
    }

    @Override
    public void RequestHandler_GetAuthCredentials(int bid, java.lang.String origin_url, boolean isProxy, java.lang.String host, int port, java.lang.String realm, java.lang.String scheme, com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestHandler_GetAuthCredentials_call method_call = new RequestHandler_GetAuthCredentials_call(bid, origin_url, isProxy, host, port, realm, scheme, authCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestHandler_GetAuthCredentials_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private java.lang.String origin_url;
      private boolean isProxy;
      private java.lang.String host;
      private int port;
      private java.lang.String realm;
      private java.lang.String scheme;
      private com.jetbrains.cef.remote.thrift_codegen.RObject authCallback;
      public RequestHandler_GetAuthCredentials_call(int bid, java.lang.String origin_url, boolean isProxy, java.lang.String host, int port, java.lang.String realm, java.lang.String scheme, com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.origin_url = origin_url;
        this.isProxy = isProxy;
        this.host = host;
        this.port = port;
        this.realm = realm;
        this.scheme = scheme;
        this.authCallback = authCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestHandler_GetAuthCredentials", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestHandler_GetAuthCredentials_args args = new RequestHandler_GetAuthCredentials_args();
        args.setBid(bid);
        args.setOrigin_url(origin_url);
        args.setIsProxy(isProxy);
        args.setHost(host);
        args.setPort(port);
        args.setRealm(realm);
        args.setScheme(scheme);
        args.setAuthCallback(authCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestHandler_GetAuthCredentials();
      }
    }

    @Override
    public void RequestHandler_OnCertificateError(int bid, java.lang.String cert_error, java.lang.String request_url, com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo, com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestHandler_OnCertificateError_call method_call = new RequestHandler_OnCertificateError_call(bid, cert_error, request_url, sslInfo, callback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestHandler_OnCertificateError_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      private java.lang.String cert_error;
      private java.lang.String request_url;
      private com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo;
      private com.jetbrains.cef.remote.thrift_codegen.RObject callback;
      public RequestHandler_OnCertificateError_call(int bid, java.lang.String cert_error, java.lang.String request_url, com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo, com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.cert_error = cert_error;
        this.request_url = request_url;
        this.sslInfo = sslInfo;
        this.callback = callback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestHandler_OnCertificateError", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestHandler_OnCertificateError_args args = new RequestHandler_OnCertificateError_args();
        args.setBid(bid);
        args.setCert_error(cert_error);
        args.setRequest_url(request_url);
        args.setSslInfo(sslInfo);
        args.setCallback(callback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestHandler_OnCertificateError();
      }
    }

    @Override
    public void RequestHandler_OnRenderProcessTerminated(int bid, java.lang.String status, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestHandler_OnRenderProcessTerminated_call method_call = new RequestHandler_OnRenderProcessTerminated_call(bid, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestHandler_OnRenderProcessTerminated_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String status;
      public RequestHandler_OnRenderProcessTerminated_call(int bid, java.lang.String status, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.status = status;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestHandler_OnRenderProcessTerminated", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        RequestHandler_OnRenderProcessTerminated_args args = new RequestHandler_OnRenderProcessTerminated_args();
        args.setBid(bid);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void RequestHandler_GetResourceRequestHandler(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean isNavigation, boolean isDownload, java.lang.String requestInitiator, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestHandler_GetResourceRequestHandler_call method_call = new RequestHandler_GetResourceRequestHandler_call(bid, request, isNavigation, isDownload, requestInitiator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestHandler_GetResourceRequestHandler_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.RObject> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private boolean isNavigation;
      private boolean isDownload;
      private java.lang.String requestInitiator;
      public RequestHandler_GetResourceRequestHandler_call(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean isNavigation, boolean isDownload, java.lang.String requestInitiator, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
        this.request = request;
        this.isNavigation = isNavigation;
        this.isDownload = isDownload;
        this.requestInitiator = requestInitiator;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestHandler_GetResourceRequestHandler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RequestHandler_GetResourceRequestHandler_args args = new RequestHandler_GetResourceRequestHandler_args();
        args.setBid(bid);
        args.setRequest(request);
        args.setIsNavigation(isNavigation);
        args.setIsDownload(isDownload);
        args.setRequestInitiator(requestInitiator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.RObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RequestHandler_GetResourceRequestHandler();
      }
    }

    @Override
    public void ResourceRequestHandler_Dispose(int rrHandler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_Dispose_call method_call = new ResourceRequestHandler_Dispose_call(rrHandler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int rrHandler;
      public ResourceRequestHandler_Dispose_call(int rrHandler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.rrHandler = rrHandler;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        ResourceRequestHandler_Dispose_args args = new ResourceRequestHandler_Dispose_args();
        args.setRrHandler(rrHandler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void ResourceRequestHandler_GetCookieAccessFilter(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_GetCookieAccessFilter_call method_call = new ResourceRequestHandler_GetCookieAccessFilter_call(rrHandler, bid, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_GetCookieAccessFilter_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.RObject> {
      private int rrHandler;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public ResourceRequestHandler_GetCookieAccessFilter_call(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rrHandler = rrHandler;
        this.bid = bid;
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_GetCookieAccessFilter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResourceRequestHandler_GetCookieAccessFilter_args args = new ResourceRequestHandler_GetCookieAccessFilter_args();
        args.setRrHandler(rrHandler);
        args.setBid(bid);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.RObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ResourceRequestHandler_GetCookieAccessFilter();
      }
    }

    @Override
    public void CookieAccessFilter_Dispose(int filter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieAccessFilter_Dispose_call method_call = new CookieAccessFilter_Dispose_call(filter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieAccessFilter_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int filter;
      public CookieAccessFilter_Dispose_call(int filter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.filter = filter;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieAccessFilter_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        CookieAccessFilter_Dispose_args args = new CookieAccessFilter_Dispose_args();
        args.setFilter(filter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void CookieAccessFilter_CanSendCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.List<java.lang.String> cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieAccessFilter_CanSendCookie_call method_call = new CookieAccessFilter_CanSendCookie_call(filter, bid, request, cookie, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieAccessFilter_CanSendCookie_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int filter;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.util.List<java.lang.String> cookie;
      public CookieAccessFilter_CanSendCookie_call(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.List<java.lang.String> cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filter = filter;
        this.bid = bid;
        this.request = request;
        this.cookie = cookie;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieAccessFilter_CanSendCookie", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieAccessFilter_CanSendCookie_args args = new CookieAccessFilter_CanSendCookie_args();
        args.setFilter(filter);
        args.setBid(bid);
        args.setRequest(request);
        args.setCookie(cookie);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieAccessFilter_CanSendCookie();
      }
    }

    @Override
    public void CookieAccessFilter_CanSaveCookie(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.List<java.lang.String> cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieAccessFilter_CanSaveCookie_call method_call = new CookieAccessFilter_CanSaveCookie_call(filter, bid, request, response, cookie, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieAccessFilter_CanSaveCookie_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int filter;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.util.List<java.lang.String> cookie;
      public CookieAccessFilter_CanSaveCookie_call(int filter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.List<java.lang.String> cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filter = filter;
        this.bid = bid;
        this.request = request;
        this.response = response;
        this.cookie = cookie;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieAccessFilter_CanSaveCookie", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieAccessFilter_CanSaveCookie_args args = new CookieAccessFilter_CanSaveCookie_args();
        args.setFilter(filter);
        args.setBid(bid);
        args.setRequest(request);
        args.setResponse(response);
        args.setCookie(cookie);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieAccessFilter_CanSaveCookie();
      }
    }

    @Override
    public void ResourceRequestHandler_OnBeforeResourceLoad(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_OnBeforeResourceLoad_call method_call = new ResourceRequestHandler_OnBeforeResourceLoad_call(rrHandler, bid, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_OnBeforeResourceLoad_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int rrHandler;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public ResourceRequestHandler_OnBeforeResourceLoad_call(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rrHandler = rrHandler;
        this.bid = bid;
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_OnBeforeResourceLoad", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResourceRequestHandler_OnBeforeResourceLoad_args args = new ResourceRequestHandler_OnBeforeResourceLoad_args();
        args.setRrHandler(rrHandler);
        args.setBid(bid);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ResourceRequestHandler_OnBeforeResourceLoad();
      }
    }

    @Override
    public void ResourceRequestHandler_GetResourceHandler(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_GetResourceHandler_call method_call = new ResourceRequestHandler_GetResourceHandler_call(rrHandler, bid, request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_GetResourceHandler_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.RObject> {
      private int rrHandler;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public ResourceRequestHandler_GetResourceHandler_call(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rrHandler = rrHandler;
        this.bid = bid;
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_GetResourceHandler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResourceRequestHandler_GetResourceHandler_args args = new ResourceRequestHandler_GetResourceHandler_args();
        args.setRrHandler(rrHandler);
        args.setBid(bid);
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.RObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ResourceRequestHandler_GetResourceHandler();
      }
    }

    @Override
    public void ResourceHandler_Dispose(int resourceHandler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceHandler_Dispose_call method_call = new ResourceHandler_Dispose_call(resourceHandler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceHandler_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int resourceHandler;
      public ResourceHandler_Dispose_call(int resourceHandler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.resourceHandler = resourceHandler;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceHandler_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        ResourceHandler_Dispose_args args = new ResourceHandler_Dispose_args();
        args.setResourceHandler(resourceHandler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void ResourceRequestHandler_OnResourceRedirect(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String new_url, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_OnResourceRedirect_call method_call = new ResourceRequestHandler_OnResourceRedirect_call(rrHandler, bid, request, response, new_url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_OnResourceRedirect_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int rrHandler;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.lang.String new_url;
      public ResourceRequestHandler_OnResourceRedirect_call(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String new_url, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rrHandler = rrHandler;
        this.bid = bid;
        this.request = request;
        this.response = response;
        this.new_url = new_url;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_OnResourceRedirect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResourceRequestHandler_OnResourceRedirect_args args = new ResourceRequestHandler_OnResourceRedirect_args();
        args.setRrHandler(rrHandler);
        args.setBid(bid);
        args.setRequest(request);
        args.setResponse(response);
        args.setNew_url(new_url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ResourceRequestHandler_OnResourceRedirect();
      }
    }

    @Override
    public void ResourceRequestHandler_OnResourceResponse(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_OnResourceResponse_call method_call = new ResourceRequestHandler_OnResourceResponse_call(rrHandler, bid, request, response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_OnResourceResponse_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int rrHandler;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      public ResourceRequestHandler_OnResourceResponse_call(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rrHandler = rrHandler;
        this.bid = bid;
        this.request = request;
        this.response = response;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_OnResourceResponse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResourceRequestHandler_OnResourceResponse_args args = new ResourceRequestHandler_OnResourceResponse_args();
        args.setRrHandler(rrHandler);
        args.setBid(bid);
        args.setRequest(request);
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ResourceRequestHandler_OnResourceResponse();
      }
    }

    @Override
    public void ResourceRequestHandler_OnResourceLoadComplete(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String status, long receivedContentLength, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_OnResourceLoadComplete_call method_call = new ResourceRequestHandler_OnResourceLoadComplete_call(rrHandler, bid, request, response, status, receivedContentLength, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_OnResourceLoadComplete_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int rrHandler;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.lang.String status;
      private long receivedContentLength;
      public ResourceRequestHandler_OnResourceLoadComplete_call(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String status, long receivedContentLength, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rrHandler = rrHandler;
        this.bid = bid;
        this.request = request;
        this.response = response;
        this.status = status;
        this.receivedContentLength = receivedContentLength;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_OnResourceLoadComplete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResourceRequestHandler_OnResourceLoadComplete_args args = new ResourceRequestHandler_OnResourceLoadComplete_args();
        args.setRrHandler(rrHandler);
        args.setBid(bid);
        args.setRequest(request);
        args.setResponse(response);
        args.setStatus(status);
        args.setReceivedContentLength(receivedContentLength);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ResourceRequestHandler_OnResourceLoadComplete();
        return null;
      }
    }

    @Override
    public void ResourceRequestHandler_OnProtocolExecution(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean allowOsExecution, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ResourceRequestHandler_OnProtocolExecution_call method_call = new ResourceRequestHandler_OnProtocolExecution_call(rrHandler, bid, request, allowOsExecution, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ResourceRequestHandler_OnProtocolExecution_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int rrHandler;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private boolean allowOsExecution;
      public ResourceRequestHandler_OnProtocolExecution_call(int rrHandler, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject request, boolean allowOsExecution, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rrHandler = rrHandler;
        this.bid = bid;
        this.request = request;
        this.allowOsExecution = allowOsExecution;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ResourceRequestHandler_OnProtocolExecution", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ResourceRequestHandler_OnProtocolExecution_args args = new ResourceRequestHandler_OnProtocolExecution_args();
        args.setRrHandler(rrHandler);
        args.setBid(bid);
        args.setRequest(request);
        args.setAllowOsExecution(allowOsExecution);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ResourceRequestHandler_OnProtocolExecution();
      }
    }

    @Override
    public void MessageRouterHandler_onQuery(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, java.lang.String request, boolean persistent, com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouterHandler_onQuery_call method_call = new MessageRouterHandler_onQuery_call(handler, bid, queryId, request, persistent, queryCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouterHandler_onQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      private int bid;
      private long queryId;
      private java.lang.String request;
      private boolean persistent;
      private com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback;
      public MessageRouterHandler_onQuery_call(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, java.lang.String request, boolean persistent, com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.handler = handler;
        this.bid = bid;
        this.queryId = queryId;
        this.request = request;
        this.persistent = persistent;
        this.queryCallback = queryCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouterHandler_onQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouterHandler_onQuery_args args = new MessageRouterHandler_onQuery_args();
        args.setHandler(handler);
        args.setBid(bid);
        args.setQueryId(queryId);
        args.setRequest(request);
        args.setPersistent(persistent);
        args.setQueryCallback(queryCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_MessageRouterHandler_onQuery();
      }
    }

    @Override
    public void MessageRouterHandler_onQueryCanceled(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouterHandler_onQueryCanceled_call method_call = new MessageRouterHandler_onQueryCanceled_call(handler, bid, queryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouterHandler_onQueryCanceled_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      private int bid;
      private long queryId;
      public MessageRouterHandler_onQueryCanceled_call(com.jetbrains.cef.remote.thrift_codegen.RObject handler, int bid, long queryId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.handler = handler;
        this.bid = bid;
        this.queryId = queryId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouterHandler_onQueryCanceled", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        MessageRouterHandler_onQueryCanceled_args args = new MessageRouterHandler_onQueryCanceled_args();
        args.setHandler(handler);
        args.setBid(bid);
        args.setQueryId(queryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("log", new log());
      processMap.put("AppHandler_GetRegisteredCustomSchemes", new AppHandler_GetRegisteredCustomSchemes());
      processMap.put("AppHandler_OnContextInitialized", new AppHandler_OnContextInitialized());
      processMap.put("RenderHandler_GetViewRect", new RenderHandler_GetViewRect());
      processMap.put("RenderHandler_GetScreenInfo", new RenderHandler_GetScreenInfo());
      processMap.put("RenderHandler_GetScreenPoint", new RenderHandler_GetScreenPoint());
      processMap.put("RenderHandler_OnPaint", new RenderHandler_OnPaint());
      processMap.put("LifeSpanHandler_OnBeforePopup", new LifeSpanHandler_OnBeforePopup());
      processMap.put("LifeSpanHandler_OnAfterCreated", new LifeSpanHandler_OnAfterCreated());
      processMap.put("LifeSpanHandler_DoClose", new LifeSpanHandler_DoClose());
      processMap.put("LifeSpanHandler_OnBeforeClose", new LifeSpanHandler_OnBeforeClose());
      processMap.put("LoadHandler_OnLoadingStateChange", new LoadHandler_OnLoadingStateChange());
      processMap.put("LoadHandler_OnLoadStart", new LoadHandler_OnLoadStart());
      processMap.put("LoadHandler_OnLoadEnd", new LoadHandler_OnLoadEnd());
      processMap.put("LoadHandler_OnLoadError", new LoadHandler_OnLoadError());
      processMap.put("DisplayHandler_OnAddressChange", new DisplayHandler_OnAddressChange());
      processMap.put("DisplayHandler_OnTitleChange", new DisplayHandler_OnTitleChange());
      processMap.put("DisplayHandler_OnTooltip", new DisplayHandler_OnTooltip());
      processMap.put("DisplayHandler_OnStatusMessage", new DisplayHandler_OnStatusMessage());
      processMap.put("DisplayHandler_OnConsoleMessage", new DisplayHandler_OnConsoleMessage());
      processMap.put("KeyboardHandler_OnPreKeyEvent", new KeyboardHandler_OnPreKeyEvent());
      processMap.put("KeyboardHandler_OnKeyEvent", new KeyboardHandler_OnKeyEvent());
      processMap.put("FocusHandler_OnTakeFocus", new FocusHandler_OnTakeFocus());
      processMap.put("FocusHandler_OnSetFocus", new FocusHandler_OnSetFocus());
      processMap.put("FocusHandler_OnGotFocus", new FocusHandler_OnGotFocus());
      processMap.put("RequestHandler_OnBeforeBrowse", new RequestHandler_OnBeforeBrowse());
      processMap.put("RequestHandler_OnOpenURLFromTab", new RequestHandler_OnOpenURLFromTab());
      processMap.put("RequestHandler_GetAuthCredentials", new RequestHandler_GetAuthCredentials());
      processMap.put("RequestHandler_OnCertificateError", new RequestHandler_OnCertificateError());
      processMap.put("RequestHandler_OnRenderProcessTerminated", new RequestHandler_OnRenderProcessTerminated());
      processMap.put("RequestHandler_GetResourceRequestHandler", new RequestHandler_GetResourceRequestHandler());
      processMap.put("ResourceRequestHandler_Dispose", new ResourceRequestHandler_Dispose());
      processMap.put("ResourceRequestHandler_GetCookieAccessFilter", new ResourceRequestHandler_GetCookieAccessFilter());
      processMap.put("CookieAccessFilter_Dispose", new CookieAccessFilter_Dispose());
      processMap.put("CookieAccessFilter_CanSendCookie", new CookieAccessFilter_CanSendCookie());
      processMap.put("CookieAccessFilter_CanSaveCookie", new CookieAccessFilter_CanSaveCookie());
      processMap.put("ResourceRequestHandler_OnBeforeResourceLoad", new ResourceRequestHandler_OnBeforeResourceLoad());
      processMap.put("ResourceRequestHandler_GetResourceHandler", new ResourceRequestHandler_GetResourceHandler());
      processMap.put("ResourceHandler_Dispose", new ResourceHandler_Dispose());
      processMap.put("ResourceRequestHandler_OnResourceRedirect", new ResourceRequestHandler_OnResourceRedirect());
      processMap.put("ResourceRequestHandler_OnResourceResponse", new ResourceRequestHandler_OnResourceResponse());
      processMap.put("ResourceRequestHandler_OnResourceLoadComplete", new ResourceRequestHandler_OnResourceLoadComplete());
      processMap.put("ResourceRequestHandler_OnProtocolExecution", new ResourceRequestHandler_OnProtocolExecution());
      processMap.put("MessageRouterHandler_onQuery", new MessageRouterHandler_onQuery());
      processMap.put("MessageRouterHandler_onQueryCanceled", new MessageRouterHandler_onQueryCanceled());
      return processMap;
    }

    public static class connect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connect_args> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public connect_result getResult(I iface, connect_args args) throws org.apache.thrift.TException {
        connect_result result = new connect_result();
        result.success = iface.connect();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class log<I extends Iface> extends org.apache.thrift.ProcessFunction<I, log_args> {
      public log() {
        super("log");
      }

      @Override
      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, log_args args) throws org.apache.thrift.TException {
        iface.log(args.msg);
        return null;
      }
    }

    public static class AppHandler_GetRegisteredCustomSchemes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AppHandler_GetRegisteredCustomSchemes_args> {
      public AppHandler_GetRegisteredCustomSchemes() {
        super("AppHandler_GetRegisteredCustomSchemes");
      }

      @Override
      public AppHandler_GetRegisteredCustomSchemes_args getEmptyArgsInstance() {
        return new AppHandler_GetRegisteredCustomSchemes_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public AppHandler_GetRegisteredCustomSchemes_result getResult(I iface, AppHandler_GetRegisteredCustomSchemes_args args) throws org.apache.thrift.TException {
        AppHandler_GetRegisteredCustomSchemes_result result = new AppHandler_GetRegisteredCustomSchemes_result();
        result.success = iface.AppHandler_GetRegisteredCustomSchemes();
        return result;
      }
    }

    public static class AppHandler_OnContextInitialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AppHandler_OnContextInitialized_args> {
      public AppHandler_OnContextInitialized() {
        super("AppHandler_OnContextInitialized");
      }

      @Override
      public AppHandler_OnContextInitialized_args getEmptyArgsInstance() {
        return new AppHandler_OnContextInitialized_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public AppHandler_OnContextInitialized_result getResult(I iface, AppHandler_OnContextInitialized_args args) throws org.apache.thrift.TException {
        AppHandler_OnContextInitialized_result result = new AppHandler_OnContextInitialized_result();
        iface.AppHandler_OnContextInitialized();
        return result;
      }
    }

    public static class RenderHandler_GetViewRect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RenderHandler_GetViewRect_args> {
      public RenderHandler_GetViewRect() {
        super("RenderHandler_GetViewRect");
      }

      @Override
      public RenderHandler_GetViewRect_args getEmptyArgsInstance() {
        return new RenderHandler_GetViewRect_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RenderHandler_GetViewRect_result getResult(I iface, RenderHandler_GetViewRect_args args) throws org.apache.thrift.TException {
        RenderHandler_GetViewRect_result result = new RenderHandler_GetViewRect_result();
        result.success = iface.RenderHandler_GetViewRect(args.bid);
        return result;
      }
    }

    public static class RenderHandler_GetScreenInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RenderHandler_GetScreenInfo_args> {
      public RenderHandler_GetScreenInfo() {
        super("RenderHandler_GetScreenInfo");
      }

      @Override
      public RenderHandler_GetScreenInfo_args getEmptyArgsInstance() {
        return new RenderHandler_GetScreenInfo_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RenderHandler_GetScreenInfo_result getResult(I iface, RenderHandler_GetScreenInfo_args args) throws org.apache.thrift.TException {
        RenderHandler_GetScreenInfo_result result = new RenderHandler_GetScreenInfo_result();
        result.success = iface.RenderHandler_GetScreenInfo(args.bid);
        return result;
      }
    }

    public static class RenderHandler_GetScreenPoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RenderHandler_GetScreenPoint_args> {
      public RenderHandler_GetScreenPoint() {
        super("RenderHandler_GetScreenPoint");
      }

      @Override
      public RenderHandler_GetScreenPoint_args getEmptyArgsInstance() {
        return new RenderHandler_GetScreenPoint_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RenderHandler_GetScreenPoint_result getResult(I iface, RenderHandler_GetScreenPoint_args args) throws org.apache.thrift.TException {
        RenderHandler_GetScreenPoint_result result = new RenderHandler_GetScreenPoint_result();
        result.success = iface.RenderHandler_GetScreenPoint(args.bid, args.viewX, args.viewY);
        return result;
      }
    }

    public static class RenderHandler_OnPaint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RenderHandler_OnPaint_args> {
      public RenderHandler_OnPaint() {
        super("RenderHandler_OnPaint");
      }

      @Override
      public RenderHandler_OnPaint_args getEmptyArgsInstance() {
        return new RenderHandler_OnPaint_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RenderHandler_OnPaint_result getResult(I iface, RenderHandler_OnPaint_args args) throws org.apache.thrift.TException {
        RenderHandler_OnPaint_result result = new RenderHandler_OnPaint_result();
        iface.RenderHandler_OnPaint(args.bid, args.popup, args.dirtyRectsCount, args.sharedMemName, args.sharedMemHandle, args.width, args.height);
        return result;
      }
    }

    public static class LifeSpanHandler_OnBeforePopup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LifeSpanHandler_OnBeforePopup_args> {
      public LifeSpanHandler_OnBeforePopup() {
        super("LifeSpanHandler_OnBeforePopup");
      }

      @Override
      public LifeSpanHandler_OnBeforePopup_args getEmptyArgsInstance() {
        return new LifeSpanHandler_OnBeforePopup_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public LifeSpanHandler_OnBeforePopup_result getResult(I iface, LifeSpanHandler_OnBeforePopup_args args) throws org.apache.thrift.TException {
        LifeSpanHandler_OnBeforePopup_result result = new LifeSpanHandler_OnBeforePopup_result();
        result.success = iface.LifeSpanHandler_OnBeforePopup(args.bid, args.url, args.frameName, args.gesture);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class LifeSpanHandler_OnAfterCreated<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LifeSpanHandler_OnAfterCreated_args> {
      public LifeSpanHandler_OnAfterCreated() {
        super("LifeSpanHandler_OnAfterCreated");
      }

      @Override
      public LifeSpanHandler_OnAfterCreated_args getEmptyArgsInstance() {
        return new LifeSpanHandler_OnAfterCreated_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, LifeSpanHandler_OnAfterCreated_args args) throws org.apache.thrift.TException {
        iface.LifeSpanHandler_OnAfterCreated(args.bid);
        return null;
      }
    }

    public static class LifeSpanHandler_DoClose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LifeSpanHandler_DoClose_args> {
      public LifeSpanHandler_DoClose() {
        super("LifeSpanHandler_DoClose");
      }

      @Override
      public LifeSpanHandler_DoClose_args getEmptyArgsInstance() {
        return new LifeSpanHandler_DoClose_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public LifeSpanHandler_DoClose_result getResult(I iface, LifeSpanHandler_DoClose_args args) throws org.apache.thrift.TException {
        LifeSpanHandler_DoClose_result result = new LifeSpanHandler_DoClose_result();
        result.success = iface.LifeSpanHandler_DoClose(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class LifeSpanHandler_OnBeforeClose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LifeSpanHandler_OnBeforeClose_args> {
      public LifeSpanHandler_OnBeforeClose() {
        super("LifeSpanHandler_OnBeforeClose");
      }

      @Override
      public LifeSpanHandler_OnBeforeClose_args getEmptyArgsInstance() {
        return new LifeSpanHandler_OnBeforeClose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, LifeSpanHandler_OnBeforeClose_args args) throws org.apache.thrift.TException {
        iface.LifeSpanHandler_OnBeforeClose(args.bid);
        return null;
      }
    }

    public static class LoadHandler_OnLoadingStateChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LoadHandler_OnLoadingStateChange_args> {
      public LoadHandler_OnLoadingStateChange() {
        super("LoadHandler_OnLoadingStateChange");
      }

      @Override
      public LoadHandler_OnLoadingStateChange_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadingStateChange_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, LoadHandler_OnLoadingStateChange_args args) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadingStateChange(args.bid, args.isLoading, args.canGoBack, args.canGoForward);
        return null;
      }
    }

    public static class LoadHandler_OnLoadStart<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LoadHandler_OnLoadStart_args> {
      public LoadHandler_OnLoadStart() {
        super("LoadHandler_OnLoadStart");
      }

      @Override
      public LoadHandler_OnLoadStart_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadStart_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, LoadHandler_OnLoadStart_args args) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadStart(args.bid, args.transition_type);
        return null;
      }
    }

    public static class LoadHandler_OnLoadEnd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LoadHandler_OnLoadEnd_args> {
      public LoadHandler_OnLoadEnd() {
        super("LoadHandler_OnLoadEnd");
      }

      @Override
      public LoadHandler_OnLoadEnd_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadEnd_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, LoadHandler_OnLoadEnd_args args) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadEnd(args.bid, args.httpStatusCode);
        return null;
      }
    }

    public static class LoadHandler_OnLoadError<I extends Iface> extends org.apache.thrift.ProcessFunction<I, LoadHandler_OnLoadError_args> {
      public LoadHandler_OnLoadError() {
        super("LoadHandler_OnLoadError");
      }

      @Override
      public LoadHandler_OnLoadError_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadError_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, LoadHandler_OnLoadError_args args) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadError(args.bid, args.errorCode, args.errorText, args.failedUrl);
        return null;
      }
    }

    public static class DisplayHandler_OnAddressChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DisplayHandler_OnAddressChange_args> {
      public DisplayHandler_OnAddressChange() {
        super("DisplayHandler_OnAddressChange");
      }

      @Override
      public DisplayHandler_OnAddressChange_args getEmptyArgsInstance() {
        return new DisplayHandler_OnAddressChange_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, DisplayHandler_OnAddressChange_args args) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnAddressChange(args.bid, args.url);
        return null;
      }
    }

    public static class DisplayHandler_OnTitleChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DisplayHandler_OnTitleChange_args> {
      public DisplayHandler_OnTitleChange() {
        super("DisplayHandler_OnTitleChange");
      }

      @Override
      public DisplayHandler_OnTitleChange_args getEmptyArgsInstance() {
        return new DisplayHandler_OnTitleChange_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, DisplayHandler_OnTitleChange_args args) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnTitleChange(args.bid, args.title);
        return null;
      }
    }

    public static class DisplayHandler_OnTooltip<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DisplayHandler_OnTooltip_args> {
      public DisplayHandler_OnTooltip() {
        super("DisplayHandler_OnTooltip");
      }

      @Override
      public DisplayHandler_OnTooltip_args getEmptyArgsInstance() {
        return new DisplayHandler_OnTooltip_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public DisplayHandler_OnTooltip_result getResult(I iface, DisplayHandler_OnTooltip_args args) throws org.apache.thrift.TException {
        DisplayHandler_OnTooltip_result result = new DisplayHandler_OnTooltip_result();
        result.success = iface.DisplayHandler_OnTooltip(args.bid, args.text);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DisplayHandler_OnStatusMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DisplayHandler_OnStatusMessage_args> {
      public DisplayHandler_OnStatusMessage() {
        super("DisplayHandler_OnStatusMessage");
      }

      @Override
      public DisplayHandler_OnStatusMessage_args getEmptyArgsInstance() {
        return new DisplayHandler_OnStatusMessage_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, DisplayHandler_OnStatusMessage_args args) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnStatusMessage(args.bid, args.value);
        return null;
      }
    }

    public static class DisplayHandler_OnConsoleMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DisplayHandler_OnConsoleMessage_args> {
      public DisplayHandler_OnConsoleMessage() {
        super("DisplayHandler_OnConsoleMessage");
      }

      @Override
      public DisplayHandler_OnConsoleMessage_args getEmptyArgsInstance() {
        return new DisplayHandler_OnConsoleMessage_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public DisplayHandler_OnConsoleMessage_result getResult(I iface, DisplayHandler_OnConsoleMessage_args args) throws org.apache.thrift.TException {
        DisplayHandler_OnConsoleMessage_result result = new DisplayHandler_OnConsoleMessage_result();
        result.success = iface.DisplayHandler_OnConsoleMessage(args.bid, args.level, args.message, args.source, args.line);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class KeyboardHandler_OnPreKeyEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, KeyboardHandler_OnPreKeyEvent_args> {
      public KeyboardHandler_OnPreKeyEvent() {
        super("KeyboardHandler_OnPreKeyEvent");
      }

      @Override
      public KeyboardHandler_OnPreKeyEvent_args getEmptyArgsInstance() {
        return new KeyboardHandler_OnPreKeyEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public KeyboardHandler_OnPreKeyEvent_result getResult(I iface, KeyboardHandler_OnPreKeyEvent_args args) throws org.apache.thrift.TException {
        KeyboardHandler_OnPreKeyEvent_result result = new KeyboardHandler_OnPreKeyEvent_result();
        result.success = iface.KeyboardHandler_OnPreKeyEvent(args.bid, args.event);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class KeyboardHandler_OnKeyEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, KeyboardHandler_OnKeyEvent_args> {
      public KeyboardHandler_OnKeyEvent() {
        super("KeyboardHandler_OnKeyEvent");
      }

      @Override
      public KeyboardHandler_OnKeyEvent_args getEmptyArgsInstance() {
        return new KeyboardHandler_OnKeyEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public KeyboardHandler_OnKeyEvent_result getResult(I iface, KeyboardHandler_OnKeyEvent_args args) throws org.apache.thrift.TException {
        KeyboardHandler_OnKeyEvent_result result = new KeyboardHandler_OnKeyEvent_result();
        result.success = iface.KeyboardHandler_OnKeyEvent(args.bid, args.event);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class FocusHandler_OnTakeFocus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FocusHandler_OnTakeFocus_args> {
      public FocusHandler_OnTakeFocus() {
        super("FocusHandler_OnTakeFocus");
      }

      @Override
      public FocusHandler_OnTakeFocus_args getEmptyArgsInstance() {
        return new FocusHandler_OnTakeFocus_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, FocusHandler_OnTakeFocus_args args) throws org.apache.thrift.TException {
        iface.FocusHandler_OnTakeFocus(args.bid, args.next);
        return null;
      }
    }

    public static class FocusHandler_OnSetFocus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FocusHandler_OnSetFocus_args> {
      public FocusHandler_OnSetFocus() {
        super("FocusHandler_OnSetFocus");
      }

      @Override
      public FocusHandler_OnSetFocus_args getEmptyArgsInstance() {
        return new FocusHandler_OnSetFocus_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public FocusHandler_OnSetFocus_result getResult(I iface, FocusHandler_OnSetFocus_args args) throws org.apache.thrift.TException {
        FocusHandler_OnSetFocus_result result = new FocusHandler_OnSetFocus_result();
        result.success = iface.FocusHandler_OnSetFocus(args.bid, args.source);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class FocusHandler_OnGotFocus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FocusHandler_OnGotFocus_args> {
      public FocusHandler_OnGotFocus() {
        super("FocusHandler_OnGotFocus");
      }

      @Override
      public FocusHandler_OnGotFocus_args getEmptyArgsInstance() {
        return new FocusHandler_OnGotFocus_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, FocusHandler_OnGotFocus_args args) throws org.apache.thrift.TException {
        iface.FocusHandler_OnGotFocus(args.bid);
        return null;
      }
    }

    public static class RequestHandler_OnBeforeBrowse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestHandler_OnBeforeBrowse_args> {
      public RequestHandler_OnBeforeBrowse() {
        super("RequestHandler_OnBeforeBrowse");
      }

      @Override
      public RequestHandler_OnBeforeBrowse_args getEmptyArgsInstance() {
        return new RequestHandler_OnBeforeBrowse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RequestHandler_OnBeforeBrowse_result getResult(I iface, RequestHandler_OnBeforeBrowse_args args) throws org.apache.thrift.TException {
        RequestHandler_OnBeforeBrowse_result result = new RequestHandler_OnBeforeBrowse_result();
        result.success = iface.RequestHandler_OnBeforeBrowse(args.bid, args.request, args.user_gesture, args.is_redirect);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class RequestHandler_OnOpenURLFromTab<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestHandler_OnOpenURLFromTab_args> {
      public RequestHandler_OnOpenURLFromTab() {
        super("RequestHandler_OnOpenURLFromTab");
      }

      @Override
      public RequestHandler_OnOpenURLFromTab_args getEmptyArgsInstance() {
        return new RequestHandler_OnOpenURLFromTab_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RequestHandler_OnOpenURLFromTab_result getResult(I iface, RequestHandler_OnOpenURLFromTab_args args) throws org.apache.thrift.TException {
        RequestHandler_OnOpenURLFromTab_result result = new RequestHandler_OnOpenURLFromTab_result();
        result.success = iface.RequestHandler_OnOpenURLFromTab(args.bid, args.target_url, args.user_gesture);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class RequestHandler_GetAuthCredentials<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestHandler_GetAuthCredentials_args> {
      public RequestHandler_GetAuthCredentials() {
        super("RequestHandler_GetAuthCredentials");
      }

      @Override
      public RequestHandler_GetAuthCredentials_args getEmptyArgsInstance() {
        return new RequestHandler_GetAuthCredentials_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RequestHandler_GetAuthCredentials_result getResult(I iface, RequestHandler_GetAuthCredentials_args args) throws org.apache.thrift.TException {
        RequestHandler_GetAuthCredentials_result result = new RequestHandler_GetAuthCredentials_result();
        result.success = iface.RequestHandler_GetAuthCredentials(args.bid, args.origin_url, args.isProxy, args.host, args.port, args.realm, args.scheme, args.authCallback);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class RequestHandler_OnCertificateError<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestHandler_OnCertificateError_args> {
      public RequestHandler_OnCertificateError() {
        super("RequestHandler_OnCertificateError");
      }

      @Override
      public RequestHandler_OnCertificateError_args getEmptyArgsInstance() {
        return new RequestHandler_OnCertificateError_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RequestHandler_OnCertificateError_result getResult(I iface, RequestHandler_OnCertificateError_args args) throws org.apache.thrift.TException {
        RequestHandler_OnCertificateError_result result = new RequestHandler_OnCertificateError_result();
        result.success = iface.RequestHandler_OnCertificateError(args.bid, args.cert_error, args.request_url, args.sslInfo, args.callback);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class RequestHandler_OnRenderProcessTerminated<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestHandler_OnRenderProcessTerminated_args> {
      public RequestHandler_OnRenderProcessTerminated() {
        super("RequestHandler_OnRenderProcessTerminated");
      }

      @Override
      public RequestHandler_OnRenderProcessTerminated_args getEmptyArgsInstance() {
        return new RequestHandler_OnRenderProcessTerminated_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, RequestHandler_OnRenderProcessTerminated_args args) throws org.apache.thrift.TException {
        iface.RequestHandler_OnRenderProcessTerminated(args.bid, args.status);
        return null;
      }
    }

    public static class RequestHandler_GetResourceRequestHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestHandler_GetResourceRequestHandler_args> {
      public RequestHandler_GetResourceRequestHandler() {
        super("RequestHandler_GetResourceRequestHandler");
      }

      @Override
      public RequestHandler_GetResourceRequestHandler_args getEmptyArgsInstance() {
        return new RequestHandler_GetResourceRequestHandler_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public RequestHandler_GetResourceRequestHandler_result getResult(I iface, RequestHandler_GetResourceRequestHandler_args args) throws org.apache.thrift.TException {
        RequestHandler_GetResourceRequestHandler_result result = new RequestHandler_GetResourceRequestHandler_result();
        result.success = iface.RequestHandler_GetResourceRequestHandler(args.bid, args.request, args.isNavigation, args.isDownload, args.requestInitiator);
        return result;
      }
    }

    public static class ResourceRequestHandler_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_Dispose_args> {
      public ResourceRequestHandler_Dispose() {
        super("ResourceRequestHandler_Dispose");
      }

      @Override
      public ResourceRequestHandler_Dispose_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, ResourceRequestHandler_Dispose_args args) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_Dispose(args.rrHandler);
        return null;
      }
    }

    public static class ResourceRequestHandler_GetCookieAccessFilter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_GetCookieAccessFilter_args> {
      public ResourceRequestHandler_GetCookieAccessFilter() {
        super("ResourceRequestHandler_GetCookieAccessFilter");
      }

      @Override
      public ResourceRequestHandler_GetCookieAccessFilter_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_GetCookieAccessFilter_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ResourceRequestHandler_GetCookieAccessFilter_result getResult(I iface, ResourceRequestHandler_GetCookieAccessFilter_args args) throws org.apache.thrift.TException {
        ResourceRequestHandler_GetCookieAccessFilter_result result = new ResourceRequestHandler_GetCookieAccessFilter_result();
        result.success = iface.ResourceRequestHandler_GetCookieAccessFilter(args.rrHandler, args.bid, args.request);
        return result;
      }
    }

    public static class CookieAccessFilter_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieAccessFilter_Dispose_args> {
      public CookieAccessFilter_Dispose() {
        super("CookieAccessFilter_Dispose");
      }

      @Override
      public CookieAccessFilter_Dispose_args getEmptyArgsInstance() {
        return new CookieAccessFilter_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, CookieAccessFilter_Dispose_args args) throws org.apache.thrift.TException {
        iface.CookieAccessFilter_Dispose(args.filter);
        return null;
      }
    }

    public static class CookieAccessFilter_CanSendCookie<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieAccessFilter_CanSendCookie_args> {
      public CookieAccessFilter_CanSendCookie() {
        super("CookieAccessFilter_CanSendCookie");
      }

      @Override
      public CookieAccessFilter_CanSendCookie_args getEmptyArgsInstance() {
        return new CookieAccessFilter_CanSendCookie_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieAccessFilter_CanSendCookie_result getResult(I iface, CookieAccessFilter_CanSendCookie_args args) throws org.apache.thrift.TException {
        CookieAccessFilter_CanSendCookie_result result = new CookieAccessFilter_CanSendCookie_result();
        result.success = iface.CookieAccessFilter_CanSendCookie(args.filter, args.bid, args.request, args.cookie);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class CookieAccessFilter_CanSaveCookie<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieAccessFilter_CanSaveCookie_args> {
      public CookieAccessFilter_CanSaveCookie() {
        super("CookieAccessFilter_CanSaveCookie");
      }

      @Override
      public CookieAccessFilter_CanSaveCookie_args getEmptyArgsInstance() {
        return new CookieAccessFilter_CanSaveCookie_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieAccessFilter_CanSaveCookie_result getResult(I iface, CookieAccessFilter_CanSaveCookie_args args) throws org.apache.thrift.TException {
        CookieAccessFilter_CanSaveCookie_result result = new CookieAccessFilter_CanSaveCookie_result();
        result.success = iface.CookieAccessFilter_CanSaveCookie(args.filter, args.bid, args.request, args.response, args.cookie);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ResourceRequestHandler_OnBeforeResourceLoad<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_OnBeforeResourceLoad_args> {
      public ResourceRequestHandler_OnBeforeResourceLoad() {
        super("ResourceRequestHandler_OnBeforeResourceLoad");
      }

      @Override
      public ResourceRequestHandler_OnBeforeResourceLoad_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnBeforeResourceLoad_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ResourceRequestHandler_OnBeforeResourceLoad_result getResult(I iface, ResourceRequestHandler_OnBeforeResourceLoad_args args) throws org.apache.thrift.TException {
        ResourceRequestHandler_OnBeforeResourceLoad_result result = new ResourceRequestHandler_OnBeforeResourceLoad_result();
        result.success = iface.ResourceRequestHandler_OnBeforeResourceLoad(args.rrHandler, args.bid, args.request);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ResourceRequestHandler_GetResourceHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_GetResourceHandler_args> {
      public ResourceRequestHandler_GetResourceHandler() {
        super("ResourceRequestHandler_GetResourceHandler");
      }

      @Override
      public ResourceRequestHandler_GetResourceHandler_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_GetResourceHandler_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ResourceRequestHandler_GetResourceHandler_result getResult(I iface, ResourceRequestHandler_GetResourceHandler_args args) throws org.apache.thrift.TException {
        ResourceRequestHandler_GetResourceHandler_result result = new ResourceRequestHandler_GetResourceHandler_result();
        result.success = iface.ResourceRequestHandler_GetResourceHandler(args.rrHandler, args.bid, args.request);
        return result;
      }
    }

    public static class ResourceHandler_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceHandler_Dispose_args> {
      public ResourceHandler_Dispose() {
        super("ResourceHandler_Dispose");
      }

      @Override
      public ResourceHandler_Dispose_args getEmptyArgsInstance() {
        return new ResourceHandler_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, ResourceHandler_Dispose_args args) throws org.apache.thrift.TException {
        iface.ResourceHandler_Dispose(args.resourceHandler);
        return null;
      }
    }

    public static class ResourceRequestHandler_OnResourceRedirect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_OnResourceRedirect_args> {
      public ResourceRequestHandler_OnResourceRedirect() {
        super("ResourceRequestHandler_OnResourceRedirect");
      }

      @Override
      public ResourceRequestHandler_OnResourceRedirect_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnResourceRedirect_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ResourceRequestHandler_OnResourceRedirect_result getResult(I iface, ResourceRequestHandler_OnResourceRedirect_args args) throws org.apache.thrift.TException {
        ResourceRequestHandler_OnResourceRedirect_result result = new ResourceRequestHandler_OnResourceRedirect_result();
        result.success = iface.ResourceRequestHandler_OnResourceRedirect(args.rrHandler, args.bid, args.request, args.response, args.new_url);
        return result;
      }
    }

    public static class ResourceRequestHandler_OnResourceResponse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_OnResourceResponse_args> {
      public ResourceRequestHandler_OnResourceResponse() {
        super("ResourceRequestHandler_OnResourceResponse");
      }

      @Override
      public ResourceRequestHandler_OnResourceResponse_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnResourceResponse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ResourceRequestHandler_OnResourceResponse_result getResult(I iface, ResourceRequestHandler_OnResourceResponse_args args) throws org.apache.thrift.TException {
        ResourceRequestHandler_OnResourceResponse_result result = new ResourceRequestHandler_OnResourceResponse_result();
        result.success = iface.ResourceRequestHandler_OnResourceResponse(args.rrHandler, args.bid, args.request, args.response);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ResourceRequestHandler_OnResourceLoadComplete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_OnResourceLoadComplete_args> {
      public ResourceRequestHandler_OnResourceLoadComplete() {
        super("ResourceRequestHandler_OnResourceLoadComplete");
      }

      @Override
      public ResourceRequestHandler_OnResourceLoadComplete_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnResourceLoadComplete_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ResourceRequestHandler_OnResourceLoadComplete_result getResult(I iface, ResourceRequestHandler_OnResourceLoadComplete_args args) throws org.apache.thrift.TException {
        ResourceRequestHandler_OnResourceLoadComplete_result result = new ResourceRequestHandler_OnResourceLoadComplete_result();
        iface.ResourceRequestHandler_OnResourceLoadComplete(args.rrHandler, args.bid, args.request, args.response, args.status, args.receivedContentLength);
        return result;
      }
    }

    public static class ResourceRequestHandler_OnProtocolExecution<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResourceRequestHandler_OnProtocolExecution_args> {
      public ResourceRequestHandler_OnProtocolExecution() {
        super("ResourceRequestHandler_OnProtocolExecution");
      }

      @Override
      public ResourceRequestHandler_OnProtocolExecution_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnProtocolExecution_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public ResourceRequestHandler_OnProtocolExecution_result getResult(I iface, ResourceRequestHandler_OnProtocolExecution_args args) throws org.apache.thrift.TException {
        ResourceRequestHandler_OnProtocolExecution_result result = new ResourceRequestHandler_OnProtocolExecution_result();
        result.success = iface.ResourceRequestHandler_OnProtocolExecution(args.rrHandler, args.bid, args.request, args.allowOsExecution);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class MessageRouterHandler_onQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouterHandler_onQuery_args> {
      public MessageRouterHandler_onQuery() {
        super("MessageRouterHandler_onQuery");
      }

      @Override
      public MessageRouterHandler_onQuery_args getEmptyArgsInstance() {
        return new MessageRouterHandler_onQuery_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouterHandler_onQuery_result getResult(I iface, MessageRouterHandler_onQuery_args args) throws org.apache.thrift.TException {
        MessageRouterHandler_onQuery_result result = new MessageRouterHandler_onQuery_result();
        result.success = iface.MessageRouterHandler_onQuery(args.handler, args.bid, args.queryId, args.request, args.persistent, args.queryCallback);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class MessageRouterHandler_onQueryCanceled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouterHandler_onQueryCanceled_args> {
      public MessageRouterHandler_onQueryCanceled() {
        super("MessageRouterHandler_onQueryCanceled");
      }

      @Override
      public MessageRouterHandler_onQueryCanceled_args getEmptyArgsInstance() {
        return new MessageRouterHandler_onQueryCanceled_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, MessageRouterHandler_onQueryCanceled_args args) throws org.apache.thrift.TException {
        iface.MessageRouterHandler_onQueryCanceled(args.handler, args.bid, args.queryId);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("log", new log());
      processMap.put("AppHandler_GetRegisteredCustomSchemes", new AppHandler_GetRegisteredCustomSchemes());
      processMap.put("AppHandler_OnContextInitialized", new AppHandler_OnContextInitialized());
      processMap.put("RenderHandler_GetViewRect", new RenderHandler_GetViewRect());
      processMap.put("RenderHandler_GetScreenInfo", new RenderHandler_GetScreenInfo());
      processMap.put("RenderHandler_GetScreenPoint", new RenderHandler_GetScreenPoint());
      processMap.put("RenderHandler_OnPaint", new RenderHandler_OnPaint());
      processMap.put("LifeSpanHandler_OnBeforePopup", new LifeSpanHandler_OnBeforePopup());
      processMap.put("LifeSpanHandler_OnAfterCreated", new LifeSpanHandler_OnAfterCreated());
      processMap.put("LifeSpanHandler_DoClose", new LifeSpanHandler_DoClose());
      processMap.put("LifeSpanHandler_OnBeforeClose", new LifeSpanHandler_OnBeforeClose());
      processMap.put("LoadHandler_OnLoadingStateChange", new LoadHandler_OnLoadingStateChange());
      processMap.put("LoadHandler_OnLoadStart", new LoadHandler_OnLoadStart());
      processMap.put("LoadHandler_OnLoadEnd", new LoadHandler_OnLoadEnd());
      processMap.put("LoadHandler_OnLoadError", new LoadHandler_OnLoadError());
      processMap.put("DisplayHandler_OnAddressChange", new DisplayHandler_OnAddressChange());
      processMap.put("DisplayHandler_OnTitleChange", new DisplayHandler_OnTitleChange());
      processMap.put("DisplayHandler_OnTooltip", new DisplayHandler_OnTooltip());
      processMap.put("DisplayHandler_OnStatusMessage", new DisplayHandler_OnStatusMessage());
      processMap.put("DisplayHandler_OnConsoleMessage", new DisplayHandler_OnConsoleMessage());
      processMap.put("KeyboardHandler_OnPreKeyEvent", new KeyboardHandler_OnPreKeyEvent());
      processMap.put("KeyboardHandler_OnKeyEvent", new KeyboardHandler_OnKeyEvent());
      processMap.put("FocusHandler_OnTakeFocus", new FocusHandler_OnTakeFocus());
      processMap.put("FocusHandler_OnSetFocus", new FocusHandler_OnSetFocus());
      processMap.put("FocusHandler_OnGotFocus", new FocusHandler_OnGotFocus());
      processMap.put("RequestHandler_OnBeforeBrowse", new RequestHandler_OnBeforeBrowse());
      processMap.put("RequestHandler_OnOpenURLFromTab", new RequestHandler_OnOpenURLFromTab());
      processMap.put("RequestHandler_GetAuthCredentials", new RequestHandler_GetAuthCredentials());
      processMap.put("RequestHandler_OnCertificateError", new RequestHandler_OnCertificateError());
      processMap.put("RequestHandler_OnRenderProcessTerminated", new RequestHandler_OnRenderProcessTerminated());
      processMap.put("RequestHandler_GetResourceRequestHandler", new RequestHandler_GetResourceRequestHandler());
      processMap.put("ResourceRequestHandler_Dispose", new ResourceRequestHandler_Dispose());
      processMap.put("ResourceRequestHandler_GetCookieAccessFilter", new ResourceRequestHandler_GetCookieAccessFilter());
      processMap.put("CookieAccessFilter_Dispose", new CookieAccessFilter_Dispose());
      processMap.put("CookieAccessFilter_CanSendCookie", new CookieAccessFilter_CanSendCookie());
      processMap.put("CookieAccessFilter_CanSaveCookie", new CookieAccessFilter_CanSaveCookie());
      processMap.put("ResourceRequestHandler_OnBeforeResourceLoad", new ResourceRequestHandler_OnBeforeResourceLoad());
      processMap.put("ResourceRequestHandler_GetResourceHandler", new ResourceRequestHandler_GetResourceHandler());
      processMap.put("ResourceHandler_Dispose", new ResourceHandler_Dispose());
      processMap.put("ResourceRequestHandler_OnResourceRedirect", new ResourceRequestHandler_OnResourceRedirect());
      processMap.put("ResourceRequestHandler_OnResourceResponse", new ResourceRequestHandler_OnResourceResponse());
      processMap.put("ResourceRequestHandler_OnResourceLoadComplete", new ResourceRequestHandler_OnResourceLoadComplete());
      processMap.put("ResourceRequestHandler_OnProtocolExecution", new ResourceRequestHandler_OnProtocolExecution());
      processMap.put("MessageRouterHandler_onQuery", new MessageRouterHandler_onQuery());
      processMap.put("MessageRouterHandler_onQueryCanceled", new MessageRouterHandler_onQueryCanceled());
      return processMap;
    }

    public static class connect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connect_args, java.lang.Integer> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            connect_result result = new connect_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            connect_result result = new connect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, connect_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.connect(resultHandler);
      }
    }

    public static class log<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, log_args, Void> {
      public log() {
        super("log");
      }

      @Override
      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, log_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.log(args.msg,resultHandler);
      }
    }

    public static class AppHandler_GetRegisteredCustomSchemes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AppHandler_GetRegisteredCustomSchemes_args, java.util.List<CustomScheme>> {
      public AppHandler_GetRegisteredCustomSchemes() {
        super("AppHandler_GetRegisteredCustomSchemes");
      }

      @Override
      public AppHandler_GetRegisteredCustomSchemes_args getEmptyArgsInstance() {
        return new AppHandler_GetRegisteredCustomSchemes_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CustomScheme>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CustomScheme>>() { 
          @Override
          public void onComplete(java.util.List<CustomScheme> o) {
            AppHandler_GetRegisteredCustomSchemes_result result = new AppHandler_GetRegisteredCustomSchemes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AppHandler_GetRegisteredCustomSchemes_result result = new AppHandler_GetRegisteredCustomSchemes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, AppHandler_GetRegisteredCustomSchemes_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CustomScheme>> resultHandler) throws org.apache.thrift.TException {
        iface.AppHandler_GetRegisteredCustomSchemes(resultHandler);
      }
    }

    public static class AppHandler_OnContextInitialized<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AppHandler_OnContextInitialized_args, Void> {
      public AppHandler_OnContextInitialized() {
        super("AppHandler_OnContextInitialized");
      }

      @Override
      public AppHandler_OnContextInitialized_args getEmptyArgsInstance() {
        return new AppHandler_OnContextInitialized_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            AppHandler_OnContextInitialized_result result = new AppHandler_OnContextInitialized_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AppHandler_OnContextInitialized_result result = new AppHandler_OnContextInitialized_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, AppHandler_OnContextInitialized_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.AppHandler_OnContextInitialized(resultHandler);
      }
    }

    public static class RenderHandler_GetViewRect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RenderHandler_GetViewRect_args, Rect> {
      public RenderHandler_GetViewRect() {
        super("RenderHandler_GetViewRect");
      }

      @Override
      public RenderHandler_GetViewRect_args getEmptyArgsInstance() {
        return new RenderHandler_GetViewRect_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Rect> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Rect>() { 
          @Override
          public void onComplete(Rect o) {
            RenderHandler_GetViewRect_result result = new RenderHandler_GetViewRect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RenderHandler_GetViewRect_result result = new RenderHandler_GetViewRect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RenderHandler_GetViewRect_args args, org.apache.thrift.async.AsyncMethodCallback<Rect> resultHandler) throws org.apache.thrift.TException {
        iface.RenderHandler_GetViewRect(args.bid,resultHandler);
      }
    }

    public static class RenderHandler_GetScreenInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RenderHandler_GetScreenInfo_args, ScreenInfo> {
      public RenderHandler_GetScreenInfo() {
        super("RenderHandler_GetScreenInfo");
      }

      @Override
      public RenderHandler_GetScreenInfo_args getEmptyArgsInstance() {
        return new RenderHandler_GetScreenInfo_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<ScreenInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ScreenInfo>() { 
          @Override
          public void onComplete(ScreenInfo o) {
            RenderHandler_GetScreenInfo_result result = new RenderHandler_GetScreenInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RenderHandler_GetScreenInfo_result result = new RenderHandler_GetScreenInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RenderHandler_GetScreenInfo_args args, org.apache.thrift.async.AsyncMethodCallback<ScreenInfo> resultHandler) throws org.apache.thrift.TException {
        iface.RenderHandler_GetScreenInfo(args.bid,resultHandler);
      }
    }

    public static class RenderHandler_GetScreenPoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RenderHandler_GetScreenPoint_args, Point> {
      public RenderHandler_GetScreenPoint() {
        super("RenderHandler_GetScreenPoint");
      }

      @Override
      public RenderHandler_GetScreenPoint_args getEmptyArgsInstance() {
        return new RenderHandler_GetScreenPoint_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Point> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Point>() { 
          @Override
          public void onComplete(Point o) {
            RenderHandler_GetScreenPoint_result result = new RenderHandler_GetScreenPoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RenderHandler_GetScreenPoint_result result = new RenderHandler_GetScreenPoint_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RenderHandler_GetScreenPoint_args args, org.apache.thrift.async.AsyncMethodCallback<Point> resultHandler) throws org.apache.thrift.TException {
        iface.RenderHandler_GetScreenPoint(args.bid, args.viewX, args.viewY,resultHandler);
      }
    }

    public static class RenderHandler_OnPaint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RenderHandler_OnPaint_args, Void> {
      public RenderHandler_OnPaint() {
        super("RenderHandler_OnPaint");
      }

      @Override
      public RenderHandler_OnPaint_args getEmptyArgsInstance() {
        return new RenderHandler_OnPaint_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            RenderHandler_OnPaint_result result = new RenderHandler_OnPaint_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RenderHandler_OnPaint_result result = new RenderHandler_OnPaint_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RenderHandler_OnPaint_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.RenderHandler_OnPaint(args.bid, args.popup, args.dirtyRectsCount, args.sharedMemName, args.sharedMemHandle, args.width, args.height,resultHandler);
      }
    }

    public static class LifeSpanHandler_OnBeforePopup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LifeSpanHandler_OnBeforePopup_args, java.lang.Boolean> {
      public LifeSpanHandler_OnBeforePopup() {
        super("LifeSpanHandler_OnBeforePopup");
      }

      @Override
      public LifeSpanHandler_OnBeforePopup_args getEmptyArgsInstance() {
        return new LifeSpanHandler_OnBeforePopup_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            LifeSpanHandler_OnBeforePopup_result result = new LifeSpanHandler_OnBeforePopup_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            LifeSpanHandler_OnBeforePopup_result result = new LifeSpanHandler_OnBeforePopup_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, LifeSpanHandler_OnBeforePopup_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.LifeSpanHandler_OnBeforePopup(args.bid, args.url, args.frameName, args.gesture,resultHandler);
      }
    }

    public static class LifeSpanHandler_OnAfterCreated<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LifeSpanHandler_OnAfterCreated_args, Void> {
      public LifeSpanHandler_OnAfterCreated() {
        super("LifeSpanHandler_OnAfterCreated");
      }

      @Override
      public LifeSpanHandler_OnAfterCreated_args getEmptyArgsInstance() {
        return new LifeSpanHandler_OnAfterCreated_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, LifeSpanHandler_OnAfterCreated_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.LifeSpanHandler_OnAfterCreated(args.bid,resultHandler);
      }
    }

    public static class LifeSpanHandler_DoClose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LifeSpanHandler_DoClose_args, java.lang.Boolean> {
      public LifeSpanHandler_DoClose() {
        super("LifeSpanHandler_DoClose");
      }

      @Override
      public LifeSpanHandler_DoClose_args getEmptyArgsInstance() {
        return new LifeSpanHandler_DoClose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            LifeSpanHandler_DoClose_result result = new LifeSpanHandler_DoClose_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            LifeSpanHandler_DoClose_result result = new LifeSpanHandler_DoClose_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, LifeSpanHandler_DoClose_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.LifeSpanHandler_DoClose(args.bid,resultHandler);
      }
    }

    public static class LifeSpanHandler_OnBeforeClose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LifeSpanHandler_OnBeforeClose_args, Void> {
      public LifeSpanHandler_OnBeforeClose() {
        super("LifeSpanHandler_OnBeforeClose");
      }

      @Override
      public LifeSpanHandler_OnBeforeClose_args getEmptyArgsInstance() {
        return new LifeSpanHandler_OnBeforeClose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, LifeSpanHandler_OnBeforeClose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.LifeSpanHandler_OnBeforeClose(args.bid,resultHandler);
      }
    }

    public static class LoadHandler_OnLoadingStateChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LoadHandler_OnLoadingStateChange_args, Void> {
      public LoadHandler_OnLoadingStateChange() {
        super("LoadHandler_OnLoadingStateChange");
      }

      @Override
      public LoadHandler_OnLoadingStateChange_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadingStateChange_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, LoadHandler_OnLoadingStateChange_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadingStateChange(args.bid, args.isLoading, args.canGoBack, args.canGoForward,resultHandler);
      }
    }

    public static class LoadHandler_OnLoadStart<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LoadHandler_OnLoadStart_args, Void> {
      public LoadHandler_OnLoadStart() {
        super("LoadHandler_OnLoadStart");
      }

      @Override
      public LoadHandler_OnLoadStart_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadStart_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, LoadHandler_OnLoadStart_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadStart(args.bid, args.transition_type,resultHandler);
      }
    }

    public static class LoadHandler_OnLoadEnd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LoadHandler_OnLoadEnd_args, Void> {
      public LoadHandler_OnLoadEnd() {
        super("LoadHandler_OnLoadEnd");
      }

      @Override
      public LoadHandler_OnLoadEnd_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadEnd_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, LoadHandler_OnLoadEnd_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadEnd(args.bid, args.httpStatusCode,resultHandler);
      }
    }

    public static class LoadHandler_OnLoadError<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, LoadHandler_OnLoadError_args, Void> {
      public LoadHandler_OnLoadError() {
        super("LoadHandler_OnLoadError");
      }

      @Override
      public LoadHandler_OnLoadError_args getEmptyArgsInstance() {
        return new LoadHandler_OnLoadError_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, LoadHandler_OnLoadError_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.LoadHandler_OnLoadError(args.bid, args.errorCode, args.errorText, args.failedUrl,resultHandler);
      }
    }

    public static class DisplayHandler_OnAddressChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DisplayHandler_OnAddressChange_args, Void> {
      public DisplayHandler_OnAddressChange() {
        super("DisplayHandler_OnAddressChange");
      }

      @Override
      public DisplayHandler_OnAddressChange_args getEmptyArgsInstance() {
        return new DisplayHandler_OnAddressChange_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, DisplayHandler_OnAddressChange_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnAddressChange(args.bid, args.url,resultHandler);
      }
    }

    public static class DisplayHandler_OnTitleChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DisplayHandler_OnTitleChange_args, Void> {
      public DisplayHandler_OnTitleChange() {
        super("DisplayHandler_OnTitleChange");
      }

      @Override
      public DisplayHandler_OnTitleChange_args getEmptyArgsInstance() {
        return new DisplayHandler_OnTitleChange_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, DisplayHandler_OnTitleChange_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnTitleChange(args.bid, args.title,resultHandler);
      }
    }

    public static class DisplayHandler_OnTooltip<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DisplayHandler_OnTooltip_args, java.lang.Boolean> {
      public DisplayHandler_OnTooltip() {
        super("DisplayHandler_OnTooltip");
      }

      @Override
      public DisplayHandler_OnTooltip_args getEmptyArgsInstance() {
        return new DisplayHandler_OnTooltip_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            DisplayHandler_OnTooltip_result result = new DisplayHandler_OnTooltip_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DisplayHandler_OnTooltip_result result = new DisplayHandler_OnTooltip_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, DisplayHandler_OnTooltip_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnTooltip(args.bid, args.text,resultHandler);
      }
    }

    public static class DisplayHandler_OnStatusMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DisplayHandler_OnStatusMessage_args, Void> {
      public DisplayHandler_OnStatusMessage() {
        super("DisplayHandler_OnStatusMessage");
      }

      @Override
      public DisplayHandler_OnStatusMessage_args getEmptyArgsInstance() {
        return new DisplayHandler_OnStatusMessage_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, DisplayHandler_OnStatusMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnStatusMessage(args.bid, args.value,resultHandler);
      }
    }

    public static class DisplayHandler_OnConsoleMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DisplayHandler_OnConsoleMessage_args, java.lang.Boolean> {
      public DisplayHandler_OnConsoleMessage() {
        super("DisplayHandler_OnConsoleMessage");
      }

      @Override
      public DisplayHandler_OnConsoleMessage_args getEmptyArgsInstance() {
        return new DisplayHandler_OnConsoleMessage_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            DisplayHandler_OnConsoleMessage_result result = new DisplayHandler_OnConsoleMessage_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DisplayHandler_OnConsoleMessage_result result = new DisplayHandler_OnConsoleMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, DisplayHandler_OnConsoleMessage_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.DisplayHandler_OnConsoleMessage(args.bid, args.level, args.message, args.source, args.line,resultHandler);
      }
    }

    public static class KeyboardHandler_OnPreKeyEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, KeyboardHandler_OnPreKeyEvent_args, java.lang.Boolean> {
      public KeyboardHandler_OnPreKeyEvent() {
        super("KeyboardHandler_OnPreKeyEvent");
      }

      @Override
      public KeyboardHandler_OnPreKeyEvent_args getEmptyArgsInstance() {
        return new KeyboardHandler_OnPreKeyEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            KeyboardHandler_OnPreKeyEvent_result result = new KeyboardHandler_OnPreKeyEvent_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            KeyboardHandler_OnPreKeyEvent_result result = new KeyboardHandler_OnPreKeyEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, KeyboardHandler_OnPreKeyEvent_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.KeyboardHandler_OnPreKeyEvent(args.bid, args.event,resultHandler);
      }
    }

    public static class KeyboardHandler_OnKeyEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, KeyboardHandler_OnKeyEvent_args, java.lang.Boolean> {
      public KeyboardHandler_OnKeyEvent() {
        super("KeyboardHandler_OnKeyEvent");
      }

      @Override
      public KeyboardHandler_OnKeyEvent_args getEmptyArgsInstance() {
        return new KeyboardHandler_OnKeyEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            KeyboardHandler_OnKeyEvent_result result = new KeyboardHandler_OnKeyEvent_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            KeyboardHandler_OnKeyEvent_result result = new KeyboardHandler_OnKeyEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, KeyboardHandler_OnKeyEvent_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.KeyboardHandler_OnKeyEvent(args.bid, args.event,resultHandler);
      }
    }

    public static class FocusHandler_OnTakeFocus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FocusHandler_OnTakeFocus_args, Void> {
      public FocusHandler_OnTakeFocus() {
        super("FocusHandler_OnTakeFocus");
      }

      @Override
      public FocusHandler_OnTakeFocus_args getEmptyArgsInstance() {
        return new FocusHandler_OnTakeFocus_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, FocusHandler_OnTakeFocus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.FocusHandler_OnTakeFocus(args.bid, args.next,resultHandler);
      }
    }

    public static class FocusHandler_OnSetFocus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FocusHandler_OnSetFocus_args, java.lang.Boolean> {
      public FocusHandler_OnSetFocus() {
        super("FocusHandler_OnSetFocus");
      }

      @Override
      public FocusHandler_OnSetFocus_args getEmptyArgsInstance() {
        return new FocusHandler_OnSetFocus_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            FocusHandler_OnSetFocus_result result = new FocusHandler_OnSetFocus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            FocusHandler_OnSetFocus_result result = new FocusHandler_OnSetFocus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, FocusHandler_OnSetFocus_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.FocusHandler_OnSetFocus(args.bid, args.source,resultHandler);
      }
    }

    public static class FocusHandler_OnGotFocus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FocusHandler_OnGotFocus_args, Void> {
      public FocusHandler_OnGotFocus() {
        super("FocusHandler_OnGotFocus");
      }

      @Override
      public FocusHandler_OnGotFocus_args getEmptyArgsInstance() {
        return new FocusHandler_OnGotFocus_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, FocusHandler_OnGotFocus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.FocusHandler_OnGotFocus(args.bid,resultHandler);
      }
    }

    public static class RequestHandler_OnBeforeBrowse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestHandler_OnBeforeBrowse_args, java.lang.Boolean> {
      public RequestHandler_OnBeforeBrowse() {
        super("RequestHandler_OnBeforeBrowse");
      }

      @Override
      public RequestHandler_OnBeforeBrowse_args getEmptyArgsInstance() {
        return new RequestHandler_OnBeforeBrowse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            RequestHandler_OnBeforeBrowse_result result = new RequestHandler_OnBeforeBrowse_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RequestHandler_OnBeforeBrowse_result result = new RequestHandler_OnBeforeBrowse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RequestHandler_OnBeforeBrowse_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.RequestHandler_OnBeforeBrowse(args.bid, args.request, args.user_gesture, args.is_redirect,resultHandler);
      }
    }

    public static class RequestHandler_OnOpenURLFromTab<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestHandler_OnOpenURLFromTab_args, java.lang.Boolean> {
      public RequestHandler_OnOpenURLFromTab() {
        super("RequestHandler_OnOpenURLFromTab");
      }

      @Override
      public RequestHandler_OnOpenURLFromTab_args getEmptyArgsInstance() {
        return new RequestHandler_OnOpenURLFromTab_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            RequestHandler_OnOpenURLFromTab_result result = new RequestHandler_OnOpenURLFromTab_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RequestHandler_OnOpenURLFromTab_result result = new RequestHandler_OnOpenURLFromTab_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RequestHandler_OnOpenURLFromTab_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.RequestHandler_OnOpenURLFromTab(args.bid, args.target_url, args.user_gesture,resultHandler);
      }
    }

    public static class RequestHandler_GetAuthCredentials<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestHandler_GetAuthCredentials_args, java.lang.Boolean> {
      public RequestHandler_GetAuthCredentials() {
        super("RequestHandler_GetAuthCredentials");
      }

      @Override
      public RequestHandler_GetAuthCredentials_args getEmptyArgsInstance() {
        return new RequestHandler_GetAuthCredentials_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            RequestHandler_GetAuthCredentials_result result = new RequestHandler_GetAuthCredentials_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RequestHandler_GetAuthCredentials_result result = new RequestHandler_GetAuthCredentials_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RequestHandler_GetAuthCredentials_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.RequestHandler_GetAuthCredentials(args.bid, args.origin_url, args.isProxy, args.host, args.port, args.realm, args.scheme, args.authCallback,resultHandler);
      }
    }

    public static class RequestHandler_OnCertificateError<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestHandler_OnCertificateError_args, java.lang.Boolean> {
      public RequestHandler_OnCertificateError() {
        super("RequestHandler_OnCertificateError");
      }

      @Override
      public RequestHandler_OnCertificateError_args getEmptyArgsInstance() {
        return new RequestHandler_OnCertificateError_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            RequestHandler_OnCertificateError_result result = new RequestHandler_OnCertificateError_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RequestHandler_OnCertificateError_result result = new RequestHandler_OnCertificateError_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RequestHandler_OnCertificateError_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.RequestHandler_OnCertificateError(args.bid, args.cert_error, args.request_url, args.sslInfo, args.callback,resultHandler);
      }
    }

    public static class RequestHandler_OnRenderProcessTerminated<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestHandler_OnRenderProcessTerminated_args, Void> {
      public RequestHandler_OnRenderProcessTerminated() {
        super("RequestHandler_OnRenderProcessTerminated");
      }

      @Override
      public RequestHandler_OnRenderProcessTerminated_args getEmptyArgsInstance() {
        return new RequestHandler_OnRenderProcessTerminated_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, RequestHandler_OnRenderProcessTerminated_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.RequestHandler_OnRenderProcessTerminated(args.bid, args.status,resultHandler);
      }
    }

    public static class RequestHandler_GetResourceRequestHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestHandler_GetResourceRequestHandler_args, com.jetbrains.cef.remote.thrift_codegen.RObject> {
      public RequestHandler_GetResourceRequestHandler() {
        super("RequestHandler_GetResourceRequestHandler");
      }

      @Override
      public RequestHandler_GetResourceRequestHandler_args getEmptyArgsInstance() {
        return new RequestHandler_GetResourceRequestHandler_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.RObject o) {
            RequestHandler_GetResourceRequestHandler_result result = new RequestHandler_GetResourceRequestHandler_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RequestHandler_GetResourceRequestHandler_result result = new RequestHandler_GetResourceRequestHandler_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, RequestHandler_GetResourceRequestHandler_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
        iface.RequestHandler_GetResourceRequestHandler(args.bid, args.request, args.isNavigation, args.isDownload, args.requestInitiator,resultHandler);
      }
    }

    public static class ResourceRequestHandler_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_Dispose_args, Void> {
      public ResourceRequestHandler_Dispose() {
        super("ResourceRequestHandler_Dispose");
      }

      @Override
      public ResourceRequestHandler_Dispose_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_Dispose(args.rrHandler,resultHandler);
      }
    }

    public static class ResourceRequestHandler_GetCookieAccessFilter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_GetCookieAccessFilter_args, com.jetbrains.cef.remote.thrift_codegen.RObject> {
      public ResourceRequestHandler_GetCookieAccessFilter() {
        super("ResourceRequestHandler_GetCookieAccessFilter");
      }

      @Override
      public ResourceRequestHandler_GetCookieAccessFilter_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_GetCookieAccessFilter_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.RObject o) {
            ResourceRequestHandler_GetCookieAccessFilter_result result = new ResourceRequestHandler_GetCookieAccessFilter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ResourceRequestHandler_GetCookieAccessFilter_result result = new ResourceRequestHandler_GetCookieAccessFilter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_GetCookieAccessFilter_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_GetCookieAccessFilter(args.rrHandler, args.bid, args.request,resultHandler);
      }
    }

    public static class CookieAccessFilter_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieAccessFilter_Dispose_args, Void> {
      public CookieAccessFilter_Dispose() {
        super("CookieAccessFilter_Dispose");
      }

      @Override
      public CookieAccessFilter_Dispose_args getEmptyArgsInstance() {
        return new CookieAccessFilter_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, CookieAccessFilter_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.CookieAccessFilter_Dispose(args.filter,resultHandler);
      }
    }

    public static class CookieAccessFilter_CanSendCookie<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieAccessFilter_CanSendCookie_args, java.lang.Boolean> {
      public CookieAccessFilter_CanSendCookie() {
        super("CookieAccessFilter_CanSendCookie");
      }

      @Override
      public CookieAccessFilter_CanSendCookie_args getEmptyArgsInstance() {
        return new CookieAccessFilter_CanSendCookie_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            CookieAccessFilter_CanSendCookie_result result = new CookieAccessFilter_CanSendCookie_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieAccessFilter_CanSendCookie_result result = new CookieAccessFilter_CanSendCookie_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieAccessFilter_CanSendCookie_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CookieAccessFilter_CanSendCookie(args.filter, args.bid, args.request, args.cookie,resultHandler);
      }
    }

    public static class CookieAccessFilter_CanSaveCookie<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieAccessFilter_CanSaveCookie_args, java.lang.Boolean> {
      public CookieAccessFilter_CanSaveCookie() {
        super("CookieAccessFilter_CanSaveCookie");
      }

      @Override
      public CookieAccessFilter_CanSaveCookie_args getEmptyArgsInstance() {
        return new CookieAccessFilter_CanSaveCookie_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            CookieAccessFilter_CanSaveCookie_result result = new CookieAccessFilter_CanSaveCookie_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieAccessFilter_CanSaveCookie_result result = new CookieAccessFilter_CanSaveCookie_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieAccessFilter_CanSaveCookie_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CookieAccessFilter_CanSaveCookie(args.filter, args.bid, args.request, args.response, args.cookie,resultHandler);
      }
    }

    public static class ResourceRequestHandler_OnBeforeResourceLoad<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_OnBeforeResourceLoad_args, java.lang.Boolean> {
      public ResourceRequestHandler_OnBeforeResourceLoad() {
        super("ResourceRequestHandler_OnBeforeResourceLoad");
      }

      @Override
      public ResourceRequestHandler_OnBeforeResourceLoad_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnBeforeResourceLoad_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            ResourceRequestHandler_OnBeforeResourceLoad_result result = new ResourceRequestHandler_OnBeforeResourceLoad_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ResourceRequestHandler_OnBeforeResourceLoad_result result = new ResourceRequestHandler_OnBeforeResourceLoad_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_OnBeforeResourceLoad_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_OnBeforeResourceLoad(args.rrHandler, args.bid, args.request,resultHandler);
      }
    }

    public static class ResourceRequestHandler_GetResourceHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_GetResourceHandler_args, com.jetbrains.cef.remote.thrift_codegen.RObject> {
      public ResourceRequestHandler_GetResourceHandler() {
        super("ResourceRequestHandler_GetResourceHandler");
      }

      @Override
      public ResourceRequestHandler_GetResourceHandler_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_GetResourceHandler_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.RObject o) {
            ResourceRequestHandler_GetResourceHandler_result result = new ResourceRequestHandler_GetResourceHandler_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ResourceRequestHandler_GetResourceHandler_result result = new ResourceRequestHandler_GetResourceHandler_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_GetResourceHandler_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_GetResourceHandler(args.rrHandler, args.bid, args.request,resultHandler);
      }
    }

    public static class ResourceHandler_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceHandler_Dispose_args, Void> {
      public ResourceHandler_Dispose() {
        super("ResourceHandler_Dispose");
      }

      @Override
      public ResourceHandler_Dispose_args getEmptyArgsInstance() {
        return new ResourceHandler_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, ResourceHandler_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceHandler_Dispose(args.resourceHandler,resultHandler);
      }
    }

    public static class ResourceRequestHandler_OnResourceRedirect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_OnResourceRedirect_args, java.lang.String> {
      public ResourceRequestHandler_OnResourceRedirect() {
        super("ResourceRequestHandler_OnResourceRedirect");
      }

      @Override
      public ResourceRequestHandler_OnResourceRedirect_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnResourceRedirect_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            ResourceRequestHandler_OnResourceRedirect_result result = new ResourceRequestHandler_OnResourceRedirect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ResourceRequestHandler_OnResourceRedirect_result result = new ResourceRequestHandler_OnResourceRedirect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_OnResourceRedirect_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_OnResourceRedirect(args.rrHandler, args.bid, args.request, args.response, args.new_url,resultHandler);
      }
    }

    public static class ResourceRequestHandler_OnResourceResponse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_OnResourceResponse_args, java.lang.Boolean> {
      public ResourceRequestHandler_OnResourceResponse() {
        super("ResourceRequestHandler_OnResourceResponse");
      }

      @Override
      public ResourceRequestHandler_OnResourceResponse_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnResourceResponse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            ResourceRequestHandler_OnResourceResponse_result result = new ResourceRequestHandler_OnResourceResponse_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ResourceRequestHandler_OnResourceResponse_result result = new ResourceRequestHandler_OnResourceResponse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_OnResourceResponse_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_OnResourceResponse(args.rrHandler, args.bid, args.request, args.response,resultHandler);
      }
    }

    public static class ResourceRequestHandler_OnResourceLoadComplete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_OnResourceLoadComplete_args, Void> {
      public ResourceRequestHandler_OnResourceLoadComplete() {
        super("ResourceRequestHandler_OnResourceLoadComplete");
      }

      @Override
      public ResourceRequestHandler_OnResourceLoadComplete_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnResourceLoadComplete_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            ResourceRequestHandler_OnResourceLoadComplete_result result = new ResourceRequestHandler_OnResourceLoadComplete_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ResourceRequestHandler_OnResourceLoadComplete_result result = new ResourceRequestHandler_OnResourceLoadComplete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_OnResourceLoadComplete_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_OnResourceLoadComplete(args.rrHandler, args.bid, args.request, args.response, args.status, args.receivedContentLength,resultHandler);
      }
    }

    public static class ResourceRequestHandler_OnProtocolExecution<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ResourceRequestHandler_OnProtocolExecution_args, java.lang.Boolean> {
      public ResourceRequestHandler_OnProtocolExecution() {
        super("ResourceRequestHandler_OnProtocolExecution");
      }

      @Override
      public ResourceRequestHandler_OnProtocolExecution_args getEmptyArgsInstance() {
        return new ResourceRequestHandler_OnProtocolExecution_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            ResourceRequestHandler_OnProtocolExecution_result result = new ResourceRequestHandler_OnProtocolExecution_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ResourceRequestHandler_OnProtocolExecution_result result = new ResourceRequestHandler_OnProtocolExecution_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, ResourceRequestHandler_OnProtocolExecution_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ResourceRequestHandler_OnProtocolExecution(args.rrHandler, args.bid, args.request, args.allowOsExecution,resultHandler);
      }
    }

    public static class MessageRouterHandler_onQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouterHandler_onQuery_args, java.lang.Boolean> {
      public MessageRouterHandler_onQuery() {
        super("MessageRouterHandler_onQuery");
      }

      @Override
      public MessageRouterHandler_onQuery_args getEmptyArgsInstance() {
        return new MessageRouterHandler_onQuery_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            MessageRouterHandler_onQuery_result result = new MessageRouterHandler_onQuery_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouterHandler_onQuery_result result = new MessageRouterHandler_onQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouterHandler_onQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouterHandler_onQuery(args.handler, args.bid, args.queryId, args.request, args.persistent, args.queryCallback,resultHandler);
      }
    }

    public static class MessageRouterHandler_onQueryCanceled<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouterHandler_onQueryCanceled_args, Void> {
      public MessageRouterHandler_onQueryCanceled() {
        super("MessageRouterHandler_onQueryCanceled");
      }

      @Override
      public MessageRouterHandler_onQueryCanceled_args getEmptyArgsInstance() {
        return new MessageRouterHandler_onQueryCanceled_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, MessageRouterHandler_onQueryCanceled_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouterHandler_onQueryCanceled(args.handler, args.bid, args.queryId,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_args implements org.apache.thrift.TBase<connect_args, connect_args._Fields>, java.io.Serializable, Cloneable, Comparable<connect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_args.class, metaDataMap);
    }

    public connect_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_args(connect_args other) {
    }

    @Override
    public connect_args deepCopy() {
      return new connect_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_args)
        return this.equals((connect_args)that);
      return false;
    }

    public boolean equals(connect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(connect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsStandardScheme getScheme() {
        return new connect_argsStandardScheme();
      }
    }

    private static class connect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsTupleScheme getScheme() {
        return new connect_argsTupleScheme();
      }
    }

    private static class connect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_result implements org.apache.thrift.TBase<connect_result, connect_result._Fields>, java.io.Serializable, Cloneable, Comparable<connect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_result.class, metaDataMap);
    }

    public connect_result() {
    }

    public connect_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_result(connect_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public connect_result deepCopy() {
      return new connect_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public connect_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_result)
        return this.equals((connect_result)that);
      return false;
    }

    public boolean equals(connect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(connect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultStandardScheme getScheme() {
        return new connect_resultStandardScheme();
      }
    }

    private static class connect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultTupleScheme getScheme() {
        return new connect_resultTupleScheme();
      }
    }

    private static class connect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class log_args implements org.apache.thrift.TBase<log_args, log_args._Fields>, java.io.Serializable, Cloneable, Comparable<log_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_args.class, metaDataMap);
    }

    public log_args() {
    }

    public log_args(
      java.lang.String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_args(log_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    @Override
    public log_args deepCopy() {
      return new log_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMsg() {
      return this.msg;
    }

    public log_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof log_args)
        return this.equals((log_args)that);
      return false;
    }

    public boolean equals(log_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
      if (isSetMsg())
        hashCode = hashCode * 8191 + msg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(log_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public log_argsStandardScheme getScheme() {
        return new log_argsStandardScheme();
      }
    }

    private static class log_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<log_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, log_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public log_argsTupleScheme getScheme() {
        return new log_argsTupleScheme();
      }
    }

    private static class log_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<log_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AppHandler_GetRegisteredCustomSchemes_args implements org.apache.thrift.TBase<AppHandler_GetRegisteredCustomSchemes_args, AppHandler_GetRegisteredCustomSchemes_args._Fields>, java.io.Serializable, Cloneable, Comparable<AppHandler_GetRegisteredCustomSchemes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppHandler_GetRegisteredCustomSchemes_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppHandler_GetRegisteredCustomSchemes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppHandler_GetRegisteredCustomSchemes_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppHandler_GetRegisteredCustomSchemes_args.class, metaDataMap);
    }

    public AppHandler_GetRegisteredCustomSchemes_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppHandler_GetRegisteredCustomSchemes_args(AppHandler_GetRegisteredCustomSchemes_args other) {
    }

    @Override
    public AppHandler_GetRegisteredCustomSchemes_args deepCopy() {
      return new AppHandler_GetRegisteredCustomSchemes_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AppHandler_GetRegisteredCustomSchemes_args)
        return this.equals((AppHandler_GetRegisteredCustomSchemes_args)that);
      return false;
    }

    public boolean equals(AppHandler_GetRegisteredCustomSchemes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(AppHandler_GetRegisteredCustomSchemes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AppHandler_GetRegisteredCustomSchemes_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppHandler_GetRegisteredCustomSchemes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_GetRegisteredCustomSchemes_argsStandardScheme getScheme() {
        return new AppHandler_GetRegisteredCustomSchemes_argsStandardScheme();
      }
    }

    private static class AppHandler_GetRegisteredCustomSchemes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppHandler_GetRegisteredCustomSchemes_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AppHandler_GetRegisteredCustomSchemes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AppHandler_GetRegisteredCustomSchemes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppHandler_GetRegisteredCustomSchemes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_GetRegisteredCustomSchemes_argsTupleScheme getScheme() {
        return new AppHandler_GetRegisteredCustomSchemes_argsTupleScheme();
      }
    }

    private static class AppHandler_GetRegisteredCustomSchemes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppHandler_GetRegisteredCustomSchemes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppHandler_GetRegisteredCustomSchemes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppHandler_GetRegisteredCustomSchemes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AppHandler_GetRegisteredCustomSchemes_result implements org.apache.thrift.TBase<AppHandler_GetRegisteredCustomSchemes_result, AppHandler_GetRegisteredCustomSchemes_result._Fields>, java.io.Serializable, Cloneable, Comparable<AppHandler_GetRegisteredCustomSchemes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppHandler_GetRegisteredCustomSchemes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppHandler_GetRegisteredCustomSchemes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppHandler_GetRegisteredCustomSchemes_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<CustomScheme> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CustomScheme.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppHandler_GetRegisteredCustomSchemes_result.class, metaDataMap);
    }

    public AppHandler_GetRegisteredCustomSchemes_result() {
    }

    public AppHandler_GetRegisteredCustomSchemes_result(
      java.util.List<CustomScheme> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppHandler_GetRegisteredCustomSchemes_result(AppHandler_GetRegisteredCustomSchemes_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CustomScheme> __this__success = new java.util.ArrayList<CustomScheme>(other.success.size());
        for (CustomScheme other_element : other.success) {
          __this__success.add(new CustomScheme(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public AppHandler_GetRegisteredCustomSchemes_result deepCopy() {
      return new AppHandler_GetRegisteredCustomSchemes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<CustomScheme> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CustomScheme elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CustomScheme>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<CustomScheme> getSuccess() {
      return this.success;
    }

    public AppHandler_GetRegisteredCustomSchemes_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<CustomScheme> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CustomScheme>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AppHandler_GetRegisteredCustomSchemes_result)
        return this.equals((AppHandler_GetRegisteredCustomSchemes_result)that);
      return false;
    }

    public boolean equals(AppHandler_GetRegisteredCustomSchemes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AppHandler_GetRegisteredCustomSchemes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AppHandler_GetRegisteredCustomSchemes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppHandler_GetRegisteredCustomSchemes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_GetRegisteredCustomSchemes_resultStandardScheme getScheme() {
        return new AppHandler_GetRegisteredCustomSchemes_resultStandardScheme();
      }
    }

    private static class AppHandler_GetRegisteredCustomSchemes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppHandler_GetRegisteredCustomSchemes_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AppHandler_GetRegisteredCustomSchemes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CustomScheme>(_list0.size);
                  @org.apache.thrift.annotation.Nullable CustomScheme _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new CustomScheme();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AppHandler_GetRegisteredCustomSchemes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CustomScheme _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppHandler_GetRegisteredCustomSchemes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_GetRegisteredCustomSchemes_resultTupleScheme getScheme() {
        return new AppHandler_GetRegisteredCustomSchemes_resultTupleScheme();
      }
    }

    private static class AppHandler_GetRegisteredCustomSchemes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppHandler_GetRegisteredCustomSchemes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppHandler_GetRegisteredCustomSchemes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CustomScheme _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppHandler_GetRegisteredCustomSchemes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<CustomScheme>(_list5.size);
            @org.apache.thrift.annotation.Nullable CustomScheme _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new CustomScheme();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AppHandler_OnContextInitialized_args implements org.apache.thrift.TBase<AppHandler_OnContextInitialized_args, AppHandler_OnContextInitialized_args._Fields>, java.io.Serializable, Cloneable, Comparable<AppHandler_OnContextInitialized_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppHandler_OnContextInitialized_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppHandler_OnContextInitialized_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppHandler_OnContextInitialized_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppHandler_OnContextInitialized_args.class, metaDataMap);
    }

    public AppHandler_OnContextInitialized_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppHandler_OnContextInitialized_args(AppHandler_OnContextInitialized_args other) {
    }

    @Override
    public AppHandler_OnContextInitialized_args deepCopy() {
      return new AppHandler_OnContextInitialized_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AppHandler_OnContextInitialized_args)
        return this.equals((AppHandler_OnContextInitialized_args)that);
      return false;
    }

    public boolean equals(AppHandler_OnContextInitialized_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(AppHandler_OnContextInitialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AppHandler_OnContextInitialized_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppHandler_OnContextInitialized_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_OnContextInitialized_argsStandardScheme getScheme() {
        return new AppHandler_OnContextInitialized_argsStandardScheme();
      }
    }

    private static class AppHandler_OnContextInitialized_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppHandler_OnContextInitialized_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AppHandler_OnContextInitialized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AppHandler_OnContextInitialized_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppHandler_OnContextInitialized_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_OnContextInitialized_argsTupleScheme getScheme() {
        return new AppHandler_OnContextInitialized_argsTupleScheme();
      }
    }

    private static class AppHandler_OnContextInitialized_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppHandler_OnContextInitialized_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppHandler_OnContextInitialized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppHandler_OnContextInitialized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AppHandler_OnContextInitialized_result implements org.apache.thrift.TBase<AppHandler_OnContextInitialized_result, AppHandler_OnContextInitialized_result._Fields>, java.io.Serializable, Cloneable, Comparable<AppHandler_OnContextInitialized_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppHandler_OnContextInitialized_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AppHandler_OnContextInitialized_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AppHandler_OnContextInitialized_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppHandler_OnContextInitialized_result.class, metaDataMap);
    }

    public AppHandler_OnContextInitialized_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AppHandler_OnContextInitialized_result(AppHandler_OnContextInitialized_result other) {
    }

    @Override
    public AppHandler_OnContextInitialized_result deepCopy() {
      return new AppHandler_OnContextInitialized_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AppHandler_OnContextInitialized_result)
        return this.equals((AppHandler_OnContextInitialized_result)that);
      return false;
    }

    public boolean equals(AppHandler_OnContextInitialized_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(AppHandler_OnContextInitialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AppHandler_OnContextInitialized_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AppHandler_OnContextInitialized_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_OnContextInitialized_resultStandardScheme getScheme() {
        return new AppHandler_OnContextInitialized_resultStandardScheme();
      }
    }

    private static class AppHandler_OnContextInitialized_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AppHandler_OnContextInitialized_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AppHandler_OnContextInitialized_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AppHandler_OnContextInitialized_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AppHandler_OnContextInitialized_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AppHandler_OnContextInitialized_resultTupleScheme getScheme() {
        return new AppHandler_OnContextInitialized_resultTupleScheme();
      }
    }

    private static class AppHandler_OnContextInitialized_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AppHandler_OnContextInitialized_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AppHandler_OnContextInitialized_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AppHandler_OnContextInitialized_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_GetViewRect_args implements org.apache.thrift.TBase<RenderHandler_GetViewRect_args, RenderHandler_GetViewRect_args._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_GetViewRect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_GetViewRect_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_GetViewRect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_GetViewRect_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_GetViewRect_args.class, metaDataMap);
    }

    public RenderHandler_GetViewRect_args() {
    }

    public RenderHandler_GetViewRect_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_GetViewRect_args(RenderHandler_GetViewRect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public RenderHandler_GetViewRect_args deepCopy() {
      return new RenderHandler_GetViewRect_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public RenderHandler_GetViewRect_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_GetViewRect_args)
        return this.equals((RenderHandler_GetViewRect_args)that);
      return false;
    }

    public boolean equals(RenderHandler_GetViewRect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_GetViewRect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_GetViewRect_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_GetViewRect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetViewRect_argsStandardScheme getScheme() {
        return new RenderHandler_GetViewRect_argsStandardScheme();
      }
    }

    private static class RenderHandler_GetViewRect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_GetViewRect_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_GetViewRect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_GetViewRect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_GetViewRect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetViewRect_argsTupleScheme getScheme() {
        return new RenderHandler_GetViewRect_argsTupleScheme();
      }
    }

    private static class RenderHandler_GetViewRect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_GetViewRect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetViewRect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetViewRect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_GetViewRect_result implements org.apache.thrift.TBase<RenderHandler_GetViewRect_result, RenderHandler_GetViewRect_result._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_GetViewRect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_GetViewRect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_GetViewRect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_GetViewRect_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Rect success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Rect.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_GetViewRect_result.class, metaDataMap);
    }

    public RenderHandler_GetViewRect_result() {
    }

    public RenderHandler_GetViewRect_result(
      Rect success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_GetViewRect_result(RenderHandler_GetViewRect_result other) {
      if (other.isSetSuccess()) {
        this.success = new Rect(other.success);
      }
    }

    @Override
    public RenderHandler_GetViewRect_result deepCopy() {
      return new RenderHandler_GetViewRect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Rect getSuccess() {
      return this.success;
    }

    public RenderHandler_GetViewRect_result setSuccess(@org.apache.thrift.annotation.Nullable Rect success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Rect)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_GetViewRect_result)
        return this.equals((RenderHandler_GetViewRect_result)that);
      return false;
    }

    public boolean equals(RenderHandler_GetViewRect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_GetViewRect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_GetViewRect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_GetViewRect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetViewRect_resultStandardScheme getScheme() {
        return new RenderHandler_GetViewRect_resultStandardScheme();
      }
    }

    private static class RenderHandler_GetViewRect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_GetViewRect_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_GetViewRect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Rect();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_GetViewRect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_GetViewRect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetViewRect_resultTupleScheme getScheme() {
        return new RenderHandler_GetViewRect_resultTupleScheme();
      }
    }

    private static class RenderHandler_GetViewRect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_GetViewRect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetViewRect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetViewRect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Rect();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_GetScreenInfo_args implements org.apache.thrift.TBase<RenderHandler_GetScreenInfo_args, RenderHandler_GetScreenInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_GetScreenInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_GetScreenInfo_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_GetScreenInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_GetScreenInfo_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_GetScreenInfo_args.class, metaDataMap);
    }

    public RenderHandler_GetScreenInfo_args() {
    }

    public RenderHandler_GetScreenInfo_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_GetScreenInfo_args(RenderHandler_GetScreenInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public RenderHandler_GetScreenInfo_args deepCopy() {
      return new RenderHandler_GetScreenInfo_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public RenderHandler_GetScreenInfo_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_GetScreenInfo_args)
        return this.equals((RenderHandler_GetScreenInfo_args)that);
      return false;
    }

    public boolean equals(RenderHandler_GetScreenInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_GetScreenInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_GetScreenInfo_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_GetScreenInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenInfo_argsStandardScheme getScheme() {
        return new RenderHandler_GetScreenInfo_argsStandardScheme();
      }
    }

    private static class RenderHandler_GetScreenInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_GetScreenInfo_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_GetScreenInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_GetScreenInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_GetScreenInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenInfo_argsTupleScheme getScheme() {
        return new RenderHandler_GetScreenInfo_argsTupleScheme();
      }
    }

    private static class RenderHandler_GetScreenInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_GetScreenInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_GetScreenInfo_result implements org.apache.thrift.TBase<RenderHandler_GetScreenInfo_result, RenderHandler_GetScreenInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_GetScreenInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_GetScreenInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_GetScreenInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_GetScreenInfo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ScreenInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScreenInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_GetScreenInfo_result.class, metaDataMap);
    }

    public RenderHandler_GetScreenInfo_result() {
    }

    public RenderHandler_GetScreenInfo_result(
      ScreenInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_GetScreenInfo_result(RenderHandler_GetScreenInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ScreenInfo(other.success);
      }
    }

    @Override
    public RenderHandler_GetScreenInfo_result deepCopy() {
      return new RenderHandler_GetScreenInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ScreenInfo getSuccess() {
      return this.success;
    }

    public RenderHandler_GetScreenInfo_result setSuccess(@org.apache.thrift.annotation.Nullable ScreenInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ScreenInfo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_GetScreenInfo_result)
        return this.equals((RenderHandler_GetScreenInfo_result)that);
      return false;
    }

    public boolean equals(RenderHandler_GetScreenInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_GetScreenInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_GetScreenInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_GetScreenInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenInfo_resultStandardScheme getScheme() {
        return new RenderHandler_GetScreenInfo_resultStandardScheme();
      }
    }

    private static class RenderHandler_GetScreenInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_GetScreenInfo_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_GetScreenInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ScreenInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_GetScreenInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_GetScreenInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenInfo_resultTupleScheme getScheme() {
        return new RenderHandler_GetScreenInfo_resultTupleScheme();
      }
    }

    private static class RenderHandler_GetScreenInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_GetScreenInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ScreenInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_GetScreenPoint_args implements org.apache.thrift.TBase<RenderHandler_GetScreenPoint_args, RenderHandler_GetScreenPoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_GetScreenPoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_GetScreenPoint_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VIEW_X_FIELD_DESC = new org.apache.thrift.protocol.TField("viewX", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField VIEW_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("viewY", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_GetScreenPoint_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_GetScreenPoint_argsTupleSchemeFactory();

    public int bid; // required
    public int viewX; // required
    public int viewY; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      VIEW_X((short)2, "viewX"),
      VIEW_Y((short)3, "viewY");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // VIEW_X
            return VIEW_X;
          case 3: // VIEW_Y
            return VIEW_Y;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __VIEWX_ISSET_ID = 1;
    private static final int __VIEWY_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VIEW_X, new org.apache.thrift.meta_data.FieldMetaData("viewX", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VIEW_Y, new org.apache.thrift.meta_data.FieldMetaData("viewY", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_GetScreenPoint_args.class, metaDataMap);
    }

    public RenderHandler_GetScreenPoint_args() {
    }

    public RenderHandler_GetScreenPoint_args(
      int bid,
      int viewX,
      int viewY)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.viewX = viewX;
      setViewXIsSet(true);
      this.viewY = viewY;
      setViewYIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_GetScreenPoint_args(RenderHandler_GetScreenPoint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.viewX = other.viewX;
      this.viewY = other.viewY;
    }

    @Override
    public RenderHandler_GetScreenPoint_args deepCopy() {
      return new RenderHandler_GetScreenPoint_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setViewXIsSet(false);
      this.viewX = 0;
      setViewYIsSet(false);
      this.viewY = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public RenderHandler_GetScreenPoint_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getViewX() {
      return this.viewX;
    }

    public RenderHandler_GetScreenPoint_args setViewX(int viewX) {
      this.viewX = viewX;
      setViewXIsSet(true);
      return this;
    }

    public void unsetViewX() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWX_ISSET_ID);
    }

    /** Returns true if field viewX is set (has been assigned a value) and false otherwise */
    public boolean isSetViewX() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWX_ISSET_ID);
    }

    public void setViewXIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWX_ISSET_ID, value);
    }

    public int getViewY() {
      return this.viewY;
    }

    public RenderHandler_GetScreenPoint_args setViewY(int viewY) {
      this.viewY = viewY;
      setViewYIsSet(true);
      return this;
    }

    public void unsetViewY() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VIEWY_ISSET_ID);
    }

    /** Returns true if field viewY is set (has been assigned a value) and false otherwise */
    public boolean isSetViewY() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VIEWY_ISSET_ID);
    }

    public void setViewYIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VIEWY_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case VIEW_X:
        if (value == null) {
          unsetViewX();
        } else {
          setViewX((java.lang.Integer)value);
        }
        break;

      case VIEW_Y:
        if (value == null) {
          unsetViewY();
        } else {
          setViewY((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case VIEW_X:
        return getViewX();

      case VIEW_Y:
        return getViewY();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case VIEW_X:
        return isSetViewX();
      case VIEW_Y:
        return isSetViewY();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_GetScreenPoint_args)
        return this.equals((RenderHandler_GetScreenPoint_args)that);
      return false;
    }

    public boolean equals(RenderHandler_GetScreenPoint_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_viewX = true;
      boolean that_present_viewX = true;
      if (this_present_viewX || that_present_viewX) {
        if (!(this_present_viewX && that_present_viewX))
          return false;
        if (this.viewX != that.viewX)
          return false;
      }

      boolean this_present_viewY = true;
      boolean that_present_viewY = true;
      if (this_present_viewY || that_present_viewY) {
        if (!(this_present_viewY && that_present_viewY))
          return false;
        if (this.viewY != that.viewY)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + viewX;

      hashCode = hashCode * 8191 + viewY;

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_GetScreenPoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetViewX(), other.isSetViewX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetViewX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewX, other.viewX);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetViewY(), other.isSetViewY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetViewY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewY, other.viewY);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_GetScreenPoint_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("viewX:");
      sb.append(this.viewX);
      first = false;
      if (!first) sb.append(", ");
      sb.append("viewY:");
      sb.append(this.viewY);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_GetScreenPoint_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenPoint_argsStandardScheme getScheme() {
        return new RenderHandler_GetScreenPoint_argsStandardScheme();
      }
    }

    private static class RenderHandler_GetScreenPoint_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_GetScreenPoint_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_GetScreenPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIEW_X
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.viewX = iprot.readI32();
                struct.setViewXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VIEW_Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.viewY = iprot.readI32();
                struct.setViewYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_GetScreenPoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VIEW_X_FIELD_DESC);
        oprot.writeI32(struct.viewX);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VIEW_Y_FIELD_DESC);
        oprot.writeI32(struct.viewY);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_GetScreenPoint_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenPoint_argsTupleScheme getScheme() {
        return new RenderHandler_GetScreenPoint_argsTupleScheme();
      }
    }

    private static class RenderHandler_GetScreenPoint_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_GetScreenPoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetViewX()) {
          optionals.set(1);
        }
        if (struct.isSetViewY()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetViewX()) {
          oprot.writeI32(struct.viewX);
        }
        if (struct.isSetViewY()) {
          oprot.writeI32(struct.viewY);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenPoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.viewX = iprot.readI32();
          struct.setViewXIsSet(true);
        }
        if (incoming.get(2)) {
          struct.viewY = iprot.readI32();
          struct.setViewYIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_GetScreenPoint_result implements org.apache.thrift.TBase<RenderHandler_GetScreenPoint_result, RenderHandler_GetScreenPoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_GetScreenPoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_GetScreenPoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_GetScreenPoint_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_GetScreenPoint_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Point success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_GetScreenPoint_result.class, metaDataMap);
    }

    public RenderHandler_GetScreenPoint_result() {
    }

    public RenderHandler_GetScreenPoint_result(
      Point success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_GetScreenPoint_result(RenderHandler_GetScreenPoint_result other) {
      if (other.isSetSuccess()) {
        this.success = new Point(other.success);
      }
    }

    @Override
    public RenderHandler_GetScreenPoint_result deepCopy() {
      return new RenderHandler_GetScreenPoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Point getSuccess() {
      return this.success;
    }

    public RenderHandler_GetScreenPoint_result setSuccess(@org.apache.thrift.annotation.Nullable Point success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Point)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_GetScreenPoint_result)
        return this.equals((RenderHandler_GetScreenPoint_result)that);
      return false;
    }

    public boolean equals(RenderHandler_GetScreenPoint_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_GetScreenPoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_GetScreenPoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_GetScreenPoint_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenPoint_resultStandardScheme getScheme() {
        return new RenderHandler_GetScreenPoint_resultStandardScheme();
      }
    }

    private static class RenderHandler_GetScreenPoint_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_GetScreenPoint_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_GetScreenPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Point();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_GetScreenPoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_GetScreenPoint_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_GetScreenPoint_resultTupleScheme getScheme() {
        return new RenderHandler_GetScreenPoint_resultTupleScheme();
      }
    }

    private static class RenderHandler_GetScreenPoint_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_GetScreenPoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_GetScreenPoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Point();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_OnPaint_args implements org.apache.thrift.TBase<RenderHandler_OnPaint_args, RenderHandler_OnPaint_args._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_OnPaint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_OnPaint_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField POPUP_FIELD_DESC = new org.apache.thrift.protocol.TField("popup", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField DIRTY_RECTS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("dirtyRectsCount", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SHARED_MEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedMemName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SHARED_MEM_HANDLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sharedMemHandle", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_OnPaint_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_OnPaint_argsTupleSchemeFactory();

    public int bid; // required
    public boolean popup; // required
    public int dirtyRectsCount; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sharedMemName; // required
    public long sharedMemHandle; // required
    public int width; // required
    public int height; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      POPUP((short)2, "popup"),
      DIRTY_RECTS_COUNT((short)3, "dirtyRectsCount"),
      SHARED_MEM_NAME((short)4, "sharedMemName"),
      SHARED_MEM_HANDLE((short)5, "sharedMemHandle"),
      WIDTH((short)6, "width"),
      HEIGHT((short)7, "height");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // POPUP
            return POPUP;
          case 3: // DIRTY_RECTS_COUNT
            return DIRTY_RECTS_COUNT;
          case 4: // SHARED_MEM_NAME
            return SHARED_MEM_NAME;
          case 5: // SHARED_MEM_HANDLE
            return SHARED_MEM_HANDLE;
          case 6: // WIDTH
            return WIDTH;
          case 7: // HEIGHT
            return HEIGHT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __POPUP_ISSET_ID = 1;
    private static final int __DIRTYRECTSCOUNT_ISSET_ID = 2;
    private static final int __SHAREDMEMHANDLE_ISSET_ID = 3;
    private static final int __WIDTH_ISSET_ID = 4;
    private static final int __HEIGHT_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.POPUP, new org.apache.thrift.meta_data.FieldMetaData("popup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.DIRTY_RECTS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("dirtyRectsCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SHARED_MEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("sharedMemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SHARED_MEM_HANDLE, new org.apache.thrift.meta_data.FieldMetaData("sharedMemHandle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_OnPaint_args.class, metaDataMap);
    }

    public RenderHandler_OnPaint_args() {
    }

    public RenderHandler_OnPaint_args(
      int bid,
      boolean popup,
      int dirtyRectsCount,
      java.lang.String sharedMemName,
      long sharedMemHandle,
      int width,
      int height)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.popup = popup;
      setPopupIsSet(true);
      this.dirtyRectsCount = dirtyRectsCount;
      setDirtyRectsCountIsSet(true);
      this.sharedMemName = sharedMemName;
      this.sharedMemHandle = sharedMemHandle;
      setSharedMemHandleIsSet(true);
      this.width = width;
      setWidthIsSet(true);
      this.height = height;
      setHeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_OnPaint_args(RenderHandler_OnPaint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.popup = other.popup;
      this.dirtyRectsCount = other.dirtyRectsCount;
      if (other.isSetSharedMemName()) {
        this.sharedMemName = other.sharedMemName;
      }
      this.sharedMemHandle = other.sharedMemHandle;
      this.width = other.width;
      this.height = other.height;
    }

    @Override
    public RenderHandler_OnPaint_args deepCopy() {
      return new RenderHandler_OnPaint_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setPopupIsSet(false);
      this.popup = false;
      setDirtyRectsCountIsSet(false);
      this.dirtyRectsCount = 0;
      this.sharedMemName = null;
      setSharedMemHandleIsSet(false);
      this.sharedMemHandle = 0;
      setWidthIsSet(false);
      this.width = 0;
      setHeightIsSet(false);
      this.height = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public RenderHandler_OnPaint_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public boolean isPopup() {
      return this.popup;
    }

    public RenderHandler_OnPaint_args setPopup(boolean popup) {
      this.popup = popup;
      setPopupIsSet(true);
      return this;
    }

    public void unsetPopup() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POPUP_ISSET_ID);
    }

    /** Returns true if field popup is set (has been assigned a value) and false otherwise */
    public boolean isSetPopup() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POPUP_ISSET_ID);
    }

    public void setPopupIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POPUP_ISSET_ID, value);
    }

    public int getDirtyRectsCount() {
      return this.dirtyRectsCount;
    }

    public RenderHandler_OnPaint_args setDirtyRectsCount(int dirtyRectsCount) {
      this.dirtyRectsCount = dirtyRectsCount;
      setDirtyRectsCountIsSet(true);
      return this;
    }

    public void unsetDirtyRectsCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIRTYRECTSCOUNT_ISSET_ID);
    }

    /** Returns true if field dirtyRectsCount is set (has been assigned a value) and false otherwise */
    public boolean isSetDirtyRectsCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIRTYRECTSCOUNT_ISSET_ID);
    }

    public void setDirtyRectsCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIRTYRECTSCOUNT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSharedMemName() {
      return this.sharedMemName;
    }

    public RenderHandler_OnPaint_args setSharedMemName(@org.apache.thrift.annotation.Nullable java.lang.String sharedMemName) {
      this.sharedMemName = sharedMemName;
      return this;
    }

    public void unsetSharedMemName() {
      this.sharedMemName = null;
    }

    /** Returns true if field sharedMemName is set (has been assigned a value) and false otherwise */
    public boolean isSetSharedMemName() {
      return this.sharedMemName != null;
    }

    public void setSharedMemNameIsSet(boolean value) {
      if (!value) {
        this.sharedMemName = null;
      }
    }

    public long getSharedMemHandle() {
      return this.sharedMemHandle;
    }

    public RenderHandler_OnPaint_args setSharedMemHandle(long sharedMemHandle) {
      this.sharedMemHandle = sharedMemHandle;
      setSharedMemHandleIsSet(true);
      return this;
    }

    public void unsetSharedMemHandle() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHAREDMEMHANDLE_ISSET_ID);
    }

    /** Returns true if field sharedMemHandle is set (has been assigned a value) and false otherwise */
    public boolean isSetSharedMemHandle() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHAREDMEMHANDLE_ISSET_ID);
    }

    public void setSharedMemHandleIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHAREDMEMHANDLE_ISSET_ID, value);
    }

    public int getWidth() {
      return this.width;
    }

    public RenderHandler_OnPaint_args setWidth(int width) {
      this.width = width;
      setWidthIsSet(true);
      return this;
    }

    public void unsetWidth() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
    }

    /** Returns true if field width is set (has been assigned a value) and false otherwise */
    public boolean isSetWidth() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
    }

    public void setWidthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
    }

    public int getHeight() {
      return this.height;
    }

    public RenderHandler_OnPaint_args setHeight(int height) {
      this.height = height;
      setHeightIsSet(true);
      return this;
    }

    public void unsetHeight() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
    }

    /** Returns true if field height is set (has been assigned a value) and false otherwise */
    public boolean isSetHeight() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
    }

    public void setHeightIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case POPUP:
        if (value == null) {
          unsetPopup();
        } else {
          setPopup((java.lang.Boolean)value);
        }
        break;

      case DIRTY_RECTS_COUNT:
        if (value == null) {
          unsetDirtyRectsCount();
        } else {
          setDirtyRectsCount((java.lang.Integer)value);
        }
        break;

      case SHARED_MEM_NAME:
        if (value == null) {
          unsetSharedMemName();
        } else {
          setSharedMemName((java.lang.String)value);
        }
        break;

      case SHARED_MEM_HANDLE:
        if (value == null) {
          unsetSharedMemHandle();
        } else {
          setSharedMemHandle((java.lang.Long)value);
        }
        break;

      case WIDTH:
        if (value == null) {
          unsetWidth();
        } else {
          setWidth((java.lang.Integer)value);
        }
        break;

      case HEIGHT:
        if (value == null) {
          unsetHeight();
        } else {
          setHeight((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case POPUP:
        return isPopup();

      case DIRTY_RECTS_COUNT:
        return getDirtyRectsCount();

      case SHARED_MEM_NAME:
        return getSharedMemName();

      case SHARED_MEM_HANDLE:
        return getSharedMemHandle();

      case WIDTH:
        return getWidth();

      case HEIGHT:
        return getHeight();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case POPUP:
        return isSetPopup();
      case DIRTY_RECTS_COUNT:
        return isSetDirtyRectsCount();
      case SHARED_MEM_NAME:
        return isSetSharedMemName();
      case SHARED_MEM_HANDLE:
        return isSetSharedMemHandle();
      case WIDTH:
        return isSetWidth();
      case HEIGHT:
        return isSetHeight();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_OnPaint_args)
        return this.equals((RenderHandler_OnPaint_args)that);
      return false;
    }

    public boolean equals(RenderHandler_OnPaint_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_popup = true;
      boolean that_present_popup = true;
      if (this_present_popup || that_present_popup) {
        if (!(this_present_popup && that_present_popup))
          return false;
        if (this.popup != that.popup)
          return false;
      }

      boolean this_present_dirtyRectsCount = true;
      boolean that_present_dirtyRectsCount = true;
      if (this_present_dirtyRectsCount || that_present_dirtyRectsCount) {
        if (!(this_present_dirtyRectsCount && that_present_dirtyRectsCount))
          return false;
        if (this.dirtyRectsCount != that.dirtyRectsCount)
          return false;
      }

      boolean this_present_sharedMemName = true && this.isSetSharedMemName();
      boolean that_present_sharedMemName = true && that.isSetSharedMemName();
      if (this_present_sharedMemName || that_present_sharedMemName) {
        if (!(this_present_sharedMemName && that_present_sharedMemName))
          return false;
        if (!this.sharedMemName.equals(that.sharedMemName))
          return false;
      }

      boolean this_present_sharedMemHandle = true;
      boolean that_present_sharedMemHandle = true;
      if (this_present_sharedMemHandle || that_present_sharedMemHandle) {
        if (!(this_present_sharedMemHandle && that_present_sharedMemHandle))
          return false;
        if (this.sharedMemHandle != that.sharedMemHandle)
          return false;
      }

      boolean this_present_width = true;
      boolean that_present_width = true;
      if (this_present_width || that_present_width) {
        if (!(this_present_width && that_present_width))
          return false;
        if (this.width != that.width)
          return false;
      }

      boolean this_present_height = true;
      boolean that_present_height = true;
      if (this_present_height || that_present_height) {
        if (!(this_present_height && that_present_height))
          return false;
        if (this.height != that.height)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((popup) ? 131071 : 524287);

      hashCode = hashCode * 8191 + dirtyRectsCount;

      hashCode = hashCode * 8191 + ((isSetSharedMemName()) ? 131071 : 524287);
      if (isSetSharedMemName())
        hashCode = hashCode * 8191 + sharedMemName.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sharedMemHandle);

      hashCode = hashCode * 8191 + width;

      hashCode = hashCode * 8191 + height;

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_OnPaint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPopup(), other.isSetPopup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPopup()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.popup, other.popup);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDirtyRectsCount(), other.isSetDirtyRectsCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirtyRectsCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dirtyRectsCount, other.dirtyRectsCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSharedMemName(), other.isSetSharedMemName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSharedMemName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedMemName, other.sharedMemName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSharedMemHandle(), other.isSetSharedMemHandle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSharedMemHandle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sharedMemHandle, other.sharedMemHandle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWidth(), other.isSetWidth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWidth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeight(), other.isSetHeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_OnPaint_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("popup:");
      sb.append(this.popup);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dirtyRectsCount:");
      sb.append(this.dirtyRectsCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sharedMemName:");
      if (this.sharedMemName == null) {
        sb.append("null");
      } else {
        sb.append(this.sharedMemName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sharedMemHandle:");
      sb.append(this.sharedMemHandle);
      first = false;
      if (!first) sb.append(", ");
      sb.append("width:");
      sb.append(this.width);
      first = false;
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_OnPaint_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_OnPaint_argsStandardScheme getScheme() {
        return new RenderHandler_OnPaint_argsStandardScheme();
      }
    }

    private static class RenderHandler_OnPaint_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_OnPaint_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_OnPaint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POPUP
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.popup = iprot.readBool();
                struct.setPopupIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIRTY_RECTS_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.dirtyRectsCount = iprot.readI32();
                struct.setDirtyRectsCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SHARED_MEM_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sharedMemName = iprot.readString();
                struct.setSharedMemNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SHARED_MEM_HANDLE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sharedMemHandle = iprot.readI64();
                struct.setSharedMemHandleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WIDTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.width = iprot.readI32();
                struct.setWidthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.height = iprot.readI32();
                struct.setHeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_OnPaint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(POPUP_FIELD_DESC);
        oprot.writeBool(struct.popup);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DIRTY_RECTS_COUNT_FIELD_DESC);
        oprot.writeI32(struct.dirtyRectsCount);
        oprot.writeFieldEnd();
        if (struct.sharedMemName != null) {
          oprot.writeFieldBegin(SHARED_MEM_NAME_FIELD_DESC);
          oprot.writeString(struct.sharedMemName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SHARED_MEM_HANDLE_FIELD_DESC);
        oprot.writeI64(struct.sharedMemHandle);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WIDTH_FIELD_DESC);
        oprot.writeI32(struct.width);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_OnPaint_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_OnPaint_argsTupleScheme getScheme() {
        return new RenderHandler_OnPaint_argsTupleScheme();
      }
    }

    private static class RenderHandler_OnPaint_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_OnPaint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_OnPaint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetPopup()) {
          optionals.set(1);
        }
        if (struct.isSetDirtyRectsCount()) {
          optionals.set(2);
        }
        if (struct.isSetSharedMemName()) {
          optionals.set(3);
        }
        if (struct.isSetSharedMemHandle()) {
          optionals.set(4);
        }
        if (struct.isSetWidth()) {
          optionals.set(5);
        }
        if (struct.isSetHeight()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetPopup()) {
          oprot.writeBool(struct.popup);
        }
        if (struct.isSetDirtyRectsCount()) {
          oprot.writeI32(struct.dirtyRectsCount);
        }
        if (struct.isSetSharedMemName()) {
          oprot.writeString(struct.sharedMemName);
        }
        if (struct.isSetSharedMemHandle()) {
          oprot.writeI64(struct.sharedMemHandle);
        }
        if (struct.isSetWidth()) {
          oprot.writeI32(struct.width);
        }
        if (struct.isSetHeight()) {
          oprot.writeI32(struct.height);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_OnPaint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.popup = iprot.readBool();
          struct.setPopupIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dirtyRectsCount = iprot.readI32();
          struct.setDirtyRectsCountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sharedMemName = iprot.readString();
          struct.setSharedMemNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.sharedMemHandle = iprot.readI64();
          struct.setSharedMemHandleIsSet(true);
        }
        if (incoming.get(5)) {
          struct.width = iprot.readI32();
          struct.setWidthIsSet(true);
        }
        if (incoming.get(6)) {
          struct.height = iprot.readI32();
          struct.setHeightIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RenderHandler_OnPaint_result implements org.apache.thrift.TBase<RenderHandler_OnPaint_result, RenderHandler_OnPaint_result._Fields>, java.io.Serializable, Cloneable, Comparable<RenderHandler_OnPaint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RenderHandler_OnPaint_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RenderHandler_OnPaint_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RenderHandler_OnPaint_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RenderHandler_OnPaint_result.class, metaDataMap);
    }

    public RenderHandler_OnPaint_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RenderHandler_OnPaint_result(RenderHandler_OnPaint_result other) {
    }

    @Override
    public RenderHandler_OnPaint_result deepCopy() {
      return new RenderHandler_OnPaint_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RenderHandler_OnPaint_result)
        return this.equals((RenderHandler_OnPaint_result)that);
      return false;
    }

    public boolean equals(RenderHandler_OnPaint_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(RenderHandler_OnPaint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RenderHandler_OnPaint_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RenderHandler_OnPaint_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_OnPaint_resultStandardScheme getScheme() {
        return new RenderHandler_OnPaint_resultStandardScheme();
      }
    }

    private static class RenderHandler_OnPaint_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RenderHandler_OnPaint_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RenderHandler_OnPaint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RenderHandler_OnPaint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RenderHandler_OnPaint_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RenderHandler_OnPaint_resultTupleScheme getScheme() {
        return new RenderHandler_OnPaint_resultTupleScheme();
      }
    }

    private static class RenderHandler_OnPaint_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RenderHandler_OnPaint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RenderHandler_OnPaint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RenderHandler_OnPaint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LifeSpanHandler_OnBeforePopup_args implements org.apache.thrift.TBase<LifeSpanHandler_OnBeforePopup_args, LifeSpanHandler_OnBeforePopup_args._Fields>, java.io.Serializable, Cloneable, Comparable<LifeSpanHandler_OnBeforePopup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LifeSpanHandler_OnBeforePopup_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FRAME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frameName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField GESTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("gesture", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LifeSpanHandler_OnBeforePopup_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LifeSpanHandler_OnBeforePopup_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String frameName; // required
    public boolean gesture; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      URL((short)2, "url"),
      FRAME_NAME((short)3, "frameName"),
      GESTURE((short)4, "gesture");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // URL
            return URL;
          case 3: // FRAME_NAME
            return FRAME_NAME;
          case 4: // GESTURE
            return GESTURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __GESTURE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FRAME_NAME, new org.apache.thrift.meta_data.FieldMetaData("frameName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GESTURE, new org.apache.thrift.meta_data.FieldMetaData("gesture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LifeSpanHandler_OnBeforePopup_args.class, metaDataMap);
    }

    public LifeSpanHandler_OnBeforePopup_args() {
    }

    public LifeSpanHandler_OnBeforePopup_args(
      int bid,
      java.lang.String url,
      java.lang.String frameName,
      boolean gesture)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.url = url;
      this.frameName = frameName;
      this.gesture = gesture;
      setGestureIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LifeSpanHandler_OnBeforePopup_args(LifeSpanHandler_OnBeforePopup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetFrameName()) {
        this.frameName = other.frameName;
      }
      this.gesture = other.gesture;
    }

    @Override
    public LifeSpanHandler_OnBeforePopup_args deepCopy() {
      return new LifeSpanHandler_OnBeforePopup_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.url = null;
      this.frameName = null;
      setGestureIsSet(false);
      this.gesture = false;
    }

    public int getBid() {
      return this.bid;
    }

    public LifeSpanHandler_OnBeforePopup_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public LifeSpanHandler_OnBeforePopup_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFrameName() {
      return this.frameName;
    }

    public LifeSpanHandler_OnBeforePopup_args setFrameName(@org.apache.thrift.annotation.Nullable java.lang.String frameName) {
      this.frameName = frameName;
      return this;
    }

    public void unsetFrameName() {
      this.frameName = null;
    }

    /** Returns true if field frameName is set (has been assigned a value) and false otherwise */
    public boolean isSetFrameName() {
      return this.frameName != null;
    }

    public void setFrameNameIsSet(boolean value) {
      if (!value) {
        this.frameName = null;
      }
    }

    public boolean isGesture() {
      return this.gesture;
    }

    public LifeSpanHandler_OnBeforePopup_args setGesture(boolean gesture) {
      this.gesture = gesture;
      setGestureIsSet(true);
      return this;
    }

    public void unsetGesture() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GESTURE_ISSET_ID);
    }

    /** Returns true if field gesture is set (has been assigned a value) and false otherwise */
    public boolean isSetGesture() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GESTURE_ISSET_ID);
    }

    public void setGestureIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GESTURE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case FRAME_NAME:
        if (value == null) {
          unsetFrameName();
        } else {
          setFrameName((java.lang.String)value);
        }
        break;

      case GESTURE:
        if (value == null) {
          unsetGesture();
        } else {
          setGesture((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case URL:
        return getUrl();

      case FRAME_NAME:
        return getFrameName();

      case GESTURE:
        return isGesture();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case URL:
        return isSetUrl();
      case FRAME_NAME:
        return isSetFrameName();
      case GESTURE:
        return isSetGesture();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LifeSpanHandler_OnBeforePopup_args)
        return this.equals((LifeSpanHandler_OnBeforePopup_args)that);
      return false;
    }

    public boolean equals(LifeSpanHandler_OnBeforePopup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_frameName = true && this.isSetFrameName();
      boolean that_present_frameName = true && that.isSetFrameName();
      if (this_present_frameName || that_present_frameName) {
        if (!(this_present_frameName && that_present_frameName))
          return false;
        if (!this.frameName.equals(that.frameName))
          return false;
      }

      boolean this_present_gesture = true;
      boolean that_present_gesture = true;
      if (this_present_gesture || that_present_gesture) {
        if (!(this_present_gesture && that_present_gesture))
          return false;
        if (this.gesture != that.gesture)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + ((isSetFrameName()) ? 131071 : 524287);
      if (isSetFrameName())
        hashCode = hashCode * 8191 + frameName.hashCode();

      hashCode = hashCode * 8191 + ((gesture) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(LifeSpanHandler_OnBeforePopup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFrameName(), other.isSetFrameName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrameName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameName, other.frameName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetGesture(), other.isSetGesture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGesture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gesture, other.gesture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LifeSpanHandler_OnBeforePopup_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("frameName:");
      if (this.frameName == null) {
        sb.append("null");
      } else {
        sb.append(this.frameName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gesture:");
      sb.append(this.gesture);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LifeSpanHandler_OnBeforePopup_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnBeforePopup_argsStandardScheme getScheme() {
        return new LifeSpanHandler_OnBeforePopup_argsStandardScheme();
      }
    }

    private static class LifeSpanHandler_OnBeforePopup_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LifeSpanHandler_OnBeforePopup_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LifeSpanHandler_OnBeforePopup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FRAME_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.frameName = iprot.readString();
                struct.setFrameNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GESTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.gesture = iprot.readBool();
                struct.setGestureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LifeSpanHandler_OnBeforePopup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.frameName != null) {
          oprot.writeFieldBegin(FRAME_NAME_FIELD_DESC);
          oprot.writeString(struct.frameName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(GESTURE_FIELD_DESC);
        oprot.writeBool(struct.gesture);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LifeSpanHandler_OnBeforePopup_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnBeforePopup_argsTupleScheme getScheme() {
        return new LifeSpanHandler_OnBeforePopup_argsTupleScheme();
      }
    }

    private static class LifeSpanHandler_OnBeforePopup_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LifeSpanHandler_OnBeforePopup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnBeforePopup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        if (struct.isSetFrameName()) {
          optionals.set(2);
        }
        if (struct.isSetGesture()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetFrameName()) {
          oprot.writeString(struct.frameName);
        }
        if (struct.isSetGesture()) {
          oprot.writeBool(struct.gesture);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnBeforePopup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.frameName = iprot.readString();
          struct.setFrameNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.gesture = iprot.readBool();
          struct.setGestureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LifeSpanHandler_OnBeforePopup_result implements org.apache.thrift.TBase<LifeSpanHandler_OnBeforePopup_result, LifeSpanHandler_OnBeforePopup_result._Fields>, java.io.Serializable, Cloneable, Comparable<LifeSpanHandler_OnBeforePopup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LifeSpanHandler_OnBeforePopup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LifeSpanHandler_OnBeforePopup_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LifeSpanHandler_OnBeforePopup_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LifeSpanHandler_OnBeforePopup_result.class, metaDataMap);
    }

    public LifeSpanHandler_OnBeforePopup_result() {
    }

    public LifeSpanHandler_OnBeforePopup_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LifeSpanHandler_OnBeforePopup_result(LifeSpanHandler_OnBeforePopup_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public LifeSpanHandler_OnBeforePopup_result deepCopy() {
      return new LifeSpanHandler_OnBeforePopup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public LifeSpanHandler_OnBeforePopup_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LifeSpanHandler_OnBeforePopup_result)
        return this.equals((LifeSpanHandler_OnBeforePopup_result)that);
      return false;
    }

    public boolean equals(LifeSpanHandler_OnBeforePopup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(LifeSpanHandler_OnBeforePopup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LifeSpanHandler_OnBeforePopup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LifeSpanHandler_OnBeforePopup_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnBeforePopup_resultStandardScheme getScheme() {
        return new LifeSpanHandler_OnBeforePopup_resultStandardScheme();
      }
    }

    private static class LifeSpanHandler_OnBeforePopup_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<LifeSpanHandler_OnBeforePopup_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LifeSpanHandler_OnBeforePopup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LifeSpanHandler_OnBeforePopup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LifeSpanHandler_OnBeforePopup_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnBeforePopup_resultTupleScheme getScheme() {
        return new LifeSpanHandler_OnBeforePopup_resultTupleScheme();
      }
    }

    private static class LifeSpanHandler_OnBeforePopup_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<LifeSpanHandler_OnBeforePopup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnBeforePopup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnBeforePopup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LifeSpanHandler_OnAfterCreated_args implements org.apache.thrift.TBase<LifeSpanHandler_OnAfterCreated_args, LifeSpanHandler_OnAfterCreated_args._Fields>, java.io.Serializable, Cloneable, Comparable<LifeSpanHandler_OnAfterCreated_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LifeSpanHandler_OnAfterCreated_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LifeSpanHandler_OnAfterCreated_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LifeSpanHandler_OnAfterCreated_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LifeSpanHandler_OnAfterCreated_args.class, metaDataMap);
    }

    public LifeSpanHandler_OnAfterCreated_args() {
    }

    public LifeSpanHandler_OnAfterCreated_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LifeSpanHandler_OnAfterCreated_args(LifeSpanHandler_OnAfterCreated_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public LifeSpanHandler_OnAfterCreated_args deepCopy() {
      return new LifeSpanHandler_OnAfterCreated_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public LifeSpanHandler_OnAfterCreated_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LifeSpanHandler_OnAfterCreated_args)
        return this.equals((LifeSpanHandler_OnAfterCreated_args)that);
      return false;
    }

    public boolean equals(LifeSpanHandler_OnAfterCreated_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(LifeSpanHandler_OnAfterCreated_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LifeSpanHandler_OnAfterCreated_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LifeSpanHandler_OnAfterCreated_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnAfterCreated_argsStandardScheme getScheme() {
        return new LifeSpanHandler_OnAfterCreated_argsStandardScheme();
      }
    }

    private static class LifeSpanHandler_OnAfterCreated_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LifeSpanHandler_OnAfterCreated_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LifeSpanHandler_OnAfterCreated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LifeSpanHandler_OnAfterCreated_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LifeSpanHandler_OnAfterCreated_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnAfterCreated_argsTupleScheme getScheme() {
        return new LifeSpanHandler_OnAfterCreated_argsTupleScheme();
      }
    }

    private static class LifeSpanHandler_OnAfterCreated_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LifeSpanHandler_OnAfterCreated_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnAfterCreated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnAfterCreated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LifeSpanHandler_DoClose_args implements org.apache.thrift.TBase<LifeSpanHandler_DoClose_args, LifeSpanHandler_DoClose_args._Fields>, java.io.Serializable, Cloneable, Comparable<LifeSpanHandler_DoClose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LifeSpanHandler_DoClose_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LifeSpanHandler_DoClose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LifeSpanHandler_DoClose_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LifeSpanHandler_DoClose_args.class, metaDataMap);
    }

    public LifeSpanHandler_DoClose_args() {
    }

    public LifeSpanHandler_DoClose_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LifeSpanHandler_DoClose_args(LifeSpanHandler_DoClose_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public LifeSpanHandler_DoClose_args deepCopy() {
      return new LifeSpanHandler_DoClose_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public LifeSpanHandler_DoClose_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LifeSpanHandler_DoClose_args)
        return this.equals((LifeSpanHandler_DoClose_args)that);
      return false;
    }

    public boolean equals(LifeSpanHandler_DoClose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(LifeSpanHandler_DoClose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LifeSpanHandler_DoClose_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LifeSpanHandler_DoClose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_DoClose_argsStandardScheme getScheme() {
        return new LifeSpanHandler_DoClose_argsStandardScheme();
      }
    }

    private static class LifeSpanHandler_DoClose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LifeSpanHandler_DoClose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LifeSpanHandler_DoClose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LifeSpanHandler_DoClose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LifeSpanHandler_DoClose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_DoClose_argsTupleScheme getScheme() {
        return new LifeSpanHandler_DoClose_argsTupleScheme();
      }
    }

    private static class LifeSpanHandler_DoClose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LifeSpanHandler_DoClose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_DoClose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_DoClose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LifeSpanHandler_DoClose_result implements org.apache.thrift.TBase<LifeSpanHandler_DoClose_result, LifeSpanHandler_DoClose_result._Fields>, java.io.Serializable, Cloneable, Comparable<LifeSpanHandler_DoClose_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LifeSpanHandler_DoClose_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LifeSpanHandler_DoClose_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LifeSpanHandler_DoClose_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LifeSpanHandler_DoClose_result.class, metaDataMap);
    }

    public LifeSpanHandler_DoClose_result() {
    }

    public LifeSpanHandler_DoClose_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LifeSpanHandler_DoClose_result(LifeSpanHandler_DoClose_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public LifeSpanHandler_DoClose_result deepCopy() {
      return new LifeSpanHandler_DoClose_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public LifeSpanHandler_DoClose_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LifeSpanHandler_DoClose_result)
        return this.equals((LifeSpanHandler_DoClose_result)that);
      return false;
    }

    public boolean equals(LifeSpanHandler_DoClose_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(LifeSpanHandler_DoClose_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LifeSpanHandler_DoClose_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LifeSpanHandler_DoClose_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_DoClose_resultStandardScheme getScheme() {
        return new LifeSpanHandler_DoClose_resultStandardScheme();
      }
    }

    private static class LifeSpanHandler_DoClose_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<LifeSpanHandler_DoClose_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LifeSpanHandler_DoClose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LifeSpanHandler_DoClose_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LifeSpanHandler_DoClose_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_DoClose_resultTupleScheme getScheme() {
        return new LifeSpanHandler_DoClose_resultTupleScheme();
      }
    }

    private static class LifeSpanHandler_DoClose_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<LifeSpanHandler_DoClose_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_DoClose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_DoClose_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LifeSpanHandler_OnBeforeClose_args implements org.apache.thrift.TBase<LifeSpanHandler_OnBeforeClose_args, LifeSpanHandler_OnBeforeClose_args._Fields>, java.io.Serializable, Cloneable, Comparable<LifeSpanHandler_OnBeforeClose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LifeSpanHandler_OnBeforeClose_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LifeSpanHandler_OnBeforeClose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LifeSpanHandler_OnBeforeClose_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LifeSpanHandler_OnBeforeClose_args.class, metaDataMap);
    }

    public LifeSpanHandler_OnBeforeClose_args() {
    }

    public LifeSpanHandler_OnBeforeClose_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LifeSpanHandler_OnBeforeClose_args(LifeSpanHandler_OnBeforeClose_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public LifeSpanHandler_OnBeforeClose_args deepCopy() {
      return new LifeSpanHandler_OnBeforeClose_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public LifeSpanHandler_OnBeforeClose_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LifeSpanHandler_OnBeforeClose_args)
        return this.equals((LifeSpanHandler_OnBeforeClose_args)that);
      return false;
    }

    public boolean equals(LifeSpanHandler_OnBeforeClose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(LifeSpanHandler_OnBeforeClose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LifeSpanHandler_OnBeforeClose_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LifeSpanHandler_OnBeforeClose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnBeforeClose_argsStandardScheme getScheme() {
        return new LifeSpanHandler_OnBeforeClose_argsStandardScheme();
      }
    }

    private static class LifeSpanHandler_OnBeforeClose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LifeSpanHandler_OnBeforeClose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LifeSpanHandler_OnBeforeClose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LifeSpanHandler_OnBeforeClose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LifeSpanHandler_OnBeforeClose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LifeSpanHandler_OnBeforeClose_argsTupleScheme getScheme() {
        return new LifeSpanHandler_OnBeforeClose_argsTupleScheme();
      }
    }

    private static class LifeSpanHandler_OnBeforeClose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LifeSpanHandler_OnBeforeClose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnBeforeClose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LifeSpanHandler_OnBeforeClose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LoadHandler_OnLoadingStateChange_args implements org.apache.thrift.TBase<LoadHandler_OnLoadingStateChange_args, LoadHandler_OnLoadingStateChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<LoadHandler_OnLoadingStateChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadHandler_OnLoadingStateChange_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField IS_LOADING_FIELD_DESC = new org.apache.thrift.protocol.TField("isLoading", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField CAN_GO_BACK_FIELD_DESC = new org.apache.thrift.protocol.TField("canGoBack", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField CAN_GO_FORWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("canGoForward", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoadHandler_OnLoadingStateChange_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoadHandler_OnLoadingStateChange_argsTupleSchemeFactory();

    public int bid; // required
    public boolean isLoading; // required
    public boolean canGoBack; // required
    public boolean canGoForward; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      IS_LOADING((short)2, "isLoading"),
      CAN_GO_BACK((short)3, "canGoBack"),
      CAN_GO_FORWARD((short)4, "canGoForward");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // IS_LOADING
            return IS_LOADING;
          case 3: // CAN_GO_BACK
            return CAN_GO_BACK;
          case 4: // CAN_GO_FORWARD
            return CAN_GO_FORWARD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __ISLOADING_ISSET_ID = 1;
    private static final int __CANGOBACK_ISSET_ID = 2;
    private static final int __CANGOFORWARD_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_LOADING, new org.apache.thrift.meta_data.FieldMetaData("isLoading", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CAN_GO_BACK, new org.apache.thrift.meta_data.FieldMetaData("canGoBack", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CAN_GO_FORWARD, new org.apache.thrift.meta_data.FieldMetaData("canGoForward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadHandler_OnLoadingStateChange_args.class, metaDataMap);
    }

    public LoadHandler_OnLoadingStateChange_args() {
    }

    public LoadHandler_OnLoadingStateChange_args(
      int bid,
      boolean isLoading,
      boolean canGoBack,
      boolean canGoForward)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.isLoading = isLoading;
      setIsLoadingIsSet(true);
      this.canGoBack = canGoBack;
      setCanGoBackIsSet(true);
      this.canGoForward = canGoForward;
      setCanGoForwardIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadHandler_OnLoadingStateChange_args(LoadHandler_OnLoadingStateChange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.isLoading = other.isLoading;
      this.canGoBack = other.canGoBack;
      this.canGoForward = other.canGoForward;
    }

    @Override
    public LoadHandler_OnLoadingStateChange_args deepCopy() {
      return new LoadHandler_OnLoadingStateChange_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setIsLoadingIsSet(false);
      this.isLoading = false;
      setCanGoBackIsSet(false);
      this.canGoBack = false;
      setCanGoForwardIsSet(false);
      this.canGoForward = false;
    }

    public int getBid() {
      return this.bid;
    }

    public LoadHandler_OnLoadingStateChange_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public boolean isIsLoading() {
      return this.isLoading;
    }

    public LoadHandler_OnLoadingStateChange_args setIsLoading(boolean isLoading) {
      this.isLoading = isLoading;
      setIsLoadingIsSet(true);
      return this;
    }

    public void unsetIsLoading() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLOADING_ISSET_ID);
    }

    /** Returns true if field isLoading is set (has been assigned a value) and false otherwise */
    public boolean isSetIsLoading() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLOADING_ISSET_ID);
    }

    public void setIsLoadingIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLOADING_ISSET_ID, value);
    }

    public boolean isCanGoBack() {
      return this.canGoBack;
    }

    public LoadHandler_OnLoadingStateChange_args setCanGoBack(boolean canGoBack) {
      this.canGoBack = canGoBack;
      setCanGoBackIsSet(true);
      return this;
    }

    public void unsetCanGoBack() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANGOBACK_ISSET_ID);
    }

    /** Returns true if field canGoBack is set (has been assigned a value) and false otherwise */
    public boolean isSetCanGoBack() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANGOBACK_ISSET_ID);
    }

    public void setCanGoBackIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANGOBACK_ISSET_ID, value);
    }

    public boolean isCanGoForward() {
      return this.canGoForward;
    }

    public LoadHandler_OnLoadingStateChange_args setCanGoForward(boolean canGoForward) {
      this.canGoForward = canGoForward;
      setCanGoForwardIsSet(true);
      return this;
    }

    public void unsetCanGoForward() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANGOFORWARD_ISSET_ID);
    }

    /** Returns true if field canGoForward is set (has been assigned a value) and false otherwise */
    public boolean isSetCanGoForward() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANGOFORWARD_ISSET_ID);
    }

    public void setCanGoForwardIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANGOFORWARD_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case IS_LOADING:
        if (value == null) {
          unsetIsLoading();
        } else {
          setIsLoading((java.lang.Boolean)value);
        }
        break;

      case CAN_GO_BACK:
        if (value == null) {
          unsetCanGoBack();
        } else {
          setCanGoBack((java.lang.Boolean)value);
        }
        break;

      case CAN_GO_FORWARD:
        if (value == null) {
          unsetCanGoForward();
        } else {
          setCanGoForward((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case IS_LOADING:
        return isIsLoading();

      case CAN_GO_BACK:
        return isCanGoBack();

      case CAN_GO_FORWARD:
        return isCanGoForward();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case IS_LOADING:
        return isSetIsLoading();
      case CAN_GO_BACK:
        return isSetCanGoBack();
      case CAN_GO_FORWARD:
        return isSetCanGoForward();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LoadHandler_OnLoadingStateChange_args)
        return this.equals((LoadHandler_OnLoadingStateChange_args)that);
      return false;
    }

    public boolean equals(LoadHandler_OnLoadingStateChange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_isLoading = true;
      boolean that_present_isLoading = true;
      if (this_present_isLoading || that_present_isLoading) {
        if (!(this_present_isLoading && that_present_isLoading))
          return false;
        if (this.isLoading != that.isLoading)
          return false;
      }

      boolean this_present_canGoBack = true;
      boolean that_present_canGoBack = true;
      if (this_present_canGoBack || that_present_canGoBack) {
        if (!(this_present_canGoBack && that_present_canGoBack))
          return false;
        if (this.canGoBack != that.canGoBack)
          return false;
      }

      boolean this_present_canGoForward = true;
      boolean that_present_canGoForward = true;
      if (this_present_canGoForward || that_present_canGoForward) {
        if (!(this_present_canGoForward && that_present_canGoForward))
          return false;
        if (this.canGoForward != that.canGoForward)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isLoading) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((canGoBack) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((canGoForward) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(LoadHandler_OnLoadingStateChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsLoading(), other.isSetIsLoading());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsLoading()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLoading, other.isLoading);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCanGoBack(), other.isSetCanGoBack());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCanGoBack()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canGoBack, other.canGoBack);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCanGoForward(), other.isSetCanGoForward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCanGoForward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.canGoForward, other.canGoForward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LoadHandler_OnLoadingStateChange_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isLoading:");
      sb.append(this.isLoading);
      first = false;
      if (!first) sb.append(", ");
      sb.append("canGoBack:");
      sb.append(this.canGoBack);
      first = false;
      if (!first) sb.append(", ");
      sb.append("canGoForward:");
      sb.append(this.canGoForward);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LoadHandler_OnLoadingStateChange_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadingStateChange_argsStandardScheme getScheme() {
        return new LoadHandler_OnLoadingStateChange_argsStandardScheme();
      }
    }

    private static class LoadHandler_OnLoadingStateChange_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoadHandler_OnLoadingStateChange_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadHandler_OnLoadingStateChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_LOADING
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isLoading = iprot.readBool();
                struct.setIsLoadingIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CAN_GO_BACK
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.canGoBack = iprot.readBool();
                struct.setCanGoBackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CAN_GO_FORWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.canGoForward = iprot.readBool();
                struct.setCanGoForwardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadHandler_OnLoadingStateChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_LOADING_FIELD_DESC);
        oprot.writeBool(struct.isLoading);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CAN_GO_BACK_FIELD_DESC);
        oprot.writeBool(struct.canGoBack);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CAN_GO_FORWARD_FIELD_DESC);
        oprot.writeBool(struct.canGoForward);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadHandler_OnLoadingStateChange_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadingStateChange_argsTupleScheme getScheme() {
        return new LoadHandler_OnLoadingStateChange_argsTupleScheme();
      }
    }

    private static class LoadHandler_OnLoadingStateChange_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoadHandler_OnLoadingStateChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadingStateChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetIsLoading()) {
          optionals.set(1);
        }
        if (struct.isSetCanGoBack()) {
          optionals.set(2);
        }
        if (struct.isSetCanGoForward()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetIsLoading()) {
          oprot.writeBool(struct.isLoading);
        }
        if (struct.isSetCanGoBack()) {
          oprot.writeBool(struct.canGoBack);
        }
        if (struct.isSetCanGoForward()) {
          oprot.writeBool(struct.canGoForward);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadingStateChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isLoading = iprot.readBool();
          struct.setIsLoadingIsSet(true);
        }
        if (incoming.get(2)) {
          struct.canGoBack = iprot.readBool();
          struct.setCanGoBackIsSet(true);
        }
        if (incoming.get(3)) {
          struct.canGoForward = iprot.readBool();
          struct.setCanGoForwardIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LoadHandler_OnLoadStart_args implements org.apache.thrift.TBase<LoadHandler_OnLoadStart_args, LoadHandler_OnLoadStart_args._Fields>, java.io.Serializable, Cloneable, Comparable<LoadHandler_OnLoadStart_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadHandler_OnLoadStart_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transition_type", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoadHandler_OnLoadStart_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoadHandler_OnLoadStart_argsTupleSchemeFactory();

    public int bid; // required
    public int transition_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      TRANSITION_TYPE((short)2, "transition_type");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // TRANSITION_TYPE
            return TRANSITION_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __TRANSITION_TYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TRANSITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transition_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadHandler_OnLoadStart_args.class, metaDataMap);
    }

    public LoadHandler_OnLoadStart_args() {
    }

    public LoadHandler_OnLoadStart_args(
      int bid,
      int transition_type)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.transition_type = transition_type;
      setTransition_typeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadHandler_OnLoadStart_args(LoadHandler_OnLoadStart_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.transition_type = other.transition_type;
    }

    @Override
    public LoadHandler_OnLoadStart_args deepCopy() {
      return new LoadHandler_OnLoadStart_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setTransition_typeIsSet(false);
      this.transition_type = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public LoadHandler_OnLoadStart_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getTransition_type() {
      return this.transition_type;
    }

    public LoadHandler_OnLoadStart_args setTransition_type(int transition_type) {
      this.transition_type = transition_type;
      setTransition_typeIsSet(true);
      return this;
    }

    public void unsetTransition_type() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSITION_TYPE_ISSET_ID);
    }

    /** Returns true if field transition_type is set (has been assigned a value) and false otherwise */
    public boolean isSetTransition_type() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSITION_TYPE_ISSET_ID);
    }

    public void setTransition_typeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSITION_TYPE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case TRANSITION_TYPE:
        if (value == null) {
          unsetTransition_type();
        } else {
          setTransition_type((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case TRANSITION_TYPE:
        return getTransition_type();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case TRANSITION_TYPE:
        return isSetTransition_type();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LoadHandler_OnLoadStart_args)
        return this.equals((LoadHandler_OnLoadStart_args)that);
      return false;
    }

    public boolean equals(LoadHandler_OnLoadStart_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_transition_type = true;
      boolean that_present_transition_type = true;
      if (this_present_transition_type || that_present_transition_type) {
        if (!(this_present_transition_type && that_present_transition_type))
          return false;
        if (this.transition_type != that.transition_type)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + transition_type;

      return hashCode;
    }

    @Override
    public int compareTo(LoadHandler_OnLoadStart_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTransition_type(), other.isSetTransition_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransition_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transition_type, other.transition_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LoadHandler_OnLoadStart_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("transition_type:");
      sb.append(this.transition_type);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LoadHandler_OnLoadStart_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadStart_argsStandardScheme getScheme() {
        return new LoadHandler_OnLoadStart_argsStandardScheme();
      }
    }

    private static class LoadHandler_OnLoadStart_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoadHandler_OnLoadStart_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadHandler_OnLoadStart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSITION_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.transition_type = iprot.readI32();
                struct.setTransition_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadHandler_OnLoadStart_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TRANSITION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.transition_type);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadHandler_OnLoadStart_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadStart_argsTupleScheme getScheme() {
        return new LoadHandler_OnLoadStart_argsTupleScheme();
      }
    }

    private static class LoadHandler_OnLoadStart_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoadHandler_OnLoadStart_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadStart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetTransition_type()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetTransition_type()) {
          oprot.writeI32(struct.transition_type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadStart_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transition_type = iprot.readI32();
          struct.setTransition_typeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LoadHandler_OnLoadEnd_args implements org.apache.thrift.TBase<LoadHandler_OnLoadEnd_args, LoadHandler_OnLoadEnd_args._Fields>, java.io.Serializable, Cloneable, Comparable<LoadHandler_OnLoadEnd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadHandler_OnLoadEnd_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HTTP_STATUS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("httpStatusCode", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoadHandler_OnLoadEnd_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoadHandler_OnLoadEnd_argsTupleSchemeFactory();

    public int bid; // required
    public int httpStatusCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      HTTP_STATUS_CODE((short)2, "httpStatusCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // HTTP_STATUS_CODE
            return HTTP_STATUS_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __HTTPSTATUSCODE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HTTP_STATUS_CODE, new org.apache.thrift.meta_data.FieldMetaData("httpStatusCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadHandler_OnLoadEnd_args.class, metaDataMap);
    }

    public LoadHandler_OnLoadEnd_args() {
    }

    public LoadHandler_OnLoadEnd_args(
      int bid,
      int httpStatusCode)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.httpStatusCode = httpStatusCode;
      setHttpStatusCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadHandler_OnLoadEnd_args(LoadHandler_OnLoadEnd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.httpStatusCode = other.httpStatusCode;
    }

    @Override
    public LoadHandler_OnLoadEnd_args deepCopy() {
      return new LoadHandler_OnLoadEnd_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setHttpStatusCodeIsSet(false);
      this.httpStatusCode = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public LoadHandler_OnLoadEnd_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getHttpStatusCode() {
      return this.httpStatusCode;
    }

    public LoadHandler_OnLoadEnd_args setHttpStatusCode(int httpStatusCode) {
      this.httpStatusCode = httpStatusCode;
      setHttpStatusCodeIsSet(true);
      return this;
    }

    public void unsetHttpStatusCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HTTPSTATUSCODE_ISSET_ID);
    }

    /** Returns true if field httpStatusCode is set (has been assigned a value) and false otherwise */
    public boolean isSetHttpStatusCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HTTPSTATUSCODE_ISSET_ID);
    }

    public void setHttpStatusCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HTTPSTATUSCODE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case HTTP_STATUS_CODE:
        if (value == null) {
          unsetHttpStatusCode();
        } else {
          setHttpStatusCode((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case HTTP_STATUS_CODE:
        return getHttpStatusCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case HTTP_STATUS_CODE:
        return isSetHttpStatusCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LoadHandler_OnLoadEnd_args)
        return this.equals((LoadHandler_OnLoadEnd_args)that);
      return false;
    }

    public boolean equals(LoadHandler_OnLoadEnd_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_httpStatusCode = true;
      boolean that_present_httpStatusCode = true;
      if (this_present_httpStatusCode || that_present_httpStatusCode) {
        if (!(this_present_httpStatusCode && that_present_httpStatusCode))
          return false;
        if (this.httpStatusCode != that.httpStatusCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + httpStatusCode;

      return hashCode;
    }

    @Override
    public int compareTo(LoadHandler_OnLoadEnd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHttpStatusCode(), other.isSetHttpStatusCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHttpStatusCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.httpStatusCode, other.httpStatusCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LoadHandler_OnLoadEnd_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("httpStatusCode:");
      sb.append(this.httpStatusCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LoadHandler_OnLoadEnd_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadEnd_argsStandardScheme getScheme() {
        return new LoadHandler_OnLoadEnd_argsStandardScheme();
      }
    }

    private static class LoadHandler_OnLoadEnd_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoadHandler_OnLoadEnd_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadHandler_OnLoadEnd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HTTP_STATUS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.httpStatusCode = iprot.readI32();
                struct.setHttpStatusCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadHandler_OnLoadEnd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HTTP_STATUS_CODE_FIELD_DESC);
        oprot.writeI32(struct.httpStatusCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadHandler_OnLoadEnd_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadEnd_argsTupleScheme getScheme() {
        return new LoadHandler_OnLoadEnd_argsTupleScheme();
      }
    }

    private static class LoadHandler_OnLoadEnd_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoadHandler_OnLoadEnd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadEnd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetHttpStatusCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetHttpStatusCode()) {
          oprot.writeI32(struct.httpStatusCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadEnd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.httpStatusCode = iprot.readI32();
          struct.setHttpStatusCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class LoadHandler_OnLoadError_args implements org.apache.thrift.TBase<LoadHandler_OnLoadError_args, LoadHandler_OnLoadError_args._Fields>, java.io.Serializable, Cloneable, Comparable<LoadHandler_OnLoadError_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoadHandler_OnLoadError_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ERROR_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("errorText", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FAILED_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("failedUrl", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LoadHandler_OnLoadError_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LoadHandler_OnLoadError_argsTupleSchemeFactory();

    public int bid; // required
    public int errorCode; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String errorText; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String failedUrl; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      ERROR_CODE((short)2, "errorCode"),
      ERROR_TEXT((short)3, "errorText"),
      FAILED_URL((short)4, "failedUrl");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // ERROR_CODE
            return ERROR_CODE;
          case 3: // ERROR_TEXT
            return ERROR_TEXT;
          case 4: // FAILED_URL
            return FAILED_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __ERRORCODE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERROR_TEXT, new org.apache.thrift.meta_data.FieldMetaData("errorText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAILED_URL, new org.apache.thrift.meta_data.FieldMetaData("failedUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoadHandler_OnLoadError_args.class, metaDataMap);
    }

    public LoadHandler_OnLoadError_args() {
    }

    public LoadHandler_OnLoadError_args(
      int bid,
      int errorCode,
      java.lang.String errorText,
      java.lang.String failedUrl)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      this.errorText = errorText;
      this.failedUrl = failedUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public LoadHandler_OnLoadError_args(LoadHandler_OnLoadError_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.errorCode = other.errorCode;
      if (other.isSetErrorText()) {
        this.errorText = other.errorText;
      }
      if (other.isSetFailedUrl()) {
        this.failedUrl = other.failedUrl;
      }
    }

    @Override
    public LoadHandler_OnLoadError_args deepCopy() {
      return new LoadHandler_OnLoadError_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setErrorCodeIsSet(false);
      this.errorCode = 0;
      this.errorText = null;
      this.failedUrl = null;
    }

    public int getBid() {
      return this.bid;
    }

    public LoadHandler_OnLoadError_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getErrorCode() {
      return this.errorCode;
    }

    public LoadHandler_OnLoadError_args setErrorCode(int errorCode) {
      this.errorCode = errorCode;
      setErrorCodeIsSet(true);
      return this;
    }

    public void unsetErrorCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORCODE_ISSET_ID);
    }

    public void setErrorCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORCODE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getErrorText() {
      return this.errorText;
    }

    public LoadHandler_OnLoadError_args setErrorText(@org.apache.thrift.annotation.Nullable java.lang.String errorText) {
      this.errorText = errorText;
      return this;
    }

    public void unsetErrorText() {
      this.errorText = null;
    }

    /** Returns true if field errorText is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorText() {
      return this.errorText != null;
    }

    public void setErrorTextIsSet(boolean value) {
      if (!value) {
        this.errorText = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFailedUrl() {
      return this.failedUrl;
    }

    public LoadHandler_OnLoadError_args setFailedUrl(@org.apache.thrift.annotation.Nullable java.lang.String failedUrl) {
      this.failedUrl = failedUrl;
      return this;
    }

    public void unsetFailedUrl() {
      this.failedUrl = null;
    }

    /** Returns true if field failedUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetFailedUrl() {
      return this.failedUrl != null;
    }

    public void setFailedUrlIsSet(boolean value) {
      if (!value) {
        this.failedUrl = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          setErrorCode((java.lang.Integer)value);
        }
        break;

      case ERROR_TEXT:
        if (value == null) {
          unsetErrorText();
        } else {
          setErrorText((java.lang.String)value);
        }
        break;

      case FAILED_URL:
        if (value == null) {
          unsetFailedUrl();
        } else {
          setFailedUrl((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case ERROR_CODE:
        return getErrorCode();

      case ERROR_TEXT:
        return getErrorText();

      case FAILED_URL:
        return getFailedUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case ERROR_CODE:
        return isSetErrorCode();
      case ERROR_TEXT:
        return isSetErrorText();
      case FAILED_URL:
        return isSetFailedUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof LoadHandler_OnLoadError_args)
        return this.equals((LoadHandler_OnLoadError_args)that);
      return false;
    }

    public boolean equals(LoadHandler_OnLoadError_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_errorCode = true;
      boolean that_present_errorCode = true;
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (this.errorCode != that.errorCode)
          return false;
      }

      boolean this_present_errorText = true && this.isSetErrorText();
      boolean that_present_errorText = true && that.isSetErrorText();
      if (this_present_errorText || that_present_errorText) {
        if (!(this_present_errorText && that_present_errorText))
          return false;
        if (!this.errorText.equals(that.errorText))
          return false;
      }

      boolean this_present_failedUrl = true && this.isSetFailedUrl();
      boolean that_present_failedUrl = true && that.isSetFailedUrl();
      if (this_present_failedUrl || that_present_failedUrl) {
        if (!(this_present_failedUrl && that_present_failedUrl))
          return false;
        if (!this.failedUrl.equals(that.failedUrl))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + errorCode;

      hashCode = hashCode * 8191 + ((isSetErrorText()) ? 131071 : 524287);
      if (isSetErrorText())
        hashCode = hashCode * 8191 + errorText.hashCode();

      hashCode = hashCode * 8191 + ((isSetFailedUrl()) ? 131071 : 524287);
      if (isSetFailedUrl())
        hashCode = hashCode * 8191 + failedUrl.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(LoadHandler_OnLoadError_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorText(), other.isSetErrorText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorText, other.errorText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFailedUrl(), other.isSetFailedUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFailedUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failedUrl, other.failedUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("LoadHandler_OnLoadError_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      sb.append(this.errorCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorText:");
      if (this.errorText == null) {
        sb.append("null");
      } else {
        sb.append(this.errorText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("failedUrl:");
      if (this.failedUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.failedUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class LoadHandler_OnLoadError_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadError_argsStandardScheme getScheme() {
        return new LoadHandler_OnLoadError_argsStandardScheme();
      }
    }

    private static class LoadHandler_OnLoadError_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<LoadHandler_OnLoadError_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, LoadHandler_OnLoadError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorCode = iprot.readI32();
                struct.setErrorCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERROR_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.errorText = iprot.readString();
                struct.setErrorTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FAILED_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.failedUrl = iprot.readString();
                struct.setFailedUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, LoadHandler_OnLoadError_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.errorCode);
        oprot.writeFieldEnd();
        if (struct.errorText != null) {
          oprot.writeFieldBegin(ERROR_TEXT_FIELD_DESC);
          oprot.writeString(struct.errorText);
          oprot.writeFieldEnd();
        }
        if (struct.failedUrl != null) {
          oprot.writeFieldBegin(FAILED_URL_FIELD_DESC);
          oprot.writeString(struct.failedUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class LoadHandler_OnLoadError_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public LoadHandler_OnLoadError_argsTupleScheme getScheme() {
        return new LoadHandler_OnLoadError_argsTupleScheme();
      }
    }

    private static class LoadHandler_OnLoadError_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<LoadHandler_OnLoadError_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetErrorCode()) {
          optionals.set(1);
        }
        if (struct.isSetErrorText()) {
          optionals.set(2);
        }
        if (struct.isSetFailedUrl()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetErrorCode()) {
          oprot.writeI32(struct.errorCode);
        }
        if (struct.isSetErrorText()) {
          oprot.writeString(struct.errorText);
        }
        if (struct.isSetFailedUrl()) {
          oprot.writeString(struct.failedUrl);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, LoadHandler_OnLoadError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.errorCode = iprot.readI32();
          struct.setErrorCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.errorText = iprot.readString();
          struct.setErrorTextIsSet(true);
        }
        if (incoming.get(3)) {
          struct.failedUrl = iprot.readString();
          struct.setFailedUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DisplayHandler_OnAddressChange_args implements org.apache.thrift.TBase<DisplayHandler_OnAddressChange_args, DisplayHandler_OnAddressChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<DisplayHandler_OnAddressChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayHandler_OnAddressChange_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DisplayHandler_OnAddressChange_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DisplayHandler_OnAddressChange_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      URL((short)2, "url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayHandler_OnAddressChange_args.class, metaDataMap);
    }

    public DisplayHandler_OnAddressChange_args() {
    }

    public DisplayHandler_OnAddressChange_args(
      int bid,
      java.lang.String url)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisplayHandler_OnAddressChange_args(DisplayHandler_OnAddressChange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    @Override
    public DisplayHandler_OnAddressChange_args deepCopy() {
      return new DisplayHandler_OnAddressChange_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.url = null;
    }

    public int getBid() {
      return this.bid;
    }

    public DisplayHandler_OnAddressChange_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public DisplayHandler_OnAddressChange_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case URL:
        return getUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case URL:
        return isSetUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DisplayHandler_OnAddressChange_args)
        return this.equals((DisplayHandler_OnAddressChange_args)that);
      return false;
    }

    public boolean equals(DisplayHandler_OnAddressChange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DisplayHandler_OnAddressChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DisplayHandler_OnAddressChange_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisplayHandler_OnAddressChange_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnAddressChange_argsStandardScheme getScheme() {
        return new DisplayHandler_OnAddressChange_argsStandardScheme();
      }
    }

    private static class DisplayHandler_OnAddressChange_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DisplayHandler_OnAddressChange_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayHandler_OnAddressChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayHandler_OnAddressChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisplayHandler_OnAddressChange_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnAddressChange_argsTupleScheme getScheme() {
        return new DisplayHandler_OnAddressChange_argsTupleScheme();
      }
    }

    private static class DisplayHandler_OnAddressChange_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DisplayHandler_OnAddressChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnAddressChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnAddressChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DisplayHandler_OnTitleChange_args implements org.apache.thrift.TBase<DisplayHandler_OnTitleChange_args, DisplayHandler_OnTitleChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<DisplayHandler_OnTitleChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayHandler_OnTitleChange_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DisplayHandler_OnTitleChange_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DisplayHandler_OnTitleChange_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String title; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      TITLE((short)2, "title");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // TITLE
            return TITLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayHandler_OnTitleChange_args.class, metaDataMap);
    }

    public DisplayHandler_OnTitleChange_args() {
    }

    public DisplayHandler_OnTitleChange_args(
      int bid,
      java.lang.String title)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.title = title;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisplayHandler_OnTitleChange_args(DisplayHandler_OnTitleChange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetTitle()) {
        this.title = other.title;
      }
    }

    @Override
    public DisplayHandler_OnTitleChange_args deepCopy() {
      return new DisplayHandler_OnTitleChange_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.title = null;
    }

    public int getBid() {
      return this.bid;
    }

    public DisplayHandler_OnTitleChange_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTitle() {
      return this.title;
    }

    public DisplayHandler_OnTitleChange_args setTitle(@org.apache.thrift.annotation.Nullable java.lang.String title) {
      this.title = title;
      return this;
    }

    public void unsetTitle() {
      this.title = null;
    }

    /** Returns true if field title is set (has been assigned a value) and false otherwise */
    public boolean isSetTitle() {
      return this.title != null;
    }

    public void setTitleIsSet(boolean value) {
      if (!value) {
        this.title = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          setTitle((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case TITLE:
        return getTitle();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case TITLE:
        return isSetTitle();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DisplayHandler_OnTitleChange_args)
        return this.equals((DisplayHandler_OnTitleChange_args)that);
      return false;
    }

    public boolean equals(DisplayHandler_OnTitleChange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_title = true && this.isSetTitle();
      boolean that_present_title = true && that.isSetTitle();
      if (this_present_title || that_present_title) {
        if (!(this_present_title && that_present_title))
          return false;
        if (!this.title.equals(that.title))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
      if (isSetTitle())
        hashCode = hashCode * 8191 + title.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DisplayHandler_OnTitleChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTitle(), other.isSetTitle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTitle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DisplayHandler_OnTitleChange_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisplayHandler_OnTitleChange_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnTitleChange_argsStandardScheme getScheme() {
        return new DisplayHandler_OnTitleChange_argsStandardScheme();
      }
    }

    private static class DisplayHandler_OnTitleChange_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DisplayHandler_OnTitleChange_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayHandler_OnTitleChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TITLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.title = iprot.readString();
                struct.setTitleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayHandler_OnTitleChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.title != null) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisplayHandler_OnTitleChange_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnTitleChange_argsTupleScheme getScheme() {
        return new DisplayHandler_OnTitleChange_argsTupleScheme();
      }
    }

    private static class DisplayHandler_OnTitleChange_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DisplayHandler_OnTitleChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnTitleChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetTitle()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetTitle()) {
          oprot.writeString(struct.title);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnTitleChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.title = iprot.readString();
          struct.setTitleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DisplayHandler_OnTooltip_args implements org.apache.thrift.TBase<DisplayHandler_OnTooltip_args, DisplayHandler_OnTooltip_args._Fields>, java.io.Serializable, Cloneable, Comparable<DisplayHandler_OnTooltip_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayHandler_OnTooltip_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DisplayHandler_OnTooltip_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DisplayHandler_OnTooltip_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String text; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      TEXT((short)2, "text");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // TEXT
            return TEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayHandler_OnTooltip_args.class, metaDataMap);
    }

    public DisplayHandler_OnTooltip_args() {
    }

    public DisplayHandler_OnTooltip_args(
      int bid,
      java.lang.String text)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.text = text;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisplayHandler_OnTooltip_args(DisplayHandler_OnTooltip_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetText()) {
        this.text = other.text;
      }
    }

    @Override
    public DisplayHandler_OnTooltip_args deepCopy() {
      return new DisplayHandler_OnTooltip_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.text = null;
    }

    public int getBid() {
      return this.bid;
    }

    public DisplayHandler_OnTooltip_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getText() {
      return this.text;
    }

    public DisplayHandler_OnTooltip_args setText(@org.apache.thrift.annotation.Nullable java.lang.String text) {
      this.text = text;
      return this;
    }

    public void unsetText() {
      this.text = null;
    }

    /** Returns true if field text is set (has been assigned a value) and false otherwise */
    public boolean isSetText() {
      return this.text != null;
    }

    public void setTextIsSet(boolean value) {
      if (!value) {
        this.text = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          setText((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case TEXT:
        return getText();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case TEXT:
        return isSetText();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DisplayHandler_OnTooltip_args)
        return this.equals((DisplayHandler_OnTooltip_args)that);
      return false;
    }

    public boolean equals(DisplayHandler_OnTooltip_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_text = true && this.isSetText();
      boolean that_present_text = true && that.isSetText();
      if (this_present_text || that_present_text) {
        if (!(this_present_text && that_present_text))
          return false;
        if (!this.text.equals(that.text))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetText()) ? 131071 : 524287);
      if (isSetText())
        hashCode = hashCode * 8191 + text.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DisplayHandler_OnTooltip_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetText(), other.isSetText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, other.text);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DisplayHandler_OnTooltip_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisplayHandler_OnTooltip_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnTooltip_argsStandardScheme getScheme() {
        return new DisplayHandler_OnTooltip_argsStandardScheme();
      }
    }

    private static class DisplayHandler_OnTooltip_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DisplayHandler_OnTooltip_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayHandler_OnTooltip_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.text = iprot.readString();
                struct.setTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayHandler_OnTooltip_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.text != null) {
          oprot.writeFieldBegin(TEXT_FIELD_DESC);
          oprot.writeString(struct.text);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisplayHandler_OnTooltip_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnTooltip_argsTupleScheme getScheme() {
        return new DisplayHandler_OnTooltip_argsTupleScheme();
      }
    }

    private static class DisplayHandler_OnTooltip_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DisplayHandler_OnTooltip_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnTooltip_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetText()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetText()) {
          oprot.writeString(struct.text);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnTooltip_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.text = iprot.readString();
          struct.setTextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DisplayHandler_OnTooltip_result implements org.apache.thrift.TBase<DisplayHandler_OnTooltip_result, DisplayHandler_OnTooltip_result._Fields>, java.io.Serializable, Cloneable, Comparable<DisplayHandler_OnTooltip_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayHandler_OnTooltip_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DisplayHandler_OnTooltip_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DisplayHandler_OnTooltip_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayHandler_OnTooltip_result.class, metaDataMap);
    }

    public DisplayHandler_OnTooltip_result() {
    }

    public DisplayHandler_OnTooltip_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisplayHandler_OnTooltip_result(DisplayHandler_OnTooltip_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public DisplayHandler_OnTooltip_result deepCopy() {
      return new DisplayHandler_OnTooltip_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public DisplayHandler_OnTooltip_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DisplayHandler_OnTooltip_result)
        return this.equals((DisplayHandler_OnTooltip_result)that);
      return false;
    }

    public boolean equals(DisplayHandler_OnTooltip_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(DisplayHandler_OnTooltip_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DisplayHandler_OnTooltip_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisplayHandler_OnTooltip_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnTooltip_resultStandardScheme getScheme() {
        return new DisplayHandler_OnTooltip_resultStandardScheme();
      }
    }

    private static class DisplayHandler_OnTooltip_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DisplayHandler_OnTooltip_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayHandler_OnTooltip_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayHandler_OnTooltip_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisplayHandler_OnTooltip_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnTooltip_resultTupleScheme getScheme() {
        return new DisplayHandler_OnTooltip_resultTupleScheme();
      }
    }

    private static class DisplayHandler_OnTooltip_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DisplayHandler_OnTooltip_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnTooltip_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnTooltip_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DisplayHandler_OnStatusMessage_args implements org.apache.thrift.TBase<DisplayHandler_OnStatusMessage_args, DisplayHandler_OnStatusMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<DisplayHandler_OnStatusMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayHandler_OnStatusMessage_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DisplayHandler_OnStatusMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DisplayHandler_OnStatusMessage_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      VALUE((short)2, "value");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayHandler_OnStatusMessage_args.class, metaDataMap);
    }

    public DisplayHandler_OnStatusMessage_args() {
    }

    public DisplayHandler_OnStatusMessage_args(
      int bid,
      java.lang.String value)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisplayHandler_OnStatusMessage_args(DisplayHandler_OnStatusMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    @Override
    public DisplayHandler_OnStatusMessage_args deepCopy() {
      return new DisplayHandler_OnStatusMessage_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.value = null;
    }

    public int getBid() {
      return this.bid;
    }

    public DisplayHandler_OnStatusMessage_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getValue() {
      return this.value;
    }

    public DisplayHandler_OnStatusMessage_args setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case VALUE:
        return getValue();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case VALUE:
        return isSetValue();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DisplayHandler_OnStatusMessage_args)
        return this.equals((DisplayHandler_OnStatusMessage_args)that);
      return false;
    }

    public boolean equals(DisplayHandler_OnStatusMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DisplayHandler_OnStatusMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DisplayHandler_OnStatusMessage_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisplayHandler_OnStatusMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnStatusMessage_argsStandardScheme getScheme() {
        return new DisplayHandler_OnStatusMessage_argsStandardScheme();
      }
    }

    private static class DisplayHandler_OnStatusMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DisplayHandler_OnStatusMessage_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayHandler_OnStatusMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayHandler_OnStatusMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisplayHandler_OnStatusMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnStatusMessage_argsTupleScheme getScheme() {
        return new DisplayHandler_OnStatusMessage_argsTupleScheme();
      }
    }

    private static class DisplayHandler_OnStatusMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DisplayHandler_OnStatusMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnStatusMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnStatusMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DisplayHandler_OnConsoleMessage_args implements org.apache.thrift.TBase<DisplayHandler_OnConsoleMessage_args, DisplayHandler_OnConsoleMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<DisplayHandler_OnConsoleMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayHandler_OnConsoleMessage_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DisplayHandler_OnConsoleMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DisplayHandler_OnConsoleMessage_argsTupleSchemeFactory();

    public int bid; // required
    public int level; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String message; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String source; // required
    public int line; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      LEVEL((short)2, "level"),
      MESSAGE((short)3, "message"),
      SOURCE((short)4, "source"),
      LINE((short)5, "line");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // LEVEL
            return LEVEL;
          case 3: // MESSAGE
            return MESSAGE;
          case 4: // SOURCE
            return SOURCE;
          case 5: // LINE
            return LINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __LEVEL_ISSET_ID = 1;
    private static final int __LINE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayHandler_OnConsoleMessage_args.class, metaDataMap);
    }

    public DisplayHandler_OnConsoleMessage_args() {
    }

    public DisplayHandler_OnConsoleMessage_args(
      int bid,
      int level,
      java.lang.String message,
      java.lang.String source,
      int line)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.level = level;
      setLevelIsSet(true);
      this.message = message;
      this.source = source;
      this.line = line;
      setLineIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisplayHandler_OnConsoleMessage_args(DisplayHandler_OnConsoleMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.level = other.level;
      if (other.isSetMessage()) {
        this.message = other.message;
      }
      if (other.isSetSource()) {
        this.source = other.source;
      }
      this.line = other.line;
    }

    @Override
    public DisplayHandler_OnConsoleMessage_args deepCopy() {
      return new DisplayHandler_OnConsoleMessage_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setLevelIsSet(false);
      this.level = 0;
      this.message = null;
      this.source = null;
      setLineIsSet(false);
      this.line = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public DisplayHandler_OnConsoleMessage_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getLevel() {
      return this.level;
    }

    public DisplayHandler_OnConsoleMessage_args setLevel(int level) {
      this.level = level;
      setLevelIsSet(true);
      return this;
    }

    public void unsetLevel() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    /** Returns true if field level is set (has been assigned a value) and false otherwise */
    public boolean isSetLevel() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
    }

    public void setLevelIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMessage() {
      return this.message;
    }

    public DisplayHandler_OnConsoleMessage_args setMessage(@org.apache.thrift.annotation.Nullable java.lang.String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSource() {
      return this.source;
    }

    public DisplayHandler_OnConsoleMessage_args setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public int getLine() {
      return this.line;
    }

    public DisplayHandler_OnConsoleMessage_args setLine(int line) {
      this.line = line;
      setLineIsSet(true);
      return this;
    }

    public void unsetLine() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    /** Returns true if field line is set (has been assigned a value) and false otherwise */
    public boolean isSetLine() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    public void setLineIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          setLevel((java.lang.Integer)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((java.lang.String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((java.lang.String)value);
        }
        break;

      case LINE:
        if (value == null) {
          unsetLine();
        } else {
          setLine((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case LEVEL:
        return getLevel();

      case MESSAGE:
        return getMessage();

      case SOURCE:
        return getSource();

      case LINE:
        return getLine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case LEVEL:
        return isSetLevel();
      case MESSAGE:
        return isSetMessage();
      case SOURCE:
        return isSetSource();
      case LINE:
        return isSetLine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DisplayHandler_OnConsoleMessage_args)
        return this.equals((DisplayHandler_OnConsoleMessage_args)that);
      return false;
    }

    public boolean equals(DisplayHandler_OnConsoleMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_level = true;
      boolean that_present_level = true;
      if (this_present_level || that_present_level) {
        if (!(this_present_level && that_present_level))
          return false;
        if (this.level != that.level)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      boolean this_present_line = true;
      boolean that_present_line = true;
      if (this_present_line || that_present_line) {
        if (!(this_present_line && that_present_line))
          return false;
        if (this.line != that.line)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + level;

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
      if (isSetSource())
        hashCode = hashCode * 8191 + source.hashCode();

      hashCode = hashCode * 8191 + line;

      return hashCode;
    }

    @Override
    public int compareTo(DisplayHandler_OnConsoleMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLevel(), other.isSetLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSource(), other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLine(), other.isSetLine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, other.line);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DisplayHandler_OnConsoleMessage_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("line:");
      sb.append(this.line);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisplayHandler_OnConsoleMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnConsoleMessage_argsStandardScheme getScheme() {
        return new DisplayHandler_OnConsoleMessage_argsStandardScheme();
      }
    }

    private static class DisplayHandler_OnConsoleMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DisplayHandler_OnConsoleMessage_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayHandler_OnConsoleMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.level = iprot.readI32();
                struct.setLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.line = iprot.readI32();
                struct.setLineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayHandler_OnConsoleMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LINE_FIELD_DESC);
        oprot.writeI32(struct.line);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisplayHandler_OnConsoleMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnConsoleMessage_argsTupleScheme getScheme() {
        return new DisplayHandler_OnConsoleMessage_argsTupleScheme();
      }
    }

    private static class DisplayHandler_OnConsoleMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DisplayHandler_OnConsoleMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnConsoleMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetLevel()) {
          optionals.set(1);
        }
        if (struct.isSetMessage()) {
          optionals.set(2);
        }
        if (struct.isSetSource()) {
          optionals.set(3);
        }
        if (struct.isSetLine()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetLevel()) {
          oprot.writeI32(struct.level);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
        if (struct.isSetSource()) {
          oprot.writeString(struct.source);
        }
        if (struct.isSetLine()) {
          oprot.writeI32(struct.line);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnConsoleMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.level = iprot.readI32();
          struct.setLevelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
        if (incoming.get(3)) {
          struct.source = iprot.readString();
          struct.setSourceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.line = iprot.readI32();
          struct.setLineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class DisplayHandler_OnConsoleMessage_result implements org.apache.thrift.TBase<DisplayHandler_OnConsoleMessage_result, DisplayHandler_OnConsoleMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<DisplayHandler_OnConsoleMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DisplayHandler_OnConsoleMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DisplayHandler_OnConsoleMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DisplayHandler_OnConsoleMessage_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DisplayHandler_OnConsoleMessage_result.class, metaDataMap);
    }

    public DisplayHandler_OnConsoleMessage_result() {
    }

    public DisplayHandler_OnConsoleMessage_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DisplayHandler_OnConsoleMessage_result(DisplayHandler_OnConsoleMessage_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public DisplayHandler_OnConsoleMessage_result deepCopy() {
      return new DisplayHandler_OnConsoleMessage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public DisplayHandler_OnConsoleMessage_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof DisplayHandler_OnConsoleMessage_result)
        return this.equals((DisplayHandler_OnConsoleMessage_result)that);
      return false;
    }

    public boolean equals(DisplayHandler_OnConsoleMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(DisplayHandler_OnConsoleMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DisplayHandler_OnConsoleMessage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DisplayHandler_OnConsoleMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnConsoleMessage_resultStandardScheme getScheme() {
        return new DisplayHandler_OnConsoleMessage_resultStandardScheme();
      }
    }

    private static class DisplayHandler_OnConsoleMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DisplayHandler_OnConsoleMessage_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, DisplayHandler_OnConsoleMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, DisplayHandler_OnConsoleMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DisplayHandler_OnConsoleMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public DisplayHandler_OnConsoleMessage_resultTupleScheme getScheme() {
        return new DisplayHandler_OnConsoleMessage_resultTupleScheme();
      }
    }

    private static class DisplayHandler_OnConsoleMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DisplayHandler_OnConsoleMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnConsoleMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DisplayHandler_OnConsoleMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class KeyboardHandler_OnPreKeyEvent_args implements org.apache.thrift.TBase<KeyboardHandler_OnPreKeyEvent_args, KeyboardHandler_OnPreKeyEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<KeyboardHandler_OnPreKeyEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyboardHandler_OnPreKeyEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KeyboardHandler_OnPreKeyEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KeyboardHandler_OnPreKeyEvent_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.KeyEvent event; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      EVENT((short)2, "event");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // EVENT
            return EVENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.KeyEvent.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyboardHandler_OnPreKeyEvent_args.class, metaDataMap);
    }

    public KeyboardHandler_OnPreKeyEvent_args() {
    }

    public KeyboardHandler_OnPreKeyEvent_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.KeyEvent event)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.event = event;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KeyboardHandler_OnPreKeyEvent_args(KeyboardHandler_OnPreKeyEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetEvent()) {
        this.event = new com.jetbrains.cef.remote.thrift_codegen.KeyEvent(other.event);
      }
    }

    @Override
    public KeyboardHandler_OnPreKeyEvent_args deepCopy() {
      return new KeyboardHandler_OnPreKeyEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.event = null;
    }

    public int getBid() {
      return this.bid;
    }

    public KeyboardHandler_OnPreKeyEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.KeyEvent getEvent() {
      return this.event;
    }

    public KeyboardHandler_OnPreKeyEvent_args setEvent(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) {
      this.event = event;
      return this;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          setEvent((com.jetbrains.cef.remote.thrift_codegen.KeyEvent)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case EVENT:
        return getEvent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case EVENT:
        return isSetEvent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof KeyboardHandler_OnPreKeyEvent_args)
        return this.equals((KeyboardHandler_OnPreKeyEvent_args)that);
      return false;
    }

    public boolean equals(KeyboardHandler_OnPreKeyEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetEvent()) ? 131071 : 524287);
      if (isSetEvent())
        hashCode = hashCode * 8191 + event.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(KeyboardHandler_OnPreKeyEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEvent(), other.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("KeyboardHandler_OnPreKeyEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (event != null) {
        event.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class KeyboardHandler_OnPreKeyEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnPreKeyEvent_argsStandardScheme getScheme() {
        return new KeyboardHandler_OnPreKeyEvent_argsStandardScheme();
      }
    }

    private static class KeyboardHandler_OnPreKeyEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<KeyboardHandler_OnPreKeyEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, KeyboardHandler_OnPreKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.event = new com.jetbrains.cef.remote.thrift_codegen.KeyEvent();
                struct.event.read(iprot);
                struct.setEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, KeyboardHandler_OnPreKeyEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.event != null) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          struct.event.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class KeyboardHandler_OnPreKeyEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnPreKeyEvent_argsTupleScheme getScheme() {
        return new KeyboardHandler_OnPreKeyEvent_argsTupleScheme();
      }
    }

    private static class KeyboardHandler_OnPreKeyEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<KeyboardHandler_OnPreKeyEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnPreKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEvent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEvent()) {
          struct.event.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnPreKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.event = new com.jetbrains.cef.remote.thrift_codegen.KeyEvent();
          struct.event.read(iprot);
          struct.setEventIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class KeyboardHandler_OnPreKeyEvent_result implements org.apache.thrift.TBase<KeyboardHandler_OnPreKeyEvent_result, KeyboardHandler_OnPreKeyEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<KeyboardHandler_OnPreKeyEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyboardHandler_OnPreKeyEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KeyboardHandler_OnPreKeyEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KeyboardHandler_OnPreKeyEvent_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyboardHandler_OnPreKeyEvent_result.class, metaDataMap);
    }

    public KeyboardHandler_OnPreKeyEvent_result() {
    }

    public KeyboardHandler_OnPreKeyEvent_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KeyboardHandler_OnPreKeyEvent_result(KeyboardHandler_OnPreKeyEvent_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public KeyboardHandler_OnPreKeyEvent_result deepCopy() {
      return new KeyboardHandler_OnPreKeyEvent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public KeyboardHandler_OnPreKeyEvent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof KeyboardHandler_OnPreKeyEvent_result)
        return this.equals((KeyboardHandler_OnPreKeyEvent_result)that);
      return false;
    }

    public boolean equals(KeyboardHandler_OnPreKeyEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(KeyboardHandler_OnPreKeyEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("KeyboardHandler_OnPreKeyEvent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class KeyboardHandler_OnPreKeyEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnPreKeyEvent_resultStandardScheme getScheme() {
        return new KeyboardHandler_OnPreKeyEvent_resultStandardScheme();
      }
    }

    private static class KeyboardHandler_OnPreKeyEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<KeyboardHandler_OnPreKeyEvent_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, KeyboardHandler_OnPreKeyEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, KeyboardHandler_OnPreKeyEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class KeyboardHandler_OnPreKeyEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnPreKeyEvent_resultTupleScheme getScheme() {
        return new KeyboardHandler_OnPreKeyEvent_resultTupleScheme();
      }
    }

    private static class KeyboardHandler_OnPreKeyEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<KeyboardHandler_OnPreKeyEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnPreKeyEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnPreKeyEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class KeyboardHandler_OnKeyEvent_args implements org.apache.thrift.TBase<KeyboardHandler_OnKeyEvent_args, KeyboardHandler_OnKeyEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<KeyboardHandler_OnKeyEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyboardHandler_OnKeyEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KeyboardHandler_OnKeyEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KeyboardHandler_OnKeyEvent_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.KeyEvent event; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      EVENT((short)2, "event");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // EVENT
            return EVENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.KeyEvent.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyboardHandler_OnKeyEvent_args.class, metaDataMap);
    }

    public KeyboardHandler_OnKeyEvent_args() {
    }

    public KeyboardHandler_OnKeyEvent_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.KeyEvent event)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.event = event;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KeyboardHandler_OnKeyEvent_args(KeyboardHandler_OnKeyEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetEvent()) {
        this.event = new com.jetbrains.cef.remote.thrift_codegen.KeyEvent(other.event);
      }
    }

    @Override
    public KeyboardHandler_OnKeyEvent_args deepCopy() {
      return new KeyboardHandler_OnKeyEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.event = null;
    }

    public int getBid() {
      return this.bid;
    }

    public KeyboardHandler_OnKeyEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.KeyEvent getEvent() {
      return this.event;
    }

    public KeyboardHandler_OnKeyEvent_args setEvent(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.KeyEvent event) {
      this.event = event;
      return this;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          setEvent((com.jetbrains.cef.remote.thrift_codegen.KeyEvent)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case EVENT:
        return getEvent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case EVENT:
        return isSetEvent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof KeyboardHandler_OnKeyEvent_args)
        return this.equals((KeyboardHandler_OnKeyEvent_args)that);
      return false;
    }

    public boolean equals(KeyboardHandler_OnKeyEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetEvent()) ? 131071 : 524287);
      if (isSetEvent())
        hashCode = hashCode * 8191 + event.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(KeyboardHandler_OnKeyEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEvent(), other.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("KeyboardHandler_OnKeyEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (event != null) {
        event.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class KeyboardHandler_OnKeyEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnKeyEvent_argsStandardScheme getScheme() {
        return new KeyboardHandler_OnKeyEvent_argsStandardScheme();
      }
    }

    private static class KeyboardHandler_OnKeyEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<KeyboardHandler_OnKeyEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, KeyboardHandler_OnKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.event = new com.jetbrains.cef.remote.thrift_codegen.KeyEvent();
                struct.event.read(iprot);
                struct.setEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, KeyboardHandler_OnKeyEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.event != null) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          struct.event.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class KeyboardHandler_OnKeyEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnKeyEvent_argsTupleScheme getScheme() {
        return new KeyboardHandler_OnKeyEvent_argsTupleScheme();
      }
    }

    private static class KeyboardHandler_OnKeyEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<KeyboardHandler_OnKeyEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEvent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEvent()) {
          struct.event.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.event = new com.jetbrains.cef.remote.thrift_codegen.KeyEvent();
          struct.event.read(iprot);
          struct.setEventIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class KeyboardHandler_OnKeyEvent_result implements org.apache.thrift.TBase<KeyboardHandler_OnKeyEvent_result, KeyboardHandler_OnKeyEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<KeyboardHandler_OnKeyEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyboardHandler_OnKeyEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KeyboardHandler_OnKeyEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KeyboardHandler_OnKeyEvent_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyboardHandler_OnKeyEvent_result.class, metaDataMap);
    }

    public KeyboardHandler_OnKeyEvent_result() {
    }

    public KeyboardHandler_OnKeyEvent_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public KeyboardHandler_OnKeyEvent_result(KeyboardHandler_OnKeyEvent_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public KeyboardHandler_OnKeyEvent_result deepCopy() {
      return new KeyboardHandler_OnKeyEvent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public KeyboardHandler_OnKeyEvent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof KeyboardHandler_OnKeyEvent_result)
        return this.equals((KeyboardHandler_OnKeyEvent_result)that);
      return false;
    }

    public boolean equals(KeyboardHandler_OnKeyEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(KeyboardHandler_OnKeyEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("KeyboardHandler_OnKeyEvent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class KeyboardHandler_OnKeyEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnKeyEvent_resultStandardScheme getScheme() {
        return new KeyboardHandler_OnKeyEvent_resultStandardScheme();
      }
    }

    private static class KeyboardHandler_OnKeyEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<KeyboardHandler_OnKeyEvent_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, KeyboardHandler_OnKeyEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, KeyboardHandler_OnKeyEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class KeyboardHandler_OnKeyEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public KeyboardHandler_OnKeyEvent_resultTupleScheme getScheme() {
        return new KeyboardHandler_OnKeyEvent_resultTupleScheme();
      }
    }

    private static class KeyboardHandler_OnKeyEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<KeyboardHandler_OnKeyEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnKeyEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, KeyboardHandler_OnKeyEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class FocusHandler_OnTakeFocus_args implements org.apache.thrift.TBase<FocusHandler_OnTakeFocus_args, FocusHandler_OnTakeFocus_args._Fields>, java.io.Serializable, Cloneable, Comparable<FocusHandler_OnTakeFocus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FocusHandler_OnTakeFocus_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("next", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FocusHandler_OnTakeFocus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FocusHandler_OnTakeFocus_argsTupleSchemeFactory();

    public int bid; // required
    public boolean next; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      NEXT((short)2, "next");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // NEXT
            return NEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __NEXT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NEXT, new org.apache.thrift.meta_data.FieldMetaData("next", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FocusHandler_OnTakeFocus_args.class, metaDataMap);
    }

    public FocusHandler_OnTakeFocus_args() {
    }

    public FocusHandler_OnTakeFocus_args(
      int bid,
      boolean next)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.next = next;
      setNextIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FocusHandler_OnTakeFocus_args(FocusHandler_OnTakeFocus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.next = other.next;
    }

    @Override
    public FocusHandler_OnTakeFocus_args deepCopy() {
      return new FocusHandler_OnTakeFocus_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setNextIsSet(false);
      this.next = false;
    }

    public int getBid() {
      return this.bid;
    }

    public FocusHandler_OnTakeFocus_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public boolean isNext() {
      return this.next;
    }

    public FocusHandler_OnTakeFocus_args setNext(boolean next) {
      this.next = next;
      setNextIsSet(true);
      return this;
    }

    public void unsetNext() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEXT_ISSET_ID);
    }

    /** Returns true if field next is set (has been assigned a value) and false otherwise */
    public boolean isSetNext() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEXT_ISSET_ID);
    }

    public void setNextIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEXT_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case NEXT:
        if (value == null) {
          unsetNext();
        } else {
          setNext((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case NEXT:
        return isNext();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case NEXT:
        return isSetNext();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof FocusHandler_OnTakeFocus_args)
        return this.equals((FocusHandler_OnTakeFocus_args)that);
      return false;
    }

    public boolean equals(FocusHandler_OnTakeFocus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_next = true;
      boolean that_present_next = true;
      if (this_present_next || that_present_next) {
        if (!(this_present_next && that_present_next))
          return false;
        if (this.next != that.next)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((next) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(FocusHandler_OnTakeFocus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNext(), other.isSetNext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.next, other.next);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FocusHandler_OnTakeFocus_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("next:");
      sb.append(this.next);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FocusHandler_OnTakeFocus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnTakeFocus_argsStandardScheme getScheme() {
        return new FocusHandler_OnTakeFocus_argsStandardScheme();
      }
    }

    private static class FocusHandler_OnTakeFocus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FocusHandler_OnTakeFocus_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, FocusHandler_OnTakeFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.next = iprot.readBool();
                struct.setNextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, FocusHandler_OnTakeFocus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NEXT_FIELD_DESC);
        oprot.writeBool(struct.next);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FocusHandler_OnTakeFocus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnTakeFocus_argsTupleScheme getScheme() {
        return new FocusHandler_OnTakeFocus_argsTupleScheme();
      }
    }

    private static class FocusHandler_OnTakeFocus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FocusHandler_OnTakeFocus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnTakeFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetNext()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetNext()) {
          oprot.writeBool(struct.next);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnTakeFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.next = iprot.readBool();
          struct.setNextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class FocusHandler_OnSetFocus_args implements org.apache.thrift.TBase<FocusHandler_OnSetFocus_args, FocusHandler_OnSetFocus_args._Fields>, java.io.Serializable, Cloneable, Comparable<FocusHandler_OnSetFocus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FocusHandler_OnSetFocus_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FocusHandler_OnSetFocus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FocusHandler_OnSetFocus_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      SOURCE((short)2, "source");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FocusHandler_OnSetFocus_args.class, metaDataMap);
    }

    public FocusHandler_OnSetFocus_args() {
    }

    public FocusHandler_OnSetFocus_args(
      int bid,
      java.lang.String source)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.source = source;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FocusHandler_OnSetFocus_args(FocusHandler_OnSetFocus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetSource()) {
        this.source = other.source;
      }
    }

    @Override
    public FocusHandler_OnSetFocus_args deepCopy() {
      return new FocusHandler_OnSetFocus_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.source = null;
    }

    public int getBid() {
      return this.bid;
    }

    public FocusHandler_OnSetFocus_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSource() {
      return this.source;
    }

    public FocusHandler_OnSetFocus_args setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case SOURCE:
        return getSource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case SOURCE:
        return isSetSource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof FocusHandler_OnSetFocus_args)
        return this.equals((FocusHandler_OnSetFocus_args)that);
      return false;
    }

    public boolean equals(FocusHandler_OnSetFocus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
      if (isSetSource())
        hashCode = hashCode * 8191 + source.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FocusHandler_OnSetFocus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSource(), other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FocusHandler_OnSetFocus_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FocusHandler_OnSetFocus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnSetFocus_argsStandardScheme getScheme() {
        return new FocusHandler_OnSetFocus_argsStandardScheme();
      }
    }

    private static class FocusHandler_OnSetFocus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FocusHandler_OnSetFocus_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, FocusHandler_OnSetFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, FocusHandler_OnSetFocus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FocusHandler_OnSetFocus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnSetFocus_argsTupleScheme getScheme() {
        return new FocusHandler_OnSetFocus_argsTupleScheme();
      }
    }

    private static class FocusHandler_OnSetFocus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FocusHandler_OnSetFocus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnSetFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetSource()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetSource()) {
          oprot.writeString(struct.source);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnSetFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.source = iprot.readString();
          struct.setSourceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class FocusHandler_OnSetFocus_result implements org.apache.thrift.TBase<FocusHandler_OnSetFocus_result, FocusHandler_OnSetFocus_result._Fields>, java.io.Serializable, Cloneable, Comparable<FocusHandler_OnSetFocus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FocusHandler_OnSetFocus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FocusHandler_OnSetFocus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FocusHandler_OnSetFocus_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FocusHandler_OnSetFocus_result.class, metaDataMap);
    }

    public FocusHandler_OnSetFocus_result() {
    }

    public FocusHandler_OnSetFocus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FocusHandler_OnSetFocus_result(FocusHandler_OnSetFocus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public FocusHandler_OnSetFocus_result deepCopy() {
      return new FocusHandler_OnSetFocus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public FocusHandler_OnSetFocus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof FocusHandler_OnSetFocus_result)
        return this.equals((FocusHandler_OnSetFocus_result)that);
      return false;
    }

    public boolean equals(FocusHandler_OnSetFocus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(FocusHandler_OnSetFocus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FocusHandler_OnSetFocus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FocusHandler_OnSetFocus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnSetFocus_resultStandardScheme getScheme() {
        return new FocusHandler_OnSetFocus_resultStandardScheme();
      }
    }

    private static class FocusHandler_OnSetFocus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FocusHandler_OnSetFocus_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, FocusHandler_OnSetFocus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, FocusHandler_OnSetFocus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FocusHandler_OnSetFocus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnSetFocus_resultTupleScheme getScheme() {
        return new FocusHandler_OnSetFocus_resultTupleScheme();
      }
    }

    private static class FocusHandler_OnSetFocus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FocusHandler_OnSetFocus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnSetFocus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnSetFocus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class FocusHandler_OnGotFocus_args implements org.apache.thrift.TBase<FocusHandler_OnGotFocus_args, FocusHandler_OnGotFocus_args._Fields>, java.io.Serializable, Cloneable, Comparable<FocusHandler_OnGotFocus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FocusHandler_OnGotFocus_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FocusHandler_OnGotFocus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FocusHandler_OnGotFocus_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FocusHandler_OnGotFocus_args.class, metaDataMap);
    }

    public FocusHandler_OnGotFocus_args() {
    }

    public FocusHandler_OnGotFocus_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FocusHandler_OnGotFocus_args(FocusHandler_OnGotFocus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public FocusHandler_OnGotFocus_args deepCopy() {
      return new FocusHandler_OnGotFocus_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public FocusHandler_OnGotFocus_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof FocusHandler_OnGotFocus_args)
        return this.equals((FocusHandler_OnGotFocus_args)that);
      return false;
    }

    public boolean equals(FocusHandler_OnGotFocus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(FocusHandler_OnGotFocus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FocusHandler_OnGotFocus_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FocusHandler_OnGotFocus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnGotFocus_argsStandardScheme getScheme() {
        return new FocusHandler_OnGotFocus_argsStandardScheme();
      }
    }

    private static class FocusHandler_OnGotFocus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FocusHandler_OnGotFocus_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, FocusHandler_OnGotFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, FocusHandler_OnGotFocus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FocusHandler_OnGotFocus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public FocusHandler_OnGotFocus_argsTupleScheme getScheme() {
        return new FocusHandler_OnGotFocus_argsTupleScheme();
      }
    }

    private static class FocusHandler_OnGotFocus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FocusHandler_OnGotFocus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnGotFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FocusHandler_OnGotFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_OnBeforeBrowse_args implements org.apache.thrift.TBase<RequestHandler_OnBeforeBrowse_args, RequestHandler_OnBeforeBrowse_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_OnBeforeBrowse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_OnBeforeBrowse_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField USER_GESTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("user_gesture", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField IS_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("is_redirect", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_OnBeforeBrowse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_OnBeforeBrowse_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public boolean user_gesture; // required
    public boolean is_redirect; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      REQUEST((short)2, "request"),
      USER_GESTURE((short)3, "user_gesture"),
      IS_REDIRECT((short)4, "is_redirect");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // REQUEST
            return REQUEST;
          case 3: // USER_GESTURE
            return USER_GESTURE;
          case 4: // IS_REDIRECT
            return IS_REDIRECT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __USER_GESTURE_ISSET_ID = 1;
    private static final int __IS_REDIRECT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.USER_GESTURE, new org.apache.thrift.meta_data.FieldMetaData("user_gesture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("is_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_OnBeforeBrowse_args.class, metaDataMap);
    }

    public RequestHandler_OnBeforeBrowse_args() {
    }

    public RequestHandler_OnBeforeBrowse_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      boolean user_gesture,
      boolean is_redirect)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.user_gesture = user_gesture;
      setUser_gestureIsSet(true);
      this.is_redirect = is_redirect;
      setIs_redirectIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_OnBeforeBrowse_args(RequestHandler_OnBeforeBrowse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      this.user_gesture = other.user_gesture;
      this.is_redirect = other.is_redirect;
    }

    @Override
    public RequestHandler_OnBeforeBrowse_args deepCopy() {
      return new RequestHandler_OnBeforeBrowse_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      setUser_gestureIsSet(false);
      this.user_gesture = false;
      setIs_redirectIsSet(false);
      this.is_redirect = false;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestHandler_OnBeforeBrowse_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public RequestHandler_OnBeforeBrowse_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean isUser_gesture() {
      return this.user_gesture;
    }

    public RequestHandler_OnBeforeBrowse_args setUser_gesture(boolean user_gesture) {
      this.user_gesture = user_gesture;
      setUser_gestureIsSet(true);
      return this;
    }

    public void unsetUser_gesture() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_GESTURE_ISSET_ID);
    }

    /** Returns true if field user_gesture is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_gesture() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_GESTURE_ISSET_ID);
    }

    public void setUser_gestureIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_GESTURE_ISSET_ID, value);
    }

    public boolean isIs_redirect() {
      return this.is_redirect;
    }

    public RequestHandler_OnBeforeBrowse_args setIs_redirect(boolean is_redirect) {
      this.is_redirect = is_redirect;
      setIs_redirectIsSet(true);
      return this;
    }

    public void unsetIs_redirect() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_REDIRECT_ISSET_ID);
    }

    /** Returns true if field is_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetIs_redirect() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_REDIRECT_ISSET_ID);
    }

    public void setIs_redirectIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_REDIRECT_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case USER_GESTURE:
        if (value == null) {
          unsetUser_gesture();
        } else {
          setUser_gesture((java.lang.Boolean)value);
        }
        break;

      case IS_REDIRECT:
        if (value == null) {
          unsetIs_redirect();
        } else {
          setIs_redirect((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case USER_GESTURE:
        return isUser_gesture();

      case IS_REDIRECT:
        return isIs_redirect();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case USER_GESTURE:
        return isSetUser_gesture();
      case IS_REDIRECT:
        return isSetIs_redirect();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_OnBeforeBrowse_args)
        return this.equals((RequestHandler_OnBeforeBrowse_args)that);
      return false;
    }

    public boolean equals(RequestHandler_OnBeforeBrowse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_user_gesture = true;
      boolean that_present_user_gesture = true;
      if (this_present_user_gesture || that_present_user_gesture) {
        if (!(this_present_user_gesture && that_present_user_gesture))
          return false;
        if (this.user_gesture != that.user_gesture)
          return false;
      }

      boolean this_present_is_redirect = true;
      boolean that_present_is_redirect = true;
      if (this_present_is_redirect || that_present_is_redirect) {
        if (!(this_present_is_redirect && that_present_is_redirect))
          return false;
        if (this.is_redirect != that.is_redirect)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((user_gesture) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((is_redirect) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_OnBeforeBrowse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUser_gesture(), other.isSetUser_gesture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_gesture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_gesture, other.user_gesture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIs_redirect(), other.isSetIs_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIs_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_redirect, other.is_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_OnBeforeBrowse_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_gesture:");
      sb.append(this.user_gesture);
      first = false;
      if (!first) sb.append(", ");
      sb.append("is_redirect:");
      sb.append(this.is_redirect);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_OnBeforeBrowse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnBeforeBrowse_argsStandardScheme getScheme() {
        return new RequestHandler_OnBeforeBrowse_argsStandardScheme();
      }
    }

    private static class RequestHandler_OnBeforeBrowse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_OnBeforeBrowse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_OnBeforeBrowse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_GESTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.user_gesture = iprot.readBool();
                struct.setUser_gestureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.is_redirect = iprot.readBool();
                struct.setIs_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_OnBeforeBrowse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_GESTURE_FIELD_DESC);
        oprot.writeBool(struct.user_gesture);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_REDIRECT_FIELD_DESC);
        oprot.writeBool(struct.is_redirect);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_OnBeforeBrowse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnBeforeBrowse_argsTupleScheme getScheme() {
        return new RequestHandler_OnBeforeBrowse_argsTupleScheme();
      }
    }

    private static class RequestHandler_OnBeforeBrowse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_OnBeforeBrowse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnBeforeBrowse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetUser_gesture()) {
          optionals.set(2);
        }
        if (struct.isSetIs_redirect()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetUser_gesture()) {
          oprot.writeBool(struct.user_gesture);
        }
        if (struct.isSetIs_redirect()) {
          oprot.writeBool(struct.is_redirect);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnBeforeBrowse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_gesture = iprot.readBool();
          struct.setUser_gestureIsSet(true);
        }
        if (incoming.get(3)) {
          struct.is_redirect = iprot.readBool();
          struct.setIs_redirectIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_OnBeforeBrowse_result implements org.apache.thrift.TBase<RequestHandler_OnBeforeBrowse_result, RequestHandler_OnBeforeBrowse_result._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_OnBeforeBrowse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_OnBeforeBrowse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_OnBeforeBrowse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_OnBeforeBrowse_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_OnBeforeBrowse_result.class, metaDataMap);
    }

    public RequestHandler_OnBeforeBrowse_result() {
    }

    public RequestHandler_OnBeforeBrowse_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_OnBeforeBrowse_result(RequestHandler_OnBeforeBrowse_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public RequestHandler_OnBeforeBrowse_result deepCopy() {
      return new RequestHandler_OnBeforeBrowse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RequestHandler_OnBeforeBrowse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_OnBeforeBrowse_result)
        return this.equals((RequestHandler_OnBeforeBrowse_result)that);
      return false;
    }

    public boolean equals(RequestHandler_OnBeforeBrowse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_OnBeforeBrowse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_OnBeforeBrowse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_OnBeforeBrowse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnBeforeBrowse_resultStandardScheme getScheme() {
        return new RequestHandler_OnBeforeBrowse_resultStandardScheme();
      }
    }

    private static class RequestHandler_OnBeforeBrowse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_OnBeforeBrowse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_OnBeforeBrowse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_OnBeforeBrowse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_OnBeforeBrowse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnBeforeBrowse_resultTupleScheme getScheme() {
        return new RequestHandler_OnBeforeBrowse_resultTupleScheme();
      }
    }

    private static class RequestHandler_OnBeforeBrowse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_OnBeforeBrowse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnBeforeBrowse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnBeforeBrowse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_OnOpenURLFromTab_args implements org.apache.thrift.TBase<RequestHandler_OnOpenURLFromTab_args, RequestHandler_OnOpenURLFromTab_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_OnOpenURLFromTab_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_OnOpenURLFromTab_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TARGET_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("target_url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_GESTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("user_gesture", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_OnOpenURLFromTab_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_OnOpenURLFromTab_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String target_url; // required
    public boolean user_gesture; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      TARGET_URL((short)2, "target_url"),
      USER_GESTURE((short)3, "user_gesture");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // TARGET_URL
            return TARGET_URL;
          case 3: // USER_GESTURE
            return USER_GESTURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __USER_GESTURE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TARGET_URL, new org.apache.thrift.meta_data.FieldMetaData("target_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_GESTURE, new org.apache.thrift.meta_data.FieldMetaData("user_gesture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_OnOpenURLFromTab_args.class, metaDataMap);
    }

    public RequestHandler_OnOpenURLFromTab_args() {
    }

    public RequestHandler_OnOpenURLFromTab_args(
      int bid,
      java.lang.String target_url,
      boolean user_gesture)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.target_url = target_url;
      this.user_gesture = user_gesture;
      setUser_gestureIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_OnOpenURLFromTab_args(RequestHandler_OnOpenURLFromTab_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetTarget_url()) {
        this.target_url = other.target_url;
      }
      this.user_gesture = other.user_gesture;
    }

    @Override
    public RequestHandler_OnOpenURLFromTab_args deepCopy() {
      return new RequestHandler_OnOpenURLFromTab_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.target_url = null;
      setUser_gestureIsSet(false);
      this.user_gesture = false;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestHandler_OnOpenURLFromTab_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTarget_url() {
      return this.target_url;
    }

    public RequestHandler_OnOpenURLFromTab_args setTarget_url(@org.apache.thrift.annotation.Nullable java.lang.String target_url) {
      this.target_url = target_url;
      return this;
    }

    public void unsetTarget_url() {
      this.target_url = null;
    }

    /** Returns true if field target_url is set (has been assigned a value) and false otherwise */
    public boolean isSetTarget_url() {
      return this.target_url != null;
    }

    public void setTarget_urlIsSet(boolean value) {
      if (!value) {
        this.target_url = null;
      }
    }

    public boolean isUser_gesture() {
      return this.user_gesture;
    }

    public RequestHandler_OnOpenURLFromTab_args setUser_gesture(boolean user_gesture) {
      this.user_gesture = user_gesture;
      setUser_gestureIsSet(true);
      return this;
    }

    public void unsetUser_gesture() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USER_GESTURE_ISSET_ID);
    }

    /** Returns true if field user_gesture is set (has been assigned a value) and false otherwise */
    public boolean isSetUser_gesture() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USER_GESTURE_ISSET_ID);
    }

    public void setUser_gestureIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USER_GESTURE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case TARGET_URL:
        if (value == null) {
          unsetTarget_url();
        } else {
          setTarget_url((java.lang.String)value);
        }
        break;

      case USER_GESTURE:
        if (value == null) {
          unsetUser_gesture();
        } else {
          setUser_gesture((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case TARGET_URL:
        return getTarget_url();

      case USER_GESTURE:
        return isUser_gesture();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case TARGET_URL:
        return isSetTarget_url();
      case USER_GESTURE:
        return isSetUser_gesture();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_OnOpenURLFromTab_args)
        return this.equals((RequestHandler_OnOpenURLFromTab_args)that);
      return false;
    }

    public boolean equals(RequestHandler_OnOpenURLFromTab_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_target_url = true && this.isSetTarget_url();
      boolean that_present_target_url = true && that.isSetTarget_url();
      if (this_present_target_url || that_present_target_url) {
        if (!(this_present_target_url && that_present_target_url))
          return false;
        if (!this.target_url.equals(that.target_url))
          return false;
      }

      boolean this_present_user_gesture = true;
      boolean that_present_user_gesture = true;
      if (this_present_user_gesture || that_present_user_gesture) {
        if (!(this_present_user_gesture && that_present_user_gesture))
          return false;
        if (this.user_gesture != that.user_gesture)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetTarget_url()) ? 131071 : 524287);
      if (isSetTarget_url())
        hashCode = hashCode * 8191 + target_url.hashCode();

      hashCode = hashCode * 8191 + ((user_gesture) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_OnOpenURLFromTab_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTarget_url(), other.isSetTarget_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarget_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_url, other.target_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUser_gesture(), other.isSetUser_gesture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser_gesture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_gesture, other.user_gesture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_OnOpenURLFromTab_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("target_url:");
      if (this.target_url == null) {
        sb.append("null");
      } else {
        sb.append(this.target_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user_gesture:");
      sb.append(this.user_gesture);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_OnOpenURLFromTab_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnOpenURLFromTab_argsStandardScheme getScheme() {
        return new RequestHandler_OnOpenURLFromTab_argsStandardScheme();
      }
    }

    private static class RequestHandler_OnOpenURLFromTab_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_OnOpenURLFromTab_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_OnOpenURLFromTab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TARGET_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.target_url = iprot.readString();
                struct.setTarget_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_GESTURE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.user_gesture = iprot.readBool();
                struct.setUser_gestureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_OnOpenURLFromTab_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.target_url != null) {
          oprot.writeFieldBegin(TARGET_URL_FIELD_DESC);
          oprot.writeString(struct.target_url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_GESTURE_FIELD_DESC);
        oprot.writeBool(struct.user_gesture);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_OnOpenURLFromTab_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnOpenURLFromTab_argsTupleScheme getScheme() {
        return new RequestHandler_OnOpenURLFromTab_argsTupleScheme();
      }
    }

    private static class RequestHandler_OnOpenURLFromTab_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_OnOpenURLFromTab_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnOpenURLFromTab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetTarget_url()) {
          optionals.set(1);
        }
        if (struct.isSetUser_gesture()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetTarget_url()) {
          oprot.writeString(struct.target_url);
        }
        if (struct.isSetUser_gesture()) {
          oprot.writeBool(struct.user_gesture);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnOpenURLFromTab_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.target_url = iprot.readString();
          struct.setTarget_urlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user_gesture = iprot.readBool();
          struct.setUser_gestureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_OnOpenURLFromTab_result implements org.apache.thrift.TBase<RequestHandler_OnOpenURLFromTab_result, RequestHandler_OnOpenURLFromTab_result._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_OnOpenURLFromTab_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_OnOpenURLFromTab_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_OnOpenURLFromTab_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_OnOpenURLFromTab_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_OnOpenURLFromTab_result.class, metaDataMap);
    }

    public RequestHandler_OnOpenURLFromTab_result() {
    }

    public RequestHandler_OnOpenURLFromTab_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_OnOpenURLFromTab_result(RequestHandler_OnOpenURLFromTab_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public RequestHandler_OnOpenURLFromTab_result deepCopy() {
      return new RequestHandler_OnOpenURLFromTab_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RequestHandler_OnOpenURLFromTab_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_OnOpenURLFromTab_result)
        return this.equals((RequestHandler_OnOpenURLFromTab_result)that);
      return false;
    }

    public boolean equals(RequestHandler_OnOpenURLFromTab_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_OnOpenURLFromTab_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_OnOpenURLFromTab_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_OnOpenURLFromTab_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnOpenURLFromTab_resultStandardScheme getScheme() {
        return new RequestHandler_OnOpenURLFromTab_resultStandardScheme();
      }
    }

    private static class RequestHandler_OnOpenURLFromTab_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_OnOpenURLFromTab_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_OnOpenURLFromTab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_OnOpenURLFromTab_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_OnOpenURLFromTab_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnOpenURLFromTab_resultTupleScheme getScheme() {
        return new RequestHandler_OnOpenURLFromTab_resultTupleScheme();
      }
    }

    private static class RequestHandler_OnOpenURLFromTab_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_OnOpenURLFromTab_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnOpenURLFromTab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnOpenURLFromTab_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_GetAuthCredentials_args implements org.apache.thrift.TBase<RequestHandler_GetAuthCredentials_args, RequestHandler_GetAuthCredentials_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_GetAuthCredentials_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_GetAuthCredentials_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORIGIN_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("origin_url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IS_PROXY_FIELD_DESC = new org.apache.thrift.protocol.TField("isProxy", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField REALM_FIELD_DESC = new org.apache.thrift.protocol.TField("realm", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SCHEME_FIELD_DESC = new org.apache.thrift.protocol.TField("scheme", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField AUTH_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("authCallback", org.apache.thrift.protocol.TType.STRUCT, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_GetAuthCredentials_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_GetAuthCredentials_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String origin_url; // required
    public boolean isProxy; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String host; // required
    public int port; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String realm; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String scheme; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      ORIGIN_URL((short)2, "origin_url"),
      IS_PROXY((short)3, "isProxy"),
      HOST((short)4, "host"),
      PORT((short)5, "port"),
      REALM((short)6, "realm"),
      SCHEME((short)7, "scheme"),
      AUTH_CALLBACK((short)8, "authCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // ORIGIN_URL
            return ORIGIN_URL;
          case 3: // IS_PROXY
            return IS_PROXY;
          case 4: // HOST
            return HOST;
          case 5: // PORT
            return PORT;
          case 6: // REALM
            return REALM;
          case 7: // SCHEME
            return SCHEME;
          case 8: // AUTH_CALLBACK
            return AUTH_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __ISPROXY_ISSET_ID = 1;
    private static final int __PORT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORIGIN_URL, new org.apache.thrift.meta_data.FieldMetaData("origin_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_PROXY, new org.apache.thrift.meta_data.FieldMetaData("isProxy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REALM, new org.apache.thrift.meta_data.FieldMetaData("realm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEME, new org.apache.thrift.meta_data.FieldMetaData("scheme", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AUTH_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("authCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_GetAuthCredentials_args.class, metaDataMap);
    }

    public RequestHandler_GetAuthCredentials_args() {
    }

    public RequestHandler_GetAuthCredentials_args(
      int bid,
      java.lang.String origin_url,
      boolean isProxy,
      java.lang.String host,
      int port,
      java.lang.String realm,
      java.lang.String scheme,
      com.jetbrains.cef.remote.thrift_codegen.RObject authCallback)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.origin_url = origin_url;
      this.isProxy = isProxy;
      setIsProxyIsSet(true);
      this.host = host;
      this.port = port;
      setPortIsSet(true);
      this.realm = realm;
      this.scheme = scheme;
      this.authCallback = authCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_GetAuthCredentials_args(RequestHandler_GetAuthCredentials_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetOrigin_url()) {
        this.origin_url = other.origin_url;
      }
      this.isProxy = other.isProxy;
      if (other.isSetHost()) {
        this.host = other.host;
      }
      this.port = other.port;
      if (other.isSetRealm()) {
        this.realm = other.realm;
      }
      if (other.isSetScheme()) {
        this.scheme = other.scheme;
      }
      if (other.isSetAuthCallback()) {
        this.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.authCallback);
      }
    }

    @Override
    public RequestHandler_GetAuthCredentials_args deepCopy() {
      return new RequestHandler_GetAuthCredentials_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.origin_url = null;
      setIsProxyIsSet(false);
      this.isProxy = false;
      this.host = null;
      setPortIsSet(false);
      this.port = 0;
      this.realm = null;
      this.scheme = null;
      this.authCallback = null;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestHandler_GetAuthCredentials_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOrigin_url() {
      return this.origin_url;
    }

    public RequestHandler_GetAuthCredentials_args setOrigin_url(@org.apache.thrift.annotation.Nullable java.lang.String origin_url) {
      this.origin_url = origin_url;
      return this;
    }

    public void unsetOrigin_url() {
      this.origin_url = null;
    }

    /** Returns true if field origin_url is set (has been assigned a value) and false otherwise */
    public boolean isSetOrigin_url() {
      return this.origin_url != null;
    }

    public void setOrigin_urlIsSet(boolean value) {
      if (!value) {
        this.origin_url = null;
      }
    }

    public boolean isIsProxy() {
      return this.isProxy;
    }

    public RequestHandler_GetAuthCredentials_args setIsProxy(boolean isProxy) {
      this.isProxy = isProxy;
      setIsProxyIsSet(true);
      return this;
    }

    public void unsetIsProxy() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPROXY_ISSET_ID);
    }

    /** Returns true if field isProxy is set (has been assigned a value) and false otherwise */
    public boolean isSetIsProxy() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPROXY_ISSET_ID);
    }

    public void setIsProxyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPROXY_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHost() {
      return this.host;
    }

    public RequestHandler_GetAuthCredentials_args setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
      this.host = host;
      return this;
    }

    public void unsetHost() {
      this.host = null;
    }

    /** Returns true if field host is set (has been assigned a value) and false otherwise */
    public boolean isSetHost() {
      return this.host != null;
    }

    public void setHostIsSet(boolean value) {
      if (!value) {
        this.host = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public RequestHandler_GetAuthCredentials_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRealm() {
      return this.realm;
    }

    public RequestHandler_GetAuthCredentials_args setRealm(@org.apache.thrift.annotation.Nullable java.lang.String realm) {
      this.realm = realm;
      return this;
    }

    public void unsetRealm() {
      this.realm = null;
    }

    /** Returns true if field realm is set (has been assigned a value) and false otherwise */
    public boolean isSetRealm() {
      return this.realm != null;
    }

    public void setRealmIsSet(boolean value) {
      if (!value) {
        this.realm = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getScheme() {
      return this.scheme;
    }

    public RequestHandler_GetAuthCredentials_args setScheme(@org.apache.thrift.annotation.Nullable java.lang.String scheme) {
      this.scheme = scheme;
      return this;
    }

    public void unsetScheme() {
      this.scheme = null;
    }

    /** Returns true if field scheme is set (has been assigned a value) and false otherwise */
    public boolean isSetScheme() {
      return this.scheme != null;
    }

    public void setSchemeIsSet(boolean value) {
      if (!value) {
        this.scheme = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getAuthCallback() {
      return this.authCallback;
    }

    public RequestHandler_GetAuthCredentials_args setAuthCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) {
      this.authCallback = authCallback;
      return this;
    }

    public void unsetAuthCallback() {
      this.authCallback = null;
    }

    /** Returns true if field authCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthCallback() {
      return this.authCallback != null;
    }

    public void setAuthCallbackIsSet(boolean value) {
      if (!value) {
        this.authCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case ORIGIN_URL:
        if (value == null) {
          unsetOrigin_url();
        } else {
          setOrigin_url((java.lang.String)value);
        }
        break;

      case IS_PROXY:
        if (value == null) {
          unsetIsProxy();
        } else {
          setIsProxy((java.lang.Boolean)value);
        }
        break;

      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          setHost((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case REALM:
        if (value == null) {
          unsetRealm();
        } else {
          setRealm((java.lang.String)value);
        }
        break;

      case SCHEME:
        if (value == null) {
          unsetScheme();
        } else {
          setScheme((java.lang.String)value);
        }
        break;

      case AUTH_CALLBACK:
        if (value == null) {
          unsetAuthCallback();
        } else {
          setAuthCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case ORIGIN_URL:
        return getOrigin_url();

      case IS_PROXY:
        return isIsProxy();

      case HOST:
        return getHost();

      case PORT:
        return getPort();

      case REALM:
        return getRealm();

      case SCHEME:
        return getScheme();

      case AUTH_CALLBACK:
        return getAuthCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case ORIGIN_URL:
        return isSetOrigin_url();
      case IS_PROXY:
        return isSetIsProxy();
      case HOST:
        return isSetHost();
      case PORT:
        return isSetPort();
      case REALM:
        return isSetRealm();
      case SCHEME:
        return isSetScheme();
      case AUTH_CALLBACK:
        return isSetAuthCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_GetAuthCredentials_args)
        return this.equals((RequestHandler_GetAuthCredentials_args)that);
      return false;
    }

    public boolean equals(RequestHandler_GetAuthCredentials_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_origin_url = true && this.isSetOrigin_url();
      boolean that_present_origin_url = true && that.isSetOrigin_url();
      if (this_present_origin_url || that_present_origin_url) {
        if (!(this_present_origin_url && that_present_origin_url))
          return false;
        if (!this.origin_url.equals(that.origin_url))
          return false;
      }

      boolean this_present_isProxy = true;
      boolean that_present_isProxy = true;
      if (this_present_isProxy || that_present_isProxy) {
        if (!(this_present_isProxy && that_present_isProxy))
          return false;
        if (this.isProxy != that.isProxy)
          return false;
      }

      boolean this_present_host = true && this.isSetHost();
      boolean that_present_host = true && that.isSetHost();
      if (this_present_host || that_present_host) {
        if (!(this_present_host && that_present_host))
          return false;
        if (!this.host.equals(that.host))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_realm = true && this.isSetRealm();
      boolean that_present_realm = true && that.isSetRealm();
      if (this_present_realm || that_present_realm) {
        if (!(this_present_realm && that_present_realm))
          return false;
        if (!this.realm.equals(that.realm))
          return false;
      }

      boolean this_present_scheme = true && this.isSetScheme();
      boolean that_present_scheme = true && that.isSetScheme();
      if (this_present_scheme || that_present_scheme) {
        if (!(this_present_scheme && that_present_scheme))
          return false;
        if (!this.scheme.equals(that.scheme))
          return false;
      }

      boolean this_present_authCallback = true && this.isSetAuthCallback();
      boolean that_present_authCallback = true && that.isSetAuthCallback();
      if (this_present_authCallback || that_present_authCallback) {
        if (!(this_present_authCallback && that_present_authCallback))
          return false;
        if (!this.authCallback.equals(that.authCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetOrigin_url()) ? 131071 : 524287);
      if (isSetOrigin_url())
        hashCode = hashCode * 8191 + origin_url.hashCode();

      hashCode = hashCode * 8191 + ((isProxy) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
      if (isSetHost())
        hashCode = hashCode * 8191 + host.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + ((isSetRealm()) ? 131071 : 524287);
      if (isSetRealm())
        hashCode = hashCode * 8191 + realm.hashCode();

      hashCode = hashCode * 8191 + ((isSetScheme()) ? 131071 : 524287);
      if (isSetScheme())
        hashCode = hashCode * 8191 + scheme.hashCode();

      hashCode = hashCode * 8191 + ((isSetAuthCallback()) ? 131071 : 524287);
      if (isSetAuthCallback())
        hashCode = hashCode * 8191 + authCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_GetAuthCredentials_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOrigin_url(), other.isSetOrigin_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrigin_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.origin_url, other.origin_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsProxy(), other.isSetIsProxy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsProxy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isProxy, other.isProxy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHost(), other.isSetHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPort(), other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRealm(), other.isSetRealm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRealm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realm, other.realm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetScheme(), other.isSetScheme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScheme()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheme, other.scheme);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAuthCallback(), other.isSetAuthCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCallback, other.authCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_GetAuthCredentials_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("origin_url:");
      if (this.origin_url == null) {
        sb.append("null");
      } else {
        sb.append(this.origin_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isProxy:");
      sb.append(this.isProxy);
      first = false;
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("realm:");
      if (this.realm == null) {
        sb.append("null");
      } else {
        sb.append(this.realm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scheme:");
      if (this.scheme == null) {
        sb.append("null");
      } else {
        sb.append(this.scheme);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authCallback:");
      if (this.authCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.authCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authCallback != null) {
        authCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_GetAuthCredentials_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetAuthCredentials_argsStandardScheme getScheme() {
        return new RequestHandler_GetAuthCredentials_argsStandardScheme();
      }
    }

    private static class RequestHandler_GetAuthCredentials_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_GetAuthCredentials_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_GetAuthCredentials_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORIGIN_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.origin_url = iprot.readString();
                struct.setOrigin_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_PROXY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isProxy = iprot.readBool();
                struct.setIsProxyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.host = iprot.readString();
                struct.setHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // REALM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.realm = iprot.readString();
                struct.setRealmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SCHEME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scheme = iprot.readString();
                struct.setSchemeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // AUTH_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.authCallback.read(iprot);
                struct.setAuthCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_GetAuthCredentials_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.origin_url != null) {
          oprot.writeFieldBegin(ORIGIN_URL_FIELD_DESC);
          oprot.writeString(struct.origin_url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_PROXY_FIELD_DESC);
        oprot.writeBool(struct.isProxy);
        oprot.writeFieldEnd();
        if (struct.host != null) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.realm != null) {
          oprot.writeFieldBegin(REALM_FIELD_DESC);
          oprot.writeString(struct.realm);
          oprot.writeFieldEnd();
        }
        if (struct.scheme != null) {
          oprot.writeFieldBegin(SCHEME_FIELD_DESC);
          oprot.writeString(struct.scheme);
          oprot.writeFieldEnd();
        }
        if (struct.authCallback != null) {
          oprot.writeFieldBegin(AUTH_CALLBACK_FIELD_DESC);
          struct.authCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_GetAuthCredentials_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetAuthCredentials_argsTupleScheme getScheme() {
        return new RequestHandler_GetAuthCredentials_argsTupleScheme();
      }
    }

    private static class RequestHandler_GetAuthCredentials_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_GetAuthCredentials_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetAuthCredentials_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetOrigin_url()) {
          optionals.set(1);
        }
        if (struct.isSetIsProxy()) {
          optionals.set(2);
        }
        if (struct.isSetHost()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        if (struct.isSetRealm()) {
          optionals.set(5);
        }
        if (struct.isSetScheme()) {
          optionals.set(6);
        }
        if (struct.isSetAuthCallback()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetOrigin_url()) {
          oprot.writeString(struct.origin_url);
        }
        if (struct.isSetIsProxy()) {
          oprot.writeBool(struct.isProxy);
        }
        if (struct.isSetHost()) {
          oprot.writeString(struct.host);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetRealm()) {
          oprot.writeString(struct.realm);
        }
        if (struct.isSetScheme()) {
          oprot.writeString(struct.scheme);
        }
        if (struct.isSetAuthCallback()) {
          struct.authCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetAuthCredentials_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.origin_url = iprot.readString();
          struct.setOrigin_urlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isProxy = iprot.readBool();
          struct.setIsProxyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.host = iprot.readString();
          struct.setHostIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.realm = iprot.readString();
          struct.setRealmIsSet(true);
        }
        if (incoming.get(6)) {
          struct.scheme = iprot.readString();
          struct.setSchemeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.authCallback.read(iprot);
          struct.setAuthCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_GetAuthCredentials_result implements org.apache.thrift.TBase<RequestHandler_GetAuthCredentials_result, RequestHandler_GetAuthCredentials_result._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_GetAuthCredentials_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_GetAuthCredentials_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_GetAuthCredentials_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_GetAuthCredentials_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_GetAuthCredentials_result.class, metaDataMap);
    }

    public RequestHandler_GetAuthCredentials_result() {
    }

    public RequestHandler_GetAuthCredentials_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_GetAuthCredentials_result(RequestHandler_GetAuthCredentials_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public RequestHandler_GetAuthCredentials_result deepCopy() {
      return new RequestHandler_GetAuthCredentials_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RequestHandler_GetAuthCredentials_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_GetAuthCredentials_result)
        return this.equals((RequestHandler_GetAuthCredentials_result)that);
      return false;
    }

    public boolean equals(RequestHandler_GetAuthCredentials_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_GetAuthCredentials_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_GetAuthCredentials_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_GetAuthCredentials_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetAuthCredentials_resultStandardScheme getScheme() {
        return new RequestHandler_GetAuthCredentials_resultStandardScheme();
      }
    }

    private static class RequestHandler_GetAuthCredentials_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_GetAuthCredentials_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_GetAuthCredentials_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_GetAuthCredentials_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_GetAuthCredentials_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetAuthCredentials_resultTupleScheme getScheme() {
        return new RequestHandler_GetAuthCredentials_resultTupleScheme();
      }
    }

    private static class RequestHandler_GetAuthCredentials_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_GetAuthCredentials_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetAuthCredentials_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetAuthCredentials_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_OnCertificateError_args implements org.apache.thrift.TBase<RequestHandler_OnCertificateError_args, RequestHandler_OnCertificateError_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_OnCertificateError_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_OnCertificateError_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CERT_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("cert_error", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("request_url", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SSL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sslInfo", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_OnCertificateError_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_OnCertificateError_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String cert_error; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String request_url; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      CERT_ERROR((short)2, "cert_error"),
      REQUEST_URL((short)3, "request_url"),
      SSL_INFO((short)4, "sslInfo"),
      CALLBACK((short)5, "callback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // CERT_ERROR
            return CERT_ERROR;
          case 3: // REQUEST_URL
            return REQUEST_URL;
          case 4: // SSL_INFO
            return SSL_INFO;
          case 5: // CALLBACK
            return CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CERT_ERROR, new org.apache.thrift.meta_data.FieldMetaData("cert_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_URL, new org.apache.thrift.meta_data.FieldMetaData("request_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SSL_INFO, new org.apache.thrift.meta_data.FieldMetaData("sslInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_OnCertificateError_args.class, metaDataMap);
    }

    public RequestHandler_OnCertificateError_args() {
    }

    public RequestHandler_OnCertificateError_args(
      int bid,
      java.lang.String cert_error,
      java.lang.String request_url,
      com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo,
      com.jetbrains.cef.remote.thrift_codegen.RObject callback)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.cert_error = cert_error;
      this.request_url = request_url;
      this.sslInfo = sslInfo;
      this.callback = callback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_OnCertificateError_args(RequestHandler_OnCertificateError_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetCert_error()) {
        this.cert_error = other.cert_error;
      }
      if (other.isSetRequest_url()) {
        this.request_url = other.request_url;
      }
      if (other.isSetSslInfo()) {
        this.sslInfo = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.sslInfo);
      }
      if (other.isSetCallback()) {
        this.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.callback);
      }
    }

    @Override
    public RequestHandler_OnCertificateError_args deepCopy() {
      return new RequestHandler_OnCertificateError_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.cert_error = null;
      this.request_url = null;
      this.sslInfo = null;
      this.callback = null;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestHandler_OnCertificateError_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCert_error() {
      return this.cert_error;
    }

    public RequestHandler_OnCertificateError_args setCert_error(@org.apache.thrift.annotation.Nullable java.lang.String cert_error) {
      this.cert_error = cert_error;
      return this;
    }

    public void unsetCert_error() {
      this.cert_error = null;
    }

    /** Returns true if field cert_error is set (has been assigned a value) and false otherwise */
    public boolean isSetCert_error() {
      return this.cert_error != null;
    }

    public void setCert_errorIsSet(boolean value) {
      if (!value) {
        this.cert_error = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRequest_url() {
      return this.request_url;
    }

    public RequestHandler_OnCertificateError_args setRequest_url(@org.apache.thrift.annotation.Nullable java.lang.String request_url) {
      this.request_url = request_url;
      return this;
    }

    public void unsetRequest_url() {
      this.request_url = null;
    }

    /** Returns true if field request_url is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest_url() {
      return this.request_url != null;
    }

    public void setRequest_urlIsSet(boolean value) {
      if (!value) {
        this.request_url = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSslInfo() {
      return this.sslInfo;
    }

    public RequestHandler_OnCertificateError_args setSslInfo(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject sslInfo) {
      this.sslInfo = sslInfo;
      return this;
    }

    public void unsetSslInfo() {
      this.sslInfo = null;
    }

    /** Returns true if field sslInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSslInfo() {
      return this.sslInfo != null;
    }

    public void setSslInfoIsSet(boolean value) {
      if (!value) {
        this.sslInfo = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCallback() {
      return this.callback;
    }

    public RequestHandler_OnCertificateError_args setCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback) {
      this.callback = callback;
      return this;
    }

    public void unsetCallback() {
      this.callback = null;
    }

    /** Returns true if field callback is set (has been assigned a value) and false otherwise */
    public boolean isSetCallback() {
      return this.callback != null;
    }

    public void setCallbackIsSet(boolean value) {
      if (!value) {
        this.callback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case CERT_ERROR:
        if (value == null) {
          unsetCert_error();
        } else {
          setCert_error((java.lang.String)value);
        }
        break;

      case REQUEST_URL:
        if (value == null) {
          unsetRequest_url();
        } else {
          setRequest_url((java.lang.String)value);
        }
        break;

      case SSL_INFO:
        if (value == null) {
          unsetSslInfo();
        } else {
          setSslInfo((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          setCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case CERT_ERROR:
        return getCert_error();

      case REQUEST_URL:
        return getRequest_url();

      case SSL_INFO:
        return getSslInfo();

      case CALLBACK:
        return getCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case CERT_ERROR:
        return isSetCert_error();
      case REQUEST_URL:
        return isSetRequest_url();
      case SSL_INFO:
        return isSetSslInfo();
      case CALLBACK:
        return isSetCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_OnCertificateError_args)
        return this.equals((RequestHandler_OnCertificateError_args)that);
      return false;
    }

    public boolean equals(RequestHandler_OnCertificateError_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_cert_error = true && this.isSetCert_error();
      boolean that_present_cert_error = true && that.isSetCert_error();
      if (this_present_cert_error || that_present_cert_error) {
        if (!(this_present_cert_error && that_present_cert_error))
          return false;
        if (!this.cert_error.equals(that.cert_error))
          return false;
      }

      boolean this_present_request_url = true && this.isSetRequest_url();
      boolean that_present_request_url = true && that.isSetRequest_url();
      if (this_present_request_url || that_present_request_url) {
        if (!(this_present_request_url && that_present_request_url))
          return false;
        if (!this.request_url.equals(that.request_url))
          return false;
      }

      boolean this_present_sslInfo = true && this.isSetSslInfo();
      boolean that_present_sslInfo = true && that.isSetSslInfo();
      if (this_present_sslInfo || that_present_sslInfo) {
        if (!(this_present_sslInfo && that_present_sslInfo))
          return false;
        if (!this.sslInfo.equals(that.sslInfo))
          return false;
      }

      boolean this_present_callback = true && this.isSetCallback();
      boolean that_present_callback = true && that.isSetCallback();
      if (this_present_callback || that_present_callback) {
        if (!(this_present_callback && that_present_callback))
          return false;
        if (!this.callback.equals(that.callback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetCert_error()) ? 131071 : 524287);
      if (isSetCert_error())
        hashCode = hashCode * 8191 + cert_error.hashCode();

      hashCode = hashCode * 8191 + ((isSetRequest_url()) ? 131071 : 524287);
      if (isSetRequest_url())
        hashCode = hashCode * 8191 + request_url.hashCode();

      hashCode = hashCode * 8191 + ((isSetSslInfo()) ? 131071 : 524287);
      if (isSetSslInfo())
        hashCode = hashCode * 8191 + sslInfo.hashCode();

      hashCode = hashCode * 8191 + ((isSetCallback()) ? 131071 : 524287);
      if (isSetCallback())
        hashCode = hashCode * 8191 + callback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_OnCertificateError_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCert_error(), other.isSetCert_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCert_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cert_error, other.cert_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest_url(), other.isSetRequest_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_url, other.request_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSslInfo(), other.isSetSslInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSslInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sslInfo, other.sslInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCallback(), other.isSetCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, other.callback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_OnCertificateError_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cert_error:");
      if (this.cert_error == null) {
        sb.append("null");
      } else {
        sb.append(this.cert_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("request_url:");
      if (this.request_url == null) {
        sb.append("null");
      } else {
        sb.append(this.request_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sslInfo:");
      if (this.sslInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.sslInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("callback:");
      if (this.callback == null) {
        sb.append("null");
      } else {
        sb.append(this.callback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sslInfo != null) {
        sslInfo.validate();
      }
      if (callback != null) {
        callback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_OnCertificateError_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnCertificateError_argsStandardScheme getScheme() {
        return new RequestHandler_OnCertificateError_argsStandardScheme();
      }
    }

    private static class RequestHandler_OnCertificateError_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_OnCertificateError_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_OnCertificateError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CERT_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cert_error = iprot.readString();
                struct.setCert_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.request_url = iprot.readString();
                struct.setRequest_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SSL_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sslInfo = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.sslInfo.read(iprot);
                struct.setSslInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.callback.read(iprot);
                struct.setCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_OnCertificateError_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.cert_error != null) {
          oprot.writeFieldBegin(CERT_ERROR_FIELD_DESC);
          oprot.writeString(struct.cert_error);
          oprot.writeFieldEnd();
        }
        if (struct.request_url != null) {
          oprot.writeFieldBegin(REQUEST_URL_FIELD_DESC);
          oprot.writeString(struct.request_url);
          oprot.writeFieldEnd();
        }
        if (struct.sslInfo != null) {
          oprot.writeFieldBegin(SSL_INFO_FIELD_DESC);
          struct.sslInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.callback != null) {
          oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
          struct.callback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_OnCertificateError_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnCertificateError_argsTupleScheme getScheme() {
        return new RequestHandler_OnCertificateError_argsTupleScheme();
      }
    }

    private static class RequestHandler_OnCertificateError_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_OnCertificateError_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnCertificateError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetCert_error()) {
          optionals.set(1);
        }
        if (struct.isSetRequest_url()) {
          optionals.set(2);
        }
        if (struct.isSetSslInfo()) {
          optionals.set(3);
        }
        if (struct.isSetCallback()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetCert_error()) {
          oprot.writeString(struct.cert_error);
        }
        if (struct.isSetRequest_url()) {
          oprot.writeString(struct.request_url);
        }
        if (struct.isSetSslInfo()) {
          struct.sslInfo.write(oprot);
        }
        if (struct.isSetCallback()) {
          struct.callback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnCertificateError_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cert_error = iprot.readString();
          struct.setCert_errorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request_url = iprot.readString();
          struct.setRequest_urlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sslInfo = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.sslInfo.read(iprot);
          struct.setSslInfoIsSet(true);
        }
        if (incoming.get(4)) {
          struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.callback.read(iprot);
          struct.setCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_OnCertificateError_result implements org.apache.thrift.TBase<RequestHandler_OnCertificateError_result, RequestHandler_OnCertificateError_result._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_OnCertificateError_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_OnCertificateError_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_OnCertificateError_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_OnCertificateError_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_OnCertificateError_result.class, metaDataMap);
    }

    public RequestHandler_OnCertificateError_result() {
    }

    public RequestHandler_OnCertificateError_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_OnCertificateError_result(RequestHandler_OnCertificateError_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public RequestHandler_OnCertificateError_result deepCopy() {
      return new RequestHandler_OnCertificateError_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public RequestHandler_OnCertificateError_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_OnCertificateError_result)
        return this.equals((RequestHandler_OnCertificateError_result)that);
      return false;
    }

    public boolean equals(RequestHandler_OnCertificateError_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_OnCertificateError_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_OnCertificateError_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_OnCertificateError_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnCertificateError_resultStandardScheme getScheme() {
        return new RequestHandler_OnCertificateError_resultStandardScheme();
      }
    }

    private static class RequestHandler_OnCertificateError_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_OnCertificateError_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_OnCertificateError_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_OnCertificateError_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_OnCertificateError_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnCertificateError_resultTupleScheme getScheme() {
        return new RequestHandler_OnCertificateError_resultTupleScheme();
      }
    }

    private static class RequestHandler_OnCertificateError_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_OnCertificateError_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnCertificateError_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnCertificateError_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_OnRenderProcessTerminated_args implements org.apache.thrift.TBase<RequestHandler_OnRenderProcessTerminated_args, RequestHandler_OnRenderProcessTerminated_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_OnRenderProcessTerminated_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_OnRenderProcessTerminated_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_OnRenderProcessTerminated_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_OnRenderProcessTerminated_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      STATUS((short)2, "status");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_OnRenderProcessTerminated_args.class, metaDataMap);
    }

    public RequestHandler_OnRenderProcessTerminated_args() {
    }

    public RequestHandler_OnRenderProcessTerminated_args(
      int bid,
      java.lang.String status)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_OnRenderProcessTerminated_args(RequestHandler_OnRenderProcessTerminated_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    @Override
    public RequestHandler_OnRenderProcessTerminated_args deepCopy() {
      return new RequestHandler_OnRenderProcessTerminated_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.status = null;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestHandler_OnRenderProcessTerminated_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getStatus() {
      return this.status;
    }

    public RequestHandler_OnRenderProcessTerminated_args setStatus(@org.apache.thrift.annotation.Nullable java.lang.String status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case STATUS:
        return getStatus();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case STATUS:
        return isSetStatus();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_OnRenderProcessTerminated_args)
        return this.equals((RequestHandler_OnRenderProcessTerminated_args)that);
      return false;
    }

    public boolean equals(RequestHandler_OnRenderProcessTerminated_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
      if (isSetStatus())
        hashCode = hashCode * 8191 + status.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_OnRenderProcessTerminated_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_OnRenderProcessTerminated_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_OnRenderProcessTerminated_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnRenderProcessTerminated_argsStandardScheme getScheme() {
        return new RequestHandler_OnRenderProcessTerminated_argsStandardScheme();
      }
    }

    private static class RequestHandler_OnRenderProcessTerminated_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_OnRenderProcessTerminated_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_OnRenderProcessTerminated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.status = iprot.readString();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_OnRenderProcessTerminated_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_OnRenderProcessTerminated_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_OnRenderProcessTerminated_argsTupleScheme getScheme() {
        return new RequestHandler_OnRenderProcessTerminated_argsTupleScheme();
      }
    }

    private static class RequestHandler_OnRenderProcessTerminated_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_OnRenderProcessTerminated_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnRenderProcessTerminated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetStatus()) {
          oprot.writeString(struct.status);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_OnRenderProcessTerminated_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = iprot.readString();
          struct.setStatusIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_GetResourceRequestHandler_args implements org.apache.thrift.TBase<RequestHandler_GetResourceRequestHandler_args, RequestHandler_GetResourceRequestHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_GetResourceRequestHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_GetResourceRequestHandler_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField IS_NAVIGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isNavigation", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField IS_DOWNLOAD_FIELD_DESC = new org.apache.thrift.protocol.TField("isDownload", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField REQUEST_INITIATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("requestInitiator", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_GetResourceRequestHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_GetResourceRequestHandler_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public boolean isNavigation; // required
    public boolean isDownload; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String requestInitiator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      REQUEST((short)2, "request"),
      IS_NAVIGATION((short)3, "isNavigation"),
      IS_DOWNLOAD((short)4, "isDownload"),
      REQUEST_INITIATOR((short)5, "requestInitiator");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // REQUEST
            return REQUEST;
          case 3: // IS_NAVIGATION
            return IS_NAVIGATION;
          case 4: // IS_DOWNLOAD
            return IS_DOWNLOAD;
          case 5: // REQUEST_INITIATOR
            return REQUEST_INITIATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __ISNAVIGATION_ISSET_ID = 1;
    private static final int __ISDOWNLOAD_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.IS_NAVIGATION, new org.apache.thrift.meta_data.FieldMetaData("isNavigation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.IS_DOWNLOAD, new org.apache.thrift.meta_data.FieldMetaData("isDownload", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.REQUEST_INITIATOR, new org.apache.thrift.meta_data.FieldMetaData("requestInitiator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_GetResourceRequestHandler_args.class, metaDataMap);
    }

    public RequestHandler_GetResourceRequestHandler_args() {
    }

    public RequestHandler_GetResourceRequestHandler_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      boolean isNavigation,
      boolean isDownload,
      java.lang.String requestInitiator)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.isNavigation = isNavigation;
      setIsNavigationIsSet(true);
      this.isDownload = isDownload;
      setIsDownloadIsSet(true);
      this.requestInitiator = requestInitiator;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_GetResourceRequestHandler_args(RequestHandler_GetResourceRequestHandler_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      this.isNavigation = other.isNavigation;
      this.isDownload = other.isDownload;
      if (other.isSetRequestInitiator()) {
        this.requestInitiator = other.requestInitiator;
      }
    }

    @Override
    public RequestHandler_GetResourceRequestHandler_args deepCopy() {
      return new RequestHandler_GetResourceRequestHandler_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      setIsNavigationIsSet(false);
      this.isNavigation = false;
      setIsDownloadIsSet(false);
      this.isDownload = false;
      this.requestInitiator = null;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestHandler_GetResourceRequestHandler_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public RequestHandler_GetResourceRequestHandler_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean isIsNavigation() {
      return this.isNavigation;
    }

    public RequestHandler_GetResourceRequestHandler_args setIsNavigation(boolean isNavigation) {
      this.isNavigation = isNavigation;
      setIsNavigationIsSet(true);
      return this;
    }

    public void unsetIsNavigation() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISNAVIGATION_ISSET_ID);
    }

    /** Returns true if field isNavigation is set (has been assigned a value) and false otherwise */
    public boolean isSetIsNavigation() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISNAVIGATION_ISSET_ID);
    }

    public void setIsNavigationIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISNAVIGATION_ISSET_ID, value);
    }

    public boolean isIsDownload() {
      return this.isDownload;
    }

    public RequestHandler_GetResourceRequestHandler_args setIsDownload(boolean isDownload) {
      this.isDownload = isDownload;
      setIsDownloadIsSet(true);
      return this;
    }

    public void unsetIsDownload() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDOWNLOAD_ISSET_ID);
    }

    /** Returns true if field isDownload is set (has been assigned a value) and false otherwise */
    public boolean isSetIsDownload() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDOWNLOAD_ISSET_ID);
    }

    public void setIsDownloadIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDOWNLOAD_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRequestInitiator() {
      return this.requestInitiator;
    }

    public RequestHandler_GetResourceRequestHandler_args setRequestInitiator(@org.apache.thrift.annotation.Nullable java.lang.String requestInitiator) {
      this.requestInitiator = requestInitiator;
      return this;
    }

    public void unsetRequestInitiator() {
      this.requestInitiator = null;
    }

    /** Returns true if field requestInitiator is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestInitiator() {
      return this.requestInitiator != null;
    }

    public void setRequestInitiatorIsSet(boolean value) {
      if (!value) {
        this.requestInitiator = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case IS_NAVIGATION:
        if (value == null) {
          unsetIsNavigation();
        } else {
          setIsNavigation((java.lang.Boolean)value);
        }
        break;

      case IS_DOWNLOAD:
        if (value == null) {
          unsetIsDownload();
        } else {
          setIsDownload((java.lang.Boolean)value);
        }
        break;

      case REQUEST_INITIATOR:
        if (value == null) {
          unsetRequestInitiator();
        } else {
          setRequestInitiator((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case IS_NAVIGATION:
        return isIsNavigation();

      case IS_DOWNLOAD:
        return isIsDownload();

      case REQUEST_INITIATOR:
        return getRequestInitiator();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case IS_NAVIGATION:
        return isSetIsNavigation();
      case IS_DOWNLOAD:
        return isSetIsDownload();
      case REQUEST_INITIATOR:
        return isSetRequestInitiator();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_GetResourceRequestHandler_args)
        return this.equals((RequestHandler_GetResourceRequestHandler_args)that);
      return false;
    }

    public boolean equals(RequestHandler_GetResourceRequestHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_isNavigation = true;
      boolean that_present_isNavigation = true;
      if (this_present_isNavigation || that_present_isNavigation) {
        if (!(this_present_isNavigation && that_present_isNavigation))
          return false;
        if (this.isNavigation != that.isNavigation)
          return false;
      }

      boolean this_present_isDownload = true;
      boolean that_present_isDownload = true;
      if (this_present_isDownload || that_present_isDownload) {
        if (!(this_present_isDownload && that_present_isDownload))
          return false;
        if (this.isDownload != that.isDownload)
          return false;
      }

      boolean this_present_requestInitiator = true && this.isSetRequestInitiator();
      boolean that_present_requestInitiator = true && that.isSetRequestInitiator();
      if (this_present_requestInitiator || that_present_requestInitiator) {
        if (!(this_present_requestInitiator && that_present_requestInitiator))
          return false;
        if (!this.requestInitiator.equals(that.requestInitiator))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isNavigation) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isDownload) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetRequestInitiator()) ? 131071 : 524287);
      if (isSetRequestInitiator())
        hashCode = hashCode * 8191 + requestInitiator.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_GetResourceRequestHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsNavigation(), other.isSetIsNavigation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsNavigation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNavigation, other.isNavigation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsDownload(), other.isSetIsDownload());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsDownload()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDownload, other.isDownload);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequestInitiator(), other.isSetRequestInitiator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestInitiator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestInitiator, other.requestInitiator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_GetResourceRequestHandler_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isNavigation:");
      sb.append(this.isNavigation);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isDownload:");
      sb.append(this.isDownload);
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestInitiator:");
      if (this.requestInitiator == null) {
        sb.append("null");
      } else {
        sb.append(this.requestInitiator);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_GetResourceRequestHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetResourceRequestHandler_argsStandardScheme getScheme() {
        return new RequestHandler_GetResourceRequestHandler_argsStandardScheme();
      }
    }

    private static class RequestHandler_GetResourceRequestHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_GetResourceRequestHandler_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_GetResourceRequestHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IS_NAVIGATION
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isNavigation = iprot.readBool();
                struct.setIsNavigationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IS_DOWNLOAD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isDownload = iprot.readBool();
                struct.setIsDownloadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REQUEST_INITIATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.requestInitiator = iprot.readString();
                struct.setRequestInitiatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_GetResourceRequestHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_NAVIGATION_FIELD_DESC);
        oprot.writeBool(struct.isNavigation);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_DOWNLOAD_FIELD_DESC);
        oprot.writeBool(struct.isDownload);
        oprot.writeFieldEnd();
        if (struct.requestInitiator != null) {
          oprot.writeFieldBegin(REQUEST_INITIATOR_FIELD_DESC);
          oprot.writeString(struct.requestInitiator);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_GetResourceRequestHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetResourceRequestHandler_argsTupleScheme getScheme() {
        return new RequestHandler_GetResourceRequestHandler_argsTupleScheme();
      }
    }

    private static class RequestHandler_GetResourceRequestHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_GetResourceRequestHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetResourceRequestHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetRequest()) {
          optionals.set(1);
        }
        if (struct.isSetIsNavigation()) {
          optionals.set(2);
        }
        if (struct.isSetIsDownload()) {
          optionals.set(3);
        }
        if (struct.isSetRequestInitiator()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetIsNavigation()) {
          oprot.writeBool(struct.isNavigation);
        }
        if (struct.isSetIsDownload()) {
          oprot.writeBool(struct.isDownload);
        }
        if (struct.isSetRequestInitiator()) {
          oprot.writeString(struct.requestInitiator);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetResourceRequestHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.isNavigation = iprot.readBool();
          struct.setIsNavigationIsSet(true);
        }
        if (incoming.get(3)) {
          struct.isDownload = iprot.readBool();
          struct.setIsDownloadIsSet(true);
        }
        if (incoming.get(4)) {
          struct.requestInitiator = iprot.readString();
          struct.setRequestInitiatorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestHandler_GetResourceRequestHandler_result implements org.apache.thrift.TBase<RequestHandler_GetResourceRequestHandler_result, RequestHandler_GetResourceRequestHandler_result._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHandler_GetResourceRequestHandler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHandler_GetResourceRequestHandler_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHandler_GetResourceRequestHandler_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHandler_GetResourceRequestHandler_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHandler_GetResourceRequestHandler_result.class, metaDataMap);
    }

    public RequestHandler_GetResourceRequestHandler_result() {
    }

    public RequestHandler_GetResourceRequestHandler_result(
      com.jetbrains.cef.remote.thrift_codegen.RObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestHandler_GetResourceRequestHandler_result(RequestHandler_GetResourceRequestHandler_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.success);
      }
    }

    @Override
    public RequestHandler_GetResourceRequestHandler_result deepCopy() {
      return new RequestHandler_GetResourceRequestHandler_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSuccess() {
      return this.success;
    }

    public RequestHandler_GetResourceRequestHandler_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestHandler_GetResourceRequestHandler_result)
        return this.equals((RequestHandler_GetResourceRequestHandler_result)that);
      return false;
    }

    public boolean equals(RequestHandler_GetResourceRequestHandler_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RequestHandler_GetResourceRequestHandler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHandler_GetResourceRequestHandler_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestHandler_GetResourceRequestHandler_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetResourceRequestHandler_resultStandardScheme getScheme() {
        return new RequestHandler_GetResourceRequestHandler_resultStandardScheme();
      }
    }

    private static class RequestHandler_GetResourceRequestHandler_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHandler_GetResourceRequestHandler_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHandler_GetResourceRequestHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHandler_GetResourceRequestHandler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestHandler_GetResourceRequestHandler_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestHandler_GetResourceRequestHandler_resultTupleScheme getScheme() {
        return new RequestHandler_GetResourceRequestHandler_resultTupleScheme();
      }
    }

    private static class RequestHandler_GetResourceRequestHandler_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHandler_GetResourceRequestHandler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetResourceRequestHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestHandler_GetResourceRequestHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_Dispose_args implements org.apache.thrift.TBase<ResourceRequestHandler_Dispose_args, ResourceRequestHandler_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_Dispose_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_Dispose_argsTupleSchemeFactory();

    public int rrHandler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_Dispose_args.class, metaDataMap);
    }

    public ResourceRequestHandler_Dispose_args() {
    }

    public ResourceRequestHandler_Dispose_args(
      int rrHandler)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_Dispose_args(ResourceRequestHandler_Dispose_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
    }

    @Override
    public ResourceRequestHandler_Dispose_args deepCopy() {
      return new ResourceRequestHandler_Dispose_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_Dispose_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_Dispose_args)
        return this.equals((ResourceRequestHandler_Dispose_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_Dispose_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_Dispose_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_Dispose_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_Dispose_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_Dispose_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_GetCookieAccessFilter_args implements org.apache.thrift.TBase<ResourceRequestHandler_GetCookieAccessFilter_args, ResourceRequestHandler_GetCookieAccessFilter_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_GetCookieAccessFilter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_GetCookieAccessFilter_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_GetCookieAccessFilter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_GetCookieAccessFilter_argsTupleSchemeFactory();

    public int rrHandler; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_GetCookieAccessFilter_args.class, metaDataMap);
    }

    public ResourceRequestHandler_GetCookieAccessFilter_args() {
    }

    public ResourceRequestHandler_GetCookieAccessFilter_args(
      int rrHandler,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_GetCookieAccessFilter_args(ResourceRequestHandler_GetCookieAccessFilter_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public ResourceRequestHandler_GetCookieAccessFilter_args deepCopy() {
      return new ResourceRequestHandler_GetCookieAccessFilter_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_GetCookieAccessFilter_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public ResourceRequestHandler_GetCookieAccessFilter_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public ResourceRequestHandler_GetCookieAccessFilter_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_GetCookieAccessFilter_args)
        return this.equals((ResourceRequestHandler_GetCookieAccessFilter_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_GetCookieAccessFilter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_GetCookieAccessFilter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_GetCookieAccessFilter_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetCookieAccessFilter_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_GetCookieAccessFilter_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_GetCookieAccessFilter_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_GetCookieAccessFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_GetCookieAccessFilter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetCookieAccessFilter_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_GetCookieAccessFilter_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_GetCookieAccessFilter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetCookieAccessFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetCookieAccessFilter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_GetCookieAccessFilter_result implements org.apache.thrift.TBase<ResourceRequestHandler_GetCookieAccessFilter_result, ResourceRequestHandler_GetCookieAccessFilter_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_GetCookieAccessFilter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_GetCookieAccessFilter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_GetCookieAccessFilter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_GetCookieAccessFilter_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_GetCookieAccessFilter_result.class, metaDataMap);
    }

    public ResourceRequestHandler_GetCookieAccessFilter_result() {
    }

    public ResourceRequestHandler_GetCookieAccessFilter_result(
      com.jetbrains.cef.remote.thrift_codegen.RObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_GetCookieAccessFilter_result(ResourceRequestHandler_GetCookieAccessFilter_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.success);
      }
    }

    @Override
    public ResourceRequestHandler_GetCookieAccessFilter_result deepCopy() {
      return new ResourceRequestHandler_GetCookieAccessFilter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSuccess() {
      return this.success;
    }

    public ResourceRequestHandler_GetCookieAccessFilter_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_GetCookieAccessFilter_result)
        return this.equals((ResourceRequestHandler_GetCookieAccessFilter_result)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_GetCookieAccessFilter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_GetCookieAccessFilter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_GetCookieAccessFilter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetCookieAccessFilter_resultStandardScheme getScheme() {
        return new ResourceRequestHandler_GetCookieAccessFilter_resultStandardScheme();
      }
    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_GetCookieAccessFilter_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_GetCookieAccessFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_GetCookieAccessFilter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetCookieAccessFilter_resultTupleScheme getScheme() {
        return new ResourceRequestHandler_GetCookieAccessFilter_resultTupleScheme();
      }
    }

    private static class ResourceRequestHandler_GetCookieAccessFilter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_GetCookieAccessFilter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetCookieAccessFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetCookieAccessFilter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieAccessFilter_Dispose_args implements org.apache.thrift.TBase<CookieAccessFilter_Dispose_args, CookieAccessFilter_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieAccessFilter_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieAccessFilter_Dispose_args");

    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieAccessFilter_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieAccessFilter_Dispose_argsTupleSchemeFactory();

    public int filter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER((short)1, "filter");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER
            return FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILTER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieAccessFilter_Dispose_args.class, metaDataMap);
    }

    public CookieAccessFilter_Dispose_args() {
    }

    public CookieAccessFilter_Dispose_args(
      int filter)
    {
      this();
      this.filter = filter;
      setFilterIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieAccessFilter_Dispose_args(CookieAccessFilter_Dispose_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.filter = other.filter;
    }

    @Override
    public CookieAccessFilter_Dispose_args deepCopy() {
      return new CookieAccessFilter_Dispose_args(this);
    }

    @Override
    public void clear() {
      setFilterIsSet(false);
      this.filter = 0;
    }

    public int getFilter() {
      return this.filter;
    }

    public CookieAccessFilter_Dispose_args setFilter(int filter) {
      this.filter = filter;
      setFilterIsSet(true);
      return this;
    }

    public void unsetFilter() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ISSET_ID);
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ISSET_ID);
    }

    public void setFilterIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER:
        return getFilter();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILTER:
        return isSetFilter();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieAccessFilter_Dispose_args)
        return this.equals((CookieAccessFilter_Dispose_args)that);
      return false;
    }

    public boolean equals(CookieAccessFilter_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filter = true;
      boolean that_present_filter = true;
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (this.filter != that.filter)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + filter;

      return hashCode;
    }

    @Override
    public int compareTo(CookieAccessFilter_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilter(), other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieAccessFilter_Dispose_args(");
      boolean first = true;

      sb.append("filter:");
      sb.append(this.filter);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieAccessFilter_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_Dispose_argsStandardScheme getScheme() {
        return new CookieAccessFilter_Dispose_argsStandardScheme();
      }
    }

    private static class CookieAccessFilter_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieAccessFilter_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieAccessFilter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.filter = iprot.readI32();
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieAccessFilter_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        oprot.writeI32(struct.filter);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieAccessFilter_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_Dispose_argsTupleScheme getScheme() {
        return new CookieAccessFilter_Dispose_argsTupleScheme();
      }
    }

    private static class CookieAccessFilter_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieAccessFilter_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilter()) {
          oprot.writeI32(struct.filter);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filter = iprot.readI32();
          struct.setFilterIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieAccessFilter_CanSendCookie_args implements org.apache.thrift.TBase<CookieAccessFilter_CanSendCookie_args, CookieAccessFilter_CanSendCookie_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieAccessFilter_CanSendCookie_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieAccessFilter_CanSendCookie_args");

    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("cookie", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieAccessFilter_CanSendCookie_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieAccessFilter_CanSendCookie_argsTupleSchemeFactory();

    public int filter; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cookie; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER((short)1, "filter"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request"),
      COOKIE((short)4, "cookie");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER
            return FILTER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          case 4: // COOKIE
            return COOKIE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILTER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.COOKIE, new org.apache.thrift.meta_data.FieldMetaData("cookie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieAccessFilter_CanSendCookie_args.class, metaDataMap);
    }

    public CookieAccessFilter_CanSendCookie_args() {
    }

    public CookieAccessFilter_CanSendCookie_args(
      int filter,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.util.List<java.lang.String> cookie)
    {
      this();
      this.filter = filter;
      setFilterIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.cookie = cookie;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieAccessFilter_CanSendCookie_args(CookieAccessFilter_CanSendCookie_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.filter = other.filter;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetCookie()) {
        java.util.List<java.lang.String> __this__cookie = new java.util.ArrayList<java.lang.String>(other.cookie);
        this.cookie = __this__cookie;
      }
    }

    @Override
    public CookieAccessFilter_CanSendCookie_args deepCopy() {
      return new CookieAccessFilter_CanSendCookie_args(this);
    }

    @Override
    public void clear() {
      setFilterIsSet(false);
      this.filter = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      this.cookie = null;
    }

    public int getFilter() {
      return this.filter;
    }

    public CookieAccessFilter_CanSendCookie_args setFilter(int filter) {
      this.filter = filter;
      setFilterIsSet(true);
      return this;
    }

    public void unsetFilter() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ISSET_ID);
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ISSET_ID);
    }

    public void setFilterIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public CookieAccessFilter_CanSendCookie_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public CookieAccessFilter_CanSendCookie_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public int getCookieSize() {
      return (this.cookie == null) ? 0 : this.cookie.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getCookieIterator() {
      return (this.cookie == null) ? null : this.cookie.iterator();
    }

    public void addToCookie(java.lang.String elem) {
      if (this.cookie == null) {
        this.cookie = new java.util.ArrayList<java.lang.String>();
      }
      this.cookie.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getCookie() {
      return this.cookie;
    }

    public CookieAccessFilter_CanSendCookie_args setCookie(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cookie) {
      this.cookie = cookie;
      return this;
    }

    public void unsetCookie() {
      this.cookie = null;
    }

    /** Returns true if field cookie is set (has been assigned a value) and false otherwise */
    public boolean isSetCookie() {
      return this.cookie != null;
    }

    public void setCookieIsSet(boolean value) {
      if (!value) {
        this.cookie = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case COOKIE:
        if (value == null) {
          unsetCookie();
        } else {
          setCookie((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER:
        return getFilter();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case COOKIE:
        return getCookie();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILTER:
        return isSetFilter();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case COOKIE:
        return isSetCookie();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieAccessFilter_CanSendCookie_args)
        return this.equals((CookieAccessFilter_CanSendCookie_args)that);
      return false;
    }

    public boolean equals(CookieAccessFilter_CanSendCookie_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filter = true;
      boolean that_present_filter = true;
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (this.filter != that.filter)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_cookie = true && this.isSetCookie();
      boolean that_present_cookie = true && that.isSetCookie();
      if (this_present_cookie || that_present_cookie) {
        if (!(this_present_cookie && that_present_cookie))
          return false;
        if (!this.cookie.equals(that.cookie))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + filter;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetCookie()) ? 131071 : 524287);
      if (isSetCookie())
        hashCode = hashCode * 8191 + cookie.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieAccessFilter_CanSendCookie_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilter(), other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCookie(), other.isSetCookie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookie, other.cookie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieAccessFilter_CanSendCookie_args(");
      boolean first = true;

      sb.append("filter:");
      sb.append(this.filter);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cookie:");
      if (this.cookie == null) {
        sb.append("null");
      } else {
        sb.append(this.cookie);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieAccessFilter_CanSendCookie_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSendCookie_argsStandardScheme getScheme() {
        return new CookieAccessFilter_CanSendCookie_argsStandardScheme();
      }
    }

    private static class CookieAccessFilter_CanSendCookie_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieAccessFilter_CanSendCookie_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieAccessFilter_CanSendCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.filter = iprot.readI32();
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COOKIE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.cookie = new java.util.ArrayList<java.lang.String>(_list8.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.cookie.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setCookieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieAccessFilter_CanSendCookie_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        oprot.writeI32(struct.filter);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cookie != null) {
          oprot.writeFieldBegin(COOKIE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cookie.size()));
            for (java.lang.String _iter11 : struct.cookie)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieAccessFilter_CanSendCookie_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSendCookie_argsTupleScheme getScheme() {
        return new CookieAccessFilter_CanSendCookie_argsTupleScheme();
      }
    }

    private static class CookieAccessFilter_CanSendCookie_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieAccessFilter_CanSendCookie_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSendCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        if (struct.isSetCookie()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilter()) {
          oprot.writeI32(struct.filter);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetCookie()) {
          {
            oprot.writeI32(struct.cookie.size());
            for (java.lang.String _iter12 : struct.cookie)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSendCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filter = iprot.readI32();
          struct.setFilterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.cookie = new java.util.ArrayList<java.lang.String>(_list13.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.cookie.add(_elem14);
            }
          }
          struct.setCookieIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieAccessFilter_CanSendCookie_result implements org.apache.thrift.TBase<CookieAccessFilter_CanSendCookie_result, CookieAccessFilter_CanSendCookie_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieAccessFilter_CanSendCookie_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieAccessFilter_CanSendCookie_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieAccessFilter_CanSendCookie_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieAccessFilter_CanSendCookie_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieAccessFilter_CanSendCookie_result.class, metaDataMap);
    }

    public CookieAccessFilter_CanSendCookie_result() {
    }

    public CookieAccessFilter_CanSendCookie_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieAccessFilter_CanSendCookie_result(CookieAccessFilter_CanSendCookie_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public CookieAccessFilter_CanSendCookie_result deepCopy() {
      return new CookieAccessFilter_CanSendCookie_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CookieAccessFilter_CanSendCookie_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieAccessFilter_CanSendCookie_result)
        return this.equals((CookieAccessFilter_CanSendCookie_result)that);
      return false;
    }

    public boolean equals(CookieAccessFilter_CanSendCookie_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieAccessFilter_CanSendCookie_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieAccessFilter_CanSendCookie_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieAccessFilter_CanSendCookie_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSendCookie_resultStandardScheme getScheme() {
        return new CookieAccessFilter_CanSendCookie_resultStandardScheme();
      }
    }

    private static class CookieAccessFilter_CanSendCookie_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieAccessFilter_CanSendCookie_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieAccessFilter_CanSendCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieAccessFilter_CanSendCookie_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieAccessFilter_CanSendCookie_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSendCookie_resultTupleScheme getScheme() {
        return new CookieAccessFilter_CanSendCookie_resultTupleScheme();
      }
    }

    private static class CookieAccessFilter_CanSendCookie_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieAccessFilter_CanSendCookie_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSendCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSendCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieAccessFilter_CanSaveCookie_args implements org.apache.thrift.TBase<CookieAccessFilter_CanSaveCookie_args, CookieAccessFilter_CanSaveCookie_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieAccessFilter_CanSaveCookie_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieAccessFilter_CanSaveCookie_args");

    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("cookie", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieAccessFilter_CanSaveCookie_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieAccessFilter_CanSaveCookie_argsTupleSchemeFactory();

    public int filter; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cookie; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER((short)1, "filter"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request"),
      RESPONSE((short)4, "response"),
      COOKIE((short)5, "cookie");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER
            return FILTER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          case 4: // RESPONSE
            return RESPONSE;
          case 5: // COOKIE
            return COOKIE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILTER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.COOKIE, new org.apache.thrift.meta_data.FieldMetaData("cookie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieAccessFilter_CanSaveCookie_args.class, metaDataMap);
    }

    public CookieAccessFilter_CanSaveCookie_args() {
    }

    public CookieAccessFilter_CanSaveCookie_args(
      int filter,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.util.List<java.lang.String> cookie)
    {
      this();
      this.filter = filter;
      setFilterIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.response = response;
      this.cookie = cookie;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieAccessFilter_CanSaveCookie_args(CookieAccessFilter_CanSaveCookie_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.filter = other.filter;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetCookie()) {
        java.util.List<java.lang.String> __this__cookie = new java.util.ArrayList<java.lang.String>(other.cookie);
        this.cookie = __this__cookie;
      }
    }

    @Override
    public CookieAccessFilter_CanSaveCookie_args deepCopy() {
      return new CookieAccessFilter_CanSaveCookie_args(this);
    }

    @Override
    public void clear() {
      setFilterIsSet(false);
      this.filter = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      this.response = null;
      this.cookie = null;
    }

    public int getFilter() {
      return this.filter;
    }

    public CookieAccessFilter_CanSaveCookie_args setFilter(int filter) {
      this.filter = filter;
      setFilterIsSet(true);
      return this;
    }

    public void unsetFilter() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTER_ISSET_ID);
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTER_ISSET_ID);
    }

    public void setFilterIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public CookieAccessFilter_CanSaveCookie_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public CookieAccessFilter_CanSaveCookie_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public CookieAccessFilter_CanSaveCookie_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    public int getCookieSize() {
      return (this.cookie == null) ? 0 : this.cookie.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getCookieIterator() {
      return (this.cookie == null) ? null : this.cookie.iterator();
    }

    public void addToCookie(java.lang.String elem) {
      if (this.cookie == null) {
        this.cookie = new java.util.ArrayList<java.lang.String>();
      }
      this.cookie.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getCookie() {
      return this.cookie;
    }

    public CookieAccessFilter_CanSaveCookie_args setCookie(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cookie) {
      this.cookie = cookie;
      return this;
    }

    public void unsetCookie() {
      this.cookie = null;
    }

    /** Returns true if field cookie is set (has been assigned a value) and false otherwise */
    public boolean isSetCookie() {
      return this.cookie != null;
    }

    public void setCookieIsSet(boolean value) {
      if (!value) {
        this.cookie = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case COOKIE:
        if (value == null) {
          unsetCookie();
        } else {
          setCookie((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER:
        return getFilter();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case RESPONSE:
        return getResponse();

      case COOKIE:
        return getCookie();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILTER:
        return isSetFilter();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case RESPONSE:
        return isSetResponse();
      case COOKIE:
        return isSetCookie();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieAccessFilter_CanSaveCookie_args)
        return this.equals((CookieAccessFilter_CanSaveCookie_args)that);
      return false;
    }

    public boolean equals(CookieAccessFilter_CanSaveCookie_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filter = true;
      boolean that_present_filter = true;
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (this.filter != that.filter)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_cookie = true && this.isSetCookie();
      boolean that_present_cookie = true && that.isSetCookie();
      if (this_present_cookie || that_present_cookie) {
        if (!(this_present_cookie && that_present_cookie))
          return false;
        if (!this.cookie.equals(that.cookie))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + filter;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetCookie()) ? 131071 : 524287);
      if (isSetCookie())
        hashCode = hashCode * 8191 + cookie.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieAccessFilter_CanSaveCookie_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilter(), other.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, other.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCookie(), other.isSetCookie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookie, other.cookie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieAccessFilter_CanSaveCookie_args(");
      boolean first = true;

      sb.append("filter:");
      sb.append(this.filter);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cookie:");
      if (this.cookie == null) {
        sb.append("null");
      } else {
        sb.append(this.cookie);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieAccessFilter_CanSaveCookie_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSaveCookie_argsStandardScheme getScheme() {
        return new CookieAccessFilter_CanSaveCookie_argsStandardScheme();
      }
    }

    private static class CookieAccessFilter_CanSaveCookie_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieAccessFilter_CanSaveCookie_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieAccessFilter_CanSaveCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.filter = iprot.readI32();
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COOKIE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.cookie = new java.util.ArrayList<java.lang.String>(_list16.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.cookie.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setCookieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieAccessFilter_CanSaveCookie_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILTER_FIELD_DESC);
        oprot.writeI32(struct.filter);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cookie != null) {
          oprot.writeFieldBegin(COOKIE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cookie.size()));
            for (java.lang.String _iter19 : struct.cookie)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieAccessFilter_CanSaveCookie_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSaveCookie_argsTupleScheme getScheme() {
        return new CookieAccessFilter_CanSaveCookie_argsTupleScheme();
      }
    }

    private static class CookieAccessFilter_CanSaveCookie_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieAccessFilter_CanSaveCookie_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSaveCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        if (struct.isSetResponse()) {
          optionals.set(3);
        }
        if (struct.isSetCookie()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetFilter()) {
          oprot.writeI32(struct.filter);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetCookie()) {
          {
            oprot.writeI32(struct.cookie.size());
            for (java.lang.String _iter20 : struct.cookie)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSaveCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.filter = iprot.readI32();
          struct.setFilterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(3)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.cookie = new java.util.ArrayList<java.lang.String>(_list21.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.cookie.add(_elem22);
            }
          }
          struct.setCookieIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieAccessFilter_CanSaveCookie_result implements org.apache.thrift.TBase<CookieAccessFilter_CanSaveCookie_result, CookieAccessFilter_CanSaveCookie_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieAccessFilter_CanSaveCookie_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieAccessFilter_CanSaveCookie_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieAccessFilter_CanSaveCookie_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieAccessFilter_CanSaveCookie_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieAccessFilter_CanSaveCookie_result.class, metaDataMap);
    }

    public CookieAccessFilter_CanSaveCookie_result() {
    }

    public CookieAccessFilter_CanSaveCookie_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieAccessFilter_CanSaveCookie_result(CookieAccessFilter_CanSaveCookie_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public CookieAccessFilter_CanSaveCookie_result deepCopy() {
      return new CookieAccessFilter_CanSaveCookie_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CookieAccessFilter_CanSaveCookie_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieAccessFilter_CanSaveCookie_result)
        return this.equals((CookieAccessFilter_CanSaveCookie_result)that);
      return false;
    }

    public boolean equals(CookieAccessFilter_CanSaveCookie_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieAccessFilter_CanSaveCookie_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieAccessFilter_CanSaveCookie_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieAccessFilter_CanSaveCookie_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSaveCookie_resultStandardScheme getScheme() {
        return new CookieAccessFilter_CanSaveCookie_resultStandardScheme();
      }
    }

    private static class CookieAccessFilter_CanSaveCookie_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieAccessFilter_CanSaveCookie_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieAccessFilter_CanSaveCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieAccessFilter_CanSaveCookie_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieAccessFilter_CanSaveCookie_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieAccessFilter_CanSaveCookie_resultTupleScheme getScheme() {
        return new CookieAccessFilter_CanSaveCookie_resultTupleScheme();
      }
    }

    private static class CookieAccessFilter_CanSaveCookie_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieAccessFilter_CanSaveCookie_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSaveCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieAccessFilter_CanSaveCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnBeforeResourceLoad_args implements org.apache.thrift.TBase<ResourceRequestHandler_OnBeforeResourceLoad_args, ResourceRequestHandler_OnBeforeResourceLoad_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnBeforeResourceLoad_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnBeforeResourceLoad_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnBeforeResourceLoad_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnBeforeResourceLoad_argsTupleSchemeFactory();

    public int rrHandler; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnBeforeResourceLoad_args.class, metaDataMap);
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_args() {
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_args(
      int rrHandler,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnBeforeResourceLoad_args(ResourceRequestHandler_OnBeforeResourceLoad_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public ResourceRequestHandler_OnBeforeResourceLoad_args deepCopy() {
      return new ResourceRequestHandler_OnBeforeResourceLoad_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnBeforeResourceLoad_args)
        return this.equals((ResourceRequestHandler_OnBeforeResourceLoad_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnBeforeResourceLoad_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnBeforeResourceLoad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnBeforeResourceLoad_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnBeforeResourceLoad_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_OnBeforeResourceLoad_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnBeforeResourceLoad_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnBeforeResourceLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnBeforeResourceLoad_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnBeforeResourceLoad_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_OnBeforeResourceLoad_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnBeforeResourceLoad_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnBeforeResourceLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnBeforeResourceLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnBeforeResourceLoad_result implements org.apache.thrift.TBase<ResourceRequestHandler_OnBeforeResourceLoad_result, ResourceRequestHandler_OnBeforeResourceLoad_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnBeforeResourceLoad_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnBeforeResourceLoad_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnBeforeResourceLoad_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnBeforeResourceLoad_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnBeforeResourceLoad_result.class, metaDataMap);
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_result() {
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnBeforeResourceLoad_result(ResourceRequestHandler_OnBeforeResourceLoad_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public ResourceRequestHandler_OnBeforeResourceLoad_result deepCopy() {
      return new ResourceRequestHandler_OnBeforeResourceLoad_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ResourceRequestHandler_OnBeforeResourceLoad_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnBeforeResourceLoad_result)
        return this.equals((ResourceRequestHandler_OnBeforeResourceLoad_result)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnBeforeResourceLoad_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnBeforeResourceLoad_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnBeforeResourceLoad_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnBeforeResourceLoad_resultStandardScheme getScheme() {
        return new ResourceRequestHandler_OnBeforeResourceLoad_resultStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnBeforeResourceLoad_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnBeforeResourceLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnBeforeResourceLoad_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnBeforeResourceLoad_resultTupleScheme getScheme() {
        return new ResourceRequestHandler_OnBeforeResourceLoad_resultTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnBeforeResourceLoad_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnBeforeResourceLoad_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnBeforeResourceLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnBeforeResourceLoad_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_GetResourceHandler_args implements org.apache.thrift.TBase<ResourceRequestHandler_GetResourceHandler_args, ResourceRequestHandler_GetResourceHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_GetResourceHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_GetResourceHandler_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_GetResourceHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_GetResourceHandler_argsTupleSchemeFactory();

    public int rrHandler; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_GetResourceHandler_args.class, metaDataMap);
    }

    public ResourceRequestHandler_GetResourceHandler_args() {
    }

    public ResourceRequestHandler_GetResourceHandler_args(
      int rrHandler,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_GetResourceHandler_args(ResourceRequestHandler_GetResourceHandler_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public ResourceRequestHandler_GetResourceHandler_args deepCopy() {
      return new ResourceRequestHandler_GetResourceHandler_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_GetResourceHandler_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public ResourceRequestHandler_GetResourceHandler_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public ResourceRequestHandler_GetResourceHandler_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_GetResourceHandler_args)
        return this.equals((ResourceRequestHandler_GetResourceHandler_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_GetResourceHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_GetResourceHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_GetResourceHandler_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_GetResourceHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetResourceHandler_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_GetResourceHandler_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_GetResourceHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_GetResourceHandler_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_GetResourceHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_GetResourceHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_GetResourceHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetResourceHandler_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_GetResourceHandler_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_GetResourceHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_GetResourceHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetResourceHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetResourceHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_GetResourceHandler_result implements org.apache.thrift.TBase<ResourceRequestHandler_GetResourceHandler_result, ResourceRequestHandler_GetResourceHandler_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_GetResourceHandler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_GetResourceHandler_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_GetResourceHandler_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_GetResourceHandler_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_GetResourceHandler_result.class, metaDataMap);
    }

    public ResourceRequestHandler_GetResourceHandler_result() {
    }

    public ResourceRequestHandler_GetResourceHandler_result(
      com.jetbrains.cef.remote.thrift_codegen.RObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_GetResourceHandler_result(ResourceRequestHandler_GetResourceHandler_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.success);
      }
    }

    @Override
    public ResourceRequestHandler_GetResourceHandler_result deepCopy() {
      return new ResourceRequestHandler_GetResourceHandler_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSuccess() {
      return this.success;
    }

    public ResourceRequestHandler_GetResourceHandler_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_GetResourceHandler_result)
        return this.equals((ResourceRequestHandler_GetResourceHandler_result)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_GetResourceHandler_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_GetResourceHandler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_GetResourceHandler_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_GetResourceHandler_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetResourceHandler_resultStandardScheme getScheme() {
        return new ResourceRequestHandler_GetResourceHandler_resultStandardScheme();
      }
    }

    private static class ResourceRequestHandler_GetResourceHandler_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_GetResourceHandler_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_GetResourceHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_GetResourceHandler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_GetResourceHandler_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_GetResourceHandler_resultTupleScheme getScheme() {
        return new ResourceRequestHandler_GetResourceHandler_resultTupleScheme();
      }
    }

    private static class ResourceRequestHandler_GetResourceHandler_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_GetResourceHandler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetResourceHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_GetResourceHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceHandler_Dispose_args implements org.apache.thrift.TBase<ResourceHandler_Dispose_args, ResourceHandler_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceHandler_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceHandler_Dispose_args");

    private static final org.apache.thrift.protocol.TField RESOURCE_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceHandler", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceHandler_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceHandler_Dispose_argsTupleSchemeFactory();

    public int resourceHandler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESOURCE_HANDLER((short)1, "resourceHandler");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESOURCE_HANDLER
            return RESOURCE_HANDLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RESOURCEHANDLER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESOURCE_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("resourceHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceHandler_Dispose_args.class, metaDataMap);
    }

    public ResourceHandler_Dispose_args() {
    }

    public ResourceHandler_Dispose_args(
      int resourceHandler)
    {
      this();
      this.resourceHandler = resourceHandler;
      setResourceHandlerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceHandler_Dispose_args(ResourceHandler_Dispose_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.resourceHandler = other.resourceHandler;
    }

    @Override
    public ResourceHandler_Dispose_args deepCopy() {
      return new ResourceHandler_Dispose_args(this);
    }

    @Override
    public void clear() {
      setResourceHandlerIsSet(false);
      this.resourceHandler = 0;
    }

    public int getResourceHandler() {
      return this.resourceHandler;
    }

    public ResourceHandler_Dispose_args setResourceHandler(int resourceHandler) {
      this.resourceHandler = resourceHandler;
      setResourceHandlerIsSet(true);
      return this;
    }

    public void unsetResourceHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESOURCEHANDLER_ISSET_ID);
    }

    /** Returns true if field resourceHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetResourceHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESOURCEHANDLER_ISSET_ID);
    }

    public void setResourceHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESOURCEHANDLER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESOURCE_HANDLER:
        if (value == null) {
          unsetResourceHandler();
        } else {
          setResourceHandler((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESOURCE_HANDLER:
        return getResourceHandler();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESOURCE_HANDLER:
        return isSetResourceHandler();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceHandler_Dispose_args)
        return this.equals((ResourceHandler_Dispose_args)that);
      return false;
    }

    public boolean equals(ResourceHandler_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_resourceHandler = true;
      boolean that_present_resourceHandler = true;
      if (this_present_resourceHandler || that_present_resourceHandler) {
        if (!(this_present_resourceHandler && that_present_resourceHandler))
          return false;
        if (this.resourceHandler != that.resourceHandler)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + resourceHandler;

      return hashCode;
    }

    @Override
    public int compareTo(ResourceHandler_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResourceHandler(), other.isSetResourceHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResourceHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceHandler, other.resourceHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceHandler_Dispose_args(");
      boolean first = true;

      sb.append("resourceHandler:");
      sb.append(this.resourceHandler);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceHandler_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceHandler_Dispose_argsStandardScheme getScheme() {
        return new ResourceHandler_Dispose_argsStandardScheme();
      }
    }

    private static class ResourceHandler_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceHandler_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceHandler_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESOURCE_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.resourceHandler = iprot.readI32();
                struct.setResourceHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceHandler_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RESOURCE_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.resourceHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceHandler_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceHandler_Dispose_argsTupleScheme getScheme() {
        return new ResourceHandler_Dispose_argsTupleScheme();
      }
    }

    private static class ResourceHandler_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceHandler_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceHandler_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResourceHandler()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResourceHandler()) {
          oprot.writeI32(struct.resourceHandler);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceHandler_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.resourceHandler = iprot.readI32();
          struct.setResourceHandlerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnResourceRedirect_args implements org.apache.thrift.TBase<ResourceRequestHandler_OnResourceRedirect_args, ResourceRequestHandler_OnResourceRedirect_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnResourceRedirect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnResourceRedirect_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField NEW_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("new_url", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceRedirect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceRedirect_argsTupleSchemeFactory();

    public int rrHandler; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String new_url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request"),
      RESPONSE((short)4, "response"),
      NEW_URL((short)5, "new_url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          case 4: // RESPONSE
            return RESPONSE;
          case 5: // NEW_URL
            return NEW_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NEW_URL, new org.apache.thrift.meta_data.FieldMetaData("new_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnResourceRedirect_args.class, metaDataMap);
    }

    public ResourceRequestHandler_OnResourceRedirect_args() {
    }

    public ResourceRequestHandler_OnResourceRedirect_args(
      int rrHandler,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.lang.String new_url)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.response = response;
      this.new_url = new_url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnResourceRedirect_args(ResourceRequestHandler_OnResourceRedirect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetNew_url()) {
        this.new_url = other.new_url;
      }
    }

    @Override
    public ResourceRequestHandler_OnResourceRedirect_args deepCopy() {
      return new ResourceRequestHandler_OnResourceRedirect_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      this.response = null;
      this.new_url = null;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_OnResourceRedirect_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public ResourceRequestHandler_OnResourceRedirect_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public ResourceRequestHandler_OnResourceRedirect_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public ResourceRequestHandler_OnResourceRedirect_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getNew_url() {
      return this.new_url;
    }

    public ResourceRequestHandler_OnResourceRedirect_args setNew_url(@org.apache.thrift.annotation.Nullable java.lang.String new_url) {
      this.new_url = new_url;
      return this;
    }

    public void unsetNew_url() {
      this.new_url = null;
    }

    /** Returns true if field new_url is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_url() {
      return this.new_url != null;
    }

    public void setNew_urlIsSet(boolean value) {
      if (!value) {
        this.new_url = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NEW_URL:
        if (value == null) {
          unsetNew_url();
        } else {
          setNew_url((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case RESPONSE:
        return getResponse();

      case NEW_URL:
        return getNew_url();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case RESPONSE:
        return isSetResponse();
      case NEW_URL:
        return isSetNew_url();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnResourceRedirect_args)
        return this.equals((ResourceRequestHandler_OnResourceRedirect_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnResourceRedirect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_new_url = true && this.isSetNew_url();
      boolean that_present_new_url = true && that.isSetNew_url();
      if (this_present_new_url || that_present_new_url) {
        if (!(this_present_new_url && that_present_new_url))
          return false;
        if (!this.new_url.equals(that.new_url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetNew_url()) ? 131071 : 524287);
      if (isSetNew_url())
        hashCode = hashCode * 8191 + new_url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnResourceRedirect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetNew_url(), other.isSetNew_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_url, other.new_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnResourceRedirect_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_url:");
      if (this.new_url == null) {
        sb.append("null");
      } else {
        sb.append(this.new_url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnResourceRedirect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceRedirect_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_OnResourceRedirect_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceRedirect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnResourceRedirect_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnResourceRedirect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NEW_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.new_url = iprot.readString();
                struct.setNew_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnResourceRedirect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.new_url != null) {
          oprot.writeFieldBegin(NEW_URL_FIELD_DESC);
          oprot.writeString(struct.new_url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnResourceRedirect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceRedirect_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_OnResourceRedirect_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceRedirect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnResourceRedirect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceRedirect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        if (struct.isSetResponse()) {
          optionals.set(3);
        }
        if (struct.isSetNew_url()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetNew_url()) {
          oprot.writeString(struct.new_url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceRedirect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(3)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.new_url = iprot.readString();
          struct.setNew_urlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnResourceRedirect_result implements org.apache.thrift.TBase<ResourceRequestHandler_OnResourceRedirect_result, ResourceRequestHandler_OnResourceRedirect_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnResourceRedirect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnResourceRedirect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceRedirect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceRedirect_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnResourceRedirect_result.class, metaDataMap);
    }

    public ResourceRequestHandler_OnResourceRedirect_result() {
    }

    public ResourceRequestHandler_OnResourceRedirect_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnResourceRedirect_result(ResourceRequestHandler_OnResourceRedirect_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public ResourceRequestHandler_OnResourceRedirect_result deepCopy() {
      return new ResourceRequestHandler_OnResourceRedirect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public ResourceRequestHandler_OnResourceRedirect_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnResourceRedirect_result)
        return this.equals((ResourceRequestHandler_OnResourceRedirect_result)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnResourceRedirect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnResourceRedirect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnResourceRedirect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnResourceRedirect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceRedirect_resultStandardScheme getScheme() {
        return new ResourceRequestHandler_OnResourceRedirect_resultStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceRedirect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnResourceRedirect_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnResourceRedirect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnResourceRedirect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnResourceRedirect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceRedirect_resultTupleScheme getScheme() {
        return new ResourceRequestHandler_OnResourceRedirect_resultTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceRedirect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnResourceRedirect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceRedirect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceRedirect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnResourceResponse_args implements org.apache.thrift.TBase<ResourceRequestHandler_OnResourceResponse_args, ResourceRequestHandler_OnResourceResponse_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnResourceResponse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnResourceResponse_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceResponse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceResponse_argsTupleSchemeFactory();

    public int rrHandler; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request"),
      RESPONSE((short)4, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          case 4: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnResourceResponse_args.class, metaDataMap);
    }

    public ResourceRequestHandler_OnResourceResponse_args() {
    }

    public ResourceRequestHandler_OnResourceResponse_args(
      int rrHandler,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      com.jetbrains.cef.remote.thrift_codegen.RObject response)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnResourceResponse_args(ResourceRequestHandler_OnResourceResponse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
    }

    @Override
    public ResourceRequestHandler_OnResourceResponse_args deepCopy() {
      return new ResourceRequestHandler_OnResourceResponse_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      this.response = null;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_OnResourceResponse_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public ResourceRequestHandler_OnResourceResponse_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public ResourceRequestHandler_OnResourceResponse_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public ResourceRequestHandler_OnResourceResponse_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnResourceResponse_args)
        return this.equals((ResourceRequestHandler_OnResourceResponse_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnResourceResponse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnResourceResponse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnResourceResponse_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnResourceResponse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceResponse_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_OnResourceResponse_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceResponse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnResourceResponse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnResourceResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnResourceResponse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnResourceResponse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceResponse_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_OnResourceResponse_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceResponse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnResourceResponse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        if (struct.isSetResponse()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceResponse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(3)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnResourceResponse_result implements org.apache.thrift.TBase<ResourceRequestHandler_OnResourceResponse_result, ResourceRequestHandler_OnResourceResponse_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnResourceResponse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnResourceResponse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceResponse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceResponse_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnResourceResponse_result.class, metaDataMap);
    }

    public ResourceRequestHandler_OnResourceResponse_result() {
    }

    public ResourceRequestHandler_OnResourceResponse_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnResourceResponse_result(ResourceRequestHandler_OnResourceResponse_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public ResourceRequestHandler_OnResourceResponse_result deepCopy() {
      return new ResourceRequestHandler_OnResourceResponse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ResourceRequestHandler_OnResourceResponse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnResourceResponse_result)
        return this.equals((ResourceRequestHandler_OnResourceResponse_result)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnResourceResponse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnResourceResponse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnResourceResponse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnResourceResponse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceResponse_resultStandardScheme getScheme() {
        return new ResourceRequestHandler_OnResourceResponse_resultStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceResponse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnResourceResponse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnResourceResponse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnResourceResponse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnResourceResponse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceResponse_resultTupleScheme getScheme() {
        return new ResourceRequestHandler_OnResourceResponse_resultTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceResponse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnResourceResponse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceResponse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceResponse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnResourceLoadComplete_args implements org.apache.thrift.TBase<ResourceRequestHandler_OnResourceLoadComplete_args, ResourceRequestHandler_OnResourceLoadComplete_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnResourceLoadComplete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnResourceLoadComplete_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField RECEIVED_CONTENT_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedContentLength", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceLoadComplete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceLoadComplete_argsTupleSchemeFactory();

    public int rrHandler; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String status; // required
    public long receivedContentLength; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request"),
      RESPONSE((short)4, "response"),
      STATUS((short)5, "status"),
      RECEIVED_CONTENT_LENGTH((short)6, "receivedContentLength");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          case 4: // RESPONSE
            return RESPONSE;
          case 5: // STATUS
            return STATUS;
          case 6: // RECEIVED_CONTENT_LENGTH
            return RECEIVED_CONTENT_LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private static final int __RECEIVEDCONTENTLENGTH_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECEIVED_CONTENT_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("receivedContentLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnResourceLoadComplete_args.class, metaDataMap);
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args() {
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args(
      int rrHandler,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.lang.String status,
      long receivedContentLength)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.response = response;
      this.status = status;
      this.receivedContentLength = receivedContentLength;
      setReceivedContentLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnResourceLoadComplete_args(ResourceRequestHandler_OnResourceLoadComplete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
      this.receivedContentLength = other.receivedContentLength;
    }

    @Override
    public ResourceRequestHandler_OnResourceLoadComplete_args deepCopy() {
      return new ResourceRequestHandler_OnResourceLoadComplete_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      this.response = null;
      this.status = null;
      setReceivedContentLengthIsSet(false);
      this.receivedContentLength = 0;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getStatus() {
      return this.status;
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args setStatus(@org.apache.thrift.annotation.Nullable java.lang.String status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public long getReceivedContentLength() {
      return this.receivedContentLength;
    }

    public ResourceRequestHandler_OnResourceLoadComplete_args setReceivedContentLength(long receivedContentLength) {
      this.receivedContentLength = receivedContentLength;
      setReceivedContentLengthIsSet(true);
      return this;
    }

    public void unsetReceivedContentLength() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDCONTENTLENGTH_ISSET_ID);
    }

    /** Returns true if field receivedContentLength is set (has been assigned a value) and false otherwise */
    public boolean isSetReceivedContentLength() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVEDCONTENTLENGTH_ISSET_ID);
    }

    public void setReceivedContentLengthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVEDCONTENTLENGTH_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((java.lang.String)value);
        }
        break;

      case RECEIVED_CONTENT_LENGTH:
        if (value == null) {
          unsetReceivedContentLength();
        } else {
          setReceivedContentLength((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case RESPONSE:
        return getResponse();

      case STATUS:
        return getStatus();

      case RECEIVED_CONTENT_LENGTH:
        return getReceivedContentLength();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case RESPONSE:
        return isSetResponse();
      case STATUS:
        return isSetStatus();
      case RECEIVED_CONTENT_LENGTH:
        return isSetReceivedContentLength();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnResourceLoadComplete_args)
        return this.equals((ResourceRequestHandler_OnResourceLoadComplete_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnResourceLoadComplete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_receivedContentLength = true;
      boolean that_present_receivedContentLength = true;
      if (this_present_receivedContentLength || that_present_receivedContentLength) {
        if (!(this_present_receivedContentLength && that_present_receivedContentLength))
          return false;
        if (this.receivedContentLength != that.receivedContentLength)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
      if (isSetStatus())
        hashCode = hashCode * 8191 + status.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receivedContentLength);

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnResourceLoadComplete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetReceivedContentLength(), other.isSetReceivedContentLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceivedContentLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedContentLength, other.receivedContentLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnResourceLoadComplete_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receivedContentLength:");
      sb.append(this.receivedContentLength);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceLoadComplete_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_OnResourceLoadComplete_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnResourceLoadComplete_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnResourceLoadComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.status = iprot.readString();
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // RECEIVED_CONTENT_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.receivedContentLength = iprot.readI64();
                struct.setReceivedContentLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnResourceLoadComplete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeString(struct.status);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECEIVED_CONTENT_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.receivedContentLength);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceLoadComplete_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_OnResourceLoadComplete_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnResourceLoadComplete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceLoadComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        if (struct.isSetResponse()) {
          optionals.set(3);
        }
        if (struct.isSetStatus()) {
          optionals.set(4);
        }
        if (struct.isSetReceivedContentLength()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetStatus()) {
          oprot.writeString(struct.status);
        }
        if (struct.isSetReceivedContentLength()) {
          oprot.writeI64(struct.receivedContentLength);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceLoadComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(3)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.status = iprot.readString();
          struct.setStatusIsSet(true);
        }
        if (incoming.get(5)) {
          struct.receivedContentLength = iprot.readI64();
          struct.setReceivedContentLengthIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnResourceLoadComplete_result implements org.apache.thrift.TBase<ResourceRequestHandler_OnResourceLoadComplete_result, ResourceRequestHandler_OnResourceLoadComplete_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnResourceLoadComplete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnResourceLoadComplete_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceLoadComplete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnResourceLoadComplete_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnResourceLoadComplete_result.class, metaDataMap);
    }

    public ResourceRequestHandler_OnResourceLoadComplete_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnResourceLoadComplete_result(ResourceRequestHandler_OnResourceLoadComplete_result other) {
    }

    @Override
    public ResourceRequestHandler_OnResourceLoadComplete_result deepCopy() {
      return new ResourceRequestHandler_OnResourceLoadComplete_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnResourceLoadComplete_result)
        return this.equals((ResourceRequestHandler_OnResourceLoadComplete_result)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnResourceLoadComplete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnResourceLoadComplete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnResourceLoadComplete_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceLoadComplete_resultStandardScheme getScheme() {
        return new ResourceRequestHandler_OnResourceLoadComplete_resultStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnResourceLoadComplete_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnResourceLoadComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnResourceLoadComplete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnResourceLoadComplete_resultTupleScheme getScheme() {
        return new ResourceRequestHandler_OnResourceLoadComplete_resultTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnResourceLoadComplete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnResourceLoadComplete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceLoadComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnResourceLoadComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnProtocolExecution_args implements org.apache.thrift.TBase<ResourceRequestHandler_OnProtocolExecution_args, ResourceRequestHandler_OnProtocolExecution_args._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnProtocolExecution_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnProtocolExecution_args");

    private static final org.apache.thrift.protocol.TField RR_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("rrHandler", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ALLOW_OS_EXECUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("allowOsExecution", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnProtocolExecution_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnProtocolExecution_argsTupleSchemeFactory();

    public int rrHandler; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public boolean allowOsExecution; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RR_HANDLER((short)1, "rrHandler"),
      BID((short)2, "bid"),
      REQUEST((short)3, "request"),
      ALLOW_OS_EXECUTION((short)4, "allowOsExecution");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RR_HANDLER
            return RR_HANDLER;
          case 2: // BID
            return BID;
          case 3: // REQUEST
            return REQUEST;
          case 4: // ALLOW_OS_EXECUTION
            return ALLOW_OS_EXECUTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RRHANDLER_ISSET_ID = 0;
    private static final int __BID_ISSET_ID = 1;
    private static final int __ALLOWOSEXECUTION_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RR_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("rrHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.ALLOW_OS_EXECUTION, new org.apache.thrift.meta_data.FieldMetaData("allowOsExecution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnProtocolExecution_args.class, metaDataMap);
    }

    public ResourceRequestHandler_OnProtocolExecution_args() {
    }

    public ResourceRequestHandler_OnProtocolExecution_args(
      int rrHandler,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      boolean allowOsExecution)
    {
      this();
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      this.bid = bid;
      setBidIsSet(true);
      this.request = request;
      this.allowOsExecution = allowOsExecution;
      setAllowOsExecutionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnProtocolExecution_args(ResourceRequestHandler_OnProtocolExecution_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rrHandler = other.rrHandler;
      this.bid = other.bid;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      this.allowOsExecution = other.allowOsExecution;
    }

    @Override
    public ResourceRequestHandler_OnProtocolExecution_args deepCopy() {
      return new ResourceRequestHandler_OnProtocolExecution_args(this);
    }

    @Override
    public void clear() {
      setRrHandlerIsSet(false);
      this.rrHandler = 0;
      setBidIsSet(false);
      this.bid = 0;
      this.request = null;
      setAllowOsExecutionIsSet(false);
      this.allowOsExecution = false;
    }

    public int getRrHandler() {
      return this.rrHandler;
    }

    public ResourceRequestHandler_OnProtocolExecution_args setRrHandler(int rrHandler) {
      this.rrHandler = rrHandler;
      setRrHandlerIsSet(true);
      return this;
    }

    public void unsetRrHandler() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    /** Returns true if field rrHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRrHandler() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RRHANDLER_ISSET_ID);
    }

    public void setRrHandlerIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RRHANDLER_ISSET_ID, value);
    }

    public int getBid() {
      return this.bid;
    }

    public ResourceRequestHandler_OnProtocolExecution_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public ResourceRequestHandler_OnProtocolExecution_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean isAllowOsExecution() {
      return this.allowOsExecution;
    }

    public ResourceRequestHandler_OnProtocolExecution_args setAllowOsExecution(boolean allowOsExecution) {
      this.allowOsExecution = allowOsExecution;
      setAllowOsExecutionIsSet(true);
      return this;
    }

    public void unsetAllowOsExecution() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLOWOSEXECUTION_ISSET_ID);
    }

    /** Returns true if field allowOsExecution is set (has been assigned a value) and false otherwise */
    public boolean isSetAllowOsExecution() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLOWOSEXECUTION_ISSET_ID);
    }

    public void setAllowOsExecutionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLOWOSEXECUTION_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RR_HANDLER:
        if (value == null) {
          unsetRrHandler();
        } else {
          setRrHandler((java.lang.Integer)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case ALLOW_OS_EXECUTION:
        if (value == null) {
          unsetAllowOsExecution();
        } else {
          setAllowOsExecution((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RR_HANDLER:
        return getRrHandler();

      case BID:
        return getBid();

      case REQUEST:
        return getRequest();

      case ALLOW_OS_EXECUTION:
        return isAllowOsExecution();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RR_HANDLER:
        return isSetRrHandler();
      case BID:
        return isSetBid();
      case REQUEST:
        return isSetRequest();
      case ALLOW_OS_EXECUTION:
        return isSetAllowOsExecution();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnProtocolExecution_args)
        return this.equals((ResourceRequestHandler_OnProtocolExecution_args)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnProtocolExecution_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rrHandler = true;
      boolean that_present_rrHandler = true;
      if (this_present_rrHandler || that_present_rrHandler) {
        if (!(this_present_rrHandler && that_present_rrHandler))
          return false;
        if (this.rrHandler != that.rrHandler)
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_allowOsExecution = true;
      boolean that_present_allowOsExecution = true;
      if (this_present_allowOsExecution || that_present_allowOsExecution) {
        if (!(this_present_allowOsExecution && that_present_allowOsExecution))
          return false;
        if (this.allowOsExecution != that.allowOsExecution)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + rrHandler;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((allowOsExecution) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnProtocolExecution_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRrHandler(), other.isSetRrHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRrHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rrHandler, other.rrHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAllowOsExecution(), other.isSetAllowOsExecution());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllowOsExecution()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowOsExecution, other.allowOsExecution);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnProtocolExecution_args(");
      boolean first = true;

      sb.append("rrHandler:");
      sb.append(this.rrHandler);
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allowOsExecution:");
      sb.append(this.allowOsExecution);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnProtocolExecution_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnProtocolExecution_argsStandardScheme getScheme() {
        return new ResourceRequestHandler_OnProtocolExecution_argsStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnProtocolExecution_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnProtocolExecution_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnProtocolExecution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RR_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rrHandler = iprot.readI32();
                struct.setRrHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALLOW_OS_EXECUTION
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.allowOsExecution = iprot.readBool();
                struct.setAllowOsExecutionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnProtocolExecution_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RR_HANDLER_FIELD_DESC);
        oprot.writeI32(struct.rrHandler);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ALLOW_OS_EXECUTION_FIELD_DESC);
        oprot.writeBool(struct.allowOsExecution);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnProtocolExecution_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnProtocolExecution_argsTupleScheme getScheme() {
        return new ResourceRequestHandler_OnProtocolExecution_argsTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnProtocolExecution_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnProtocolExecution_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnProtocolExecution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRrHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetRequest()) {
          optionals.set(2);
        }
        if (struct.isSetAllowOsExecution()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRrHandler()) {
          oprot.writeI32(struct.rrHandler);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetAllowOsExecution()) {
          oprot.writeBool(struct.allowOsExecution);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnProtocolExecution_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.rrHandler = iprot.readI32();
          struct.setRrHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(3)) {
          struct.allowOsExecution = iprot.readBool();
          struct.setAllowOsExecutionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ResourceRequestHandler_OnProtocolExecution_result implements org.apache.thrift.TBase<ResourceRequestHandler_OnProtocolExecution_result, ResourceRequestHandler_OnProtocolExecution_result._Fields>, java.io.Serializable, Cloneable, Comparable<ResourceRequestHandler_OnProtocolExecution_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResourceRequestHandler_OnProtocolExecution_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResourceRequestHandler_OnProtocolExecution_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResourceRequestHandler_OnProtocolExecution_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResourceRequestHandler_OnProtocolExecution_result.class, metaDataMap);
    }

    public ResourceRequestHandler_OnProtocolExecution_result() {
    }

    public ResourceRequestHandler_OnProtocolExecution_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ResourceRequestHandler_OnProtocolExecution_result(ResourceRequestHandler_OnProtocolExecution_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public ResourceRequestHandler_OnProtocolExecution_result deepCopy() {
      return new ResourceRequestHandler_OnProtocolExecution_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ResourceRequestHandler_OnProtocolExecution_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ResourceRequestHandler_OnProtocolExecution_result)
        return this.equals((ResourceRequestHandler_OnProtocolExecution_result)that);
      return false;
    }

    public boolean equals(ResourceRequestHandler_OnProtocolExecution_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ResourceRequestHandler_OnProtocolExecution_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ResourceRequestHandler_OnProtocolExecution_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ResourceRequestHandler_OnProtocolExecution_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnProtocolExecution_resultStandardScheme getScheme() {
        return new ResourceRequestHandler_OnProtocolExecution_resultStandardScheme();
      }
    }

    private static class ResourceRequestHandler_OnProtocolExecution_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResourceRequestHandler_OnProtocolExecution_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ResourceRequestHandler_OnProtocolExecution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ResourceRequestHandler_OnProtocolExecution_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ResourceRequestHandler_OnProtocolExecution_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ResourceRequestHandler_OnProtocolExecution_resultTupleScheme getScheme() {
        return new ResourceRequestHandler_OnProtocolExecution_resultTupleScheme();
      }
    }

    private static class ResourceRequestHandler_OnProtocolExecution_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResourceRequestHandler_OnProtocolExecution_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnProtocolExecution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ResourceRequestHandler_OnProtocolExecution_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouterHandler_onQuery_args implements org.apache.thrift.TBase<MessageRouterHandler_onQuery_args, MessageRouterHandler_onQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouterHandler_onQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouterHandler_onQuery_args");

    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PERSISTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("persistent", org.apache.thrift.protocol.TType.BOOL, (short)5);
    private static final org.apache.thrift.protocol.TField QUERY_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("queryCallback", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouterHandler_onQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouterHandler_onQuery_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required
    public int bid; // required
    public long queryId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String request; // required
    public boolean persistent; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLER((short)1, "handler"),
      BID((short)2, "bid"),
      QUERY_ID((short)3, "queryId"),
      REQUEST((short)4, "request"),
      PERSISTENT((short)5, "persistent"),
      QUERY_CALLBACK((short)6, "queryCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLER
            return HANDLER;
          case 2: // BID
            return BID;
          case 3: // QUERY_ID
            return QUERY_ID;
          case 4: // REQUEST
            return REQUEST;
          case 5: // PERSISTENT
            return PERSISTENT;
          case 6: // QUERY_CALLBACK
            return QUERY_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __QUERYID_ISSET_ID = 1;
    private static final int __PERSISTENT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PERSISTENT, new org.apache.thrift.meta_data.FieldMetaData("persistent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.QUERY_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("queryCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouterHandler_onQuery_args.class, metaDataMap);
    }

    public MessageRouterHandler_onQuery_args() {
    }

    public MessageRouterHandler_onQuery_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject handler,
      int bid,
      long queryId,
      java.lang.String request,
      boolean persistent,
      com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback)
    {
      this();
      this.handler = handler;
      this.bid = bid;
      setBidIsSet(true);
      this.queryId = queryId;
      setQueryIdIsSet(true);
      this.request = request;
      this.persistent = persistent;
      setPersistentIsSet(true);
      this.queryCallback = queryCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouterHandler_onQuery_args(MessageRouterHandler_onQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
      this.bid = other.bid;
      this.queryId = other.queryId;
      if (other.isSetRequest()) {
        this.request = other.request;
      }
      this.persistent = other.persistent;
      if (other.isSetQueryCallback()) {
        this.queryCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.queryCallback);
      }
    }

    @Override
    public MessageRouterHandler_onQuery_args deepCopy() {
      return new MessageRouterHandler_onQuery_args(this);
    }

    @Override
    public void clear() {
      this.handler = null;
      setBidIsSet(false);
      this.bid = 0;
      setQueryIdIsSet(false);
      this.queryId = 0;
      this.request = null;
      setPersistentIsSet(false);
      this.persistent = false;
      this.queryCallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouterHandler_onQuery_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouterHandler_onQuery_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public long getQueryId() {
      return this.queryId;
    }

    public MessageRouterHandler_onQuery_args setQueryId(long queryId) {
      this.queryId = queryId;
      setQueryIdIsSet(true);
      return this;
    }

    public void unsetQueryId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    public void setQueryIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getRequest() {
      return this.request;
    }

    public MessageRouterHandler_onQuery_args setRequest(@org.apache.thrift.annotation.Nullable java.lang.String request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean isPersistent() {
      return this.persistent;
    }

    public MessageRouterHandler_onQuery_args setPersistent(boolean persistent) {
      this.persistent = persistent;
      setPersistentIsSet(true);
      return this;
    }

    public void unsetPersistent() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERSISTENT_ISSET_ID);
    }

    /** Returns true if field persistent is set (has been assigned a value) and false otherwise */
    public boolean isSetPersistent() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERSISTENT_ISSET_ID);
    }

    public void setPersistentIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERSISTENT_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getQueryCallback() {
      return this.queryCallback;
    }

    public MessageRouterHandler_onQuery_args setQueryCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject queryCallback) {
      this.queryCallback = queryCallback;
      return this;
    }

    public void unsetQueryCallback() {
      this.queryCallback = null;
    }

    /** Returns true if field queryCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryCallback() {
      return this.queryCallback != null;
    }

    public void setQueryCallbackIsSet(boolean value) {
      if (!value) {
        this.queryCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case QUERY_ID:
        if (value == null) {
          unsetQueryId();
        } else {
          setQueryId((java.lang.Long)value);
        }
        break;

      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((java.lang.String)value);
        }
        break;

      case PERSISTENT:
        if (value == null) {
          unsetPersistent();
        } else {
          setPersistent((java.lang.Boolean)value);
        }
        break;

      case QUERY_CALLBACK:
        if (value == null) {
          unsetQueryCallback();
        } else {
          setQueryCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLER:
        return getHandler();

      case BID:
        return getBid();

      case QUERY_ID:
        return getQueryId();

      case REQUEST:
        return getRequest();

      case PERSISTENT:
        return isPersistent();

      case QUERY_CALLBACK:
        return getQueryCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HANDLER:
        return isSetHandler();
      case BID:
        return isSetBid();
      case QUERY_ID:
        return isSetQueryId();
      case REQUEST:
        return isSetRequest();
      case PERSISTENT:
        return isSetPersistent();
      case QUERY_CALLBACK:
        return isSetQueryCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouterHandler_onQuery_args)
        return this.equals((MessageRouterHandler_onQuery_args)that);
      return false;
    }

    public boolean equals(MessageRouterHandler_onQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_queryId = true;
      boolean that_present_queryId = true;
      if (this_present_queryId || that_present_queryId) {
        if (!(this_present_queryId && that_present_queryId))
          return false;
        if (this.queryId != that.queryId)
          return false;
      }

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_persistent = true;
      boolean that_present_persistent = true;
      if (this_present_persistent || that_present_persistent) {
        if (!(this_present_persistent && that_present_persistent))
          return false;
        if (this.persistent != that.persistent)
          return false;
      }

      boolean this_present_queryCallback = true && this.isSetQueryCallback();
      boolean that_present_queryCallback = true && that.isSetQueryCallback();
      if (this_present_queryCallback || that_present_queryCallback) {
        if (!(this_present_queryCallback && that_present_queryCallback))
          return false;
        if (!this.queryCallback.equals(that.queryCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryId);

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((persistent) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetQueryCallback()) ? 131071 : 524287);
      if (isSetQueryCallback())
        hashCode = hashCode * 8191 + queryCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouterHandler_onQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPersistent(), other.isSetPersistent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPersistent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persistent, other.persistent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetQueryCallback(), other.isSetQueryCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryCallback, other.queryCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouterHandler_onQuery_args(");
      boolean first = true;

      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("queryId:");
      sb.append(this.queryId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("persistent:");
      sb.append(this.persistent);
      first = false;
      if (!first) sb.append(", ");
      sb.append("queryCallback:");
      if (this.queryCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.queryCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handler != null) {
        handler.validate();
      }
      if (queryCallback != null) {
        queryCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouterHandler_onQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouterHandler_onQuery_argsStandardScheme getScheme() {
        return new MessageRouterHandler_onQuery_argsStandardScheme();
      }
    }

    private static class MessageRouterHandler_onQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouterHandler_onQuery_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouterHandler_onQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QUERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.queryId = iprot.readI64();
                struct.setQueryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.request = iprot.readString();
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PERSISTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.persistent = iprot.readBool();
                struct.setPersistentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // QUERY_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.queryCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.queryCallback.read(iprot);
                struct.setQueryCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouterHandler_onQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        oprot.writeI64(struct.queryId);
        oprot.writeFieldEnd();
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          oprot.writeString(struct.request);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PERSISTENT_FIELD_DESC);
        oprot.writeBool(struct.persistent);
        oprot.writeFieldEnd();
        if (struct.queryCallback != null) {
          oprot.writeFieldBegin(QUERY_CALLBACK_FIELD_DESC);
          struct.queryCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouterHandler_onQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouterHandler_onQuery_argsTupleScheme getScheme() {
        return new MessageRouterHandler_onQuery_argsTupleScheme();
      }
    }

    private static class MessageRouterHandler_onQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouterHandler_onQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouterHandler_onQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetQueryId()) {
          optionals.set(2);
        }
        if (struct.isSetRequest()) {
          optionals.set(3);
        }
        if (struct.isSetPersistent()) {
          optionals.set(4);
        }
        if (struct.isSetQueryCallback()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetQueryId()) {
          oprot.writeI64(struct.queryId);
        }
        if (struct.isSetRequest()) {
          oprot.writeString(struct.request);
        }
        if (struct.isSetPersistent()) {
          oprot.writeBool(struct.persistent);
        }
        if (struct.isSetQueryCallback()) {
          struct.queryCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouterHandler_onQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.queryId = iprot.readI64();
          struct.setQueryIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.request = iprot.readString();
          struct.setRequestIsSet(true);
        }
        if (incoming.get(4)) {
          struct.persistent = iprot.readBool();
          struct.setPersistentIsSet(true);
        }
        if (incoming.get(5)) {
          struct.queryCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.queryCallback.read(iprot);
          struct.setQueryCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouterHandler_onQuery_result implements org.apache.thrift.TBase<MessageRouterHandler_onQuery_result, MessageRouterHandler_onQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouterHandler_onQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouterHandler_onQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouterHandler_onQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouterHandler_onQuery_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouterHandler_onQuery_result.class, metaDataMap);
    }

    public MessageRouterHandler_onQuery_result() {
    }

    public MessageRouterHandler_onQuery_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouterHandler_onQuery_result(MessageRouterHandler_onQuery_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public MessageRouterHandler_onQuery_result deepCopy() {
      return new MessageRouterHandler_onQuery_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public MessageRouterHandler_onQuery_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouterHandler_onQuery_result)
        return this.equals((MessageRouterHandler_onQuery_result)that);
      return false;
    }

    public boolean equals(MessageRouterHandler_onQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouterHandler_onQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouterHandler_onQuery_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouterHandler_onQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouterHandler_onQuery_resultStandardScheme getScheme() {
        return new MessageRouterHandler_onQuery_resultStandardScheme();
      }
    }

    private static class MessageRouterHandler_onQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouterHandler_onQuery_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouterHandler_onQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouterHandler_onQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouterHandler_onQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouterHandler_onQuery_resultTupleScheme getScheme() {
        return new MessageRouterHandler_onQuery_resultTupleScheme();
      }
    }

    private static class MessageRouterHandler_onQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouterHandler_onQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouterHandler_onQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouterHandler_onQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouterHandler_onQueryCanceled_args implements org.apache.thrift.TBase<MessageRouterHandler_onQueryCanceled_args, MessageRouterHandler_onQueryCanceled_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouterHandler_onQueryCanceled_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouterHandler_onQueryCanceled_args");

    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouterHandler_onQueryCanceled_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouterHandler_onQueryCanceled_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required
    public int bid; // required
    public long queryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HANDLER((short)1, "handler"),
      BID((short)2, "bid"),
      QUERY_ID((short)3, "queryId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HANDLER
            return HANDLER;
          case 2: // BID
            return BID;
          case 3: // QUERY_ID
            return QUERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __QUERYID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouterHandler_onQueryCanceled_args.class, metaDataMap);
    }

    public MessageRouterHandler_onQueryCanceled_args() {
    }

    public MessageRouterHandler_onQueryCanceled_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject handler,
      int bid,
      long queryId)
    {
      this();
      this.handler = handler;
      this.bid = bid;
      setBidIsSet(true);
      this.queryId = queryId;
      setQueryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouterHandler_onQueryCanceled_args(MessageRouterHandler_onQueryCanceled_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
      this.bid = other.bid;
      this.queryId = other.queryId;
    }

    @Override
    public MessageRouterHandler_onQueryCanceled_args deepCopy() {
      return new MessageRouterHandler_onQueryCanceled_args(this);
    }

    @Override
    public void clear() {
      this.handler = null;
      setBidIsSet(false);
      this.bid = 0;
      setQueryIdIsSet(false);
      this.queryId = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouterHandler_onQueryCanceled_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouterHandler_onQueryCanceled_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public long getQueryId() {
      return this.queryId;
    }

    public MessageRouterHandler_onQueryCanceled_args setQueryId(long queryId) {
      this.queryId = queryId;
      setQueryIdIsSet(true);
      return this;
    }

    public void unsetQueryId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYID_ISSET_ID);
    }

    public void setQueryIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case QUERY_ID:
        if (value == null) {
          unsetQueryId();
        } else {
          setQueryId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HANDLER:
        return getHandler();

      case BID:
        return getBid();

      case QUERY_ID:
        return getQueryId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HANDLER:
        return isSetHandler();
      case BID:
        return isSetBid();
      case QUERY_ID:
        return isSetQueryId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouterHandler_onQueryCanceled_args)
        return this.equals((MessageRouterHandler_onQueryCanceled_args)that);
      return false;
    }

    public boolean equals(MessageRouterHandler_onQueryCanceled_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_queryId = true;
      boolean that_present_queryId = true;
      if (this_present_queryId || that_present_queryId) {
        if (!(this_present_queryId && that_present_queryId))
          return false;
        if (this.queryId != that.queryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryId);

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouterHandler_onQueryCanceled_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouterHandler_onQueryCanceled_args(");
      boolean first = true;

      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("queryId:");
      sb.append(this.queryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (handler != null) {
        handler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouterHandler_onQueryCanceled_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouterHandler_onQueryCanceled_argsStandardScheme getScheme() {
        return new MessageRouterHandler_onQueryCanceled_argsStandardScheme();
      }
    }

    private static class MessageRouterHandler_onQueryCanceled_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouterHandler_onQueryCanceled_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouterHandler_onQueryCanceled_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // QUERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.queryId = iprot.readI64();
                struct.setQueryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouterHandler_onQueryCanceled_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
        oprot.writeI64(struct.queryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouterHandler_onQueryCanceled_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouterHandler_onQueryCanceled_argsTupleScheme getScheme() {
        return new MessageRouterHandler_onQueryCanceled_argsTupleScheme();
      }
    }

    private static class MessageRouterHandler_onQueryCanceled_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouterHandler_onQueryCanceled_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouterHandler_onQueryCanceled_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHandler()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetQueryId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetQueryId()) {
          oprot.writeI64(struct.queryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouterHandler_onQueryCanceled_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.queryId = iprot.readI64();
          struct.setQueryIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
