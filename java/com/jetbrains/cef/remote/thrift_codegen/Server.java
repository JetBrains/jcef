/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jetbrains.cef.remote.thrift_codegen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Server {

  public interface Iface {

    public int connect(java.lang.String backwardConnectionPipe, boolean isMaster) throws org.apache.thrift.TException;

    public int connectTcp(int backwardConnectionPort, boolean isMaster) throws org.apache.thrift.TException;

    public void log(java.lang.String msg) throws org.apache.thrift.TException;

    public java.lang.String echo(java.lang.String msg) throws org.apache.thrift.TException;

    public java.lang.String version() throws org.apache.thrift.TException;

    public java.lang.String state() throws org.apache.thrift.TException;

    public void stop() throws org.apache.thrift.TException;

    public int Browser_Create(int cid, int handlersMask, com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler) throws org.apache.thrift.TException;

    public void Browser_StartNativeCreation(int bid, java.lang.String url) throws org.apache.thrift.TException;

    public void Browser_Close(int bid) throws org.apache.thrift.TException;

    public void Browser_Reload(int bid) throws org.apache.thrift.TException;

    public void Browser_ReloadIgnoreCache(int bid) throws org.apache.thrift.TException;

    public void Browser_LoadURL(int bid, java.lang.String url) throws org.apache.thrift.TException;

    public java.lang.String Browser_GetURL(int bid) throws org.apache.thrift.TException;

    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException;

    public void Browser_WasResized(int bid) throws org.apache.thrift.TException;

    public void Browser_NotifyScreenInfoChanged(int bid) throws org.apache.thrift.TException;

    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code) throws org.apache.thrift.TException;

    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button) throws org.apache.thrift.TException;

    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll) throws org.apache.thrift.TException;

    public boolean Browser_CanGoForward(int bid) throws org.apache.thrift.TException;

    public boolean Browser_CanGoBack(int bid) throws org.apache.thrift.TException;

    public void Browser_GoBack(int bid) throws org.apache.thrift.TException;

    public void Browser_GoForward(int bid) throws org.apache.thrift.TException;

    public boolean Browser_IsLoading(int bid) throws org.apache.thrift.TException;

    public void Browser_StopLoad(int bid) throws org.apache.thrift.TException;

    public int Browser_GetFrameCount(int bid) throws org.apache.thrift.TException;

    public boolean Browser_IsPopup(int bid) throws org.apache.thrift.TException;

    public boolean Browser_HasDocument(int bid) throws org.apache.thrift.TException;

    public void Browser_ViewSource(int bid) throws org.apache.thrift.TException;

    public void Browser_GetSource(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) throws org.apache.thrift.TException;

    public void Browser_GetText(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) throws org.apache.thrift.TException;

    public void Browser_SetFocus(int bid, boolean enable) throws org.apache.thrift.TException;

    public double Browser_GetZoomLevel(int bid) throws org.apache.thrift.TException;

    public void Browser_SetZoomLevel(int bid, double val) throws org.apache.thrift.TException;

    public void Browser_StartDownload(int bid, java.lang.String url) throws org.apache.thrift.TException;

    public void Browser_Find(int bid, java.lang.String searchText, boolean forward, boolean matchCase, boolean findNext) throws org.apache.thrift.TException;

    public void Browser_StopFinding(int bid, boolean clearSelection) throws org.apache.thrift.TException;

    public void Browser_ReplaceMisspelling(int bid, java.lang.String word) throws org.apache.thrift.TException;

    public void Browser_SetFrameRate(int bid, int val) throws org.apache.thrift.TException;

    public void Frame_ExecuteJavaScript(int frameId, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException;

    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.PostData Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData) throws org.apache.thrift.TException;

    public java.lang.String Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name) throws org.apache.thrift.TException;

    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException;

    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException;

    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException;

    public java.lang.String Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name) throws org.apache.thrift.TException;

    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException;

    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException;

    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException;

    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException;

    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException;

    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException;

    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password) throws org.apache.thrift.TException;

    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.RObject MessageRouter_Create(java.lang.String query, java.lang.String cancel) throws org.apache.thrift.TException;

    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) throws org.apache.thrift.TException;

    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException;

    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException;

    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException;

    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) throws org.apache.thrift.TException;

    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response) throws org.apache.thrift.TException;

    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message) throws org.apache.thrift.TException;

    public void SchemeHandlerFactory_Register(java.lang.String schemeName, java.lang.String domainName, com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory) throws org.apache.thrift.TException;

    public void ClearAllSchemeHandlerFactories() throws org.apache.thrift.TException;

    public void RequestContext_ClearCertificateExceptions(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException;

    public void RequestContext_CloseAllConnections(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.RObject CookieManager_Create() throws org.apache.thrift.TException;

    public void CookieManager_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) throws org.apache.thrift.TException;

    public boolean CookieManager_VisitAllCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor) throws org.apache.thrift.TException;

    public boolean CookieManager_VisitUrlCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, java.lang.String url, boolean includeHttpOnly) throws org.apache.thrift.TException;

    public boolean CookieManager_SetCookie(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, com.jetbrains.cef.remote.thrift_codegen.Cookie cookie) throws org.apache.thrift.TException;

    public boolean CookieManager_DeleteCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, java.lang.String cookieName) throws org.apache.thrift.TException;

    public boolean CookieManager_FlushStore(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void connect(java.lang.String backwardConnectionPipe, boolean isMaster, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void connectTcp(int backwardConnectionPort, boolean isMaster, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void log(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void echo(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void version(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void state(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void stop(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_Create(int cid, int handlersMask, com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void Browser_StartNativeCreation(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_Close(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_Reload(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_ReloadIgnoreCache(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_LoadURL(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GetURL(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_WasResized(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_NotifyScreenInfoChanged(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_CanGoForward(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void Browser_CanGoBack(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GoBack(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GoForward(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_IsLoading(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void Browser_StopLoad(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GetFrameCount(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void Browser_IsPopup(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void Browser_HasDocument(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void Browser_ViewSource(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GetSource(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GetText(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SetFocus(int bid, boolean enable, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GetZoomLevel(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SetZoomLevel(int bid, double val, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_StartDownload(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_Find(int bid, java.lang.String searchText, boolean forward, boolean matchCase, boolean findNext, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_StopFinding(int bid, boolean clearSelection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_ReplaceMisspelling(int bid, java.lang.String word, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SetFrameRate(int bid, int val, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Frame_ExecuteJavaScript(int frameId, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler) throws org.apache.thrift.TException;

    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_Create(java.lang.String query, java.lang.String cancel, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void SchemeHandlerFactory_Register(java.lang.String schemeName, java.lang.String domainName, com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ClearAllSchemeHandlerFactories(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void RequestContext_ClearCertificateExceptions(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void RequestContext_CloseAllConnections(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void CookieManager_Create(org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException;

    public void CookieManager_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void CookieManager_VisitAllCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void CookieManager_VisitUrlCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, java.lang.String url, boolean includeHttpOnly, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void CookieManager_SetCookie(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, com.jetbrains.cef.remote.thrift_codegen.Cookie cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void CookieManager_DeleteCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, java.lang.String cookieName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void CookieManager_FlushStore(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public int connect(java.lang.String backwardConnectionPipe, boolean isMaster) throws org.apache.thrift.TException
    {
      send_connect(backwardConnectionPipe, isMaster);
      return recv_connect();
    }

    public void send_connect(java.lang.String backwardConnectionPipe, boolean isMaster) throws org.apache.thrift.TException
    {
      connect_args args = new connect_args();
      args.setBackwardConnectionPipe(backwardConnectionPipe);
      args.setIsMaster(isMaster);
      sendBase("connect", args);
    }

    public int recv_connect() throws org.apache.thrift.TException
    {
      connect_result result = new connect_result();
      receiveBase(result, "connect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connect failed: unknown result");
    }

    @Override
    public int connectTcp(int backwardConnectionPort, boolean isMaster) throws org.apache.thrift.TException
    {
      send_connectTcp(backwardConnectionPort, isMaster);
      return recv_connectTcp();
    }

    public void send_connectTcp(int backwardConnectionPort, boolean isMaster) throws org.apache.thrift.TException
    {
      connectTcp_args args = new connectTcp_args();
      args.setBackwardConnectionPort(backwardConnectionPort);
      args.setIsMaster(isMaster);
      sendBase("connectTcp", args);
    }

    public int recv_connectTcp() throws org.apache.thrift.TException
    {
      connectTcp_result result = new connectTcp_result();
      receiveBase(result, "connectTcp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connectTcp failed: unknown result");
    }

    @Override
    public void log(java.lang.String msg) throws org.apache.thrift.TException
    {
      send_log(msg);
    }

    public void send_log(java.lang.String msg) throws org.apache.thrift.TException
    {
      log_args args = new log_args();
      args.setMsg(msg);
      sendBaseOneway("log", args);
    }

    @Override
    public java.lang.String echo(java.lang.String msg) throws org.apache.thrift.TException
    {
      send_echo(msg);
      return recv_echo();
    }

    public void send_echo(java.lang.String msg) throws org.apache.thrift.TException
    {
      echo_args args = new echo_args();
      args.setMsg(msg);
      sendBase("echo", args);
    }

    public java.lang.String recv_echo() throws org.apache.thrift.TException
    {
      echo_result result = new echo_result();
      receiveBase(result, "echo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "echo failed: unknown result");
    }

    @Override
    public java.lang.String version() throws org.apache.thrift.TException
    {
      send_version();
      return recv_version();
    }

    public void send_version() throws org.apache.thrift.TException
    {
      version_args args = new version_args();
      sendBase("version", args);
    }

    public java.lang.String recv_version() throws org.apache.thrift.TException
    {
      version_result result = new version_result();
      receiveBase(result, "version");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "version failed: unknown result");
    }

    @Override
    public java.lang.String state() throws org.apache.thrift.TException
    {
      send_state();
      return recv_state();
    }

    public void send_state() throws org.apache.thrift.TException
    {
      state_args args = new state_args();
      sendBase("state", args);
    }

    public java.lang.String recv_state() throws org.apache.thrift.TException
    {
      state_result result = new state_result();
      receiveBase(result, "state");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "state failed: unknown result");
    }

    @Override
    public void stop() throws org.apache.thrift.TException
    {
      send_stop();
    }

    public void send_stop() throws org.apache.thrift.TException
    {
      stop_args args = new stop_args();
      sendBaseOneway("stop", args);
    }

    @Override
    public int Browser_Create(int cid, int handlersMask, com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler) throws org.apache.thrift.TException
    {
      send_Browser_Create(cid, handlersMask, requestContextHandler);
      return recv_Browser_Create();
    }

    public void send_Browser_Create(int cid, int handlersMask, com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler) throws org.apache.thrift.TException
    {
      Browser_Create_args args = new Browser_Create_args();
      args.setCid(cid);
      args.setHandlersMask(handlersMask);
      args.setRequestContextHandler(requestContextHandler);
      sendBase("Browser_Create", args);
    }

    public int recv_Browser_Create() throws org.apache.thrift.TException
    {
      Browser_Create_result result = new Browser_Create_result();
      receiveBase(result, "Browser_Create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_Create failed: unknown result");
    }

    @Override
    public void Browser_StartNativeCreation(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      send_Browser_StartNativeCreation(bid, url);
    }

    public void send_Browser_StartNativeCreation(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      Browser_StartNativeCreation_args args = new Browser_StartNativeCreation_args();
      args.setBid(bid);
      args.setUrl(url);
      sendBaseOneway("Browser_StartNativeCreation", args);
    }

    @Override
    public void Browser_Close(int bid) throws org.apache.thrift.TException
    {
      send_Browser_Close(bid);
    }

    public void send_Browser_Close(int bid) throws org.apache.thrift.TException
    {
      Browser_Close_args args = new Browser_Close_args();
      args.setBid(bid);
      sendBaseOneway("Browser_Close", args);
    }

    @Override
    public void Browser_Reload(int bid) throws org.apache.thrift.TException
    {
      send_Browser_Reload(bid);
    }

    public void send_Browser_Reload(int bid) throws org.apache.thrift.TException
    {
      Browser_Reload_args args = new Browser_Reload_args();
      args.setBid(bid);
      sendBaseOneway("Browser_Reload", args);
    }

    @Override
    public void Browser_ReloadIgnoreCache(int bid) throws org.apache.thrift.TException
    {
      send_Browser_ReloadIgnoreCache(bid);
    }

    public void send_Browser_ReloadIgnoreCache(int bid) throws org.apache.thrift.TException
    {
      Browser_ReloadIgnoreCache_args args = new Browser_ReloadIgnoreCache_args();
      args.setBid(bid);
      sendBaseOneway("Browser_ReloadIgnoreCache", args);
    }

    @Override
    public void Browser_LoadURL(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      send_Browser_LoadURL(bid, url);
    }

    public void send_Browser_LoadURL(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      Browser_LoadURL_args args = new Browser_LoadURL_args();
      args.setBid(bid);
      args.setUrl(url);
      sendBaseOneway("Browser_LoadURL", args);
    }

    @Override
    public java.lang.String Browser_GetURL(int bid) throws org.apache.thrift.TException
    {
      send_Browser_GetURL(bid);
      return recv_Browser_GetURL();
    }

    public void send_Browser_GetURL(int bid) throws org.apache.thrift.TException
    {
      Browser_GetURL_args args = new Browser_GetURL_args();
      args.setBid(bid);
      sendBase("Browser_GetURL", args);
    }

    public java.lang.String recv_Browser_GetURL() throws org.apache.thrift.TException
    {
      Browser_GetURL_result result = new Browser_GetURL_result();
      receiveBase(result, "Browser_GetURL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_GetURL failed: unknown result");
    }

    @Override
    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException
    {
      send_Browser_ExecuteJavaScript(bid, code, url, line);
    }

    public void send_Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException
    {
      Browser_ExecuteJavaScript_args args = new Browser_ExecuteJavaScript_args();
      args.setBid(bid);
      args.setCode(code);
      args.setUrl(url);
      args.setLine(line);
      sendBaseOneway("Browser_ExecuteJavaScript", args);
    }

    @Override
    public void Browser_WasResized(int bid) throws org.apache.thrift.TException
    {
      send_Browser_WasResized(bid);
    }

    public void send_Browser_WasResized(int bid) throws org.apache.thrift.TException
    {
      Browser_WasResized_args args = new Browser_WasResized_args();
      args.setBid(bid);
      sendBaseOneway("Browser_WasResized", args);
    }

    @Override
    public void Browser_NotifyScreenInfoChanged(int bid) throws org.apache.thrift.TException
    {
      send_Browser_NotifyScreenInfoChanged(bid);
    }

    public void send_Browser_NotifyScreenInfoChanged(int bid) throws org.apache.thrift.TException
    {
      Browser_NotifyScreenInfoChanged_args args = new Browser_NotifyScreenInfoChanged_args();
      args.setBid(bid);
      sendBaseOneway("Browser_NotifyScreenInfoChanged", args);
    }

    @Override
    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code) throws org.apache.thrift.TException
    {
      send_Browser_SendKeyEvent(bid, event_type, modifiers, key_char, scanCode, key_code);
    }

    public void send_Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code) throws org.apache.thrift.TException
    {
      Browser_SendKeyEvent_args args = new Browser_SendKeyEvent_args();
      args.setBid(bid);
      args.setEvent_type(event_type);
      args.setModifiers(modifiers);
      args.setKey_char(key_char);
      args.setScanCode(scanCode);
      args.setKey_code(key_code);
      sendBaseOneway("Browser_SendKeyEvent", args);
    }

    @Override
    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button) throws org.apache.thrift.TException
    {
      send_Browser_SendMouseEvent(bid, event_type, x, y, modifiers, click_count, button);
    }

    public void send_Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button) throws org.apache.thrift.TException
    {
      Browser_SendMouseEvent_args args = new Browser_SendMouseEvent_args();
      args.setBid(bid);
      args.setEvent_type(event_type);
      args.setX(x);
      args.setY(y);
      args.setModifiers(modifiers);
      args.setClick_count(click_count);
      args.setButton(button);
      sendBaseOneway("Browser_SendMouseEvent", args);
    }

    @Override
    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll) throws org.apache.thrift.TException
    {
      send_Browser_SendMouseWheelEvent(bid, scroll_type, x, y, modifiers, delta, units_to_scroll);
    }

    public void send_Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll) throws org.apache.thrift.TException
    {
      Browser_SendMouseWheelEvent_args args = new Browser_SendMouseWheelEvent_args();
      args.setBid(bid);
      args.setScroll_type(scroll_type);
      args.setX(x);
      args.setY(y);
      args.setModifiers(modifiers);
      args.setDelta(delta);
      args.setUnits_to_scroll(units_to_scroll);
      sendBaseOneway("Browser_SendMouseWheelEvent", args);
    }

    @Override
    public boolean Browser_CanGoForward(int bid) throws org.apache.thrift.TException
    {
      send_Browser_CanGoForward(bid);
      return recv_Browser_CanGoForward();
    }

    public void send_Browser_CanGoForward(int bid) throws org.apache.thrift.TException
    {
      Browser_CanGoForward_args args = new Browser_CanGoForward_args();
      args.setBid(bid);
      sendBase("Browser_CanGoForward", args);
    }

    public boolean recv_Browser_CanGoForward() throws org.apache.thrift.TException
    {
      Browser_CanGoForward_result result = new Browser_CanGoForward_result();
      receiveBase(result, "Browser_CanGoForward");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_CanGoForward failed: unknown result");
    }

    @Override
    public boolean Browser_CanGoBack(int bid) throws org.apache.thrift.TException
    {
      send_Browser_CanGoBack(bid);
      return recv_Browser_CanGoBack();
    }

    public void send_Browser_CanGoBack(int bid) throws org.apache.thrift.TException
    {
      Browser_CanGoBack_args args = new Browser_CanGoBack_args();
      args.setBid(bid);
      sendBase("Browser_CanGoBack", args);
    }

    public boolean recv_Browser_CanGoBack() throws org.apache.thrift.TException
    {
      Browser_CanGoBack_result result = new Browser_CanGoBack_result();
      receiveBase(result, "Browser_CanGoBack");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_CanGoBack failed: unknown result");
    }

    @Override
    public void Browser_GoBack(int bid) throws org.apache.thrift.TException
    {
      send_Browser_GoBack(bid);
    }

    public void send_Browser_GoBack(int bid) throws org.apache.thrift.TException
    {
      Browser_GoBack_args args = new Browser_GoBack_args();
      args.setBid(bid);
      sendBaseOneway("Browser_GoBack", args);
    }

    @Override
    public void Browser_GoForward(int bid) throws org.apache.thrift.TException
    {
      send_Browser_GoForward(bid);
    }

    public void send_Browser_GoForward(int bid) throws org.apache.thrift.TException
    {
      Browser_GoForward_args args = new Browser_GoForward_args();
      args.setBid(bid);
      sendBaseOneway("Browser_GoForward", args);
    }

    @Override
    public boolean Browser_IsLoading(int bid) throws org.apache.thrift.TException
    {
      send_Browser_IsLoading(bid);
      return recv_Browser_IsLoading();
    }

    public void send_Browser_IsLoading(int bid) throws org.apache.thrift.TException
    {
      Browser_IsLoading_args args = new Browser_IsLoading_args();
      args.setBid(bid);
      sendBase("Browser_IsLoading", args);
    }

    public boolean recv_Browser_IsLoading() throws org.apache.thrift.TException
    {
      Browser_IsLoading_result result = new Browser_IsLoading_result();
      receiveBase(result, "Browser_IsLoading");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_IsLoading failed: unknown result");
    }

    @Override
    public void Browser_StopLoad(int bid) throws org.apache.thrift.TException
    {
      send_Browser_StopLoad(bid);
    }

    public void send_Browser_StopLoad(int bid) throws org.apache.thrift.TException
    {
      Browser_StopLoad_args args = new Browser_StopLoad_args();
      args.setBid(bid);
      sendBaseOneway("Browser_StopLoad", args);
    }

    @Override
    public int Browser_GetFrameCount(int bid) throws org.apache.thrift.TException
    {
      send_Browser_GetFrameCount(bid);
      return recv_Browser_GetFrameCount();
    }

    public void send_Browser_GetFrameCount(int bid) throws org.apache.thrift.TException
    {
      Browser_GetFrameCount_args args = new Browser_GetFrameCount_args();
      args.setBid(bid);
      sendBase("Browser_GetFrameCount", args);
    }

    public int recv_Browser_GetFrameCount() throws org.apache.thrift.TException
    {
      Browser_GetFrameCount_result result = new Browser_GetFrameCount_result();
      receiveBase(result, "Browser_GetFrameCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_GetFrameCount failed: unknown result");
    }

    @Override
    public boolean Browser_IsPopup(int bid) throws org.apache.thrift.TException
    {
      send_Browser_IsPopup(bid);
      return recv_Browser_IsPopup();
    }

    public void send_Browser_IsPopup(int bid) throws org.apache.thrift.TException
    {
      Browser_IsPopup_args args = new Browser_IsPopup_args();
      args.setBid(bid);
      sendBase("Browser_IsPopup", args);
    }

    public boolean recv_Browser_IsPopup() throws org.apache.thrift.TException
    {
      Browser_IsPopup_result result = new Browser_IsPopup_result();
      receiveBase(result, "Browser_IsPopup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_IsPopup failed: unknown result");
    }

    @Override
    public boolean Browser_HasDocument(int bid) throws org.apache.thrift.TException
    {
      send_Browser_HasDocument(bid);
      return recv_Browser_HasDocument();
    }

    public void send_Browser_HasDocument(int bid) throws org.apache.thrift.TException
    {
      Browser_HasDocument_args args = new Browser_HasDocument_args();
      args.setBid(bid);
      sendBase("Browser_HasDocument", args);
    }

    public boolean recv_Browser_HasDocument() throws org.apache.thrift.TException
    {
      Browser_HasDocument_result result = new Browser_HasDocument_result();
      receiveBase(result, "Browser_HasDocument");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_HasDocument failed: unknown result");
    }

    @Override
    public void Browser_ViewSource(int bid) throws org.apache.thrift.TException
    {
      send_Browser_ViewSource(bid);
    }

    public void send_Browser_ViewSource(int bid) throws org.apache.thrift.TException
    {
      Browser_ViewSource_args args = new Browser_ViewSource_args();
      args.setBid(bid);
      sendBaseOneway("Browser_ViewSource", args);
    }

    @Override
    public void Browser_GetSource(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) throws org.apache.thrift.TException
    {
      send_Browser_GetSource(bid, stringVisitor);
    }

    public void send_Browser_GetSource(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) throws org.apache.thrift.TException
    {
      Browser_GetSource_args args = new Browser_GetSource_args();
      args.setBid(bid);
      args.setStringVisitor(stringVisitor);
      sendBaseOneway("Browser_GetSource", args);
    }

    @Override
    public void Browser_GetText(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) throws org.apache.thrift.TException
    {
      send_Browser_GetText(bid, stringVisitor);
    }

    public void send_Browser_GetText(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) throws org.apache.thrift.TException
    {
      Browser_GetText_args args = new Browser_GetText_args();
      args.setBid(bid);
      args.setStringVisitor(stringVisitor);
      sendBaseOneway("Browser_GetText", args);
    }

    @Override
    public void Browser_SetFocus(int bid, boolean enable) throws org.apache.thrift.TException
    {
      send_Browser_SetFocus(bid, enable);
    }

    public void send_Browser_SetFocus(int bid, boolean enable) throws org.apache.thrift.TException
    {
      Browser_SetFocus_args args = new Browser_SetFocus_args();
      args.setBid(bid);
      args.setEnable(enable);
      sendBaseOneway("Browser_SetFocus", args);
    }

    @Override
    public double Browser_GetZoomLevel(int bid) throws org.apache.thrift.TException
    {
      send_Browser_GetZoomLevel(bid);
      return recv_Browser_GetZoomLevel();
    }

    public void send_Browser_GetZoomLevel(int bid) throws org.apache.thrift.TException
    {
      Browser_GetZoomLevel_args args = new Browser_GetZoomLevel_args();
      args.setBid(bid);
      sendBase("Browser_GetZoomLevel", args);
    }

    public double recv_Browser_GetZoomLevel() throws org.apache.thrift.TException
    {
      Browser_GetZoomLevel_result result = new Browser_GetZoomLevel_result();
      receiveBase(result, "Browser_GetZoomLevel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_GetZoomLevel failed: unknown result");
    }

    @Override
    public void Browser_SetZoomLevel(int bid, double val) throws org.apache.thrift.TException
    {
      send_Browser_SetZoomLevel(bid, val);
    }

    public void send_Browser_SetZoomLevel(int bid, double val) throws org.apache.thrift.TException
    {
      Browser_SetZoomLevel_args args = new Browser_SetZoomLevel_args();
      args.setBid(bid);
      args.setVal(val);
      sendBaseOneway("Browser_SetZoomLevel", args);
    }

    @Override
    public void Browser_StartDownload(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      send_Browser_StartDownload(bid, url);
    }

    public void send_Browser_StartDownload(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      Browser_StartDownload_args args = new Browser_StartDownload_args();
      args.setBid(bid);
      args.setUrl(url);
      sendBaseOneway("Browser_StartDownload", args);
    }

    @Override
    public void Browser_Find(int bid, java.lang.String searchText, boolean forward, boolean matchCase, boolean findNext) throws org.apache.thrift.TException
    {
      send_Browser_Find(bid, searchText, forward, matchCase, findNext);
    }

    public void send_Browser_Find(int bid, java.lang.String searchText, boolean forward, boolean matchCase, boolean findNext) throws org.apache.thrift.TException
    {
      Browser_Find_args args = new Browser_Find_args();
      args.setBid(bid);
      args.setSearchText(searchText);
      args.setForward(forward);
      args.setMatchCase(matchCase);
      args.setFindNext(findNext);
      sendBaseOneway("Browser_Find", args);
    }

    @Override
    public void Browser_StopFinding(int bid, boolean clearSelection) throws org.apache.thrift.TException
    {
      send_Browser_StopFinding(bid, clearSelection);
    }

    public void send_Browser_StopFinding(int bid, boolean clearSelection) throws org.apache.thrift.TException
    {
      Browser_StopFinding_args args = new Browser_StopFinding_args();
      args.setBid(bid);
      args.setClearSelection(clearSelection);
      sendBaseOneway("Browser_StopFinding", args);
    }

    @Override
    public void Browser_ReplaceMisspelling(int bid, java.lang.String word) throws org.apache.thrift.TException
    {
      send_Browser_ReplaceMisspelling(bid, word);
    }

    public void send_Browser_ReplaceMisspelling(int bid, java.lang.String word) throws org.apache.thrift.TException
    {
      Browser_ReplaceMisspelling_args args = new Browser_ReplaceMisspelling_args();
      args.setBid(bid);
      args.setWord(word);
      sendBaseOneway("Browser_ReplaceMisspelling", args);
    }

    @Override
    public void Browser_SetFrameRate(int bid, int val) throws org.apache.thrift.TException
    {
      send_Browser_SetFrameRate(bid, val);
    }

    public void send_Browser_SetFrameRate(int bid, int val) throws org.apache.thrift.TException
    {
      Browser_SetFrameRate_args args = new Browser_SetFrameRate_args();
      args.setBid(bid);
      args.setVal(val);
      sendBaseOneway("Browser_SetFrameRate", args);
    }

    @Override
    public void Frame_ExecuteJavaScript(int frameId, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException
    {
      send_Frame_ExecuteJavaScript(frameId, code, url, line);
    }

    public void send_Frame_ExecuteJavaScript(int frameId, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException
    {
      Frame_ExecuteJavaScript_args args = new Frame_ExecuteJavaScript_args();
      args.setFrameId(frameId);
      args.setCode(code);
      args.setUrl(url);
      args.setLine(line);
      sendBaseOneway("Frame_ExecuteJavaScript", args);
    }

    @Override
    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_Request_Update(request);
      recv_Request_Update();
    }

    public void send_Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      Request_Update_args args = new Request_Update_args();
      args.setRequest(request);
      sendBase("Request_Update", args);
    }

    public void recv_Request_Update() throws org.apache.thrift.TException
    {
      Request_Update_result result = new Request_Update_result();
      receiveBase(result, "Request_Update");
      return;
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.PostData Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_Request_GetPostData(request);
      return recv_Request_GetPostData();
    }

    public void send_Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      Request_GetPostData_args args = new Request_GetPostData_args();
      args.setRequest(request);
      sendBase("Request_GetPostData", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.PostData recv_Request_GetPostData() throws org.apache.thrift.TException
    {
      Request_GetPostData_result result = new Request_GetPostData_result();
      receiveBase(result, "Request_GetPostData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Request_GetPostData failed: unknown result");
    }

    @Override
    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData) throws org.apache.thrift.TException
    {
      send_Request_SetPostData(request, postData);
      recv_Request_SetPostData();
    }

    public void send_Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData) throws org.apache.thrift.TException
    {
      Request_SetPostData_args args = new Request_SetPostData_args();
      args.setRequest(request);
      args.setPostData(postData);
      sendBase("Request_SetPostData", args);
    }

    public void recv_Request_SetPostData() throws org.apache.thrift.TException
    {
      Request_SetPostData_result result = new Request_SetPostData_result();
      receiveBase(result, "Request_SetPostData");
      return;
    }

    @Override
    public java.lang.String Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name) throws org.apache.thrift.TException
    {
      send_Request_GetHeaderByName(request, name);
      return recv_Request_GetHeaderByName();
    }

    public void send_Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name) throws org.apache.thrift.TException
    {
      Request_GetHeaderByName_args args = new Request_GetHeaderByName_args();
      args.setRequest(request);
      args.setName(name);
      sendBase("Request_GetHeaderByName", args);
    }

    public java.lang.String recv_Request_GetHeaderByName() throws org.apache.thrift.TException
    {
      Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
      receiveBase(result, "Request_GetHeaderByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Request_GetHeaderByName failed: unknown result");
    }

    @Override
    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      send_Request_SetHeaderByName(request, name, value, overwrite);
      recv_Request_SetHeaderByName();
    }

    public void send_Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      Request_SetHeaderByName_args args = new Request_SetHeaderByName_args();
      args.setRequest(request);
      args.setName(name);
      args.setValue(value);
      args.setOverwrite(overwrite);
      sendBase("Request_SetHeaderByName", args);
    }

    public void recv_Request_SetHeaderByName() throws org.apache.thrift.TException
    {
      Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
      receiveBase(result, "Request_SetHeaderByName");
      return;
    }

    @Override
    public java.util.Map<java.lang.String,java.lang.String> Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_Request_GetHeaderMap(request);
      return recv_Request_GetHeaderMap();
    }

    public void send_Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      Request_GetHeaderMap_args args = new Request_GetHeaderMap_args();
      args.setRequest(request);
      sendBase("Request_GetHeaderMap", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_Request_GetHeaderMap() throws org.apache.thrift.TException
    {
      Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
      receiveBase(result, "Request_GetHeaderMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Request_GetHeaderMap failed: unknown result");
    }

    @Override
    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      send_Request_SetHeaderMap(request, headerMap);
      recv_Request_SetHeaderMap();
    }

    public void send_Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      Request_SetHeaderMap_args args = new Request_SetHeaderMap_args();
      args.setRequest(request);
      args.setHeaderMap(headerMap);
      sendBase("Request_SetHeaderMap", args);
    }

    public void recv_Request_SetHeaderMap() throws org.apache.thrift.TException
    {
      Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
      receiveBase(result, "Request_SetHeaderMap");
      return;
    }

    @Override
    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      send_Request_Set(request, url, method, postData, headerMap);
      recv_Request_Set();
    }

    public void send_Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      Request_Set_args args = new Request_Set_args();
      args.setRequest(request);
      args.setUrl(url);
      args.setMethod(method);
      args.setPostData(postData);
      args.setHeaderMap(headerMap);
      sendBase("Request_Set", args);
    }

    public void recv_Request_Set() throws org.apache.thrift.TException
    {
      Request_Set_result result = new Request_Set_result();
      receiveBase(result, "Request_Set");
      return;
    }

    @Override
    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      send_Response_Update(response);
      recv_Response_Update();
    }

    public void send_Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      Response_Update_args args = new Response_Update_args();
      args.setResponse(response);
      sendBase("Response_Update", args);
    }

    public void recv_Response_Update() throws org.apache.thrift.TException
    {
      Response_Update_result result = new Response_Update_result();
      receiveBase(result, "Response_Update");
      return;
    }

    @Override
    public java.lang.String Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name) throws org.apache.thrift.TException
    {
      send_Response_GetHeaderByName(response, name);
      return recv_Response_GetHeaderByName();
    }

    public void send_Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name) throws org.apache.thrift.TException
    {
      Response_GetHeaderByName_args args = new Response_GetHeaderByName_args();
      args.setResponse(response);
      args.setName(name);
      sendBase("Response_GetHeaderByName", args);
    }

    public java.lang.String recv_Response_GetHeaderByName() throws org.apache.thrift.TException
    {
      Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
      receiveBase(result, "Response_GetHeaderByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Response_GetHeaderByName failed: unknown result");
    }

    @Override
    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      send_Response_SetHeaderByName(response, name, value, overwrite);
      recv_Response_SetHeaderByName();
    }

    public void send_Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      Response_SetHeaderByName_args args = new Response_SetHeaderByName_args();
      args.setResponse(response);
      args.setName(name);
      args.setValue(value);
      args.setOverwrite(overwrite);
      sendBase("Response_SetHeaderByName", args);
    }

    public void recv_Response_SetHeaderByName() throws org.apache.thrift.TException
    {
      Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
      receiveBase(result, "Response_SetHeaderByName");
      return;
    }

    @Override
    public java.util.Map<java.lang.String,java.lang.String> Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      send_Response_GetHeaderMap(response);
      return recv_Response_GetHeaderMap();
    }

    public void send_Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      Response_GetHeaderMap_args args = new Response_GetHeaderMap_args();
      args.setResponse(response);
      sendBase("Response_GetHeaderMap", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_Response_GetHeaderMap() throws org.apache.thrift.TException
    {
      Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
      receiveBase(result, "Response_GetHeaderMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Response_GetHeaderMap failed: unknown result");
    }

    @Override
    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      send_Response_SetHeaderMap(response, headerMap);
      recv_Response_SetHeaderMap();
    }

    public void send_Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      Response_SetHeaderMap_args args = new Response_SetHeaderMap_args();
      args.setResponse(response);
      args.setHeaderMap(headerMap);
      sendBase("Response_SetHeaderMap", args);
    }

    public void recv_Response_SetHeaderMap() throws org.apache.thrift.TException
    {
      Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
      receiveBase(result, "Response_SetHeaderMap");
      return;
    }

    @Override
    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      send_Callback_Dispose(callback);
    }

    public void send_Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      Callback_Dispose_args args = new Callback_Dispose_args();
      args.setCallback(callback);
      sendBaseOneway("Callback_Dispose", args);
    }

    @Override
    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      send_Callback_Continue(callback);
    }

    public void send_Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      Callback_Continue_args args = new Callback_Continue_args();
      args.setCallback(callback);
      sendBaseOneway("Callback_Continue", args);
    }

    @Override
    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      send_Callback_Cancel(callback);
    }

    public void send_Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      Callback_Cancel_args args = new Callback_Cancel_args();
      args.setCallback(callback);
      sendBaseOneway("Callback_Cancel", args);
    }

    @Override
    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      send_AuthCallback_Dispose(authCallback);
    }

    public void send_AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      AuthCallback_Dispose_args args = new AuthCallback_Dispose_args();
      args.setAuthCallback(authCallback);
      sendBaseOneway("AuthCallback_Dispose", args);
    }

    @Override
    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      send_AuthCallback_Continue(authCallback, username, password);
    }

    public void send_AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      AuthCallback_Continue_args args = new AuthCallback_Continue_args();
      args.setAuthCallback(authCallback);
      args.setUsername(username);
      args.setPassword(password);
      sendBaseOneway("AuthCallback_Continue", args);
    }

    @Override
    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      send_AuthCallback_Cancel(authCallback);
    }

    public void send_AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      AuthCallback_Cancel_args args = new AuthCallback_Cancel_args();
      args.setAuthCallback(authCallback);
      sendBaseOneway("AuthCallback_Cancel", args);
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.RObject MessageRouter_Create(java.lang.String query, java.lang.String cancel) throws org.apache.thrift.TException
    {
      send_MessageRouter_Create(query, cancel);
      return recv_MessageRouter_Create();
    }

    public void send_MessageRouter_Create(java.lang.String query, java.lang.String cancel) throws org.apache.thrift.TException
    {
      MessageRouter_Create_args args = new MessageRouter_Create_args();
      args.setQuery(query);
      args.setCancel(cancel);
      sendBase("MessageRouter_Create", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.RObject recv_MessageRouter_Create() throws org.apache.thrift.TException
    {
      MessageRouter_Create_result result = new MessageRouter_Create_result();
      receiveBase(result, "MessageRouter_Create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "MessageRouter_Create failed: unknown result");
    }

    @Override
    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) throws org.apache.thrift.TException
    {
      send_MessageRouter_Dispose(msgRouter);
    }

    public void send_MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) throws org.apache.thrift.TException
    {
      MessageRouter_Dispose_args args = new MessageRouter_Dispose_args();
      args.setMsgRouter(msgRouter);
      sendBaseOneway("MessageRouter_Dispose", args);
    }

    @Override
    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      send_MessageRouter_AddMessageRouterToBrowser(msgRouter, bid);
      recv_MessageRouter_AddMessageRouterToBrowser();
    }

    public void send_MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      MessageRouter_AddMessageRouterToBrowser_args args = new MessageRouter_AddMessageRouterToBrowser_args();
      args.setMsgRouter(msgRouter);
      args.setBid(bid);
      sendBase("MessageRouter_AddMessageRouterToBrowser", args);
    }

    public void recv_MessageRouter_AddMessageRouterToBrowser() throws org.apache.thrift.TException
    {
      MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
      receiveBase(result, "MessageRouter_AddMessageRouterToBrowser");
      return;
    }

    @Override
    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      send_MessageRouter_RemoveMessageRouterFromBrowser(msgRouter, bid);
      recv_MessageRouter_RemoveMessageRouterFromBrowser();
    }

    public void send_MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      MessageRouter_RemoveMessageRouterFromBrowser_args args = new MessageRouter_RemoveMessageRouterFromBrowser_args();
      args.setMsgRouter(msgRouter);
      args.setBid(bid);
      sendBase("MessageRouter_RemoveMessageRouterFromBrowser", args);
    }

    public void recv_MessageRouter_RemoveMessageRouterFromBrowser() throws org.apache.thrift.TException
    {
      MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
      receiveBase(result, "MessageRouter_RemoveMessageRouterFromBrowser");
      return;
    }

    @Override
    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first) throws org.apache.thrift.TException
    {
      send_MessageRouter_AddHandler(msgRouter, handler, first);
      recv_MessageRouter_AddHandler();
    }

    public void send_MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first) throws org.apache.thrift.TException
    {
      MessageRouter_AddHandler_args args = new MessageRouter_AddHandler_args();
      args.setMsgRouter(msgRouter);
      args.setHandler(handler);
      args.setFirst(first);
      sendBase("MessageRouter_AddHandler", args);
    }

    public void recv_MessageRouter_AddHandler() throws org.apache.thrift.TException
    {
      MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
      receiveBase(result, "MessageRouter_AddHandler");
      return;
    }

    @Override
    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      send_MessageRouter_RemoveHandler(msgRouter, handler);
      recv_MessageRouter_RemoveHandler();
    }

    public void send_MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      MessageRouter_RemoveHandler_args args = new MessageRouter_RemoveHandler_args();
      args.setMsgRouter(msgRouter);
      args.setHandler(handler);
      sendBase("MessageRouter_RemoveHandler", args);
    }

    public void recv_MessageRouter_RemoveHandler() throws org.apache.thrift.TException
    {
      MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
      receiveBase(result, "MessageRouter_RemoveHandler");
      return;
    }

    @Override
    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      send_MessageRouter_CancelPending(msgRouter, bid, handler);
      recv_MessageRouter_CancelPending();
    }

    public void send_MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      MessageRouter_CancelPending_args args = new MessageRouter_CancelPending_args();
      args.setMsgRouter(msgRouter);
      args.setBid(bid);
      args.setHandler(handler);
      sendBase("MessageRouter_CancelPending", args);
    }

    public void recv_MessageRouter_CancelPending() throws org.apache.thrift.TException
    {
      MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
      receiveBase(result, "MessageRouter_CancelPending");
      return;
    }

    @Override
    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) throws org.apache.thrift.TException
    {
      send_QueryCallback_Dispose(qcallback);
    }

    public void send_QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) throws org.apache.thrift.TException
    {
      QueryCallback_Dispose_args args = new QueryCallback_Dispose_args();
      args.setQcallback(qcallback);
      sendBaseOneway("QueryCallback_Dispose", args);
    }

    @Override
    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response) throws org.apache.thrift.TException
    {
      send_QueryCallback_Success(qcallback, response);
    }

    public void send_QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response) throws org.apache.thrift.TException
    {
      QueryCallback_Success_args args = new QueryCallback_Success_args();
      args.setQcallback(qcallback);
      args.setResponse(response);
      sendBaseOneway("QueryCallback_Success", args);
    }

    @Override
    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message) throws org.apache.thrift.TException
    {
      send_QueryCallback_Failure(qcallback, error_code, error_message);
    }

    public void send_QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message) throws org.apache.thrift.TException
    {
      QueryCallback_Failure_args args = new QueryCallback_Failure_args();
      args.setQcallback(qcallback);
      args.setError_code(error_code);
      args.setError_message(error_message);
      sendBaseOneway("QueryCallback_Failure", args);
    }

    @Override
    public void SchemeHandlerFactory_Register(java.lang.String schemeName, java.lang.String domainName, com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory) throws org.apache.thrift.TException
    {
      send_SchemeHandlerFactory_Register(schemeName, domainName, schemeHandlerFactory);
    }

    public void send_SchemeHandlerFactory_Register(java.lang.String schemeName, java.lang.String domainName, com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory) throws org.apache.thrift.TException
    {
      SchemeHandlerFactory_Register_args args = new SchemeHandlerFactory_Register_args();
      args.setSchemeName(schemeName);
      args.setDomainName(domainName);
      args.setSchemeHandlerFactory(schemeHandlerFactory);
      sendBaseOneway("SchemeHandlerFactory_Register", args);
    }

    @Override
    public void ClearAllSchemeHandlerFactories() throws org.apache.thrift.TException
    {
      send_ClearAllSchemeHandlerFactories();
    }

    public void send_ClearAllSchemeHandlerFactories() throws org.apache.thrift.TException
    {
      ClearAllSchemeHandlerFactories_args args = new ClearAllSchemeHandlerFactories_args();
      sendBaseOneway("ClearAllSchemeHandlerFactories", args);
    }

    @Override
    public void RequestContext_ClearCertificateExceptions(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException
    {
      send_RequestContext_ClearCertificateExceptions(bid, completionCallback);
    }

    public void send_RequestContext_ClearCertificateExceptions(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException
    {
      RequestContext_ClearCertificateExceptions_args args = new RequestContext_ClearCertificateExceptions_args();
      args.setBid(bid);
      args.setCompletionCallback(completionCallback);
      sendBaseOneway("RequestContext_ClearCertificateExceptions", args);
    }

    @Override
    public void RequestContext_CloseAllConnections(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException
    {
      send_RequestContext_CloseAllConnections(bid, completionCallback);
    }

    public void send_RequestContext_CloseAllConnections(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException
    {
      RequestContext_CloseAllConnections_args args = new RequestContext_CloseAllConnections_args();
      args.setBid(bid);
      args.setCompletionCallback(completionCallback);
      sendBaseOneway("RequestContext_CloseAllConnections", args);
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.RObject CookieManager_Create() throws org.apache.thrift.TException
    {
      send_CookieManager_Create();
      return recv_CookieManager_Create();
    }

    public void send_CookieManager_Create() throws org.apache.thrift.TException
    {
      CookieManager_Create_args args = new CookieManager_Create_args();
      sendBase("CookieManager_Create", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.RObject recv_CookieManager_Create() throws org.apache.thrift.TException
    {
      CookieManager_Create_result result = new CookieManager_Create_result();
      receiveBase(result, "CookieManager_Create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieManager_Create failed: unknown result");
    }

    @Override
    public void CookieManager_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) throws org.apache.thrift.TException
    {
      send_CookieManager_Dispose(cookieManager);
    }

    public void send_CookieManager_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) throws org.apache.thrift.TException
    {
      CookieManager_Dispose_args args = new CookieManager_Dispose_args();
      args.setCookieManager(cookieManager);
      sendBaseOneway("CookieManager_Dispose", args);
    }

    @Override
    public boolean CookieManager_VisitAllCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor) throws org.apache.thrift.TException
    {
      send_CookieManager_VisitAllCookies(cookieManager, visitor);
      return recv_CookieManager_VisitAllCookies();
    }

    public void send_CookieManager_VisitAllCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor) throws org.apache.thrift.TException
    {
      CookieManager_VisitAllCookies_args args = new CookieManager_VisitAllCookies_args();
      args.setCookieManager(cookieManager);
      args.setVisitor(visitor);
      sendBase("CookieManager_VisitAllCookies", args);
    }

    public boolean recv_CookieManager_VisitAllCookies() throws org.apache.thrift.TException
    {
      CookieManager_VisitAllCookies_result result = new CookieManager_VisitAllCookies_result();
      receiveBase(result, "CookieManager_VisitAllCookies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieManager_VisitAllCookies failed: unknown result");
    }

    @Override
    public boolean CookieManager_VisitUrlCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, java.lang.String url, boolean includeHttpOnly) throws org.apache.thrift.TException
    {
      send_CookieManager_VisitUrlCookies(cookieManager, visitor, url, includeHttpOnly);
      return recv_CookieManager_VisitUrlCookies();
    }

    public void send_CookieManager_VisitUrlCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, java.lang.String url, boolean includeHttpOnly) throws org.apache.thrift.TException
    {
      CookieManager_VisitUrlCookies_args args = new CookieManager_VisitUrlCookies_args();
      args.setCookieManager(cookieManager);
      args.setVisitor(visitor);
      args.setUrl(url);
      args.setIncludeHttpOnly(includeHttpOnly);
      sendBase("CookieManager_VisitUrlCookies", args);
    }

    public boolean recv_CookieManager_VisitUrlCookies() throws org.apache.thrift.TException
    {
      CookieManager_VisitUrlCookies_result result = new CookieManager_VisitUrlCookies_result();
      receiveBase(result, "CookieManager_VisitUrlCookies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieManager_VisitUrlCookies failed: unknown result");
    }

    @Override
    public boolean CookieManager_SetCookie(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, com.jetbrains.cef.remote.thrift_codegen.Cookie cookie) throws org.apache.thrift.TException
    {
      send_CookieManager_SetCookie(cookieManager, url, cookie);
      return recv_CookieManager_SetCookie();
    }

    public void send_CookieManager_SetCookie(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, com.jetbrains.cef.remote.thrift_codegen.Cookie cookie) throws org.apache.thrift.TException
    {
      CookieManager_SetCookie_args args = new CookieManager_SetCookie_args();
      args.setCookieManager(cookieManager);
      args.setUrl(url);
      args.setCookie(cookie);
      sendBase("CookieManager_SetCookie", args);
    }

    public boolean recv_CookieManager_SetCookie() throws org.apache.thrift.TException
    {
      CookieManager_SetCookie_result result = new CookieManager_SetCookie_result();
      receiveBase(result, "CookieManager_SetCookie");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieManager_SetCookie failed: unknown result");
    }

    @Override
    public boolean CookieManager_DeleteCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, java.lang.String cookieName) throws org.apache.thrift.TException
    {
      send_CookieManager_DeleteCookies(cookieManager, url, cookieName);
      return recv_CookieManager_DeleteCookies();
    }

    public void send_CookieManager_DeleteCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, java.lang.String cookieName) throws org.apache.thrift.TException
    {
      CookieManager_DeleteCookies_args args = new CookieManager_DeleteCookies_args();
      args.setCookieManager(cookieManager);
      args.setUrl(url);
      args.setCookieName(cookieName);
      sendBase("CookieManager_DeleteCookies", args);
    }

    public boolean recv_CookieManager_DeleteCookies() throws org.apache.thrift.TException
    {
      CookieManager_DeleteCookies_result result = new CookieManager_DeleteCookies_result();
      receiveBase(result, "CookieManager_DeleteCookies");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieManager_DeleteCookies failed: unknown result");
    }

    @Override
    public boolean CookieManager_FlushStore(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException
    {
      send_CookieManager_FlushStore(cookieManager, completionCallback);
      return recv_CookieManager_FlushStore();
    }

    public void send_CookieManager_FlushStore(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) throws org.apache.thrift.TException
    {
      CookieManager_FlushStore_args args = new CookieManager_FlushStore_args();
      args.setCookieManager(cookieManager);
      args.setCompletionCallback(completionCallback);
      sendBase("CookieManager_FlushStore", args);
    }

    public boolean recv_CookieManager_FlushStore() throws org.apache.thrift.TException
    {
      CookieManager_FlushStore_result result = new CookieManager_FlushStore_result();
      receiveBase(result, "CookieManager_FlushStore");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CookieManager_FlushStore failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void connect(java.lang.String backwardConnectionPipe, boolean isMaster, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connect_call method_call = new connect_call(backwardConnectionPipe, isMaster, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connect_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String backwardConnectionPipe;
      private boolean isMaster;
      public connect_call(java.lang.String backwardConnectionPipe, boolean isMaster, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.backwardConnectionPipe = backwardConnectionPipe;
        this.isMaster = isMaster;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connect_args args = new connect_args();
        args.setBackwardConnectionPipe(backwardConnectionPipe);
        args.setIsMaster(isMaster);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connect();
      }
    }

    @Override
    public void connectTcp(int backwardConnectionPort, boolean isMaster, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connectTcp_call method_call = new connectTcp_call(backwardConnectionPort, isMaster, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connectTcp_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int backwardConnectionPort;
      private boolean isMaster;
      public connectTcp_call(int backwardConnectionPort, boolean isMaster, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.backwardConnectionPort = backwardConnectionPort;
        this.isMaster = isMaster;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connectTcp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connectTcp_args args = new connectTcp_args();
        args.setBackwardConnectionPort(backwardConnectionPort);
        args.setIsMaster(isMaster);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connectTcp();
      }
    }

    @Override
    public void log(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      log_call method_call = new log_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class log_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String msg;
      public log_call(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.msg = msg;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("log", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        log_args args = new log_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void echo(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      echo_call method_call = new echo_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class echo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String msg;
      public echo_call(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("echo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        echo_args args = new echo_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_echo();
      }
    }

    @Override
    public void version(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      version_call method_call = new version_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class version_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public version_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("version", org.apache.thrift.protocol.TMessageType.CALL, 0));
        version_args args = new version_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_version();
      }
    }

    @Override
    public void state(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      state_call method_call = new state_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class state_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public state_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("state", org.apache.thrift.protocol.TMessageType.CALL, 0));
        state_args args = new state_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_state();
      }
    }

    @Override
    public void stop(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stop_call method_call = new stop_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stop_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public stop_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stop", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        stop_args args = new stop_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_Create(int cid, int handlersMask, com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_Create_call method_call = new Browser_Create_call(cid, handlersMask, requestContextHandler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_Create_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int cid;
      private int handlersMask;
      private com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler;
      public Browser_Create_call(int cid, int handlersMask, com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.handlersMask = handlersMask;
        this.requestContextHandler = requestContextHandler;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_Create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_Create_args args = new Browser_Create_args();
        args.setCid(cid);
        args.setHandlersMask(handlersMask);
        args.setRequestContextHandler(requestContextHandler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_Create();
      }
    }

    @Override
    public void Browser_StartNativeCreation(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_StartNativeCreation_call method_call = new Browser_StartNativeCreation_call(bid, url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_StartNativeCreation_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String url;
      public Browser_StartNativeCreation_call(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.url = url;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_StartNativeCreation", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_StartNativeCreation_args args = new Browser_StartNativeCreation_args();
        args.setBid(bid);
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_Close(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_Close_call method_call = new Browser_Close_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_Close_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_Close_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_Close", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_Close_args args = new Browser_Close_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_Reload(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_Reload_call method_call = new Browser_Reload_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_Reload_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_Reload_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_Reload", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_Reload_args args = new Browser_Reload_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_ReloadIgnoreCache(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_ReloadIgnoreCache_call method_call = new Browser_ReloadIgnoreCache_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_ReloadIgnoreCache_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_ReloadIgnoreCache_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_ReloadIgnoreCache", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_ReloadIgnoreCache_args args = new Browser_ReloadIgnoreCache_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_LoadURL(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_LoadURL_call method_call = new Browser_LoadURL_call(bid, url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_LoadURL_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String url;
      public Browser_LoadURL_call(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.url = url;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_LoadURL", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_LoadURL_args args = new Browser_LoadURL_args();
        args.setBid(bid);
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_GetURL(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GetURL_call method_call = new Browser_GetURL_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GetURL_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int bid;
      public Browser_GetURL_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GetURL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_GetURL_args args = new Browser_GetURL_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_GetURL();
      }
    }

    @Override
    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_ExecuteJavaScript_call method_call = new Browser_ExecuteJavaScript_call(bid, code, url, line, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_ExecuteJavaScript_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String code;
      private java.lang.String url;
      private int line;
      public Browser_ExecuteJavaScript_call(int bid, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.code = code;
        this.url = url;
        this.line = line;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_ExecuteJavaScript", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_ExecuteJavaScript_args args = new Browser_ExecuteJavaScript_args();
        args.setBid(bid);
        args.setCode(code);
        args.setUrl(url);
        args.setLine(line);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_WasResized(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_WasResized_call method_call = new Browser_WasResized_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_WasResized_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_WasResized_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_WasResized", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_WasResized_args args = new Browser_WasResized_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_NotifyScreenInfoChanged(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_NotifyScreenInfoChanged_call method_call = new Browser_NotifyScreenInfoChanged_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_NotifyScreenInfoChanged_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_NotifyScreenInfoChanged_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_NotifyScreenInfoChanged", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_NotifyScreenInfoChanged_args args = new Browser_NotifyScreenInfoChanged_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SendKeyEvent_call method_call = new Browser_SendKeyEvent_call(bid, event_type, modifiers, key_char, scanCode, key_code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SendKeyEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int event_type;
      private int modifiers;
      private short key_char;
      private long scanCode;
      private int key_code;
      public Browser_SendKeyEvent_call(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.event_type = event_type;
        this.modifiers = modifiers;
        this.key_char = key_char;
        this.scanCode = scanCode;
        this.key_code = key_code;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SendKeyEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SendKeyEvent_args args = new Browser_SendKeyEvent_args();
        args.setBid(bid);
        args.setEvent_type(event_type);
        args.setModifiers(modifiers);
        args.setKey_char(key_char);
        args.setScanCode(scanCode);
        args.setKey_code(key_code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SendMouseEvent_call method_call = new Browser_SendMouseEvent_call(bid, event_type, x, y, modifiers, click_count, button, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SendMouseEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int event_type;
      private int x;
      private int y;
      private int modifiers;
      private int click_count;
      private int button;
      public Browser_SendMouseEvent_call(int bid, int event_type, int x, int y, int modifiers, int click_count, int button, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.event_type = event_type;
        this.x = x;
        this.y = y;
        this.modifiers = modifiers;
        this.click_count = click_count;
        this.button = button;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SendMouseEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SendMouseEvent_args args = new Browser_SendMouseEvent_args();
        args.setBid(bid);
        args.setEvent_type(event_type);
        args.setX(x);
        args.setY(y);
        args.setModifiers(modifiers);
        args.setClick_count(click_count);
        args.setButton(button);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SendMouseWheelEvent_call method_call = new Browser_SendMouseWheelEvent_call(bid, scroll_type, x, y, modifiers, delta, units_to_scroll, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SendMouseWheelEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int scroll_type;
      private int x;
      private int y;
      private int modifiers;
      private int delta;
      private int units_to_scroll;
      public Browser_SendMouseWheelEvent_call(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.scroll_type = scroll_type;
        this.x = x;
        this.y = y;
        this.modifiers = modifiers;
        this.delta = delta;
        this.units_to_scroll = units_to_scroll;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SendMouseWheelEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SendMouseWheelEvent_args args = new Browser_SendMouseWheelEvent_args();
        args.setBid(bid);
        args.setScroll_type(scroll_type);
        args.setX(x);
        args.setY(y);
        args.setModifiers(modifiers);
        args.setDelta(delta);
        args.setUnits_to_scroll(units_to_scroll);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_CanGoForward(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_CanGoForward_call method_call = new Browser_CanGoForward_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_CanGoForward_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      public Browser_CanGoForward_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_CanGoForward", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_CanGoForward_args args = new Browser_CanGoForward_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_CanGoForward();
      }
    }

    @Override
    public void Browser_CanGoBack(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_CanGoBack_call method_call = new Browser_CanGoBack_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_CanGoBack_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      public Browser_CanGoBack_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_CanGoBack", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_CanGoBack_args args = new Browser_CanGoBack_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_CanGoBack();
      }
    }

    @Override
    public void Browser_GoBack(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GoBack_call method_call = new Browser_GoBack_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GoBack_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_GoBack_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GoBack", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_GoBack_args args = new Browser_GoBack_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_GoForward(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GoForward_call method_call = new Browser_GoForward_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GoForward_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_GoForward_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GoForward", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_GoForward_args args = new Browser_GoForward_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_IsLoading(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_IsLoading_call method_call = new Browser_IsLoading_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_IsLoading_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      public Browser_IsLoading_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_IsLoading", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_IsLoading_args args = new Browser_IsLoading_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_IsLoading();
      }
    }

    @Override
    public void Browser_StopLoad(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_StopLoad_call method_call = new Browser_StopLoad_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_StopLoad_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_StopLoad_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_StopLoad", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_StopLoad_args args = new Browser_StopLoad_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_GetFrameCount(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GetFrameCount_call method_call = new Browser_GetFrameCount_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GetFrameCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int bid;
      public Browser_GetFrameCount_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GetFrameCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_GetFrameCount_args args = new Browser_GetFrameCount_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_GetFrameCount();
      }
    }

    @Override
    public void Browser_IsPopup(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_IsPopup_call method_call = new Browser_IsPopup_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_IsPopup_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      public Browser_IsPopup_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_IsPopup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_IsPopup_args args = new Browser_IsPopup_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_IsPopup();
      }
    }

    @Override
    public void Browser_HasDocument(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_HasDocument_call method_call = new Browser_HasDocument_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_HasDocument_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int bid;
      public Browser_HasDocument_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_HasDocument", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_HasDocument_args args = new Browser_HasDocument_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_HasDocument();
      }
    }

    @Override
    public void Browser_ViewSource(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_ViewSource_call method_call = new Browser_ViewSource_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_ViewSource_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_ViewSource_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_ViewSource", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_ViewSource_args args = new Browser_ViewSource_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_GetSource(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GetSource_call method_call = new Browser_GetSource_call(bid, stringVisitor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GetSource_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor;
      public Browser_GetSource_call(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.stringVisitor = stringVisitor;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GetSource", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_GetSource_args args = new Browser_GetSource_args();
        args.setBid(bid);
        args.setStringVisitor(stringVisitor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_GetText(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GetText_call method_call = new Browser_GetText_call(bid, stringVisitor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GetText_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor;
      public Browser_GetText_call(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.stringVisitor = stringVisitor;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GetText", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_GetText_args args = new Browser_GetText_args();
        args.setBid(bid);
        args.setStringVisitor(stringVisitor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SetFocus(int bid, boolean enable, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SetFocus_call method_call = new Browser_SetFocus_call(bid, enable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SetFocus_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private boolean enable;
      public Browser_SetFocus_call(int bid, boolean enable, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.enable = enable;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SetFocus", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SetFocus_args args = new Browser_SetFocus_args();
        args.setBid(bid);
        args.setEnable(enable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_GetZoomLevel(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GetZoomLevel_call method_call = new Browser_GetZoomLevel_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GetZoomLevel_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private int bid;
      public Browser_GetZoomLevel_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GetZoomLevel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_GetZoomLevel_args args = new Browser_GetZoomLevel_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_GetZoomLevel();
      }
    }

    @Override
    public void Browser_SetZoomLevel(int bid, double val, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SetZoomLevel_call method_call = new Browser_SetZoomLevel_call(bid, val, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SetZoomLevel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private double val;
      public Browser_SetZoomLevel_call(int bid, double val, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.val = val;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SetZoomLevel", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SetZoomLevel_args args = new Browser_SetZoomLevel_args();
        args.setBid(bid);
        args.setVal(val);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_StartDownload(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_StartDownload_call method_call = new Browser_StartDownload_call(bid, url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_StartDownload_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String url;
      public Browser_StartDownload_call(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.url = url;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_StartDownload", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_StartDownload_args args = new Browser_StartDownload_args();
        args.setBid(bid);
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_Find(int bid, java.lang.String searchText, boolean forward, boolean matchCase, boolean findNext, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_Find_call method_call = new Browser_Find_call(bid, searchText, forward, matchCase, findNext, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_Find_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String searchText;
      private boolean forward;
      private boolean matchCase;
      private boolean findNext;
      public Browser_Find_call(int bid, java.lang.String searchText, boolean forward, boolean matchCase, boolean findNext, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.searchText = searchText;
        this.forward = forward;
        this.matchCase = matchCase;
        this.findNext = findNext;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_Find", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_Find_args args = new Browser_Find_args();
        args.setBid(bid);
        args.setSearchText(searchText);
        args.setForward(forward);
        args.setMatchCase(matchCase);
        args.setFindNext(findNext);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_StopFinding(int bid, boolean clearSelection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_StopFinding_call method_call = new Browser_StopFinding_call(bid, clearSelection, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_StopFinding_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private boolean clearSelection;
      public Browser_StopFinding_call(int bid, boolean clearSelection, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.clearSelection = clearSelection;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_StopFinding", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_StopFinding_args args = new Browser_StopFinding_args();
        args.setBid(bid);
        args.setClearSelection(clearSelection);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_ReplaceMisspelling(int bid, java.lang.String word, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_ReplaceMisspelling_call method_call = new Browser_ReplaceMisspelling_call(bid, word, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_ReplaceMisspelling_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String word;
      public Browser_ReplaceMisspelling_call(int bid, java.lang.String word, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.word = word;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_ReplaceMisspelling", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_ReplaceMisspelling_args args = new Browser_ReplaceMisspelling_args();
        args.setBid(bid);
        args.setWord(word);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SetFrameRate(int bid, int val, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SetFrameRate_call method_call = new Browser_SetFrameRate_call(bid, val, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SetFrameRate_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int val;
      public Browser_SetFrameRate_call(int bid, int val, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.val = val;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SetFrameRate", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SetFrameRate_args args = new Browser_SetFrameRate_args();
        args.setBid(bid);
        args.setVal(val);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Frame_ExecuteJavaScript(int frameId, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Frame_ExecuteJavaScript_call method_call = new Frame_ExecuteJavaScript_call(frameId, code, url, line, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Frame_ExecuteJavaScript_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int frameId;
      private java.lang.String code;
      private java.lang.String url;
      private int line;
      public Frame_ExecuteJavaScript_call(int frameId, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.frameId = frameId;
        this.code = code;
        this.url = url;
        this.line = line;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Frame_ExecuteJavaScript", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Frame_ExecuteJavaScript_args args = new Frame_ExecuteJavaScript_args();
        args.setFrameId(frameId);
        args.setCode(code);
        args.setUrl(url);
        args.setLine(line);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_Update_call method_call = new Request_Update_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_Update_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public Request_Update_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_Update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_Update_args args = new Request_Update_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_Update();
        return null;
      }
    }

    @Override
    public void Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_GetPostData_call method_call = new Request_GetPostData_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_GetPostData_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.PostData> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public Request_GetPostData_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_GetPostData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_GetPostData_args args = new Request_GetPostData_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.PostData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Request_GetPostData();
      }
    }

    @Override
    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_SetPostData_call method_call = new Request_SetPostData_call(request, postData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_SetPostData_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private com.jetbrains.cef.remote.thrift_codegen.PostData postData;
      public Request_SetPostData_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.postData = postData;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_SetPostData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_SetPostData_args args = new Request_SetPostData_args();
        args.setRequest(request);
        args.setPostData(postData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_SetPostData();
        return null;
      }
    }

    @Override
    public void Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_GetHeaderByName_call method_call = new Request_GetHeaderByName_call(request, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_GetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.lang.String name;
      public Request_GetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.name = name;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_GetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_GetHeaderByName_args args = new Request_GetHeaderByName_args();
        args.setRequest(request);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Request_GetHeaderByName();
      }
    }

    @Override
    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_SetHeaderByName_call method_call = new Request_SetHeaderByName_call(request, name, value, overwrite, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_SetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.lang.String name;
      private java.lang.String value;
      private boolean overwrite;
      public Request_SetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.name = name;
        this.value = value;
        this.overwrite = overwrite;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_SetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_SetHeaderByName_args args = new Request_SetHeaderByName_args();
        args.setRequest(request);
        args.setName(name);
        args.setValue(value);
        args.setOverwrite(overwrite);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_SetHeaderByName();
        return null;
      }
    }

    @Override
    public void Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_GetHeaderMap_call method_call = new Request_GetHeaderMap_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_GetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public Request_GetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_GetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_GetHeaderMap_args args = new Request_GetHeaderMap_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Request_GetHeaderMap();
      }
    }

    @Override
    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_SetHeaderMap_call method_call = new Request_SetHeaderMap_call(request, headerMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_SetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.util.Map<java.lang.String,java.lang.String> headerMap;
      public Request_SetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.headerMap = headerMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_SetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_SetHeaderMap_args args = new Request_SetHeaderMap_args();
        args.setRequest(request);
        args.setHeaderMap(headerMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_SetHeaderMap();
        return null;
      }
    }

    @Override
    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_Set_call method_call = new Request_Set_call(request, url, method, postData, headerMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_Set_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.lang.String url;
      private java.lang.String method;
      private com.jetbrains.cef.remote.thrift_codegen.PostData postData;
      private java.util.Map<java.lang.String,java.lang.String> headerMap;
      public Request_Set_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.url = url;
        this.method = method;
        this.postData = postData;
        this.headerMap = headerMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_Set", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_Set_args args = new Request_Set_args();
        args.setRequest(request);
        args.setUrl(url);
        args.setMethod(method);
        args.setPostData(postData);
        args.setHeaderMap(headerMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_Set();
        return null;
      }
    }

    @Override
    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_Update_call method_call = new Response_Update_call(response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_Update_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      public Response_Update_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_Update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_Update_args args = new Response_Update_args();
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Response_Update();
        return null;
      }
    }

    @Override
    public void Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_GetHeaderByName_call method_call = new Response_GetHeaderByName_call(response, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_GetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.lang.String name;
      public Response_GetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
        this.name = name;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_GetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_GetHeaderByName_args args = new Response_GetHeaderByName_args();
        args.setResponse(response);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Response_GetHeaderByName();
      }
    }

    @Override
    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_SetHeaderByName_call method_call = new Response_SetHeaderByName_call(response, name, value, overwrite, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_SetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.lang.String name;
      private java.lang.String value;
      private boolean overwrite;
      public Response_SetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
        this.name = name;
        this.value = value;
        this.overwrite = overwrite;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_SetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_SetHeaderByName_args args = new Response_SetHeaderByName_args();
        args.setResponse(response);
        args.setName(name);
        args.setValue(value);
        args.setOverwrite(overwrite);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Response_SetHeaderByName();
        return null;
      }
    }

    @Override
    public void Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_GetHeaderMap_call method_call = new Response_GetHeaderMap_call(response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_GetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      public Response_GetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_GetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_GetHeaderMap_args args = new Response_GetHeaderMap_args();
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Response_GetHeaderMap();
      }
    }

    @Override
    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_SetHeaderMap_call method_call = new Response_SetHeaderMap_call(response, headerMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_SetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.util.Map<java.lang.String,java.lang.String> headerMap;
      public Response_SetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
        this.headerMap = headerMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_SetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_SetHeaderMap_args args = new Response_SetHeaderMap_args();
        args.setResponse(response);
        args.setHeaderMap(headerMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Response_SetHeaderMap();
        return null;
      }
    }

    @Override
    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Callback_Dispose_call method_call = new Callback_Dispose_call(callback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Callback_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject callback;
      public Callback_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.callback = callback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Callback_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Callback_Dispose_args args = new Callback_Dispose_args();
        args.setCallback(callback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Callback_Continue_call method_call = new Callback_Continue_call(callback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Callback_Continue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject callback;
      public Callback_Continue_call(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.callback = callback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Callback_Continue", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Callback_Continue_args args = new Callback_Continue_args();
        args.setCallback(callback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Callback_Cancel_call method_call = new Callback_Cancel_call(callback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Callback_Cancel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject callback;
      public Callback_Cancel_call(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.callback = callback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Callback_Cancel", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Callback_Cancel_args args = new Callback_Cancel_args();
        args.setCallback(callback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AuthCallback_Dispose_call method_call = new AuthCallback_Dispose_call(authCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AuthCallback_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject authCallback;
      public AuthCallback_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authCallback = authCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AuthCallback_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        AuthCallback_Dispose_args args = new AuthCallback_Dispose_args();
        args.setAuthCallback(authCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AuthCallback_Continue_call method_call = new AuthCallback_Continue_call(authCallback, username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AuthCallback_Continue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject authCallback;
      private java.lang.String username;
      private java.lang.String password;
      public AuthCallback_Continue_call(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authCallback = authCallback;
        this.username = username;
        this.password = password;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AuthCallback_Continue", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        AuthCallback_Continue_args args = new AuthCallback_Continue_args();
        args.setAuthCallback(authCallback);
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AuthCallback_Cancel_call method_call = new AuthCallback_Cancel_call(authCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AuthCallback_Cancel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject authCallback;
      public AuthCallback_Cancel_call(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authCallback = authCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AuthCallback_Cancel", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        AuthCallback_Cancel_args args = new AuthCallback_Cancel_args();
        args.setAuthCallback(authCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void MessageRouter_Create(java.lang.String query, java.lang.String cancel, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_Create_call method_call = new MessageRouter_Create_call(query, cancel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_Create_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.RObject> {
      private java.lang.String query;
      private java.lang.String cancel;
      public MessageRouter_Create_call(java.lang.String query, java.lang.String cancel, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.cancel = cancel;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_Create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_Create_args args = new MessageRouter_Create_args();
        args.setQuery(query);
        args.setCancel(cancel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.RObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_MessageRouter_Create();
      }
    }

    @Override
    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_Dispose_call method_call = new MessageRouter_Dispose_call(msgRouter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      public MessageRouter_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.msgRouter = msgRouter;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        MessageRouter_Dispose_args args = new MessageRouter_Dispose_args();
        args.setMsgRouter(msgRouter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_AddMessageRouterToBrowser_call method_call = new MessageRouter_AddMessageRouterToBrowser_call(msgRouter, bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_AddMessageRouterToBrowser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private int bid;
      public MessageRouter_AddMessageRouterToBrowser_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_AddMessageRouterToBrowser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_AddMessageRouterToBrowser_args args = new MessageRouter_AddMessageRouterToBrowser_args();
        args.setMsgRouter(msgRouter);
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_AddMessageRouterToBrowser();
        return null;
      }
    }

    @Override
    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_RemoveMessageRouterFromBrowser_call method_call = new MessageRouter_RemoveMessageRouterFromBrowser_call(msgRouter, bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_RemoveMessageRouterFromBrowser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private int bid;
      public MessageRouter_RemoveMessageRouterFromBrowser_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_RemoveMessageRouterFromBrowser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_RemoveMessageRouterFromBrowser_args args = new MessageRouter_RemoveMessageRouterFromBrowser_args();
        args.setMsgRouter(msgRouter);
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_RemoveMessageRouterFromBrowser();
        return null;
      }
    }

    @Override
    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_AddHandler_call method_call = new MessageRouter_AddHandler_call(msgRouter, handler, first, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_AddHandler_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      private boolean first;
      public MessageRouter_AddHandler_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.handler = handler;
        this.first = first;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_AddHandler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_AddHandler_args args = new MessageRouter_AddHandler_args();
        args.setMsgRouter(msgRouter);
        args.setHandler(handler);
        args.setFirst(first);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_AddHandler();
        return null;
      }
    }

    @Override
    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_RemoveHandler_call method_call = new MessageRouter_RemoveHandler_call(msgRouter, handler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_RemoveHandler_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      public MessageRouter_RemoveHandler_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.handler = handler;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_RemoveHandler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_RemoveHandler_args args = new MessageRouter_RemoveHandler_args();
        args.setMsgRouter(msgRouter);
        args.setHandler(handler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_RemoveHandler();
        return null;
      }
    }

    @Override
    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_CancelPending_call method_call = new MessageRouter_CancelPending_call(msgRouter, bid, handler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_CancelPending_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      public MessageRouter_CancelPending_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.bid = bid;
        this.handler = handler;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_CancelPending", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_CancelPending_args args = new MessageRouter_CancelPending_args();
        args.setMsgRouter(msgRouter);
        args.setBid(bid);
        args.setHandler(handler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_CancelPending();
        return null;
      }
    }

    @Override
    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryCallback_Dispose_call method_call = new QueryCallback_Dispose_call(qcallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryCallback_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject qcallback;
      public QueryCallback_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.qcallback = qcallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryCallback_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        QueryCallback_Dispose_args args = new QueryCallback_Dispose_args();
        args.setQcallback(qcallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryCallback_Success_call method_call = new QueryCallback_Success_call(qcallback, response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryCallback_Success_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject qcallback;
      private java.lang.String response;
      public QueryCallback_Success_call(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.qcallback = qcallback;
        this.response = response;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryCallback_Success", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        QueryCallback_Success_args args = new QueryCallback_Success_args();
        args.setQcallback(qcallback);
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryCallback_Failure_call method_call = new QueryCallback_Failure_call(qcallback, error_code, error_message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryCallback_Failure_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject qcallback;
      private int error_code;
      private java.lang.String error_message;
      public QueryCallback_Failure_call(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.qcallback = qcallback;
        this.error_code = error_code;
        this.error_message = error_message;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryCallback_Failure", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        QueryCallback_Failure_args args = new QueryCallback_Failure_args();
        args.setQcallback(qcallback);
        args.setError_code(error_code);
        args.setError_message(error_message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void SchemeHandlerFactory_Register(java.lang.String schemeName, java.lang.String domainName, com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      SchemeHandlerFactory_Register_call method_call = new SchemeHandlerFactory_Register_call(schemeName, domainName, schemeHandlerFactory, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class SchemeHandlerFactory_Register_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String schemeName;
      private java.lang.String domainName;
      private com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory;
      public SchemeHandlerFactory_Register_call(java.lang.String schemeName, java.lang.String domainName, com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.schemeName = schemeName;
        this.domainName = domainName;
        this.schemeHandlerFactory = schemeHandlerFactory;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("SchemeHandlerFactory_Register", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        SchemeHandlerFactory_Register_args args = new SchemeHandlerFactory_Register_args();
        args.setSchemeName(schemeName);
        args.setDomainName(domainName);
        args.setSchemeHandlerFactory(schemeHandlerFactory);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void ClearAllSchemeHandlerFactories(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ClearAllSchemeHandlerFactories_call method_call = new ClearAllSchemeHandlerFactories_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ClearAllSchemeHandlerFactories_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ClearAllSchemeHandlerFactories_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ClearAllSchemeHandlerFactories", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        ClearAllSchemeHandlerFactories_args args = new ClearAllSchemeHandlerFactories_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void RequestContext_ClearCertificateExceptions(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestContext_ClearCertificateExceptions_call method_call = new RequestContext_ClearCertificateExceptions_call(bid, completionCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestContext_ClearCertificateExceptions_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback;
      public RequestContext_ClearCertificateExceptions_call(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.completionCallback = completionCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestContext_ClearCertificateExceptions", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        RequestContext_ClearCertificateExceptions_args args = new RequestContext_ClearCertificateExceptions_args();
        args.setBid(bid);
        args.setCompletionCallback(completionCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void RequestContext_CloseAllConnections(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RequestContext_CloseAllConnections_call method_call = new RequestContext_CloseAllConnections_call(bid, completionCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RequestContext_CloseAllConnections_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback;
      public RequestContext_CloseAllConnections_call(int bid, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.completionCallback = completionCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RequestContext_CloseAllConnections", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        RequestContext_CloseAllConnections_args args = new RequestContext_CloseAllConnections_args();
        args.setBid(bid);
        args.setCompletionCallback(completionCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void CookieManager_Create(org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieManager_Create_call method_call = new CookieManager_Create_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieManager_Create_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.RObject> {
      public CookieManager_Create_call(org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieManager_Create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieManager_Create_args args = new CookieManager_Create_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.RObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieManager_Create();
      }
    }

    @Override
    public void CookieManager_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieManager_Dispose_call method_call = new CookieManager_Dispose_call(cookieManager, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieManager_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager;
      public CookieManager_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.cookieManager = cookieManager;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieManager_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        CookieManager_Dispose_args args = new CookieManager_Dispose_args();
        args.setCookieManager(cookieManager);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void CookieManager_VisitAllCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieManager_VisitAllCookies_call method_call = new CookieManager_VisitAllCookies_call(cookieManager, visitor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieManager_VisitAllCookies_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager;
      private com.jetbrains.cef.remote.thrift_codegen.RObject visitor;
      public CookieManager_VisitAllCookies_call(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cookieManager = cookieManager;
        this.visitor = visitor;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieManager_VisitAllCookies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieManager_VisitAllCookies_args args = new CookieManager_VisitAllCookies_args();
        args.setCookieManager(cookieManager);
        args.setVisitor(visitor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieManager_VisitAllCookies();
      }
    }

    @Override
    public void CookieManager_VisitUrlCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, java.lang.String url, boolean includeHttpOnly, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieManager_VisitUrlCookies_call method_call = new CookieManager_VisitUrlCookies_call(cookieManager, visitor, url, includeHttpOnly, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieManager_VisitUrlCookies_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager;
      private com.jetbrains.cef.remote.thrift_codegen.RObject visitor;
      private java.lang.String url;
      private boolean includeHttpOnly;
      public CookieManager_VisitUrlCookies_call(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject visitor, java.lang.String url, boolean includeHttpOnly, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cookieManager = cookieManager;
        this.visitor = visitor;
        this.url = url;
        this.includeHttpOnly = includeHttpOnly;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieManager_VisitUrlCookies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieManager_VisitUrlCookies_args args = new CookieManager_VisitUrlCookies_args();
        args.setCookieManager(cookieManager);
        args.setVisitor(visitor);
        args.setUrl(url);
        args.setIncludeHttpOnly(includeHttpOnly);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieManager_VisitUrlCookies();
      }
    }

    @Override
    public void CookieManager_SetCookie(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, com.jetbrains.cef.remote.thrift_codegen.Cookie cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieManager_SetCookie_call method_call = new CookieManager_SetCookie_call(cookieManager, url, cookie, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieManager_SetCookie_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager;
      private java.lang.String url;
      private com.jetbrains.cef.remote.thrift_codegen.Cookie cookie;
      public CookieManager_SetCookie_call(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, com.jetbrains.cef.remote.thrift_codegen.Cookie cookie, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cookieManager = cookieManager;
        this.url = url;
        this.cookie = cookie;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieManager_SetCookie", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieManager_SetCookie_args args = new CookieManager_SetCookie_args();
        args.setCookieManager(cookieManager);
        args.setUrl(url);
        args.setCookie(cookie);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieManager_SetCookie();
      }
    }

    @Override
    public void CookieManager_DeleteCookies(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, java.lang.String cookieName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieManager_DeleteCookies_call method_call = new CookieManager_DeleteCookies_call(cookieManager, url, cookieName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieManager_DeleteCookies_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager;
      private java.lang.String url;
      private java.lang.String cookieName;
      public CookieManager_DeleteCookies_call(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, java.lang.String url, java.lang.String cookieName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cookieManager = cookieManager;
        this.url = url;
        this.cookieName = cookieName;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieManager_DeleteCookies", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieManager_DeleteCookies_args args = new CookieManager_DeleteCookies_args();
        args.setCookieManager(cookieManager);
        args.setUrl(url);
        args.setCookieName(cookieName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieManager_DeleteCookies();
      }
    }

    @Override
    public void CookieManager_FlushStore(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CookieManager_FlushStore_call method_call = new CookieManager_FlushStore_call(cookieManager, completionCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CookieManager_FlushStore_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager;
      private com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback;
      public CookieManager_FlushStore_call(com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager, com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cookieManager = cookieManager;
        this.completionCallback = completionCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CookieManager_FlushStore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CookieManager_FlushStore_args args = new CookieManager_FlushStore_args();
        args.setCookieManager(cookieManager);
        args.setCompletionCallback(completionCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CookieManager_FlushStore();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.apache.thrift.Logger _LOGGER = org.apache.thrift.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("connectTcp", new connectTcp());
      processMap.put("log", new log());
      processMap.put("echo", new echo());
      processMap.put("version", new version());
      processMap.put("state", new state());
      processMap.put("stop", new stop());
      processMap.put("Browser_Create", new Browser_Create());
      processMap.put("Browser_StartNativeCreation", new Browser_StartNativeCreation());
      processMap.put("Browser_Close", new Browser_Close());
      processMap.put("Browser_Reload", new Browser_Reload());
      processMap.put("Browser_ReloadIgnoreCache", new Browser_ReloadIgnoreCache());
      processMap.put("Browser_LoadURL", new Browser_LoadURL());
      processMap.put("Browser_GetURL", new Browser_GetURL());
      processMap.put("Browser_ExecuteJavaScript", new Browser_ExecuteJavaScript());
      processMap.put("Browser_WasResized", new Browser_WasResized());
      processMap.put("Browser_NotifyScreenInfoChanged", new Browser_NotifyScreenInfoChanged());
      processMap.put("Browser_SendKeyEvent", new Browser_SendKeyEvent());
      processMap.put("Browser_SendMouseEvent", new Browser_SendMouseEvent());
      processMap.put("Browser_SendMouseWheelEvent", new Browser_SendMouseWheelEvent());
      processMap.put("Browser_CanGoForward", new Browser_CanGoForward());
      processMap.put("Browser_CanGoBack", new Browser_CanGoBack());
      processMap.put("Browser_GoBack", new Browser_GoBack());
      processMap.put("Browser_GoForward", new Browser_GoForward());
      processMap.put("Browser_IsLoading", new Browser_IsLoading());
      processMap.put("Browser_StopLoad", new Browser_StopLoad());
      processMap.put("Browser_GetFrameCount", new Browser_GetFrameCount());
      processMap.put("Browser_IsPopup", new Browser_IsPopup());
      processMap.put("Browser_HasDocument", new Browser_HasDocument());
      processMap.put("Browser_ViewSource", new Browser_ViewSource());
      processMap.put("Browser_GetSource", new Browser_GetSource());
      processMap.put("Browser_GetText", new Browser_GetText());
      processMap.put("Browser_SetFocus", new Browser_SetFocus());
      processMap.put("Browser_GetZoomLevel", new Browser_GetZoomLevel());
      processMap.put("Browser_SetZoomLevel", new Browser_SetZoomLevel());
      processMap.put("Browser_StartDownload", new Browser_StartDownload());
      processMap.put("Browser_Find", new Browser_Find());
      processMap.put("Browser_StopFinding", new Browser_StopFinding());
      processMap.put("Browser_ReplaceMisspelling", new Browser_ReplaceMisspelling());
      processMap.put("Browser_SetFrameRate", new Browser_SetFrameRate());
      processMap.put("Frame_ExecuteJavaScript", new Frame_ExecuteJavaScript());
      processMap.put("Request_Update", new Request_Update());
      processMap.put("Request_GetPostData", new Request_GetPostData());
      processMap.put("Request_SetPostData", new Request_SetPostData());
      processMap.put("Request_GetHeaderByName", new Request_GetHeaderByName());
      processMap.put("Request_SetHeaderByName", new Request_SetHeaderByName());
      processMap.put("Request_GetHeaderMap", new Request_GetHeaderMap());
      processMap.put("Request_SetHeaderMap", new Request_SetHeaderMap());
      processMap.put("Request_Set", new Request_Set());
      processMap.put("Response_Update", new Response_Update());
      processMap.put("Response_GetHeaderByName", new Response_GetHeaderByName());
      processMap.put("Response_SetHeaderByName", new Response_SetHeaderByName());
      processMap.put("Response_GetHeaderMap", new Response_GetHeaderMap());
      processMap.put("Response_SetHeaderMap", new Response_SetHeaderMap());
      processMap.put("Callback_Dispose", new Callback_Dispose());
      processMap.put("Callback_Continue", new Callback_Continue());
      processMap.put("Callback_Cancel", new Callback_Cancel());
      processMap.put("AuthCallback_Dispose", new AuthCallback_Dispose());
      processMap.put("AuthCallback_Continue", new AuthCallback_Continue());
      processMap.put("AuthCallback_Cancel", new AuthCallback_Cancel());
      processMap.put("MessageRouter_Create", new MessageRouter_Create());
      processMap.put("MessageRouter_Dispose", new MessageRouter_Dispose());
      processMap.put("MessageRouter_AddMessageRouterToBrowser", new MessageRouter_AddMessageRouterToBrowser());
      processMap.put("MessageRouter_RemoveMessageRouterFromBrowser", new MessageRouter_RemoveMessageRouterFromBrowser());
      processMap.put("MessageRouter_AddHandler", new MessageRouter_AddHandler());
      processMap.put("MessageRouter_RemoveHandler", new MessageRouter_RemoveHandler());
      processMap.put("MessageRouter_CancelPending", new MessageRouter_CancelPending());
      processMap.put("QueryCallback_Dispose", new QueryCallback_Dispose());
      processMap.put("QueryCallback_Success", new QueryCallback_Success());
      processMap.put("QueryCallback_Failure", new QueryCallback_Failure());
      processMap.put("SchemeHandlerFactory_Register", new SchemeHandlerFactory_Register());
      processMap.put("ClearAllSchemeHandlerFactories", new ClearAllSchemeHandlerFactories());
      processMap.put("RequestContext_ClearCertificateExceptions", new RequestContext_ClearCertificateExceptions());
      processMap.put("RequestContext_CloseAllConnections", new RequestContext_CloseAllConnections());
      processMap.put("CookieManager_Create", new CookieManager_Create());
      processMap.put("CookieManager_Dispose", new CookieManager_Dispose());
      processMap.put("CookieManager_VisitAllCookies", new CookieManager_VisitAllCookies());
      processMap.put("CookieManager_VisitUrlCookies", new CookieManager_VisitUrlCookies());
      processMap.put("CookieManager_SetCookie", new CookieManager_SetCookie());
      processMap.put("CookieManager_DeleteCookies", new CookieManager_DeleteCookies());
      processMap.put("CookieManager_FlushStore", new CookieManager_FlushStore());
      return processMap;
    }

    public static class connect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connect_args> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public connect_result getResult(I iface, connect_args args) throws org.apache.thrift.TException {
        connect_result result = new connect_result();
        result.success = iface.connect(args.backwardConnectionPipe, args.isMaster);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class connectTcp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connectTcp_args> {
      public connectTcp() {
        super("connectTcp");
      }

      @Override
      public connectTcp_args getEmptyArgsInstance() {
        return new connectTcp_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public connectTcp_result getResult(I iface, connectTcp_args args) throws org.apache.thrift.TException {
        connectTcp_result result = new connectTcp_result();
        result.success = iface.connectTcp(args.backwardConnectionPort, args.isMaster);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class log<I extends Iface> extends org.apache.thrift.ProcessFunction<I, log_args> {
      public log() {
        super("log");
      }

      @Override
      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, log_args args) throws org.apache.thrift.TException {
        iface.log(args.msg);
        return null;
      }
    }

    public static class echo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, echo_args> {
      public echo() {
        super("echo");
      }

      @Override
      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public echo_result getResult(I iface, echo_args args) throws org.apache.thrift.TException {
        echo_result result = new echo_result();
        result.success = iface.echo(args.msg);
        return result;
      }
    }

    public static class version<I extends Iface> extends org.apache.thrift.ProcessFunction<I, version_args> {
      public version() {
        super("version");
      }

      @Override
      public version_args getEmptyArgsInstance() {
        return new version_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public version_result getResult(I iface, version_args args) throws org.apache.thrift.TException {
        version_result result = new version_result();
        result.success = iface.version();
        return result;
      }
    }

    public static class state<I extends Iface> extends org.apache.thrift.ProcessFunction<I, state_args> {
      public state() {
        super("state");
      }

      @Override
      public state_args getEmptyArgsInstance() {
        return new state_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public state_result getResult(I iface, state_args args) throws org.apache.thrift.TException {
        state_result result = new state_result();
        result.success = iface.state();
        return result;
      }
    }

    public static class stop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stop_args> {
      public stop() {
        super("stop");
      }

      @Override
      public stop_args getEmptyArgsInstance() {
        return new stop_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, stop_args args) throws org.apache.thrift.TException {
        iface.stop();
        return null;
      }
    }

    public static class Browser_Create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_Create_args> {
      public Browser_Create() {
        super("Browser_Create");
      }

      @Override
      public Browser_Create_args getEmptyArgsInstance() {
        return new Browser_Create_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_Create_result getResult(I iface, Browser_Create_args args) throws org.apache.thrift.TException {
        Browser_Create_result result = new Browser_Create_result();
        result.success = iface.Browser_Create(args.cid, args.handlersMask, args.requestContextHandler);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_StartNativeCreation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_StartNativeCreation_args> {
      public Browser_StartNativeCreation() {
        super("Browser_StartNativeCreation");
      }

      @Override
      public Browser_StartNativeCreation_args getEmptyArgsInstance() {
        return new Browser_StartNativeCreation_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_StartNativeCreation_args args) throws org.apache.thrift.TException {
        iface.Browser_StartNativeCreation(args.bid, args.url);
        return null;
      }
    }

    public static class Browser_Close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_Close_args> {
      public Browser_Close() {
        super("Browser_Close");
      }

      @Override
      public Browser_Close_args getEmptyArgsInstance() {
        return new Browser_Close_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_Close_args args) throws org.apache.thrift.TException {
        iface.Browser_Close(args.bid);
        return null;
      }
    }

    public static class Browser_Reload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_Reload_args> {
      public Browser_Reload() {
        super("Browser_Reload");
      }

      @Override
      public Browser_Reload_args getEmptyArgsInstance() {
        return new Browser_Reload_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_Reload_args args) throws org.apache.thrift.TException {
        iface.Browser_Reload(args.bid);
        return null;
      }
    }

    public static class Browser_ReloadIgnoreCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_ReloadIgnoreCache_args> {
      public Browser_ReloadIgnoreCache() {
        super("Browser_ReloadIgnoreCache");
      }

      @Override
      public Browser_ReloadIgnoreCache_args getEmptyArgsInstance() {
        return new Browser_ReloadIgnoreCache_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_ReloadIgnoreCache_args args) throws org.apache.thrift.TException {
        iface.Browser_ReloadIgnoreCache(args.bid);
        return null;
      }
    }

    public static class Browser_LoadURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_LoadURL_args> {
      public Browser_LoadURL() {
        super("Browser_LoadURL");
      }

      @Override
      public Browser_LoadURL_args getEmptyArgsInstance() {
        return new Browser_LoadURL_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_LoadURL_args args) throws org.apache.thrift.TException {
        iface.Browser_LoadURL(args.bid, args.url);
        return null;
      }
    }

    public static class Browser_GetURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GetURL_args> {
      public Browser_GetURL() {
        super("Browser_GetURL");
      }

      @Override
      public Browser_GetURL_args getEmptyArgsInstance() {
        return new Browser_GetURL_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_GetURL_result getResult(I iface, Browser_GetURL_args args) throws org.apache.thrift.TException {
        Browser_GetURL_result result = new Browser_GetURL_result();
        result.success = iface.Browser_GetURL(args.bid);
        return result;
      }
    }

    public static class Browser_ExecuteJavaScript<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_ExecuteJavaScript_args> {
      public Browser_ExecuteJavaScript() {
        super("Browser_ExecuteJavaScript");
      }

      @Override
      public Browser_ExecuteJavaScript_args getEmptyArgsInstance() {
        return new Browser_ExecuteJavaScript_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_ExecuteJavaScript_args args) throws org.apache.thrift.TException {
        iface.Browser_ExecuteJavaScript(args.bid, args.code, args.url, args.line);
        return null;
      }
    }

    public static class Browser_WasResized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_WasResized_args> {
      public Browser_WasResized() {
        super("Browser_WasResized");
      }

      @Override
      public Browser_WasResized_args getEmptyArgsInstance() {
        return new Browser_WasResized_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_WasResized_args args) throws org.apache.thrift.TException {
        iface.Browser_WasResized(args.bid);
        return null;
      }
    }

    public static class Browser_NotifyScreenInfoChanged<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_NotifyScreenInfoChanged_args> {
      public Browser_NotifyScreenInfoChanged() {
        super("Browser_NotifyScreenInfoChanged");
      }

      @Override
      public Browser_NotifyScreenInfoChanged_args getEmptyArgsInstance() {
        return new Browser_NotifyScreenInfoChanged_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_NotifyScreenInfoChanged_args args) throws org.apache.thrift.TException {
        iface.Browser_NotifyScreenInfoChanged(args.bid);
        return null;
      }
    }

    public static class Browser_SendKeyEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SendKeyEvent_args> {
      public Browser_SendKeyEvent() {
        super("Browser_SendKeyEvent");
      }

      @Override
      public Browser_SendKeyEvent_args getEmptyArgsInstance() {
        return new Browser_SendKeyEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SendKeyEvent_args args) throws org.apache.thrift.TException {
        iface.Browser_SendKeyEvent(args.bid, args.event_type, args.modifiers, args.key_char, args.scanCode, args.key_code);
        return null;
      }
    }

    public static class Browser_SendMouseEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SendMouseEvent_args> {
      public Browser_SendMouseEvent() {
        super("Browser_SendMouseEvent");
      }

      @Override
      public Browser_SendMouseEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SendMouseEvent_args args) throws org.apache.thrift.TException {
        iface.Browser_SendMouseEvent(args.bid, args.event_type, args.x, args.y, args.modifiers, args.click_count, args.button);
        return null;
      }
    }

    public static class Browser_SendMouseWheelEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SendMouseWheelEvent_args> {
      public Browser_SendMouseWheelEvent() {
        super("Browser_SendMouseWheelEvent");
      }

      @Override
      public Browser_SendMouseWheelEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseWheelEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SendMouseWheelEvent_args args) throws org.apache.thrift.TException {
        iface.Browser_SendMouseWheelEvent(args.bid, args.scroll_type, args.x, args.y, args.modifiers, args.delta, args.units_to_scroll);
        return null;
      }
    }

    public static class Browser_CanGoForward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_CanGoForward_args> {
      public Browser_CanGoForward() {
        super("Browser_CanGoForward");
      }

      @Override
      public Browser_CanGoForward_args getEmptyArgsInstance() {
        return new Browser_CanGoForward_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_CanGoForward_result getResult(I iface, Browser_CanGoForward_args args) throws org.apache.thrift.TException {
        Browser_CanGoForward_result result = new Browser_CanGoForward_result();
        result.success = iface.Browser_CanGoForward(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_CanGoBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_CanGoBack_args> {
      public Browser_CanGoBack() {
        super("Browser_CanGoBack");
      }

      @Override
      public Browser_CanGoBack_args getEmptyArgsInstance() {
        return new Browser_CanGoBack_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_CanGoBack_result getResult(I iface, Browser_CanGoBack_args args) throws org.apache.thrift.TException {
        Browser_CanGoBack_result result = new Browser_CanGoBack_result();
        result.success = iface.Browser_CanGoBack(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_GoBack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GoBack_args> {
      public Browser_GoBack() {
        super("Browser_GoBack");
      }

      @Override
      public Browser_GoBack_args getEmptyArgsInstance() {
        return new Browser_GoBack_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_GoBack_args args) throws org.apache.thrift.TException {
        iface.Browser_GoBack(args.bid);
        return null;
      }
    }

    public static class Browser_GoForward<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GoForward_args> {
      public Browser_GoForward() {
        super("Browser_GoForward");
      }

      @Override
      public Browser_GoForward_args getEmptyArgsInstance() {
        return new Browser_GoForward_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_GoForward_args args) throws org.apache.thrift.TException {
        iface.Browser_GoForward(args.bid);
        return null;
      }
    }

    public static class Browser_IsLoading<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_IsLoading_args> {
      public Browser_IsLoading() {
        super("Browser_IsLoading");
      }

      @Override
      public Browser_IsLoading_args getEmptyArgsInstance() {
        return new Browser_IsLoading_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_IsLoading_result getResult(I iface, Browser_IsLoading_args args) throws org.apache.thrift.TException {
        Browser_IsLoading_result result = new Browser_IsLoading_result();
        result.success = iface.Browser_IsLoading(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_StopLoad<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_StopLoad_args> {
      public Browser_StopLoad() {
        super("Browser_StopLoad");
      }

      @Override
      public Browser_StopLoad_args getEmptyArgsInstance() {
        return new Browser_StopLoad_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_StopLoad_args args) throws org.apache.thrift.TException {
        iface.Browser_StopLoad(args.bid);
        return null;
      }
    }

    public static class Browser_GetFrameCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GetFrameCount_args> {
      public Browser_GetFrameCount() {
        super("Browser_GetFrameCount");
      }

      @Override
      public Browser_GetFrameCount_args getEmptyArgsInstance() {
        return new Browser_GetFrameCount_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_GetFrameCount_result getResult(I iface, Browser_GetFrameCount_args args) throws org.apache.thrift.TException {
        Browser_GetFrameCount_result result = new Browser_GetFrameCount_result();
        result.success = iface.Browser_GetFrameCount(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_IsPopup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_IsPopup_args> {
      public Browser_IsPopup() {
        super("Browser_IsPopup");
      }

      @Override
      public Browser_IsPopup_args getEmptyArgsInstance() {
        return new Browser_IsPopup_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_IsPopup_result getResult(I iface, Browser_IsPopup_args args) throws org.apache.thrift.TException {
        Browser_IsPopup_result result = new Browser_IsPopup_result();
        result.success = iface.Browser_IsPopup(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_HasDocument<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_HasDocument_args> {
      public Browser_HasDocument() {
        super("Browser_HasDocument");
      }

      @Override
      public Browser_HasDocument_args getEmptyArgsInstance() {
        return new Browser_HasDocument_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_HasDocument_result getResult(I iface, Browser_HasDocument_args args) throws org.apache.thrift.TException {
        Browser_HasDocument_result result = new Browser_HasDocument_result();
        result.success = iface.Browser_HasDocument(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_ViewSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_ViewSource_args> {
      public Browser_ViewSource() {
        super("Browser_ViewSource");
      }

      @Override
      public Browser_ViewSource_args getEmptyArgsInstance() {
        return new Browser_ViewSource_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_ViewSource_args args) throws org.apache.thrift.TException {
        iface.Browser_ViewSource(args.bid);
        return null;
      }
    }

    public static class Browser_GetSource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GetSource_args> {
      public Browser_GetSource() {
        super("Browser_GetSource");
      }

      @Override
      public Browser_GetSource_args getEmptyArgsInstance() {
        return new Browser_GetSource_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_GetSource_args args) throws org.apache.thrift.TException {
        iface.Browser_GetSource(args.bid, args.stringVisitor);
        return null;
      }
    }

    public static class Browser_GetText<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GetText_args> {
      public Browser_GetText() {
        super("Browser_GetText");
      }

      @Override
      public Browser_GetText_args getEmptyArgsInstance() {
        return new Browser_GetText_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_GetText_args args) throws org.apache.thrift.TException {
        iface.Browser_GetText(args.bid, args.stringVisitor);
        return null;
      }
    }

    public static class Browser_SetFocus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SetFocus_args> {
      public Browser_SetFocus() {
        super("Browser_SetFocus");
      }

      @Override
      public Browser_SetFocus_args getEmptyArgsInstance() {
        return new Browser_SetFocus_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SetFocus_args args) throws org.apache.thrift.TException {
        iface.Browser_SetFocus(args.bid, args.enable);
        return null;
      }
    }

    public static class Browser_GetZoomLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GetZoomLevel_args> {
      public Browser_GetZoomLevel() {
        super("Browser_GetZoomLevel");
      }

      @Override
      public Browser_GetZoomLevel_args getEmptyArgsInstance() {
        return new Browser_GetZoomLevel_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_GetZoomLevel_result getResult(I iface, Browser_GetZoomLevel_args args) throws org.apache.thrift.TException {
        Browser_GetZoomLevel_result result = new Browser_GetZoomLevel_result();
        result.success = iface.Browser_GetZoomLevel(args.bid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Browser_SetZoomLevel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SetZoomLevel_args> {
      public Browser_SetZoomLevel() {
        super("Browser_SetZoomLevel");
      }

      @Override
      public Browser_SetZoomLevel_args getEmptyArgsInstance() {
        return new Browser_SetZoomLevel_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SetZoomLevel_args args) throws org.apache.thrift.TException {
        iface.Browser_SetZoomLevel(args.bid, args.val);
        return null;
      }
    }

    public static class Browser_StartDownload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_StartDownload_args> {
      public Browser_StartDownload() {
        super("Browser_StartDownload");
      }

      @Override
      public Browser_StartDownload_args getEmptyArgsInstance() {
        return new Browser_StartDownload_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_StartDownload_args args) throws org.apache.thrift.TException {
        iface.Browser_StartDownload(args.bid, args.url);
        return null;
      }
    }

    public static class Browser_Find<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_Find_args> {
      public Browser_Find() {
        super("Browser_Find");
      }

      @Override
      public Browser_Find_args getEmptyArgsInstance() {
        return new Browser_Find_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_Find_args args) throws org.apache.thrift.TException {
        iface.Browser_Find(args.bid, args.searchText, args.forward, args.matchCase, args.findNext);
        return null;
      }
    }

    public static class Browser_StopFinding<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_StopFinding_args> {
      public Browser_StopFinding() {
        super("Browser_StopFinding");
      }

      @Override
      public Browser_StopFinding_args getEmptyArgsInstance() {
        return new Browser_StopFinding_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_StopFinding_args args) throws org.apache.thrift.TException {
        iface.Browser_StopFinding(args.bid, args.clearSelection);
        return null;
      }
    }

    public static class Browser_ReplaceMisspelling<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_ReplaceMisspelling_args> {
      public Browser_ReplaceMisspelling() {
        super("Browser_ReplaceMisspelling");
      }

      @Override
      public Browser_ReplaceMisspelling_args getEmptyArgsInstance() {
        return new Browser_ReplaceMisspelling_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_ReplaceMisspelling_args args) throws org.apache.thrift.TException {
        iface.Browser_ReplaceMisspelling(args.bid, args.word);
        return null;
      }
    }

    public static class Browser_SetFrameRate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SetFrameRate_args> {
      public Browser_SetFrameRate() {
        super("Browser_SetFrameRate");
      }

      @Override
      public Browser_SetFrameRate_args getEmptyArgsInstance() {
        return new Browser_SetFrameRate_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SetFrameRate_args args) throws org.apache.thrift.TException {
        iface.Browser_SetFrameRate(args.bid, args.val);
        return null;
      }
    }

    public static class Frame_ExecuteJavaScript<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Frame_ExecuteJavaScript_args> {
      public Frame_ExecuteJavaScript() {
        super("Frame_ExecuteJavaScript");
      }

      @Override
      public Frame_ExecuteJavaScript_args getEmptyArgsInstance() {
        return new Frame_ExecuteJavaScript_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Frame_ExecuteJavaScript_args args) throws org.apache.thrift.TException {
        iface.Frame_ExecuteJavaScript(args.frameId, args.code, args.url, args.line);
        return null;
      }
    }

    public static class Request_Update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_Update_args> {
      public Request_Update() {
        super("Request_Update");
      }

      @Override
      public Request_Update_args getEmptyArgsInstance() {
        return new Request_Update_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_Update_result getResult(I iface, Request_Update_args args) throws org.apache.thrift.TException {
        Request_Update_result result = new Request_Update_result();
        iface.Request_Update(args.request);
        return result;
      }
    }

    public static class Request_GetPostData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_GetPostData_args> {
      public Request_GetPostData() {
        super("Request_GetPostData");
      }

      @Override
      public Request_GetPostData_args getEmptyArgsInstance() {
        return new Request_GetPostData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_GetPostData_result getResult(I iface, Request_GetPostData_args args) throws org.apache.thrift.TException {
        Request_GetPostData_result result = new Request_GetPostData_result();
        result.success = iface.Request_GetPostData(args.request);
        return result;
      }
    }

    public static class Request_SetPostData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_SetPostData_args> {
      public Request_SetPostData() {
        super("Request_SetPostData");
      }

      @Override
      public Request_SetPostData_args getEmptyArgsInstance() {
        return new Request_SetPostData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_SetPostData_result getResult(I iface, Request_SetPostData_args args) throws org.apache.thrift.TException {
        Request_SetPostData_result result = new Request_SetPostData_result();
        iface.Request_SetPostData(args.request, args.postData);
        return result;
      }
    }

    public static class Request_GetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_GetHeaderByName_args> {
      public Request_GetHeaderByName() {
        super("Request_GetHeaderByName");
      }

      @Override
      public Request_GetHeaderByName_args getEmptyArgsInstance() {
        return new Request_GetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_GetHeaderByName_result getResult(I iface, Request_GetHeaderByName_args args) throws org.apache.thrift.TException {
        Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
        result.success = iface.Request_GetHeaderByName(args.request, args.name);
        return result;
      }
    }

    public static class Request_SetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_SetHeaderByName_args> {
      public Request_SetHeaderByName() {
        super("Request_SetHeaderByName");
      }

      @Override
      public Request_SetHeaderByName_args getEmptyArgsInstance() {
        return new Request_SetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_SetHeaderByName_result getResult(I iface, Request_SetHeaderByName_args args) throws org.apache.thrift.TException {
        Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
        iface.Request_SetHeaderByName(args.request, args.name, args.value, args.overwrite);
        return result;
      }
    }

    public static class Request_GetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_GetHeaderMap_args> {
      public Request_GetHeaderMap() {
        super("Request_GetHeaderMap");
      }

      @Override
      public Request_GetHeaderMap_args getEmptyArgsInstance() {
        return new Request_GetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_GetHeaderMap_result getResult(I iface, Request_GetHeaderMap_args args) throws org.apache.thrift.TException {
        Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
        result.success = iface.Request_GetHeaderMap(args.request);
        return result;
      }
    }

    public static class Request_SetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_SetHeaderMap_args> {
      public Request_SetHeaderMap() {
        super("Request_SetHeaderMap");
      }

      @Override
      public Request_SetHeaderMap_args getEmptyArgsInstance() {
        return new Request_SetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_SetHeaderMap_result getResult(I iface, Request_SetHeaderMap_args args) throws org.apache.thrift.TException {
        Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
        iface.Request_SetHeaderMap(args.request, args.headerMap);
        return result;
      }
    }

    public static class Request_Set<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_Set_args> {
      public Request_Set() {
        super("Request_Set");
      }

      @Override
      public Request_Set_args getEmptyArgsInstance() {
        return new Request_Set_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_Set_result getResult(I iface, Request_Set_args args) throws org.apache.thrift.TException {
        Request_Set_result result = new Request_Set_result();
        iface.Request_Set(args.request, args.url, args.method, args.postData, args.headerMap);
        return result;
      }
    }

    public static class Response_Update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_Update_args> {
      public Response_Update() {
        super("Response_Update");
      }

      @Override
      public Response_Update_args getEmptyArgsInstance() {
        return new Response_Update_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_Update_result getResult(I iface, Response_Update_args args) throws org.apache.thrift.TException {
        Response_Update_result result = new Response_Update_result();
        iface.Response_Update(args.response);
        return result;
      }
    }

    public static class Response_GetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_GetHeaderByName_args> {
      public Response_GetHeaderByName() {
        super("Response_GetHeaderByName");
      }

      @Override
      public Response_GetHeaderByName_args getEmptyArgsInstance() {
        return new Response_GetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_GetHeaderByName_result getResult(I iface, Response_GetHeaderByName_args args) throws org.apache.thrift.TException {
        Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
        result.success = iface.Response_GetHeaderByName(args.response, args.name);
        return result;
      }
    }

    public static class Response_SetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_SetHeaderByName_args> {
      public Response_SetHeaderByName() {
        super("Response_SetHeaderByName");
      }

      @Override
      public Response_SetHeaderByName_args getEmptyArgsInstance() {
        return new Response_SetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_SetHeaderByName_result getResult(I iface, Response_SetHeaderByName_args args) throws org.apache.thrift.TException {
        Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
        iface.Response_SetHeaderByName(args.response, args.name, args.value, args.overwrite);
        return result;
      }
    }

    public static class Response_GetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_GetHeaderMap_args> {
      public Response_GetHeaderMap() {
        super("Response_GetHeaderMap");
      }

      @Override
      public Response_GetHeaderMap_args getEmptyArgsInstance() {
        return new Response_GetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_GetHeaderMap_result getResult(I iface, Response_GetHeaderMap_args args) throws org.apache.thrift.TException {
        Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
        result.success = iface.Response_GetHeaderMap(args.response);
        return result;
      }
    }

    public static class Response_SetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_SetHeaderMap_args> {
      public Response_SetHeaderMap() {
        super("Response_SetHeaderMap");
      }

      @Override
      public Response_SetHeaderMap_args getEmptyArgsInstance() {
        return new Response_SetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_SetHeaderMap_result getResult(I iface, Response_SetHeaderMap_args args) throws org.apache.thrift.TException {
        Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
        iface.Response_SetHeaderMap(args.response, args.headerMap);
        return result;
      }
    }

    public static class Callback_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Callback_Dispose_args> {
      public Callback_Dispose() {
        super("Callback_Dispose");
      }

      @Override
      public Callback_Dispose_args getEmptyArgsInstance() {
        return new Callback_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Callback_Dispose_args args) throws org.apache.thrift.TException {
        iface.Callback_Dispose(args.callback);
        return null;
      }
    }

    public static class Callback_Continue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Callback_Continue_args> {
      public Callback_Continue() {
        super("Callback_Continue");
      }

      @Override
      public Callback_Continue_args getEmptyArgsInstance() {
        return new Callback_Continue_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Callback_Continue_args args) throws org.apache.thrift.TException {
        iface.Callback_Continue(args.callback);
        return null;
      }
    }

    public static class Callback_Cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Callback_Cancel_args> {
      public Callback_Cancel() {
        super("Callback_Cancel");
      }

      @Override
      public Callback_Cancel_args getEmptyArgsInstance() {
        return new Callback_Cancel_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Callback_Cancel_args args) throws org.apache.thrift.TException {
        iface.Callback_Cancel(args.callback);
        return null;
      }
    }

    public static class AuthCallback_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AuthCallback_Dispose_args> {
      public AuthCallback_Dispose() {
        super("AuthCallback_Dispose");
      }

      @Override
      public AuthCallback_Dispose_args getEmptyArgsInstance() {
        return new AuthCallback_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, AuthCallback_Dispose_args args) throws org.apache.thrift.TException {
        iface.AuthCallback_Dispose(args.authCallback);
        return null;
      }
    }

    public static class AuthCallback_Continue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AuthCallback_Continue_args> {
      public AuthCallback_Continue() {
        super("AuthCallback_Continue");
      }

      @Override
      public AuthCallback_Continue_args getEmptyArgsInstance() {
        return new AuthCallback_Continue_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, AuthCallback_Continue_args args) throws org.apache.thrift.TException {
        iface.AuthCallback_Continue(args.authCallback, args.username, args.password);
        return null;
      }
    }

    public static class AuthCallback_Cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AuthCallback_Cancel_args> {
      public AuthCallback_Cancel() {
        super("AuthCallback_Cancel");
      }

      @Override
      public AuthCallback_Cancel_args getEmptyArgsInstance() {
        return new AuthCallback_Cancel_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, AuthCallback_Cancel_args args) throws org.apache.thrift.TException {
        iface.AuthCallback_Cancel(args.authCallback);
        return null;
      }
    }

    public static class MessageRouter_Create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_Create_args> {
      public MessageRouter_Create() {
        super("MessageRouter_Create");
      }

      @Override
      public MessageRouter_Create_args getEmptyArgsInstance() {
        return new MessageRouter_Create_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_Create_result getResult(I iface, MessageRouter_Create_args args) throws org.apache.thrift.TException {
        MessageRouter_Create_result result = new MessageRouter_Create_result();
        result.success = iface.MessageRouter_Create(args.query, args.cancel);
        return result;
      }
    }

    public static class MessageRouter_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_Dispose_args> {
      public MessageRouter_Dispose() {
        super("MessageRouter_Dispose");
      }

      @Override
      public MessageRouter_Dispose_args getEmptyArgsInstance() {
        return new MessageRouter_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, MessageRouter_Dispose_args args) throws org.apache.thrift.TException {
        iface.MessageRouter_Dispose(args.msgRouter);
        return null;
      }
    }

    public static class MessageRouter_AddMessageRouterToBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_AddMessageRouterToBrowser_args> {
      public MessageRouter_AddMessageRouterToBrowser() {
        super("MessageRouter_AddMessageRouterToBrowser");
      }

      @Override
      public MessageRouter_AddMessageRouterToBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_AddMessageRouterToBrowser_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_AddMessageRouterToBrowser_result getResult(I iface, MessageRouter_AddMessageRouterToBrowser_args args) throws org.apache.thrift.TException {
        MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
        iface.MessageRouter_AddMessageRouterToBrowser(args.msgRouter, args.bid);
        return result;
      }
    }

    public static class MessageRouter_RemoveMessageRouterFromBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_RemoveMessageRouterFromBrowser_args> {
      public MessageRouter_RemoveMessageRouterFromBrowser() {
        super("MessageRouter_RemoveMessageRouterFromBrowser");
      }

      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_result getResult(I iface, MessageRouter_RemoveMessageRouterFromBrowser_args args) throws org.apache.thrift.TException {
        MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
        iface.MessageRouter_RemoveMessageRouterFromBrowser(args.msgRouter, args.bid);
        return result;
      }
    }

    public static class MessageRouter_AddHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_AddHandler_args> {
      public MessageRouter_AddHandler() {
        super("MessageRouter_AddHandler");
      }

      @Override
      public MessageRouter_AddHandler_args getEmptyArgsInstance() {
        return new MessageRouter_AddHandler_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_AddHandler_result getResult(I iface, MessageRouter_AddHandler_args args) throws org.apache.thrift.TException {
        MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
        iface.MessageRouter_AddHandler(args.msgRouter, args.handler, args.first);
        return result;
      }
    }

    public static class MessageRouter_RemoveHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_RemoveHandler_args> {
      public MessageRouter_RemoveHandler() {
        super("MessageRouter_RemoveHandler");
      }

      @Override
      public MessageRouter_RemoveHandler_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveHandler_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_RemoveHandler_result getResult(I iface, MessageRouter_RemoveHandler_args args) throws org.apache.thrift.TException {
        MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
        iface.MessageRouter_RemoveHandler(args.msgRouter, args.handler);
        return result;
      }
    }

    public static class MessageRouter_CancelPending<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_CancelPending_args> {
      public MessageRouter_CancelPending() {
        super("MessageRouter_CancelPending");
      }

      @Override
      public MessageRouter_CancelPending_args getEmptyArgsInstance() {
        return new MessageRouter_CancelPending_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_CancelPending_result getResult(I iface, MessageRouter_CancelPending_args args) throws org.apache.thrift.TException {
        MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
        iface.MessageRouter_CancelPending(args.msgRouter, args.bid, args.handler);
        return result;
      }
    }

    public static class QueryCallback_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryCallback_Dispose_args> {
      public QueryCallback_Dispose() {
        super("QueryCallback_Dispose");
      }

      @Override
      public QueryCallback_Dispose_args getEmptyArgsInstance() {
        return new QueryCallback_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, QueryCallback_Dispose_args args) throws org.apache.thrift.TException {
        iface.QueryCallback_Dispose(args.qcallback);
        return null;
      }
    }

    public static class QueryCallback_Success<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryCallback_Success_args> {
      public QueryCallback_Success() {
        super("QueryCallback_Success");
      }

      @Override
      public QueryCallback_Success_args getEmptyArgsInstance() {
        return new QueryCallback_Success_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, QueryCallback_Success_args args) throws org.apache.thrift.TException {
        iface.QueryCallback_Success(args.qcallback, args.response);
        return null;
      }
    }

    public static class QueryCallback_Failure<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryCallback_Failure_args> {
      public QueryCallback_Failure() {
        super("QueryCallback_Failure");
      }

      @Override
      public QueryCallback_Failure_args getEmptyArgsInstance() {
        return new QueryCallback_Failure_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, QueryCallback_Failure_args args) throws org.apache.thrift.TException {
        iface.QueryCallback_Failure(args.qcallback, args.error_code, args.error_message);
        return null;
      }
    }

    public static class SchemeHandlerFactory_Register<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SchemeHandlerFactory_Register_args> {
      public SchemeHandlerFactory_Register() {
        super("SchemeHandlerFactory_Register");
      }

      @Override
      public SchemeHandlerFactory_Register_args getEmptyArgsInstance() {
        return new SchemeHandlerFactory_Register_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, SchemeHandlerFactory_Register_args args) throws org.apache.thrift.TException {
        iface.SchemeHandlerFactory_Register(args.schemeName, args.domainName, args.schemeHandlerFactory);
        return null;
      }
    }

    public static class ClearAllSchemeHandlerFactories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ClearAllSchemeHandlerFactories_args> {
      public ClearAllSchemeHandlerFactories() {
        super("ClearAllSchemeHandlerFactories");
      }

      @Override
      public ClearAllSchemeHandlerFactories_args getEmptyArgsInstance() {
        return new ClearAllSchemeHandlerFactories_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, ClearAllSchemeHandlerFactories_args args) throws org.apache.thrift.TException {
        iface.ClearAllSchemeHandlerFactories();
        return null;
      }
    }

    public static class RequestContext_ClearCertificateExceptions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestContext_ClearCertificateExceptions_args> {
      public RequestContext_ClearCertificateExceptions() {
        super("RequestContext_ClearCertificateExceptions");
      }

      @Override
      public RequestContext_ClearCertificateExceptions_args getEmptyArgsInstance() {
        return new RequestContext_ClearCertificateExceptions_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, RequestContext_ClearCertificateExceptions_args args) throws org.apache.thrift.TException {
        iface.RequestContext_ClearCertificateExceptions(args.bid, args.completionCallback);
        return null;
      }
    }

    public static class RequestContext_CloseAllConnections<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RequestContext_CloseAllConnections_args> {
      public RequestContext_CloseAllConnections() {
        super("RequestContext_CloseAllConnections");
      }

      @Override
      public RequestContext_CloseAllConnections_args getEmptyArgsInstance() {
        return new RequestContext_CloseAllConnections_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, RequestContext_CloseAllConnections_args args) throws org.apache.thrift.TException {
        iface.RequestContext_CloseAllConnections(args.bid, args.completionCallback);
        return null;
      }
    }

    public static class CookieManager_Create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieManager_Create_args> {
      public CookieManager_Create() {
        super("CookieManager_Create");
      }

      @Override
      public CookieManager_Create_args getEmptyArgsInstance() {
        return new CookieManager_Create_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieManager_Create_result getResult(I iface, CookieManager_Create_args args) throws org.apache.thrift.TException {
        CookieManager_Create_result result = new CookieManager_Create_result();
        result.success = iface.CookieManager_Create();
        return result;
      }
    }

    public static class CookieManager_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieManager_Dispose_args> {
      public CookieManager_Dispose() {
        super("CookieManager_Dispose");
      }

      @Override
      public CookieManager_Dispose_args getEmptyArgsInstance() {
        return new CookieManager_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, CookieManager_Dispose_args args) throws org.apache.thrift.TException {
        iface.CookieManager_Dispose(args.cookieManager);
        return null;
      }
    }

    public static class CookieManager_VisitAllCookies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieManager_VisitAllCookies_args> {
      public CookieManager_VisitAllCookies() {
        super("CookieManager_VisitAllCookies");
      }

      @Override
      public CookieManager_VisitAllCookies_args getEmptyArgsInstance() {
        return new CookieManager_VisitAllCookies_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieManager_VisitAllCookies_result getResult(I iface, CookieManager_VisitAllCookies_args args) throws org.apache.thrift.TException {
        CookieManager_VisitAllCookies_result result = new CookieManager_VisitAllCookies_result();
        result.success = iface.CookieManager_VisitAllCookies(args.cookieManager, args.visitor);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class CookieManager_VisitUrlCookies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieManager_VisitUrlCookies_args> {
      public CookieManager_VisitUrlCookies() {
        super("CookieManager_VisitUrlCookies");
      }

      @Override
      public CookieManager_VisitUrlCookies_args getEmptyArgsInstance() {
        return new CookieManager_VisitUrlCookies_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieManager_VisitUrlCookies_result getResult(I iface, CookieManager_VisitUrlCookies_args args) throws org.apache.thrift.TException {
        CookieManager_VisitUrlCookies_result result = new CookieManager_VisitUrlCookies_result();
        result.success = iface.CookieManager_VisitUrlCookies(args.cookieManager, args.visitor, args.url, args.includeHttpOnly);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class CookieManager_SetCookie<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieManager_SetCookie_args> {
      public CookieManager_SetCookie() {
        super("CookieManager_SetCookie");
      }

      @Override
      public CookieManager_SetCookie_args getEmptyArgsInstance() {
        return new CookieManager_SetCookie_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieManager_SetCookie_result getResult(I iface, CookieManager_SetCookie_args args) throws org.apache.thrift.TException {
        CookieManager_SetCookie_result result = new CookieManager_SetCookie_result();
        result.success = iface.CookieManager_SetCookie(args.cookieManager, args.url, args.cookie);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class CookieManager_DeleteCookies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieManager_DeleteCookies_args> {
      public CookieManager_DeleteCookies() {
        super("CookieManager_DeleteCookies");
      }

      @Override
      public CookieManager_DeleteCookies_args getEmptyArgsInstance() {
        return new CookieManager_DeleteCookies_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieManager_DeleteCookies_result getResult(I iface, CookieManager_DeleteCookies_args args) throws org.apache.thrift.TException {
        CookieManager_DeleteCookies_result result = new CookieManager_DeleteCookies_result();
        result.success = iface.CookieManager_DeleteCookies(args.cookieManager, args.url, args.cookieName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class CookieManager_FlushStore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CookieManager_FlushStore_args> {
      public CookieManager_FlushStore() {
        super("CookieManager_FlushStore");
      }

      @Override
      public CookieManager_FlushStore_args getEmptyArgsInstance() {
        return new CookieManager_FlushStore_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public CookieManager_FlushStore_result getResult(I iface, CookieManager_FlushStore_args args) throws org.apache.thrift.TException {
        CookieManager_FlushStore_result result = new CookieManager_FlushStore_result();
        result.success = iface.CookieManager_FlushStore(args.cookieManager, args.completionCallback);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.apache.thrift.Logger _LOGGER = org.apache.thrift.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("connectTcp", new connectTcp());
      processMap.put("log", new log());
      processMap.put("echo", new echo());
      processMap.put("version", new version());
      processMap.put("state", new state());
      processMap.put("stop", new stop());
      processMap.put("Browser_Create", new Browser_Create());
      processMap.put("Browser_StartNativeCreation", new Browser_StartNativeCreation());
      processMap.put("Browser_Close", new Browser_Close());
      processMap.put("Browser_Reload", new Browser_Reload());
      processMap.put("Browser_ReloadIgnoreCache", new Browser_ReloadIgnoreCache());
      processMap.put("Browser_LoadURL", new Browser_LoadURL());
      processMap.put("Browser_GetURL", new Browser_GetURL());
      processMap.put("Browser_ExecuteJavaScript", new Browser_ExecuteJavaScript());
      processMap.put("Browser_WasResized", new Browser_WasResized());
      processMap.put("Browser_NotifyScreenInfoChanged", new Browser_NotifyScreenInfoChanged());
      processMap.put("Browser_SendKeyEvent", new Browser_SendKeyEvent());
      processMap.put("Browser_SendMouseEvent", new Browser_SendMouseEvent());
      processMap.put("Browser_SendMouseWheelEvent", new Browser_SendMouseWheelEvent());
      processMap.put("Browser_CanGoForward", new Browser_CanGoForward());
      processMap.put("Browser_CanGoBack", new Browser_CanGoBack());
      processMap.put("Browser_GoBack", new Browser_GoBack());
      processMap.put("Browser_GoForward", new Browser_GoForward());
      processMap.put("Browser_IsLoading", new Browser_IsLoading());
      processMap.put("Browser_StopLoad", new Browser_StopLoad());
      processMap.put("Browser_GetFrameCount", new Browser_GetFrameCount());
      processMap.put("Browser_IsPopup", new Browser_IsPopup());
      processMap.put("Browser_HasDocument", new Browser_HasDocument());
      processMap.put("Browser_ViewSource", new Browser_ViewSource());
      processMap.put("Browser_GetSource", new Browser_GetSource());
      processMap.put("Browser_GetText", new Browser_GetText());
      processMap.put("Browser_SetFocus", new Browser_SetFocus());
      processMap.put("Browser_GetZoomLevel", new Browser_GetZoomLevel());
      processMap.put("Browser_SetZoomLevel", new Browser_SetZoomLevel());
      processMap.put("Browser_StartDownload", new Browser_StartDownload());
      processMap.put("Browser_Find", new Browser_Find());
      processMap.put("Browser_StopFinding", new Browser_StopFinding());
      processMap.put("Browser_ReplaceMisspelling", new Browser_ReplaceMisspelling());
      processMap.put("Browser_SetFrameRate", new Browser_SetFrameRate());
      processMap.put("Frame_ExecuteJavaScript", new Frame_ExecuteJavaScript());
      processMap.put("Request_Update", new Request_Update());
      processMap.put("Request_GetPostData", new Request_GetPostData());
      processMap.put("Request_SetPostData", new Request_SetPostData());
      processMap.put("Request_GetHeaderByName", new Request_GetHeaderByName());
      processMap.put("Request_SetHeaderByName", new Request_SetHeaderByName());
      processMap.put("Request_GetHeaderMap", new Request_GetHeaderMap());
      processMap.put("Request_SetHeaderMap", new Request_SetHeaderMap());
      processMap.put("Request_Set", new Request_Set());
      processMap.put("Response_Update", new Response_Update());
      processMap.put("Response_GetHeaderByName", new Response_GetHeaderByName());
      processMap.put("Response_SetHeaderByName", new Response_SetHeaderByName());
      processMap.put("Response_GetHeaderMap", new Response_GetHeaderMap());
      processMap.put("Response_SetHeaderMap", new Response_SetHeaderMap());
      processMap.put("Callback_Dispose", new Callback_Dispose());
      processMap.put("Callback_Continue", new Callback_Continue());
      processMap.put("Callback_Cancel", new Callback_Cancel());
      processMap.put("AuthCallback_Dispose", new AuthCallback_Dispose());
      processMap.put("AuthCallback_Continue", new AuthCallback_Continue());
      processMap.put("AuthCallback_Cancel", new AuthCallback_Cancel());
      processMap.put("MessageRouter_Create", new MessageRouter_Create());
      processMap.put("MessageRouter_Dispose", new MessageRouter_Dispose());
      processMap.put("MessageRouter_AddMessageRouterToBrowser", new MessageRouter_AddMessageRouterToBrowser());
      processMap.put("MessageRouter_RemoveMessageRouterFromBrowser", new MessageRouter_RemoveMessageRouterFromBrowser());
      processMap.put("MessageRouter_AddHandler", new MessageRouter_AddHandler());
      processMap.put("MessageRouter_RemoveHandler", new MessageRouter_RemoveHandler());
      processMap.put("MessageRouter_CancelPending", new MessageRouter_CancelPending());
      processMap.put("QueryCallback_Dispose", new QueryCallback_Dispose());
      processMap.put("QueryCallback_Success", new QueryCallback_Success());
      processMap.put("QueryCallback_Failure", new QueryCallback_Failure());
      processMap.put("SchemeHandlerFactory_Register", new SchemeHandlerFactory_Register());
      processMap.put("ClearAllSchemeHandlerFactories", new ClearAllSchemeHandlerFactories());
      processMap.put("RequestContext_ClearCertificateExceptions", new RequestContext_ClearCertificateExceptions());
      processMap.put("RequestContext_CloseAllConnections", new RequestContext_CloseAllConnections());
      processMap.put("CookieManager_Create", new CookieManager_Create());
      processMap.put("CookieManager_Dispose", new CookieManager_Dispose());
      processMap.put("CookieManager_VisitAllCookies", new CookieManager_VisitAllCookies());
      processMap.put("CookieManager_VisitUrlCookies", new CookieManager_VisitUrlCookies());
      processMap.put("CookieManager_SetCookie", new CookieManager_SetCookie());
      processMap.put("CookieManager_DeleteCookies", new CookieManager_DeleteCookies());
      processMap.put("CookieManager_FlushStore", new CookieManager_FlushStore());
      return processMap;
    }

    public static class connect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connect_args, java.lang.Integer> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            connect_result result = new connect_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            connect_result result = new connect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, connect_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.connect(args.backwardConnectionPipe, args.isMaster,resultHandler);
      }
    }

    public static class connectTcp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connectTcp_args, java.lang.Integer> {
      public connectTcp() {
        super("connectTcp");
      }

      @Override
      public connectTcp_args getEmptyArgsInstance() {
        return new connectTcp_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            connectTcp_result result = new connectTcp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            connectTcp_result result = new connectTcp_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, connectTcp_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.connectTcp(args.backwardConnectionPort, args.isMaster,resultHandler);
      }
    }

    public static class log<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, log_args, Void> {
      public log() {
        super("log");
      }

      @Override
      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, log_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.log(args.msg,resultHandler);
      }
    }

    public static class echo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, echo_args, java.lang.String> {
      public echo() {
        super("echo");
      }

      @Override
      public echo_args getEmptyArgsInstance() {
        return new echo_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            echo_result result = new echo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            echo_result result = new echo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, echo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.echo(args.msg,resultHandler);
      }
    }

    public static class version<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, version_args, java.lang.String> {
      public version() {
        super("version");
      }

      @Override
      public version_args getEmptyArgsInstance() {
        return new version_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            version_result result = new version_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            version_result result = new version_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, version_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.version(resultHandler);
      }
    }

    public static class state<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, state_args, java.lang.String> {
      public state() {
        super("state");
      }

      @Override
      public state_args getEmptyArgsInstance() {
        return new state_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            state_result result = new state_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            state_result result = new state_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, state_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.state(resultHandler);
      }
    }

    public static class stop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stop_args, Void> {
      public stop() {
        super("stop");
      }

      @Override
      public stop_args getEmptyArgsInstance() {
        return new stop_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, stop_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.stop(resultHandler);
      }
    }

    public static class Browser_Create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_Create_args, java.lang.Integer> {
      public Browser_Create() {
        super("Browser_Create");
      }

      @Override
      public Browser_Create_args getEmptyArgsInstance() {
        return new Browser_Create_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            Browser_Create_result result = new Browser_Create_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_Create_result result = new Browser_Create_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_Create_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_Create(args.cid, args.handlersMask, args.requestContextHandler,resultHandler);
      }
    }

    public static class Browser_StartNativeCreation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_StartNativeCreation_args, Void> {
      public Browser_StartNativeCreation() {
        super("Browser_StartNativeCreation");
      }

      @Override
      public Browser_StartNativeCreation_args getEmptyArgsInstance() {
        return new Browser_StartNativeCreation_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_StartNativeCreation_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_StartNativeCreation(args.bid, args.url,resultHandler);
      }
    }

    public static class Browser_Close<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_Close_args, Void> {
      public Browser_Close() {
        super("Browser_Close");
      }

      @Override
      public Browser_Close_args getEmptyArgsInstance() {
        return new Browser_Close_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_Close_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_Close(args.bid,resultHandler);
      }
    }

    public static class Browser_Reload<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_Reload_args, Void> {
      public Browser_Reload() {
        super("Browser_Reload");
      }

      @Override
      public Browser_Reload_args getEmptyArgsInstance() {
        return new Browser_Reload_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_Reload_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_Reload(args.bid,resultHandler);
      }
    }

    public static class Browser_ReloadIgnoreCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_ReloadIgnoreCache_args, Void> {
      public Browser_ReloadIgnoreCache() {
        super("Browser_ReloadIgnoreCache");
      }

      @Override
      public Browser_ReloadIgnoreCache_args getEmptyArgsInstance() {
        return new Browser_ReloadIgnoreCache_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_ReloadIgnoreCache_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_ReloadIgnoreCache(args.bid,resultHandler);
      }
    }

    public static class Browser_LoadURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_LoadURL_args, Void> {
      public Browser_LoadURL() {
        super("Browser_LoadURL");
      }

      @Override
      public Browser_LoadURL_args getEmptyArgsInstance() {
        return new Browser_LoadURL_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_LoadURL_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_LoadURL(args.bid, args.url,resultHandler);
      }
    }

    public static class Browser_GetURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GetURL_args, java.lang.String> {
      public Browser_GetURL() {
        super("Browser_GetURL");
      }

      @Override
      public Browser_GetURL_args getEmptyArgsInstance() {
        return new Browser_GetURL_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            Browser_GetURL_result result = new Browser_GetURL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_GetURL_result result = new Browser_GetURL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_GetURL_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GetURL(args.bid,resultHandler);
      }
    }

    public static class Browser_ExecuteJavaScript<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_ExecuteJavaScript_args, Void> {
      public Browser_ExecuteJavaScript() {
        super("Browser_ExecuteJavaScript");
      }

      @Override
      public Browser_ExecuteJavaScript_args getEmptyArgsInstance() {
        return new Browser_ExecuteJavaScript_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_ExecuteJavaScript_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_ExecuteJavaScript(args.bid, args.code, args.url, args.line,resultHandler);
      }
    }

    public static class Browser_WasResized<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_WasResized_args, Void> {
      public Browser_WasResized() {
        super("Browser_WasResized");
      }

      @Override
      public Browser_WasResized_args getEmptyArgsInstance() {
        return new Browser_WasResized_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_WasResized_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_WasResized(args.bid,resultHandler);
      }
    }

    public static class Browser_NotifyScreenInfoChanged<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_NotifyScreenInfoChanged_args, Void> {
      public Browser_NotifyScreenInfoChanged() {
        super("Browser_NotifyScreenInfoChanged");
      }

      @Override
      public Browser_NotifyScreenInfoChanged_args getEmptyArgsInstance() {
        return new Browser_NotifyScreenInfoChanged_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_NotifyScreenInfoChanged_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_NotifyScreenInfoChanged(args.bid,resultHandler);
      }
    }

    public static class Browser_SendKeyEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SendKeyEvent_args, Void> {
      public Browser_SendKeyEvent() {
        super("Browser_SendKeyEvent");
      }

      @Override
      public Browser_SendKeyEvent_args getEmptyArgsInstance() {
        return new Browser_SendKeyEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SendKeyEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SendKeyEvent(args.bid, args.event_type, args.modifiers, args.key_char, args.scanCode, args.key_code,resultHandler);
      }
    }

    public static class Browser_SendMouseEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SendMouseEvent_args, Void> {
      public Browser_SendMouseEvent() {
        super("Browser_SendMouseEvent");
      }

      @Override
      public Browser_SendMouseEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SendMouseEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SendMouseEvent(args.bid, args.event_type, args.x, args.y, args.modifiers, args.click_count, args.button,resultHandler);
      }
    }

    public static class Browser_SendMouseWheelEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SendMouseWheelEvent_args, Void> {
      public Browser_SendMouseWheelEvent() {
        super("Browser_SendMouseWheelEvent");
      }

      @Override
      public Browser_SendMouseWheelEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseWheelEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SendMouseWheelEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SendMouseWheelEvent(args.bid, args.scroll_type, args.x, args.y, args.modifiers, args.delta, args.units_to_scroll,resultHandler);
      }
    }

    public static class Browser_CanGoForward<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_CanGoForward_args, java.lang.Boolean> {
      public Browser_CanGoForward() {
        super("Browser_CanGoForward");
      }

      @Override
      public Browser_CanGoForward_args getEmptyArgsInstance() {
        return new Browser_CanGoForward_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            Browser_CanGoForward_result result = new Browser_CanGoForward_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_CanGoForward_result result = new Browser_CanGoForward_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_CanGoForward_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_CanGoForward(args.bid,resultHandler);
      }
    }

    public static class Browser_CanGoBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_CanGoBack_args, java.lang.Boolean> {
      public Browser_CanGoBack() {
        super("Browser_CanGoBack");
      }

      @Override
      public Browser_CanGoBack_args getEmptyArgsInstance() {
        return new Browser_CanGoBack_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            Browser_CanGoBack_result result = new Browser_CanGoBack_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_CanGoBack_result result = new Browser_CanGoBack_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_CanGoBack_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_CanGoBack(args.bid,resultHandler);
      }
    }

    public static class Browser_GoBack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GoBack_args, Void> {
      public Browser_GoBack() {
        super("Browser_GoBack");
      }

      @Override
      public Browser_GoBack_args getEmptyArgsInstance() {
        return new Browser_GoBack_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_GoBack_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GoBack(args.bid,resultHandler);
      }
    }

    public static class Browser_GoForward<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GoForward_args, Void> {
      public Browser_GoForward() {
        super("Browser_GoForward");
      }

      @Override
      public Browser_GoForward_args getEmptyArgsInstance() {
        return new Browser_GoForward_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_GoForward_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GoForward(args.bid,resultHandler);
      }
    }

    public static class Browser_IsLoading<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_IsLoading_args, java.lang.Boolean> {
      public Browser_IsLoading() {
        super("Browser_IsLoading");
      }

      @Override
      public Browser_IsLoading_args getEmptyArgsInstance() {
        return new Browser_IsLoading_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            Browser_IsLoading_result result = new Browser_IsLoading_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_IsLoading_result result = new Browser_IsLoading_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_IsLoading_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_IsLoading(args.bid,resultHandler);
      }
    }

    public static class Browser_StopLoad<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_StopLoad_args, Void> {
      public Browser_StopLoad() {
        super("Browser_StopLoad");
      }

      @Override
      public Browser_StopLoad_args getEmptyArgsInstance() {
        return new Browser_StopLoad_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_StopLoad_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_StopLoad(args.bid,resultHandler);
      }
    }

    public static class Browser_GetFrameCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GetFrameCount_args, java.lang.Integer> {
      public Browser_GetFrameCount() {
        super("Browser_GetFrameCount");
      }

      @Override
      public Browser_GetFrameCount_args getEmptyArgsInstance() {
        return new Browser_GetFrameCount_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            Browser_GetFrameCount_result result = new Browser_GetFrameCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_GetFrameCount_result result = new Browser_GetFrameCount_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_GetFrameCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GetFrameCount(args.bid,resultHandler);
      }
    }

    public static class Browser_IsPopup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_IsPopup_args, java.lang.Boolean> {
      public Browser_IsPopup() {
        super("Browser_IsPopup");
      }

      @Override
      public Browser_IsPopup_args getEmptyArgsInstance() {
        return new Browser_IsPopup_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            Browser_IsPopup_result result = new Browser_IsPopup_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_IsPopup_result result = new Browser_IsPopup_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_IsPopup_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_IsPopup(args.bid,resultHandler);
      }
    }

    public static class Browser_HasDocument<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_HasDocument_args, java.lang.Boolean> {
      public Browser_HasDocument() {
        super("Browser_HasDocument");
      }

      @Override
      public Browser_HasDocument_args getEmptyArgsInstance() {
        return new Browser_HasDocument_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            Browser_HasDocument_result result = new Browser_HasDocument_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_HasDocument_result result = new Browser_HasDocument_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_HasDocument_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_HasDocument(args.bid,resultHandler);
      }
    }

    public static class Browser_ViewSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_ViewSource_args, Void> {
      public Browser_ViewSource() {
        super("Browser_ViewSource");
      }

      @Override
      public Browser_ViewSource_args getEmptyArgsInstance() {
        return new Browser_ViewSource_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_ViewSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_ViewSource(args.bid,resultHandler);
      }
    }

    public static class Browser_GetSource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GetSource_args, Void> {
      public Browser_GetSource() {
        super("Browser_GetSource");
      }

      @Override
      public Browser_GetSource_args getEmptyArgsInstance() {
        return new Browser_GetSource_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_GetSource_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GetSource(args.bid, args.stringVisitor,resultHandler);
      }
    }

    public static class Browser_GetText<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GetText_args, Void> {
      public Browser_GetText() {
        super("Browser_GetText");
      }

      @Override
      public Browser_GetText_args getEmptyArgsInstance() {
        return new Browser_GetText_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_GetText_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GetText(args.bid, args.stringVisitor,resultHandler);
      }
    }

    public static class Browser_SetFocus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SetFocus_args, Void> {
      public Browser_SetFocus() {
        super("Browser_SetFocus");
      }

      @Override
      public Browser_SetFocus_args getEmptyArgsInstance() {
        return new Browser_SetFocus_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SetFocus_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SetFocus(args.bid, args.enable,resultHandler);
      }
    }

    public static class Browser_GetZoomLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GetZoomLevel_args, java.lang.Double> {
      public Browser_GetZoomLevel() {
        super("Browser_GetZoomLevel");
      }

      @Override
      public Browser_GetZoomLevel_args getEmptyArgsInstance() {
        return new Browser_GetZoomLevel_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          @Override
          public void onComplete(java.lang.Double o) {
            Browser_GetZoomLevel_result result = new Browser_GetZoomLevel_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_GetZoomLevel_result result = new Browser_GetZoomLevel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_GetZoomLevel_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GetZoomLevel(args.bid,resultHandler);
      }
    }

    public static class Browser_SetZoomLevel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SetZoomLevel_args, Void> {
      public Browser_SetZoomLevel() {
        super("Browser_SetZoomLevel");
      }

      @Override
      public Browser_SetZoomLevel_args getEmptyArgsInstance() {
        return new Browser_SetZoomLevel_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SetZoomLevel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SetZoomLevel(args.bid, args.val,resultHandler);
      }
    }

    public static class Browser_StartDownload<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_StartDownload_args, Void> {
      public Browser_StartDownload() {
        super("Browser_StartDownload");
      }

      @Override
      public Browser_StartDownload_args getEmptyArgsInstance() {
        return new Browser_StartDownload_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_StartDownload_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_StartDownload(args.bid, args.url,resultHandler);
      }
    }

    public static class Browser_Find<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_Find_args, Void> {
      public Browser_Find() {
        super("Browser_Find");
      }

      @Override
      public Browser_Find_args getEmptyArgsInstance() {
        return new Browser_Find_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_Find_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_Find(args.bid, args.searchText, args.forward, args.matchCase, args.findNext,resultHandler);
      }
    }

    public static class Browser_StopFinding<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_StopFinding_args, Void> {
      public Browser_StopFinding() {
        super("Browser_StopFinding");
      }

      @Override
      public Browser_StopFinding_args getEmptyArgsInstance() {
        return new Browser_StopFinding_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_StopFinding_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_StopFinding(args.bid, args.clearSelection,resultHandler);
      }
    }

    public static class Browser_ReplaceMisspelling<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_ReplaceMisspelling_args, Void> {
      public Browser_ReplaceMisspelling() {
        super("Browser_ReplaceMisspelling");
      }

      @Override
      public Browser_ReplaceMisspelling_args getEmptyArgsInstance() {
        return new Browser_ReplaceMisspelling_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_ReplaceMisspelling_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_ReplaceMisspelling(args.bid, args.word,resultHandler);
      }
    }

    public static class Browser_SetFrameRate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SetFrameRate_args, Void> {
      public Browser_SetFrameRate() {
        super("Browser_SetFrameRate");
      }

      @Override
      public Browser_SetFrameRate_args getEmptyArgsInstance() {
        return new Browser_SetFrameRate_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SetFrameRate_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SetFrameRate(args.bid, args.val,resultHandler);
      }
    }

    public static class Frame_ExecuteJavaScript<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Frame_ExecuteJavaScript_args, Void> {
      public Frame_ExecuteJavaScript() {
        super("Frame_ExecuteJavaScript");
      }

      @Override
      public Frame_ExecuteJavaScript_args getEmptyArgsInstance() {
        return new Frame_ExecuteJavaScript_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Frame_ExecuteJavaScript_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Frame_ExecuteJavaScript(args.frameId, args.code, args.url, args.line,resultHandler);
      }
    }

    public static class Request_Update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_Update_args, Void> {
      public Request_Update() {
        super("Request_Update");
      }

      @Override
      public Request_Update_args getEmptyArgsInstance() {
        return new Request_Update_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_Update_result result = new Request_Update_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_Update_result result = new Request_Update_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_Update_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_Update(args.request,resultHandler);
      }
    }

    public static class Request_GetPostData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_GetPostData_args, com.jetbrains.cef.remote.thrift_codegen.PostData> {
      public Request_GetPostData() {
        super("Request_GetPostData");
      }

      @Override
      public Request_GetPostData_args getEmptyArgsInstance() {
        return new Request_GetPostData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.PostData o) {
            Request_GetPostData_result result = new Request_GetPostData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_GetPostData_result result = new Request_GetPostData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_GetPostData_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler) throws org.apache.thrift.TException {
        iface.Request_GetPostData(args.request,resultHandler);
      }
    }

    public static class Request_SetPostData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_SetPostData_args, Void> {
      public Request_SetPostData() {
        super("Request_SetPostData");
      }

      @Override
      public Request_SetPostData_args getEmptyArgsInstance() {
        return new Request_SetPostData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_SetPostData_result result = new Request_SetPostData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_SetPostData_result result = new Request_SetPostData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_SetPostData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_SetPostData(args.request, args.postData,resultHandler);
      }
    }

    public static class Request_GetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_GetHeaderByName_args, java.lang.String> {
      public Request_GetHeaderByName() {
        super("Request_GetHeaderByName");
      }

      @Override
      public Request_GetHeaderByName_args getEmptyArgsInstance() {
        return new Request_GetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_GetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Request_GetHeaderByName(args.request, args.name,resultHandler);
      }
    }

    public static class Request_SetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_SetHeaderByName_args, Void> {
      public Request_SetHeaderByName() {
        super("Request_SetHeaderByName");
      }

      @Override
      public Request_SetHeaderByName_args getEmptyArgsInstance() {
        return new Request_SetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_SetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_SetHeaderByName(args.request, args.name, args.value, args.overwrite,resultHandler);
      }
    }

    public static class Request_GetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_GetHeaderMap_args, java.util.Map<java.lang.String,java.lang.String>> {
      public Request_GetHeaderMap() {
        super("Request_GetHeaderMap");
      }

      @Override
      public Request_GetHeaderMap_args getEmptyArgsInstance() {
        return new Request_GetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_GetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.Request_GetHeaderMap(args.request,resultHandler);
      }
    }

    public static class Request_SetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_SetHeaderMap_args, Void> {
      public Request_SetHeaderMap() {
        super("Request_SetHeaderMap");
      }

      @Override
      public Request_SetHeaderMap_args getEmptyArgsInstance() {
        return new Request_SetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_SetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_SetHeaderMap(args.request, args.headerMap,resultHandler);
      }
    }

    public static class Request_Set<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_Set_args, Void> {
      public Request_Set() {
        super("Request_Set");
      }

      @Override
      public Request_Set_args getEmptyArgsInstance() {
        return new Request_Set_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_Set_result result = new Request_Set_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_Set_result result = new Request_Set_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_Set_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_Set(args.request, args.url, args.method, args.postData, args.headerMap,resultHandler);
      }
    }

    public static class Response_Update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_Update_args, Void> {
      public Response_Update() {
        super("Response_Update");
      }

      @Override
      public Response_Update_args getEmptyArgsInstance() {
        return new Response_Update_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Response_Update_result result = new Response_Update_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_Update_result result = new Response_Update_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_Update_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Response_Update(args.response,resultHandler);
      }
    }

    public static class Response_GetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_GetHeaderByName_args, java.lang.String> {
      public Response_GetHeaderByName() {
        super("Response_GetHeaderByName");
      }

      @Override
      public Response_GetHeaderByName_args getEmptyArgsInstance() {
        return new Response_GetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_GetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Response_GetHeaderByName(args.response, args.name,resultHandler);
      }
    }

    public static class Response_SetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_SetHeaderByName_args, Void> {
      public Response_SetHeaderByName() {
        super("Response_SetHeaderByName");
      }

      @Override
      public Response_SetHeaderByName_args getEmptyArgsInstance() {
        return new Response_SetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_SetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Response_SetHeaderByName(args.response, args.name, args.value, args.overwrite,resultHandler);
      }
    }

    public static class Response_GetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_GetHeaderMap_args, java.util.Map<java.lang.String,java.lang.String>> {
      public Response_GetHeaderMap() {
        super("Response_GetHeaderMap");
      }

      @Override
      public Response_GetHeaderMap_args getEmptyArgsInstance() {
        return new Response_GetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_GetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.Response_GetHeaderMap(args.response,resultHandler);
      }
    }

    public static class Response_SetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_SetHeaderMap_args, Void> {
      public Response_SetHeaderMap() {
        super("Response_SetHeaderMap");
      }

      @Override
      public Response_SetHeaderMap_args getEmptyArgsInstance() {
        return new Response_SetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_SetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Response_SetHeaderMap(args.response, args.headerMap,resultHandler);
      }
    }

    public static class Callback_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Callback_Dispose_args, Void> {
      public Callback_Dispose() {
        super("Callback_Dispose");
      }

      @Override
      public Callback_Dispose_args getEmptyArgsInstance() {
        return new Callback_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Callback_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Callback_Dispose(args.callback,resultHandler);
      }
    }

    public static class Callback_Continue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Callback_Continue_args, Void> {
      public Callback_Continue() {
        super("Callback_Continue");
      }

      @Override
      public Callback_Continue_args getEmptyArgsInstance() {
        return new Callback_Continue_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Callback_Continue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Callback_Continue(args.callback,resultHandler);
      }
    }

    public static class Callback_Cancel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Callback_Cancel_args, Void> {
      public Callback_Cancel() {
        super("Callback_Cancel");
      }

      @Override
      public Callback_Cancel_args getEmptyArgsInstance() {
        return new Callback_Cancel_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Callback_Cancel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Callback_Cancel(args.callback,resultHandler);
      }
    }

    public static class AuthCallback_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AuthCallback_Dispose_args, Void> {
      public AuthCallback_Dispose() {
        super("AuthCallback_Dispose");
      }

      @Override
      public AuthCallback_Dispose_args getEmptyArgsInstance() {
        return new AuthCallback_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, AuthCallback_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.AuthCallback_Dispose(args.authCallback,resultHandler);
      }
    }

    public static class AuthCallback_Continue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AuthCallback_Continue_args, Void> {
      public AuthCallback_Continue() {
        super("AuthCallback_Continue");
      }

      @Override
      public AuthCallback_Continue_args getEmptyArgsInstance() {
        return new AuthCallback_Continue_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, AuthCallback_Continue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.AuthCallback_Continue(args.authCallback, args.username, args.password,resultHandler);
      }
    }

    public static class AuthCallback_Cancel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AuthCallback_Cancel_args, Void> {
      public AuthCallback_Cancel() {
        super("AuthCallback_Cancel");
      }

      @Override
      public AuthCallback_Cancel_args getEmptyArgsInstance() {
        return new AuthCallback_Cancel_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, AuthCallback_Cancel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.AuthCallback_Cancel(args.authCallback,resultHandler);
      }
    }

    public static class MessageRouter_Create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_Create_args, com.jetbrains.cef.remote.thrift_codegen.RObject> {
      public MessageRouter_Create() {
        super("MessageRouter_Create");
      }

      @Override
      public MessageRouter_Create_args getEmptyArgsInstance() {
        return new MessageRouter_Create_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.RObject o) {
            MessageRouter_Create_result result = new MessageRouter_Create_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_Create_result result = new MessageRouter_Create_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_Create_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_Create(args.query, args.cancel,resultHandler);
      }
    }

    public static class MessageRouter_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_Dispose_args, Void> {
      public MessageRouter_Dispose() {
        super("MessageRouter_Dispose");
      }

      @Override
      public MessageRouter_Dispose_args getEmptyArgsInstance() {
        return new MessageRouter_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, MessageRouter_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_Dispose(args.msgRouter,resultHandler);
      }
    }

    public static class MessageRouter_AddMessageRouterToBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_AddMessageRouterToBrowser_args, Void> {
      public MessageRouter_AddMessageRouterToBrowser() {
        super("MessageRouter_AddMessageRouterToBrowser");
      }

      @Override
      public MessageRouter_AddMessageRouterToBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_AddMessageRouterToBrowser_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_AddMessageRouterToBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_AddMessageRouterToBrowser(args.msgRouter, args.bid,resultHandler);
      }
    }

    public static class MessageRouter_RemoveMessageRouterFromBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_RemoveMessageRouterFromBrowser_args, Void> {
      public MessageRouter_RemoveMessageRouterFromBrowser() {
        super("MessageRouter_RemoveMessageRouterFromBrowser");
      }

      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_RemoveMessageRouterFromBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_RemoveMessageRouterFromBrowser(args.msgRouter, args.bid,resultHandler);
      }
    }

    public static class MessageRouter_AddHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_AddHandler_args, Void> {
      public MessageRouter_AddHandler() {
        super("MessageRouter_AddHandler");
      }

      @Override
      public MessageRouter_AddHandler_args getEmptyArgsInstance() {
        return new MessageRouter_AddHandler_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_AddHandler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_AddHandler(args.msgRouter, args.handler, args.first,resultHandler);
      }
    }

    public static class MessageRouter_RemoveHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_RemoveHandler_args, Void> {
      public MessageRouter_RemoveHandler() {
        super("MessageRouter_RemoveHandler");
      }

      @Override
      public MessageRouter_RemoveHandler_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveHandler_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_RemoveHandler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_RemoveHandler(args.msgRouter, args.handler,resultHandler);
      }
    }

    public static class MessageRouter_CancelPending<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_CancelPending_args, Void> {
      public MessageRouter_CancelPending() {
        super("MessageRouter_CancelPending");
      }

      @Override
      public MessageRouter_CancelPending_args getEmptyArgsInstance() {
        return new MessageRouter_CancelPending_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_CancelPending_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_CancelPending(args.msgRouter, args.bid, args.handler,resultHandler);
      }
    }

    public static class QueryCallback_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryCallback_Dispose_args, Void> {
      public QueryCallback_Dispose() {
        super("QueryCallback_Dispose");
      }

      @Override
      public QueryCallback_Dispose_args getEmptyArgsInstance() {
        return new QueryCallback_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, QueryCallback_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.QueryCallback_Dispose(args.qcallback,resultHandler);
      }
    }

    public static class QueryCallback_Success<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryCallback_Success_args, Void> {
      public QueryCallback_Success() {
        super("QueryCallback_Success");
      }

      @Override
      public QueryCallback_Success_args getEmptyArgsInstance() {
        return new QueryCallback_Success_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, QueryCallback_Success_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.QueryCallback_Success(args.qcallback, args.response,resultHandler);
      }
    }

    public static class QueryCallback_Failure<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryCallback_Failure_args, Void> {
      public QueryCallback_Failure() {
        super("QueryCallback_Failure");
      }

      @Override
      public QueryCallback_Failure_args getEmptyArgsInstance() {
        return new QueryCallback_Failure_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, QueryCallback_Failure_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.QueryCallback_Failure(args.qcallback, args.error_code, args.error_message,resultHandler);
      }
    }

    public static class SchemeHandlerFactory_Register<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, SchemeHandlerFactory_Register_args, Void> {
      public SchemeHandlerFactory_Register() {
        super("SchemeHandlerFactory_Register");
      }

      @Override
      public SchemeHandlerFactory_Register_args getEmptyArgsInstance() {
        return new SchemeHandlerFactory_Register_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, SchemeHandlerFactory_Register_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.SchemeHandlerFactory_Register(args.schemeName, args.domainName, args.schemeHandlerFactory,resultHandler);
      }
    }

    public static class ClearAllSchemeHandlerFactories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ClearAllSchemeHandlerFactories_args, Void> {
      public ClearAllSchemeHandlerFactories() {
        super("ClearAllSchemeHandlerFactories");
      }

      @Override
      public ClearAllSchemeHandlerFactories_args getEmptyArgsInstance() {
        return new ClearAllSchemeHandlerFactories_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, ClearAllSchemeHandlerFactories_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ClearAllSchemeHandlerFactories(resultHandler);
      }
    }

    public static class RequestContext_ClearCertificateExceptions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestContext_ClearCertificateExceptions_args, Void> {
      public RequestContext_ClearCertificateExceptions() {
        super("RequestContext_ClearCertificateExceptions");
      }

      @Override
      public RequestContext_ClearCertificateExceptions_args getEmptyArgsInstance() {
        return new RequestContext_ClearCertificateExceptions_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, RequestContext_ClearCertificateExceptions_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.RequestContext_ClearCertificateExceptions(args.bid, args.completionCallback,resultHandler);
      }
    }

    public static class RequestContext_CloseAllConnections<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RequestContext_CloseAllConnections_args, Void> {
      public RequestContext_CloseAllConnections() {
        super("RequestContext_CloseAllConnections");
      }

      @Override
      public RequestContext_CloseAllConnections_args getEmptyArgsInstance() {
        return new RequestContext_CloseAllConnections_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, RequestContext_CloseAllConnections_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.RequestContext_CloseAllConnections(args.bid, args.completionCallback,resultHandler);
      }
    }

    public static class CookieManager_Create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieManager_Create_args, com.jetbrains.cef.remote.thrift_codegen.RObject> {
      public CookieManager_Create() {
        super("CookieManager_Create");
      }

      @Override
      public CookieManager_Create_args getEmptyArgsInstance() {
        return new CookieManager_Create_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.RObject o) {
            CookieManager_Create_result result = new CookieManager_Create_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieManager_Create_result result = new CookieManager_Create_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieManager_Create_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
        iface.CookieManager_Create(resultHandler);
      }
    }

    public static class CookieManager_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieManager_Dispose_args, Void> {
      public CookieManager_Dispose() {
        super("CookieManager_Dispose");
      }

      @Override
      public CookieManager_Dispose_args getEmptyArgsInstance() {
        return new CookieManager_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, CookieManager_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.CookieManager_Dispose(args.cookieManager,resultHandler);
      }
    }

    public static class CookieManager_VisitAllCookies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieManager_VisitAllCookies_args, java.lang.Boolean> {
      public CookieManager_VisitAllCookies() {
        super("CookieManager_VisitAllCookies");
      }

      @Override
      public CookieManager_VisitAllCookies_args getEmptyArgsInstance() {
        return new CookieManager_VisitAllCookies_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            CookieManager_VisitAllCookies_result result = new CookieManager_VisitAllCookies_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieManager_VisitAllCookies_result result = new CookieManager_VisitAllCookies_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieManager_VisitAllCookies_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CookieManager_VisitAllCookies(args.cookieManager, args.visitor,resultHandler);
      }
    }

    public static class CookieManager_VisitUrlCookies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieManager_VisitUrlCookies_args, java.lang.Boolean> {
      public CookieManager_VisitUrlCookies() {
        super("CookieManager_VisitUrlCookies");
      }

      @Override
      public CookieManager_VisitUrlCookies_args getEmptyArgsInstance() {
        return new CookieManager_VisitUrlCookies_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            CookieManager_VisitUrlCookies_result result = new CookieManager_VisitUrlCookies_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieManager_VisitUrlCookies_result result = new CookieManager_VisitUrlCookies_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieManager_VisitUrlCookies_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CookieManager_VisitUrlCookies(args.cookieManager, args.visitor, args.url, args.includeHttpOnly,resultHandler);
      }
    }

    public static class CookieManager_SetCookie<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieManager_SetCookie_args, java.lang.Boolean> {
      public CookieManager_SetCookie() {
        super("CookieManager_SetCookie");
      }

      @Override
      public CookieManager_SetCookie_args getEmptyArgsInstance() {
        return new CookieManager_SetCookie_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            CookieManager_SetCookie_result result = new CookieManager_SetCookie_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieManager_SetCookie_result result = new CookieManager_SetCookie_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieManager_SetCookie_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CookieManager_SetCookie(args.cookieManager, args.url, args.cookie,resultHandler);
      }
    }

    public static class CookieManager_DeleteCookies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieManager_DeleteCookies_args, java.lang.Boolean> {
      public CookieManager_DeleteCookies() {
        super("CookieManager_DeleteCookies");
      }

      @Override
      public CookieManager_DeleteCookies_args getEmptyArgsInstance() {
        return new CookieManager_DeleteCookies_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            CookieManager_DeleteCookies_result result = new CookieManager_DeleteCookies_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieManager_DeleteCookies_result result = new CookieManager_DeleteCookies_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieManager_DeleteCookies_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CookieManager_DeleteCookies(args.cookieManager, args.url, args.cookieName,resultHandler);
      }
    }

    public static class CookieManager_FlushStore<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CookieManager_FlushStore_args, java.lang.Boolean> {
      public CookieManager_FlushStore() {
        super("CookieManager_FlushStore");
      }

      @Override
      public CookieManager_FlushStore_args getEmptyArgsInstance() {
        return new CookieManager_FlushStore_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            CookieManager_FlushStore_result result = new CookieManager_FlushStore_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CookieManager_FlushStore_result result = new CookieManager_FlushStore_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, CookieManager_FlushStore_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.CookieManager_FlushStore(args.cookieManager, args.completionCallback,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_args implements org.apache.thrift.TBase<connect_args, connect_args._Fields>, java.io.Serializable, Cloneable, Comparable<connect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_args");

    private static final org.apache.thrift.protocol.TField BACKWARD_CONNECTION_PIPE_FIELD_DESC = new org.apache.thrift.protocol.TField("backwardConnectionPipe", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("isMaster", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String backwardConnectionPipe; // required
    public boolean isMaster; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BACKWARD_CONNECTION_PIPE((short)1, "backwardConnectionPipe"),
      IS_MASTER((short)2, "isMaster");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BACKWARD_CONNECTION_PIPE
            return BACKWARD_CONNECTION_PIPE;
          case 2: // IS_MASTER
            return IS_MASTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISMASTER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BACKWARD_CONNECTION_PIPE, new org.apache.thrift.meta_data.FieldMetaData("backwardConnectionPipe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_MASTER, new org.apache.thrift.meta_data.FieldMetaData("isMaster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_args.class, metaDataMap);
    }

    public connect_args() {
    }

    public connect_args(
      java.lang.String backwardConnectionPipe,
      boolean isMaster)
    {
      this();
      this.backwardConnectionPipe = backwardConnectionPipe;
      this.isMaster = isMaster;
      setIsMasterIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_args(connect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBackwardConnectionPipe()) {
        this.backwardConnectionPipe = other.backwardConnectionPipe;
      }
      this.isMaster = other.isMaster;
    }

    @Override
    public connect_args deepCopy() {
      return new connect_args(this);
    }

    @Override
    public void clear() {
      this.backwardConnectionPipe = null;
      setIsMasterIsSet(false);
      this.isMaster = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBackwardConnectionPipe() {
      return this.backwardConnectionPipe;
    }

    public connect_args setBackwardConnectionPipe(@org.apache.thrift.annotation.Nullable java.lang.String backwardConnectionPipe) {
      this.backwardConnectionPipe = backwardConnectionPipe;
      return this;
    }

    public void unsetBackwardConnectionPipe() {
      this.backwardConnectionPipe = null;
    }

    /** Returns true if field backwardConnectionPipe is set (has been assigned a value) and false otherwise */
    public boolean isSetBackwardConnectionPipe() {
      return this.backwardConnectionPipe != null;
    }

    public void setBackwardConnectionPipeIsSet(boolean value) {
      if (!value) {
        this.backwardConnectionPipe = null;
      }
    }

    public boolean isIsMaster() {
      return this.isMaster;
    }

    public connect_args setIsMaster(boolean isMaster) {
      this.isMaster = isMaster;
      setIsMasterIsSet(true);
      return this;
    }

    public void unsetIsMaster() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMASTER_ISSET_ID);
    }

    /** Returns true if field isMaster is set (has been assigned a value) and false otherwise */
    public boolean isSetIsMaster() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMASTER_ISSET_ID);
    }

    public void setIsMasterIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMASTER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BACKWARD_CONNECTION_PIPE:
        if (value == null) {
          unsetBackwardConnectionPipe();
        } else {
          setBackwardConnectionPipe((java.lang.String)value);
        }
        break;

      case IS_MASTER:
        if (value == null) {
          unsetIsMaster();
        } else {
          setIsMaster((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BACKWARD_CONNECTION_PIPE:
        return getBackwardConnectionPipe();

      case IS_MASTER:
        return isIsMaster();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BACKWARD_CONNECTION_PIPE:
        return isSetBackwardConnectionPipe();
      case IS_MASTER:
        return isSetIsMaster();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_args)
        return this.equals((connect_args)that);
      return false;
    }

    public boolean equals(connect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_backwardConnectionPipe = true && this.isSetBackwardConnectionPipe();
      boolean that_present_backwardConnectionPipe = true && that.isSetBackwardConnectionPipe();
      if (this_present_backwardConnectionPipe || that_present_backwardConnectionPipe) {
        if (!(this_present_backwardConnectionPipe && that_present_backwardConnectionPipe))
          return false;
        if (!this.backwardConnectionPipe.equals(that.backwardConnectionPipe))
          return false;
      }

      boolean this_present_isMaster = true;
      boolean that_present_isMaster = true;
      if (this_present_isMaster || that_present_isMaster) {
        if (!(this_present_isMaster && that_present_isMaster))
          return false;
        if (this.isMaster != that.isMaster)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBackwardConnectionPipe()) ? 131071 : 524287);
      if (isSetBackwardConnectionPipe())
        hashCode = hashCode * 8191 + backwardConnectionPipe.hashCode();

      hashCode = hashCode * 8191 + ((isMaster) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(connect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBackwardConnectionPipe(), other.isSetBackwardConnectionPipe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBackwardConnectionPipe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backwardConnectionPipe, other.backwardConnectionPipe);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsMaster(), other.isSetIsMaster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsMaster()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMaster, other.isMaster);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_args(");
      boolean first = true;

      sb.append("backwardConnectionPipe:");
      if (this.backwardConnectionPipe == null) {
        sb.append("null");
      } else {
        sb.append(this.backwardConnectionPipe);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isMaster:");
      sb.append(this.isMaster);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsStandardScheme getScheme() {
        return new connect_argsStandardScheme();
      }
    }

    private static class connect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BACKWARD_CONNECTION_PIPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.backwardConnectionPipe = iprot.readString();
                struct.setBackwardConnectionPipeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_MASTER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isMaster = iprot.readBool();
                struct.setIsMasterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.backwardConnectionPipe != null) {
          oprot.writeFieldBegin(BACKWARD_CONNECTION_PIPE_FIELD_DESC);
          oprot.writeString(struct.backwardConnectionPipe);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_MASTER_FIELD_DESC);
        oprot.writeBool(struct.isMaster);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsTupleScheme getScheme() {
        return new connect_argsTupleScheme();
      }
    }

    private static class connect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBackwardConnectionPipe()) {
          optionals.set(0);
        }
        if (struct.isSetIsMaster()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBackwardConnectionPipe()) {
          oprot.writeString(struct.backwardConnectionPipe);
        }
        if (struct.isSetIsMaster()) {
          oprot.writeBool(struct.isMaster);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.backwardConnectionPipe = iprot.readString();
          struct.setBackwardConnectionPipeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isMaster = iprot.readBool();
          struct.setIsMasterIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_result implements org.apache.thrift.TBase<connect_result, connect_result._Fields>, java.io.Serializable, Cloneable, Comparable<connect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_result.class, metaDataMap);
    }

    public connect_result() {
    }

    public connect_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_result(connect_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public connect_result deepCopy() {
      return new connect_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public connect_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_result)
        return this.equals((connect_result)that);
      return false;
    }

    public boolean equals(connect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(connect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultStandardScheme getScheme() {
        return new connect_resultStandardScheme();
      }
    }

    private static class connect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultTupleScheme getScheme() {
        return new connect_resultTupleScheme();
      }
    }

    private static class connect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connectTcp_args implements org.apache.thrift.TBase<connectTcp_args, connectTcp_args._Fields>, java.io.Serializable, Cloneable, Comparable<connectTcp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectTcp_args");

    private static final org.apache.thrift.protocol.TField BACKWARD_CONNECTION_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("backwardConnectionPort", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField IS_MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("isMaster", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connectTcp_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connectTcp_argsTupleSchemeFactory();

    public int backwardConnectionPort; // required
    public boolean isMaster; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BACKWARD_CONNECTION_PORT((short)1, "backwardConnectionPort"),
      IS_MASTER((short)2, "isMaster");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BACKWARD_CONNECTION_PORT
            return BACKWARD_CONNECTION_PORT;
          case 2: // IS_MASTER
            return IS_MASTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BACKWARDCONNECTIONPORT_ISSET_ID = 0;
    private static final int __ISMASTER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BACKWARD_CONNECTION_PORT, new org.apache.thrift.meta_data.FieldMetaData("backwardConnectionPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IS_MASTER, new org.apache.thrift.meta_data.FieldMetaData("isMaster", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectTcp_args.class, metaDataMap);
    }

    public connectTcp_args() {
    }

    public connectTcp_args(
      int backwardConnectionPort,
      boolean isMaster)
    {
      this();
      this.backwardConnectionPort = backwardConnectionPort;
      setBackwardConnectionPortIsSet(true);
      this.isMaster = isMaster;
      setIsMasterIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connectTcp_args(connectTcp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.backwardConnectionPort = other.backwardConnectionPort;
      this.isMaster = other.isMaster;
    }

    @Override
    public connectTcp_args deepCopy() {
      return new connectTcp_args(this);
    }

    @Override
    public void clear() {
      setBackwardConnectionPortIsSet(false);
      this.backwardConnectionPort = 0;
      setIsMasterIsSet(false);
      this.isMaster = false;
    }

    public int getBackwardConnectionPort() {
      return this.backwardConnectionPort;
    }

    public connectTcp_args setBackwardConnectionPort(int backwardConnectionPort) {
      this.backwardConnectionPort = backwardConnectionPort;
      setBackwardConnectionPortIsSet(true);
      return this;
    }

    public void unsetBackwardConnectionPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKWARDCONNECTIONPORT_ISSET_ID);
    }

    /** Returns true if field backwardConnectionPort is set (has been assigned a value) and false otherwise */
    public boolean isSetBackwardConnectionPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKWARDCONNECTIONPORT_ISSET_ID);
    }

    public void setBackwardConnectionPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKWARDCONNECTIONPORT_ISSET_ID, value);
    }

    public boolean isIsMaster() {
      return this.isMaster;
    }

    public connectTcp_args setIsMaster(boolean isMaster) {
      this.isMaster = isMaster;
      setIsMasterIsSet(true);
      return this;
    }

    public void unsetIsMaster() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMASTER_ISSET_ID);
    }

    /** Returns true if field isMaster is set (has been assigned a value) and false otherwise */
    public boolean isSetIsMaster() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMASTER_ISSET_ID);
    }

    public void setIsMasterIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMASTER_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BACKWARD_CONNECTION_PORT:
        if (value == null) {
          unsetBackwardConnectionPort();
        } else {
          setBackwardConnectionPort((java.lang.Integer)value);
        }
        break;

      case IS_MASTER:
        if (value == null) {
          unsetIsMaster();
        } else {
          setIsMaster((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BACKWARD_CONNECTION_PORT:
        return getBackwardConnectionPort();

      case IS_MASTER:
        return isIsMaster();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BACKWARD_CONNECTION_PORT:
        return isSetBackwardConnectionPort();
      case IS_MASTER:
        return isSetIsMaster();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connectTcp_args)
        return this.equals((connectTcp_args)that);
      return false;
    }

    public boolean equals(connectTcp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_backwardConnectionPort = true;
      boolean that_present_backwardConnectionPort = true;
      if (this_present_backwardConnectionPort || that_present_backwardConnectionPort) {
        if (!(this_present_backwardConnectionPort && that_present_backwardConnectionPort))
          return false;
        if (this.backwardConnectionPort != that.backwardConnectionPort)
          return false;
      }

      boolean this_present_isMaster = true;
      boolean that_present_isMaster = true;
      if (this_present_isMaster || that_present_isMaster) {
        if (!(this_present_isMaster && that_present_isMaster))
          return false;
        if (this.isMaster != that.isMaster)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + backwardConnectionPort;

      hashCode = hashCode * 8191 + ((isMaster) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(connectTcp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBackwardConnectionPort(), other.isSetBackwardConnectionPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBackwardConnectionPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backwardConnectionPort, other.backwardConnectionPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsMaster(), other.isSetIsMaster());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsMaster()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMaster, other.isMaster);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connectTcp_args(");
      boolean first = true;

      sb.append("backwardConnectionPort:");
      sb.append(this.backwardConnectionPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isMaster:");
      sb.append(this.isMaster);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connectTcp_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connectTcp_argsStandardScheme getScheme() {
        return new connectTcp_argsStandardScheme();
      }
    }

    private static class connectTcp_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connectTcp_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connectTcp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BACKWARD_CONNECTION_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.backwardConnectionPort = iprot.readI32();
                struct.setBackwardConnectionPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_MASTER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isMaster = iprot.readBool();
                struct.setIsMasterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connectTcp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BACKWARD_CONNECTION_PORT_FIELD_DESC);
        oprot.writeI32(struct.backwardConnectionPort);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_MASTER_FIELD_DESC);
        oprot.writeBool(struct.isMaster);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connectTcp_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connectTcp_argsTupleScheme getScheme() {
        return new connectTcp_argsTupleScheme();
      }
    }

    private static class connectTcp_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connectTcp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connectTcp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBackwardConnectionPort()) {
          optionals.set(0);
        }
        if (struct.isSetIsMaster()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBackwardConnectionPort()) {
          oprot.writeI32(struct.backwardConnectionPort);
        }
        if (struct.isSetIsMaster()) {
          oprot.writeBool(struct.isMaster);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connectTcp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.backwardConnectionPort = iprot.readI32();
          struct.setBackwardConnectionPortIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isMaster = iprot.readBool();
          struct.setIsMasterIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connectTcp_result implements org.apache.thrift.TBase<connectTcp_result, connectTcp_result._Fields>, java.io.Serializable, Cloneable, Comparable<connectTcp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connectTcp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connectTcp_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connectTcp_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connectTcp_result.class, metaDataMap);
    }

    public connectTcp_result() {
    }

    public connectTcp_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connectTcp_result(connectTcp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public connectTcp_result deepCopy() {
      return new connectTcp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public connectTcp_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connectTcp_result)
        return this.equals((connectTcp_result)that);
      return false;
    }

    public boolean equals(connectTcp_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(connectTcp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connectTcp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connectTcp_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connectTcp_resultStandardScheme getScheme() {
        return new connectTcp_resultStandardScheme();
      }
    }

    private static class connectTcp_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connectTcp_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connectTcp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connectTcp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connectTcp_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connectTcp_resultTupleScheme getScheme() {
        return new connectTcp_resultTupleScheme();
      }
    }

    private static class connectTcp_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connectTcp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connectTcp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connectTcp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class log_args implements org.apache.thrift.TBase<log_args, log_args._Fields>, java.io.Serializable, Cloneable, Comparable<log_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_args.class, metaDataMap);
    }

    public log_args() {
    }

    public log_args(
      java.lang.String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_args(log_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    @Override
    public log_args deepCopy() {
      return new log_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMsg() {
      return this.msg;
    }

    public log_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof log_args)
        return this.equals((log_args)that);
      return false;
    }

    public boolean equals(log_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
      if (isSetMsg())
        hashCode = hashCode * 8191 + msg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(log_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public log_argsStandardScheme getScheme() {
        return new log_argsStandardScheme();
      }
    }

    private static class log_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<log_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, log_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public log_argsTupleScheme getScheme() {
        return new log_argsTupleScheme();
      }
    }

    private static class log_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<log_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class echo_args implements org.apache.thrift.TBase<echo_args, echo_args._Fields>, java.io.Serializable, Cloneable, Comparable<echo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new echo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new echo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_args.class, metaDataMap);
    }

    public echo_args() {
    }

    public echo_args(
      java.lang.String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_args(echo_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    @Override
    public echo_args deepCopy() {
      return new echo_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMsg() {
      return this.msg;
    }

    public echo_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof echo_args)
        return this.equals((echo_args)that);
      return false;
    }

    public boolean equals(echo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
      if (isSetMsg())
        hashCode = hashCode * 8191 + msg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(echo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("echo_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public echo_argsStandardScheme getScheme() {
        return new echo_argsStandardScheme();
      }
    }

    private static class echo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<echo_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public echo_argsTupleScheme getScheme() {
        return new echo_argsTupleScheme();
      }
    }

    private static class echo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<echo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class echo_result implements org.apache.thrift.TBase<echo_result, echo_result._Fields>, java.io.Serializable, Cloneable, Comparable<echo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("echo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new echo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new echo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(echo_result.class, metaDataMap);
    }

    public echo_result() {
    }

    public echo_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public echo_result(echo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public echo_result deepCopy() {
      return new echo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public echo_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof echo_result)
        return this.equals((echo_result)that);
      return false;
    }

    public boolean equals(echo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(echo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("echo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class echo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public echo_resultStandardScheme getScheme() {
        return new echo_resultStandardScheme();
      }
    }

    private static class echo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<echo_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, echo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, echo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class echo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public echo_resultTupleScheme getScheme() {
        return new echo_resultTupleScheme();
      }
    }

    private static class echo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<echo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, echo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class version_args implements org.apache.thrift.TBase<version_args, version_args._Fields>, java.io.Serializable, Cloneable, Comparable<version_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("version_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new version_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new version_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(version_args.class, metaDataMap);
    }

    public version_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public version_args(version_args other) {
    }

    @Override
    public version_args deepCopy() {
      return new version_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof version_args)
        return this.equals((version_args)that);
      return false;
    }

    public boolean equals(version_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(version_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("version_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class version_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public version_argsStandardScheme getScheme() {
        return new version_argsStandardScheme();
      }
    }

    private static class version_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<version_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, version_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, version_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class version_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public version_argsTupleScheme getScheme() {
        return new version_argsTupleScheme();
      }
    }

    private static class version_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<version_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, version_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, version_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class version_result implements org.apache.thrift.TBase<version_result, version_result._Fields>, java.io.Serializable, Cloneable, Comparable<version_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("version_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new version_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new version_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(version_result.class, metaDataMap);
    }

    public version_result() {
    }

    public version_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public version_result(version_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public version_result deepCopy() {
      return new version_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public version_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof version_result)
        return this.equals((version_result)that);
      return false;
    }

    public boolean equals(version_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(version_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("version_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class version_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public version_resultStandardScheme getScheme() {
        return new version_resultStandardScheme();
      }
    }

    private static class version_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<version_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, version_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, version_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class version_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public version_resultTupleScheme getScheme() {
        return new version_resultTupleScheme();
      }
    }

    private static class version_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<version_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, version_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, version_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class state_args implements org.apache.thrift.TBase<state_args, state_args._Fields>, java.io.Serializable, Cloneable, Comparable<state_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("state_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new state_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new state_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(state_args.class, metaDataMap);
    }

    public state_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public state_args(state_args other) {
    }

    @Override
    public state_args deepCopy() {
      return new state_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof state_args)
        return this.equals((state_args)that);
      return false;
    }

    public boolean equals(state_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(state_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("state_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class state_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public state_argsStandardScheme getScheme() {
        return new state_argsStandardScheme();
      }
    }

    private static class state_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<state_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, state_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class state_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public state_argsTupleScheme getScheme() {
        return new state_argsTupleScheme();
      }
    }

    private static class state_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<state_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, state_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class state_result implements org.apache.thrift.TBase<state_result, state_result._Fields>, java.io.Serializable, Cloneable, Comparable<state_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("state_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new state_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new state_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(state_result.class, metaDataMap);
    }

    public state_result() {
    }

    public state_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public state_result(state_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public state_result deepCopy() {
      return new state_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public state_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof state_result)
        return this.equals((state_result)that);
      return false;
    }

    public boolean equals(state_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(state_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("state_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class state_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public state_resultStandardScheme getScheme() {
        return new state_resultStandardScheme();
      }
    }

    private static class state_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<state_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, state_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class state_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public state_resultTupleScheme getScheme() {
        return new state_resultTupleScheme();
      }
    }

    private static class state_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<state_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, state_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class stop_args implements org.apache.thrift.TBase<stop_args, stop_args._Fields>, java.io.Serializable, Cloneable, Comparable<stop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stop_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stop_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_args.class, metaDataMap);
    }

    public stop_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_args(stop_args other) {
    }

    @Override
    public stop_args deepCopy() {
      return new stop_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof stop_args)
        return this.equals((stop_args)that);
      return false;
    }

    public boolean equals(stop_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(stop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stop_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public stop_argsStandardScheme getScheme() {
        return new stop_argsStandardScheme();
      }
    }

    private static class stop_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<stop_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public stop_argsTupleScheme getScheme() {
        return new stop_argsTupleScheme();
      }
    }

    private static class stop_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<stop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_Create_args implements org.apache.thrift.TBase<Browser_Create_args, Browser_Create_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_Create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_Create_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLERS_MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("handlersMask", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_CONTEXT_HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestContextHandler", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_Create_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_Create_argsTupleSchemeFactory();

    public int cid; // required
    public int handlersMask; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      HANDLERS_MASK((short)2, "handlersMask"),
      REQUEST_CONTEXT_HANDLER((short)3, "requestContextHandler");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // HANDLERS_MASK
            return HANDLERS_MASK;
          case 3: // REQUEST_CONTEXT_HANDLER
            return REQUEST_CONTEXT_HANDLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private static final int __HANDLERSMASK_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HANDLERS_MASK, new org.apache.thrift.meta_data.FieldMetaData("handlersMask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUEST_CONTEXT_HANDLER, new org.apache.thrift.meta_data.FieldMetaData("requestContextHandler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_Create_args.class, metaDataMap);
    }

    public Browser_Create_args() {
    }

    public Browser_Create_args(
      int cid,
      int handlersMask,
      com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.handlersMask = handlersMask;
      setHandlersMaskIsSet(true);
      this.requestContextHandler = requestContextHandler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_Create_args(Browser_Create_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      this.handlersMask = other.handlersMask;
      if (other.isSetRequestContextHandler()) {
        this.requestContextHandler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.requestContextHandler);
      }
    }

    @Override
    public Browser_Create_args deepCopy() {
      return new Browser_Create_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      setHandlersMaskIsSet(false);
      this.handlersMask = 0;
      this.requestContextHandler = null;
    }

    public int getCid() {
      return this.cid;
    }

    public Browser_Create_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    public int getHandlersMask() {
      return this.handlersMask;
    }

    public Browser_Create_args setHandlersMask(int handlersMask) {
      this.handlersMask = handlersMask;
      setHandlersMaskIsSet(true);
      return this;
    }

    public void unsetHandlersMask() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HANDLERSMASK_ISSET_ID);
    }

    /** Returns true if field handlersMask is set (has been assigned a value) and false otherwise */
    public boolean isSetHandlersMask() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HANDLERSMASK_ISSET_ID);
    }

    public void setHandlersMaskIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HANDLERSMASK_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequestContextHandler() {
      return this.requestContextHandler;
    }

    public Browser_Create_args setRequestContextHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject requestContextHandler) {
      this.requestContextHandler = requestContextHandler;
      return this;
    }

    public void unsetRequestContextHandler() {
      this.requestContextHandler = null;
    }

    /** Returns true if field requestContextHandler is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestContextHandler() {
      return this.requestContextHandler != null;
    }

    public void setRequestContextHandlerIsSet(boolean value) {
      if (!value) {
        this.requestContextHandler = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((java.lang.Integer)value);
        }
        break;

      case HANDLERS_MASK:
        if (value == null) {
          unsetHandlersMask();
        } else {
          setHandlersMask((java.lang.Integer)value);
        }
        break;

      case REQUEST_CONTEXT_HANDLER:
        if (value == null) {
          unsetRequestContextHandler();
        } else {
          setRequestContextHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return getCid();

      case HANDLERS_MASK:
        return getHandlersMask();

      case REQUEST_CONTEXT_HANDLER:
        return getRequestContextHandler();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case HANDLERS_MASK:
        return isSetHandlersMask();
      case REQUEST_CONTEXT_HANDLER:
        return isSetRequestContextHandler();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_Create_args)
        return this.equals((Browser_Create_args)that);
      return false;
    }

    public boolean equals(Browser_Create_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_handlersMask = true;
      boolean that_present_handlersMask = true;
      if (this_present_handlersMask || that_present_handlersMask) {
        if (!(this_present_handlersMask && that_present_handlersMask))
          return false;
        if (this.handlersMask != that.handlersMask)
          return false;
      }

      boolean this_present_requestContextHandler = true && this.isSetRequestContextHandler();
      boolean that_present_requestContextHandler = true && that.isSetRequestContextHandler();
      if (this_present_requestContextHandler || that_present_requestContextHandler) {
        if (!(this_present_requestContextHandler && that_present_requestContextHandler))
          return false;
        if (!this.requestContextHandler.equals(that.requestContextHandler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + cid;

      hashCode = hashCode * 8191 + handlersMask;

      hashCode = hashCode * 8191 + ((isSetRequestContextHandler()) ? 131071 : 524287);
      if (isSetRequestContextHandler())
        hashCode = hashCode * 8191 + requestContextHandler.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_Create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCid(), other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHandlersMask(), other.isSetHandlersMask());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandlersMask()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handlersMask, other.handlersMask);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetRequestContextHandler(), other.isSetRequestContextHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestContextHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestContextHandler, other.requestContextHandler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_Create_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("handlersMask:");
      sb.append(this.handlersMask);
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestContextHandler:");
      if (this.requestContextHandler == null) {
        sb.append("null");
      } else {
        sb.append(this.requestContextHandler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestContextHandler != null) {
        requestContextHandler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_Create_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Create_argsStandardScheme getScheme() {
        return new Browser_Create_argsStandardScheme();
      }
    }

    private static class Browser_Create_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_Create_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLERS_MASK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.handlersMask = iprot.readI32();
                struct.setHandlersMaskIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REQUEST_CONTEXT_HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestContextHandler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.requestContextHandler.read(iprot);
                struct.setRequestContextHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_Create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HANDLERS_MASK_FIELD_DESC);
        oprot.writeI32(struct.handlersMask);
        oprot.writeFieldEnd();
        if (struct.requestContextHandler != null) {
          oprot.writeFieldBegin(REQUEST_CONTEXT_HANDLER_FIELD_DESC);
          struct.requestContextHandler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_Create_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Create_argsTupleScheme getScheme() {
        return new Browser_Create_argsTupleScheme();
      }
    }

    private static class Browser_Create_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_Create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetHandlersMask()) {
          optionals.set(1);
        }
        if (struct.isSetRequestContextHandler()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
        if (struct.isSetHandlersMask()) {
          oprot.writeI32(struct.handlersMask);
        }
        if (struct.isSetRequestContextHandler()) {
          struct.requestContextHandler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handlersMask = iprot.readI32();
          struct.setHandlersMaskIsSet(true);
        }
        if (incoming.get(2)) {
          struct.requestContextHandler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.requestContextHandler.read(iprot);
          struct.setRequestContextHandlerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_Create_result implements org.apache.thrift.TBase<Browser_Create_result, Browser_Create_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_Create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_Create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_Create_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_Create_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_Create_result.class, metaDataMap);
    }

    public Browser_Create_result() {
    }

    public Browser_Create_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_Create_result(Browser_Create_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_Create_result deepCopy() {
      return new Browser_Create_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public Browser_Create_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_Create_result)
        return this.equals((Browser_Create_result)that);
      return false;
    }

    public boolean equals(Browser_Create_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_Create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_Create_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_Create_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Create_resultStandardScheme getScheme() {
        return new Browser_Create_resultStandardScheme();
      }
    }

    private static class Browser_Create_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_Create_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_Create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_Create_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Create_resultTupleScheme getScheme() {
        return new Browser_Create_resultTupleScheme();
      }
    }

    private static class Browser_Create_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_Create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_StartNativeCreation_args implements org.apache.thrift.TBase<Browser_StartNativeCreation_args, Browser_StartNativeCreation_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_StartNativeCreation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_StartNativeCreation_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_StartNativeCreation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_StartNativeCreation_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      URL((short)2, "url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_StartNativeCreation_args.class, metaDataMap);
    }

    public Browser_StartNativeCreation_args() {
    }

    public Browser_StartNativeCreation_args(
      int bid,
      java.lang.String url)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_StartNativeCreation_args(Browser_StartNativeCreation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    @Override
    public Browser_StartNativeCreation_args deepCopy() {
      return new Browser_StartNativeCreation_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.url = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_StartNativeCreation_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Browser_StartNativeCreation_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case URL:
        return getUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case URL:
        return isSetUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_StartNativeCreation_args)
        return this.equals((Browser_StartNativeCreation_args)that);
      return false;
    }

    public boolean equals(Browser_StartNativeCreation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_StartNativeCreation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_StartNativeCreation_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_StartNativeCreation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StartNativeCreation_argsStandardScheme getScheme() {
        return new Browser_StartNativeCreation_argsStandardScheme();
      }
    }

    private static class Browser_StartNativeCreation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_StartNativeCreation_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_StartNativeCreation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_StartNativeCreation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_StartNativeCreation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StartNativeCreation_argsTupleScheme getScheme() {
        return new Browser_StartNativeCreation_argsTupleScheme();
      }
    }

    private static class Browser_StartNativeCreation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_StartNativeCreation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_StartNativeCreation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_StartNativeCreation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_Close_args implements org.apache.thrift.TBase<Browser_Close_args, Browser_Close_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_Close_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_Close_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_Close_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_Close_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_Close_args.class, metaDataMap);
    }

    public Browser_Close_args() {
    }

    public Browser_Close_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_Close_args(Browser_Close_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_Close_args deepCopy() {
      return new Browser_Close_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_Close_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_Close_args)
        return this.equals((Browser_Close_args)that);
      return false;
    }

    public boolean equals(Browser_Close_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_Close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_Close_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_Close_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Close_argsStandardScheme getScheme() {
        return new Browser_Close_argsStandardScheme();
      }
    }

    private static class Browser_Close_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_Close_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_Close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_Close_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_Close_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Close_argsTupleScheme getScheme() {
        return new Browser_Close_argsTupleScheme();
      }
    }

    private static class Browser_Close_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_Close_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_Close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_Close_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_Reload_args implements org.apache.thrift.TBase<Browser_Reload_args, Browser_Reload_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_Reload_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_Reload_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_Reload_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_Reload_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_Reload_args.class, metaDataMap);
    }

    public Browser_Reload_args() {
    }

    public Browser_Reload_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_Reload_args(Browser_Reload_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_Reload_args deepCopy() {
      return new Browser_Reload_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_Reload_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_Reload_args)
        return this.equals((Browser_Reload_args)that);
      return false;
    }

    public boolean equals(Browser_Reload_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_Reload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_Reload_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_Reload_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Reload_argsStandardScheme getScheme() {
        return new Browser_Reload_argsStandardScheme();
      }
    }

    private static class Browser_Reload_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_Reload_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_Reload_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Reload_argsTupleScheme getScheme() {
        return new Browser_Reload_argsTupleScheme();
      }
    }

    private static class Browser_Reload_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_Reload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_ReloadIgnoreCache_args implements org.apache.thrift.TBase<Browser_ReloadIgnoreCache_args, Browser_ReloadIgnoreCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_ReloadIgnoreCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_ReloadIgnoreCache_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_ReloadIgnoreCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_ReloadIgnoreCache_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_ReloadIgnoreCache_args.class, metaDataMap);
    }

    public Browser_ReloadIgnoreCache_args() {
    }

    public Browser_ReloadIgnoreCache_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_ReloadIgnoreCache_args(Browser_ReloadIgnoreCache_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_ReloadIgnoreCache_args deepCopy() {
      return new Browser_ReloadIgnoreCache_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_ReloadIgnoreCache_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_ReloadIgnoreCache_args)
        return this.equals((Browser_ReloadIgnoreCache_args)that);
      return false;
    }

    public boolean equals(Browser_ReloadIgnoreCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_ReloadIgnoreCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_ReloadIgnoreCache_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_ReloadIgnoreCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ReloadIgnoreCache_argsStandardScheme getScheme() {
        return new Browser_ReloadIgnoreCache_argsStandardScheme();
      }
    }

    private static class Browser_ReloadIgnoreCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_ReloadIgnoreCache_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_ReloadIgnoreCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ReloadIgnoreCache_argsTupleScheme getScheme() {
        return new Browser_ReloadIgnoreCache_argsTupleScheme();
      }
    }

    private static class Browser_ReloadIgnoreCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_ReloadIgnoreCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_LoadURL_args implements org.apache.thrift.TBase<Browser_LoadURL_args, Browser_LoadURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_LoadURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_LoadURL_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_LoadURL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_LoadURL_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      URL((short)2, "url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_LoadURL_args.class, metaDataMap);
    }

    public Browser_LoadURL_args() {
    }

    public Browser_LoadURL_args(
      int bid,
      java.lang.String url)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_LoadURL_args(Browser_LoadURL_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    @Override
    public Browser_LoadURL_args deepCopy() {
      return new Browser_LoadURL_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.url = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_LoadURL_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Browser_LoadURL_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case URL:
        return getUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case URL:
        return isSetUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_LoadURL_args)
        return this.equals((Browser_LoadURL_args)that);
      return false;
    }

    public boolean equals(Browser_LoadURL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_LoadURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_LoadURL_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_LoadURL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_LoadURL_argsStandardScheme getScheme() {
        return new Browser_LoadURL_argsStandardScheme();
      }
    }

    private static class Browser_LoadURL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_LoadURL_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_LoadURL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_LoadURL_argsTupleScheme getScheme() {
        return new Browser_LoadURL_argsTupleScheme();
      }
    }

    private static class Browser_LoadURL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_LoadURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetURL_args implements org.apache.thrift.TBase<Browser_GetURL_args, Browser_GetURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetURL_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetURL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetURL_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetURL_args.class, metaDataMap);
    }

    public Browser_GetURL_args() {
    }

    public Browser_GetURL_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetURL_args(Browser_GetURL_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_GetURL_args deepCopy() {
      return new Browser_GetURL_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GetURL_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetURL_args)
        return this.equals((Browser_GetURL_args)that);
      return false;
    }

    public boolean equals(Browser_GetURL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetURL_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetURL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_argsStandardScheme getScheme() {
        return new Browser_GetURL_argsStandardScheme();
      }
    }

    private static class Browser_GetURL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetURL_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetURL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_argsTupleScheme getScheme() {
        return new Browser_GetURL_argsTupleScheme();
      }
    }

    private static class Browser_GetURL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetURL_result implements org.apache.thrift.TBase<Browser_GetURL_result, Browser_GetURL_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetURL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetURL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetURL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetURL_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetURL_result.class, metaDataMap);
    }

    public Browser_GetURL_result() {
    }

    public Browser_GetURL_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetURL_result(Browser_GetURL_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public Browser_GetURL_result deepCopy() {
      return new Browser_GetURL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public Browser_GetURL_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetURL_result)
        return this.equals((Browser_GetURL_result)that);
      return false;
    }

    public boolean equals(Browser_GetURL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetURL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetURL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetURL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_resultStandardScheme getScheme() {
        return new Browser_GetURL_resultStandardScheme();
      }
    }

    private static class Browser_GetURL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetURL_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetURL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_resultTupleScheme getScheme() {
        return new Browser_GetURL_resultTupleScheme();
      }
    }

    private static class Browser_GetURL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetURL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_ExecuteJavaScript_args implements org.apache.thrift.TBase<Browser_ExecuteJavaScript_args, Browser_ExecuteJavaScript_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_ExecuteJavaScript_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_ExecuteJavaScript_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_ExecuteJavaScript_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_ExecuteJavaScript_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String code; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public int line; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      CODE((short)2, "code"),
      URL((short)3, "url"),
      LINE((short)4, "line");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // CODE
            return CODE;
          case 3: // URL
            return URL;
          case 4: // LINE
            return LINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __LINE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_ExecuteJavaScript_args.class, metaDataMap);
    }

    public Browser_ExecuteJavaScript_args() {
    }

    public Browser_ExecuteJavaScript_args(
      int bid,
      java.lang.String code,
      java.lang.String url,
      int line)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.code = code;
      this.url = url;
      this.line = line;
      setLineIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_ExecuteJavaScript_args(Browser_ExecuteJavaScript_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      this.line = other.line;
    }

    @Override
    public Browser_ExecuteJavaScript_args deepCopy() {
      return new Browser_ExecuteJavaScript_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.code = null;
      this.url = null;
      setLineIsSet(false);
      this.line = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_ExecuteJavaScript_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCode() {
      return this.code;
    }

    public Browser_ExecuteJavaScript_args setCode(@org.apache.thrift.annotation.Nullable java.lang.String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Browser_ExecuteJavaScript_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public int getLine() {
      return this.line;
    }

    public Browser_ExecuteJavaScript_args setLine(int line) {
      this.line = line;
      setLineIsSet(true);
      return this;
    }

    public void unsetLine() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    /** Returns true if field line is set (has been assigned a value) and false otherwise */
    public boolean isSetLine() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    public void setLineIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((java.lang.String)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case LINE:
        if (value == null) {
          unsetLine();
        } else {
          setLine((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case CODE:
        return getCode();

      case URL:
        return getUrl();

      case LINE:
        return getLine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case CODE:
        return isSetCode();
      case URL:
        return isSetUrl();
      case LINE:
        return isSetLine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_ExecuteJavaScript_args)
        return this.equals((Browser_ExecuteJavaScript_args)that);
      return false;
    }

    public boolean equals(Browser_ExecuteJavaScript_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_line = true;
      boolean that_present_line = true;
      if (this_present_line || that_present_line) {
        if (!(this_present_line && that_present_line))
          return false;
        if (this.line != that.line)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + line;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_ExecuteJavaScript_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCode(), other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLine(), other.isSetLine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, other.line);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_ExecuteJavaScript_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("line:");
      sb.append(this.line);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_ExecuteJavaScript_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ExecuteJavaScript_argsStandardScheme getScheme() {
        return new Browser_ExecuteJavaScript_argsStandardScheme();
      }
    }

    private static class Browser_ExecuteJavaScript_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_ExecuteJavaScript_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.line = iprot.readI32();
                struct.setLineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LINE_FIELD_DESC);
        oprot.writeI32(struct.line);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_ExecuteJavaScript_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ExecuteJavaScript_argsTupleScheme getScheme() {
        return new Browser_ExecuteJavaScript_argsTupleScheme();
      }
    }

    private static class Browser_ExecuteJavaScript_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_ExecuteJavaScript_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetUrl()) {
          optionals.set(2);
        }
        if (struct.isSetLine()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetLine()) {
          oprot.writeI32(struct.line);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.line = iprot.readI32();
          struct.setLineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_WasResized_args implements org.apache.thrift.TBase<Browser_WasResized_args, Browser_WasResized_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_WasResized_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_WasResized_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_WasResized_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_WasResized_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_WasResized_args.class, metaDataMap);
    }

    public Browser_WasResized_args() {
    }

    public Browser_WasResized_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_WasResized_args(Browser_WasResized_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_WasResized_args deepCopy() {
      return new Browser_WasResized_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_WasResized_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_WasResized_args)
        return this.equals((Browser_WasResized_args)that);
      return false;
    }

    public boolean equals(Browser_WasResized_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_WasResized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_WasResized_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_WasResized_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_WasResized_argsStandardScheme getScheme() {
        return new Browser_WasResized_argsStandardScheme();
      }
    }

    private static class Browser_WasResized_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_WasResized_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_WasResized_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_WasResized_argsTupleScheme getScheme() {
        return new Browser_WasResized_argsTupleScheme();
      }
    }

    private static class Browser_WasResized_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_WasResized_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_NotifyScreenInfoChanged_args implements org.apache.thrift.TBase<Browser_NotifyScreenInfoChanged_args, Browser_NotifyScreenInfoChanged_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_NotifyScreenInfoChanged_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_NotifyScreenInfoChanged_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_NotifyScreenInfoChanged_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_NotifyScreenInfoChanged_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_NotifyScreenInfoChanged_args.class, metaDataMap);
    }

    public Browser_NotifyScreenInfoChanged_args() {
    }

    public Browser_NotifyScreenInfoChanged_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_NotifyScreenInfoChanged_args(Browser_NotifyScreenInfoChanged_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_NotifyScreenInfoChanged_args deepCopy() {
      return new Browser_NotifyScreenInfoChanged_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_NotifyScreenInfoChanged_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_NotifyScreenInfoChanged_args)
        return this.equals((Browser_NotifyScreenInfoChanged_args)that);
      return false;
    }

    public boolean equals(Browser_NotifyScreenInfoChanged_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_NotifyScreenInfoChanged_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_NotifyScreenInfoChanged_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_NotifyScreenInfoChanged_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_NotifyScreenInfoChanged_argsStandardScheme getScheme() {
        return new Browser_NotifyScreenInfoChanged_argsStandardScheme();
      }
    }

    private static class Browser_NotifyScreenInfoChanged_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_NotifyScreenInfoChanged_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_NotifyScreenInfoChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_NotifyScreenInfoChanged_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_NotifyScreenInfoChanged_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_NotifyScreenInfoChanged_argsTupleScheme getScheme() {
        return new Browser_NotifyScreenInfoChanged_argsTupleScheme();
      }
    }

    private static class Browser_NotifyScreenInfoChanged_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_NotifyScreenInfoChanged_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_NotifyScreenInfoChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_NotifyScreenInfoChanged_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SendKeyEvent_args implements org.apache.thrift.TBase<Browser_SendKeyEvent_args, Browser_SendKeyEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SendKeyEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SendKeyEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MODIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiers", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField KEY_CHAR_FIELD_DESC = new org.apache.thrift.protocol.TField("key_char", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField SCAN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("scanCode", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField KEY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_code", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SendKeyEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SendKeyEvent_argsTupleSchemeFactory();

    public int bid; // required
    public int event_type; // required
    public int modifiers; // required
    public short key_char; // required
    public long scanCode; // required
    public int key_code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      EVENT_TYPE((short)2, "event_type"),
      MODIFIERS((short)3, "modifiers"),
      KEY_CHAR((short)4, "key_char"),
      SCAN_CODE((short)5, "scanCode"),
      KEY_CODE((short)6, "key_code");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // EVENT_TYPE
            return EVENT_TYPE;
          case 3: // MODIFIERS
            return MODIFIERS;
          case 4: // KEY_CHAR
            return KEY_CHAR;
          case 5: // SCAN_CODE
            return SCAN_CODE;
          case 6: // KEY_CODE
            return KEY_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __EVENT_TYPE_ISSET_ID = 1;
    private static final int __MODIFIERS_ISSET_ID = 2;
    private static final int __KEY_CHAR_ISSET_ID = 3;
    private static final int __SCANCODE_ISSET_ID = 4;
    private static final int __KEY_CODE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("event_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODIFIERS, new org.apache.thrift.meta_data.FieldMetaData("modifiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY_CHAR, new org.apache.thrift.meta_data.FieldMetaData("key_char", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SCAN_CODE, new org.apache.thrift.meta_data.FieldMetaData("scanCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.KEY_CODE, new org.apache.thrift.meta_data.FieldMetaData("key_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SendKeyEvent_args.class, metaDataMap);
    }

    public Browser_SendKeyEvent_args() {
    }

    public Browser_SendKeyEvent_args(
      int bid,
      int event_type,
      int modifiers,
      short key_char,
      long scanCode,
      int key_code)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      this.key_char = key_char;
      setKey_charIsSet(true);
      this.scanCode = scanCode;
      setScanCodeIsSet(true);
      this.key_code = key_code;
      setKey_codeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SendKeyEvent_args(Browser_SendKeyEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.event_type = other.event_type;
      this.modifiers = other.modifiers;
      this.key_char = other.key_char;
      this.scanCode = other.scanCode;
      this.key_code = other.key_code;
    }

    @Override
    public Browser_SendKeyEvent_args deepCopy() {
      return new Browser_SendKeyEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setEvent_typeIsSet(false);
      this.event_type = 0;
      setModifiersIsSet(false);
      this.modifiers = 0;
      setKey_charIsSet(false);
      this.key_char = 0;
      setScanCodeIsSet(false);
      this.scanCode = 0;
      setKey_codeIsSet(false);
      this.key_code = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SendKeyEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getEvent_type() {
      return this.event_type;
    }

    public Browser_SendKeyEvent_args setEvent_type(int event_type) {
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      return this;
    }

    public void unsetEvent_type() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    /** Returns true if field event_type is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent_type() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    public void setEvent_typeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID, value);
    }

    public int getModifiers() {
      return this.modifiers;
    }

    public Browser_SendKeyEvent_args setModifiers(int modifiers) {
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      return this;
    }

    public void unsetModifiers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    /** Returns true if field modifiers is set (has been assigned a value) and false otherwise */
    public boolean isSetModifiers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    public void setModifiersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIERS_ISSET_ID, value);
    }

    public short getKey_char() {
      return this.key_char;
    }

    public Browser_SendKeyEvent_args setKey_char(short key_char) {
      this.key_char = key_char;
      setKey_charIsSet(true);
      return this;
    }

    public void unsetKey_char() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_CHAR_ISSET_ID);
    }

    /** Returns true if field key_char is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_char() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_CHAR_ISSET_ID);
    }

    public void setKey_charIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_CHAR_ISSET_ID, value);
    }

    public long getScanCode() {
      return this.scanCode;
    }

    public Browser_SendKeyEvent_args setScanCode(long scanCode) {
      this.scanCode = scanCode;
      setScanCodeIsSet(true);
      return this;
    }

    public void unsetScanCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANCODE_ISSET_ID);
    }

    /** Returns true if field scanCode is set (has been assigned a value) and false otherwise */
    public boolean isSetScanCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANCODE_ISSET_ID);
    }

    public void setScanCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANCODE_ISSET_ID, value);
    }

    public int getKey_code() {
      return this.key_code;
    }

    public Browser_SendKeyEvent_args setKey_code(int key_code) {
      this.key_code = key_code;
      setKey_codeIsSet(true);
      return this;
    }

    public void unsetKey_code() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_CODE_ISSET_ID);
    }

    /** Returns true if field key_code is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_code() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_CODE_ISSET_ID);
    }

    public void setKey_codeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_CODE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case EVENT_TYPE:
        if (value == null) {
          unsetEvent_type();
        } else {
          setEvent_type((java.lang.Integer)value);
        }
        break;

      case MODIFIERS:
        if (value == null) {
          unsetModifiers();
        } else {
          setModifiers((java.lang.Integer)value);
        }
        break;

      case KEY_CHAR:
        if (value == null) {
          unsetKey_char();
        } else {
          setKey_char((java.lang.Short)value);
        }
        break;

      case SCAN_CODE:
        if (value == null) {
          unsetScanCode();
        } else {
          setScanCode((java.lang.Long)value);
        }
        break;

      case KEY_CODE:
        if (value == null) {
          unsetKey_code();
        } else {
          setKey_code((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case EVENT_TYPE:
        return getEvent_type();

      case MODIFIERS:
        return getModifiers();

      case KEY_CHAR:
        return getKey_char();

      case SCAN_CODE:
        return getScanCode();

      case KEY_CODE:
        return getKey_code();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case EVENT_TYPE:
        return isSetEvent_type();
      case MODIFIERS:
        return isSetModifiers();
      case KEY_CHAR:
        return isSetKey_char();
      case SCAN_CODE:
        return isSetScanCode();
      case KEY_CODE:
        return isSetKey_code();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SendKeyEvent_args)
        return this.equals((Browser_SendKeyEvent_args)that);
      return false;
    }

    public boolean equals(Browser_SendKeyEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_event_type = true;
      boolean that_present_event_type = true;
      if (this_present_event_type || that_present_event_type) {
        if (!(this_present_event_type && that_present_event_type))
          return false;
        if (this.event_type != that.event_type)
          return false;
      }

      boolean this_present_modifiers = true;
      boolean that_present_modifiers = true;
      if (this_present_modifiers || that_present_modifiers) {
        if (!(this_present_modifiers && that_present_modifiers))
          return false;
        if (this.modifiers != that.modifiers)
          return false;
      }

      boolean this_present_key_char = true;
      boolean that_present_key_char = true;
      if (this_present_key_char || that_present_key_char) {
        if (!(this_present_key_char && that_present_key_char))
          return false;
        if (this.key_char != that.key_char)
          return false;
      }

      boolean this_present_scanCode = true;
      boolean that_present_scanCode = true;
      if (this_present_scanCode || that_present_scanCode) {
        if (!(this_present_scanCode && that_present_scanCode))
          return false;
        if (this.scanCode != that.scanCode)
          return false;
      }

      boolean this_present_key_code = true;
      boolean that_present_key_code = true;
      if (this_present_key_code || that_present_key_code) {
        if (!(this_present_key_code && that_present_key_code))
          return false;
        if (this.key_code != that.key_code)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + event_type;

      hashCode = hashCode * 8191 + modifiers;

      hashCode = hashCode * 8191 + key_char;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scanCode);

      hashCode = hashCode * 8191 + key_code;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SendKeyEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEvent_type(), other.isSetEvent_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_type, other.event_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetModifiers(), other.isSetModifiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiers, other.modifiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetKey_char(), other.isSetKey_char());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_char()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_char, other.key_char);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetScanCode(), other.isSetScanCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanCode, other.scanCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetKey_code(), other.isSetKey_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_code, other.key_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SendKeyEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("event_type:");
      sb.append(this.event_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modifiers:");
      sb.append(this.modifiers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_char:");
      sb.append(this.key_char);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scanCode:");
      sb.append(this.scanCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_code:");
      sb.append(this.key_code);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SendKeyEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendKeyEvent_argsStandardScheme getScheme() {
        return new Browser_SendKeyEvent_argsStandardScheme();
      }
    }

    private static class Browser_SendKeyEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SendKeyEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.event_type = iprot.readI32();
                struct.setEvent_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODIFIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modifiers = iprot.readI32();
                struct.setModifiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // KEY_CHAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.key_char = iprot.readI16();
                struct.setKey_charIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SCAN_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.scanCode = iprot.readI64();
                struct.setScanCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // KEY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.key_code = iprot.readI32();
                struct.setKey_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.event_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODIFIERS_FIELD_DESC);
        oprot.writeI32(struct.modifiers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KEY_CHAR_FIELD_DESC);
        oprot.writeI16(struct.key_char);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SCAN_CODE_FIELD_DESC);
        oprot.writeI64(struct.scanCode);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KEY_CODE_FIELD_DESC);
        oprot.writeI32(struct.key_code);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SendKeyEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendKeyEvent_argsTupleScheme getScheme() {
        return new Browser_SendKeyEvent_argsTupleScheme();
      }
    }

    private static class Browser_SendKeyEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SendKeyEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEvent_type()) {
          optionals.set(1);
        }
        if (struct.isSetModifiers()) {
          optionals.set(2);
        }
        if (struct.isSetKey_char()) {
          optionals.set(3);
        }
        if (struct.isSetScanCode()) {
          optionals.set(4);
        }
        if (struct.isSetKey_code()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEvent_type()) {
          oprot.writeI32(struct.event_type);
        }
        if (struct.isSetModifiers()) {
          oprot.writeI32(struct.modifiers);
        }
        if (struct.isSetKey_char()) {
          oprot.writeI16(struct.key_char);
        }
        if (struct.isSetScanCode()) {
          oprot.writeI64(struct.scanCode);
        }
        if (struct.isSetKey_code()) {
          oprot.writeI32(struct.key_code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.event_type = iprot.readI32();
          struct.setEvent_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modifiers = iprot.readI32();
          struct.setModifiersIsSet(true);
        }
        if (incoming.get(3)) {
          struct.key_char = iprot.readI16();
          struct.setKey_charIsSet(true);
        }
        if (incoming.get(4)) {
          struct.scanCode = iprot.readI64();
          struct.setScanCodeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.key_code = iprot.readI32();
          struct.setKey_codeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SendMouseEvent_args implements org.apache.thrift.TBase<Browser_SendMouseEvent_args, Browser_SendMouseEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SendMouseEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SendMouseEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MODIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiers", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField CLICK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("click_count", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField BUTTON_FIELD_DESC = new org.apache.thrift.protocol.TField("button", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SendMouseEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SendMouseEvent_argsTupleSchemeFactory();

    public int bid; // required
    public int event_type; // required
    public int x; // required
    public int y; // required
    public int modifiers; // required
    public int click_count; // required
    public int button; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      EVENT_TYPE((short)2, "event_type"),
      X((short)3, "x"),
      Y((short)4, "y"),
      MODIFIERS((short)5, "modifiers"),
      CLICK_COUNT((short)6, "click_count"),
      BUTTON((short)7, "button");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // EVENT_TYPE
            return EVENT_TYPE;
          case 3: // X
            return X;
          case 4: // Y
            return Y;
          case 5: // MODIFIERS
            return MODIFIERS;
          case 6: // CLICK_COUNT
            return CLICK_COUNT;
          case 7: // BUTTON
            return BUTTON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __EVENT_TYPE_ISSET_ID = 1;
    private static final int __X_ISSET_ID = 2;
    private static final int __Y_ISSET_ID = 3;
    private static final int __MODIFIERS_ISSET_ID = 4;
    private static final int __CLICK_COUNT_ISSET_ID = 5;
    private static final int __BUTTON_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("event_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODIFIERS, new org.apache.thrift.meta_data.FieldMetaData("modifiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLICK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("click_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BUTTON, new org.apache.thrift.meta_data.FieldMetaData("button", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SendMouseEvent_args.class, metaDataMap);
    }

    public Browser_SendMouseEvent_args() {
    }

    public Browser_SendMouseEvent_args(
      int bid,
      int event_type,
      int x,
      int y,
      int modifiers,
      int click_count,
      int button)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      this.x = x;
      setXIsSet(true);
      this.y = y;
      setYIsSet(true);
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      this.click_count = click_count;
      setClick_countIsSet(true);
      this.button = button;
      setButtonIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SendMouseEvent_args(Browser_SendMouseEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.event_type = other.event_type;
      this.x = other.x;
      this.y = other.y;
      this.modifiers = other.modifiers;
      this.click_count = other.click_count;
      this.button = other.button;
    }

    @Override
    public Browser_SendMouseEvent_args deepCopy() {
      return new Browser_SendMouseEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setEvent_typeIsSet(false);
      this.event_type = 0;
      setXIsSet(false);
      this.x = 0;
      setYIsSet(false);
      this.y = 0;
      setModifiersIsSet(false);
      this.modifiers = 0;
      setClick_countIsSet(false);
      this.click_count = 0;
      setButtonIsSet(false);
      this.button = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SendMouseEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getEvent_type() {
      return this.event_type;
    }

    public Browser_SendMouseEvent_args setEvent_type(int event_type) {
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      return this;
    }

    public void unsetEvent_type() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    /** Returns true if field event_type is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent_type() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    public void setEvent_typeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID, value);
    }

    public int getX() {
      return this.x;
    }

    public Browser_SendMouseEvent_args setX(int x) {
      this.x = x;
      setXIsSet(true);
      return this;
    }

    public void unsetX() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
    }

    public void setXIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
    }

    public int getY() {
      return this.y;
    }

    public Browser_SendMouseEvent_args setY(int y) {
      this.y = y;
      setYIsSet(true);
      return this;
    }

    public void unsetY() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
    }

    /** Returns true if field y is set (has been assigned a value) and false otherwise */
    public boolean isSetY() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
    }

    public void setYIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
    }

    public int getModifiers() {
      return this.modifiers;
    }

    public Browser_SendMouseEvent_args setModifiers(int modifiers) {
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      return this;
    }

    public void unsetModifiers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    /** Returns true if field modifiers is set (has been assigned a value) and false otherwise */
    public boolean isSetModifiers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    public void setModifiersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIERS_ISSET_ID, value);
    }

    public int getClick_count() {
      return this.click_count;
    }

    public Browser_SendMouseEvent_args setClick_count(int click_count) {
      this.click_count = click_count;
      setClick_countIsSet(true);
      return this;
    }

    public void unsetClick_count() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLICK_COUNT_ISSET_ID);
    }

    /** Returns true if field click_count is set (has been assigned a value) and false otherwise */
    public boolean isSetClick_count() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLICK_COUNT_ISSET_ID);
    }

    public void setClick_countIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLICK_COUNT_ISSET_ID, value);
    }

    public int getButton() {
      return this.button;
    }

    public Browser_SendMouseEvent_args setButton(int button) {
      this.button = button;
      setButtonIsSet(true);
      return this;
    }

    public void unsetButton() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUTTON_ISSET_ID);
    }

    /** Returns true if field button is set (has been assigned a value) and false otherwise */
    public boolean isSetButton() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUTTON_ISSET_ID);
    }

    public void setButtonIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUTTON_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case EVENT_TYPE:
        if (value == null) {
          unsetEvent_type();
        } else {
          setEvent_type((java.lang.Integer)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((java.lang.Integer)value);
        }
        break;

      case Y:
        if (value == null) {
          unsetY();
        } else {
          setY((java.lang.Integer)value);
        }
        break;

      case MODIFIERS:
        if (value == null) {
          unsetModifiers();
        } else {
          setModifiers((java.lang.Integer)value);
        }
        break;

      case CLICK_COUNT:
        if (value == null) {
          unsetClick_count();
        } else {
          setClick_count((java.lang.Integer)value);
        }
        break;

      case BUTTON:
        if (value == null) {
          unsetButton();
        } else {
          setButton((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case EVENT_TYPE:
        return getEvent_type();

      case X:
        return getX();

      case Y:
        return getY();

      case MODIFIERS:
        return getModifiers();

      case CLICK_COUNT:
        return getClick_count();

      case BUTTON:
        return getButton();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case EVENT_TYPE:
        return isSetEvent_type();
      case X:
        return isSetX();
      case Y:
        return isSetY();
      case MODIFIERS:
        return isSetModifiers();
      case CLICK_COUNT:
        return isSetClick_count();
      case BUTTON:
        return isSetButton();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SendMouseEvent_args)
        return this.equals((Browser_SendMouseEvent_args)that);
      return false;
    }

    public boolean equals(Browser_SendMouseEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_event_type = true;
      boolean that_present_event_type = true;
      if (this_present_event_type || that_present_event_type) {
        if (!(this_present_event_type && that_present_event_type))
          return false;
        if (this.event_type != that.event_type)
          return false;
      }

      boolean this_present_x = true;
      boolean that_present_x = true;
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (this.x != that.x)
          return false;
      }

      boolean this_present_y = true;
      boolean that_present_y = true;
      if (this_present_y || that_present_y) {
        if (!(this_present_y && that_present_y))
          return false;
        if (this.y != that.y)
          return false;
      }

      boolean this_present_modifiers = true;
      boolean that_present_modifiers = true;
      if (this_present_modifiers || that_present_modifiers) {
        if (!(this_present_modifiers && that_present_modifiers))
          return false;
        if (this.modifiers != that.modifiers)
          return false;
      }

      boolean this_present_click_count = true;
      boolean that_present_click_count = true;
      if (this_present_click_count || that_present_click_count) {
        if (!(this_present_click_count && that_present_click_count))
          return false;
        if (this.click_count != that.click_count)
          return false;
      }

      boolean this_present_button = true;
      boolean that_present_button = true;
      if (this_present_button || that_present_button) {
        if (!(this_present_button && that_present_button))
          return false;
        if (this.button != that.button)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + event_type;

      hashCode = hashCode * 8191 + x;

      hashCode = hashCode * 8191 + y;

      hashCode = hashCode * 8191 + modifiers;

      hashCode = hashCode * 8191 + click_count;

      hashCode = hashCode * 8191 + button;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SendMouseEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEvent_type(), other.isSetEvent_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_type, other.event_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetX(), other.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetY(), other.isSetY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetModifiers(), other.isSetModifiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiers, other.modifiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetClick_count(), other.isSetClick_count());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClick_count()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click_count, other.click_count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetButton(), other.isSetButton());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetButton()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.button, other.button);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SendMouseEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("event_type:");
      sb.append(this.event_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      sb.append(this.x);
      first = false;
      if (!first) sb.append(", ");
      sb.append("y:");
      sb.append(this.y);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modifiers:");
      sb.append(this.modifiers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("click_count:");
      sb.append(this.click_count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("button:");
      sb.append(this.button);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SendMouseEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseEvent_argsStandardScheme getScheme() {
        return new Browser_SendMouseEvent_argsStandardScheme();
      }
    }

    private static class Browser_SendMouseEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SendMouseEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.event_type = iprot.readI32();
                struct.setEvent_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.x = iprot.readI32();
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.y = iprot.readI32();
                struct.setYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MODIFIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modifiers = iprot.readI32();
                struct.setModifiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CLICK_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.click_count = iprot.readI32();
                struct.setClick_countIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // BUTTON
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.button = iprot.readI32();
                struct.setButtonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.event_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(X_FIELD_DESC);
        oprot.writeI32(struct.x);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(Y_FIELD_DESC);
        oprot.writeI32(struct.y);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODIFIERS_FIELD_DESC);
        oprot.writeI32(struct.modifiers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLICK_COUNT_FIELD_DESC);
        oprot.writeI32(struct.click_count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BUTTON_FIELD_DESC);
        oprot.writeI32(struct.button);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SendMouseEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseEvent_argsTupleScheme getScheme() {
        return new Browser_SendMouseEvent_argsTupleScheme();
      }
    }

    private static class Browser_SendMouseEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SendMouseEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEvent_type()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        if (struct.isSetY()) {
          optionals.set(3);
        }
        if (struct.isSetModifiers()) {
          optionals.set(4);
        }
        if (struct.isSetClick_count()) {
          optionals.set(5);
        }
        if (struct.isSetButton()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEvent_type()) {
          oprot.writeI32(struct.event_type);
        }
        if (struct.isSetX()) {
          oprot.writeI32(struct.x);
        }
        if (struct.isSetY()) {
          oprot.writeI32(struct.y);
        }
        if (struct.isSetModifiers()) {
          oprot.writeI32(struct.modifiers);
        }
        if (struct.isSetClick_count()) {
          oprot.writeI32(struct.click_count);
        }
        if (struct.isSetButton()) {
          oprot.writeI32(struct.button);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.event_type = iprot.readI32();
          struct.setEvent_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = iprot.readI32();
          struct.setXIsSet(true);
        }
        if (incoming.get(3)) {
          struct.y = iprot.readI32();
          struct.setYIsSet(true);
        }
        if (incoming.get(4)) {
          struct.modifiers = iprot.readI32();
          struct.setModifiersIsSet(true);
        }
        if (incoming.get(5)) {
          struct.click_count = iprot.readI32();
          struct.setClick_countIsSet(true);
        }
        if (incoming.get(6)) {
          struct.button = iprot.readI32();
          struct.setButtonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SendMouseWheelEvent_args implements org.apache.thrift.TBase<Browser_SendMouseWheelEvent_args, Browser_SendMouseWheelEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SendMouseWheelEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SendMouseWheelEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SCROLL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scroll_type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MODIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiers", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("delta", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField UNITS_TO_SCROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("units_to_scroll", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SendMouseWheelEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SendMouseWheelEvent_argsTupleSchemeFactory();

    public int bid; // required
    public int scroll_type; // required
    public int x; // required
    public int y; // required
    public int modifiers; // required
    public int delta; // required
    public int units_to_scroll; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      SCROLL_TYPE((short)2, "scroll_type"),
      X((short)3, "x"),
      Y((short)4, "y"),
      MODIFIERS((short)5, "modifiers"),
      DELTA((short)6, "delta"),
      UNITS_TO_SCROLL((short)7, "units_to_scroll");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // SCROLL_TYPE
            return SCROLL_TYPE;
          case 3: // X
            return X;
          case 4: // Y
            return Y;
          case 5: // MODIFIERS
            return MODIFIERS;
          case 6: // DELTA
            return DELTA;
          case 7: // UNITS_TO_SCROLL
            return UNITS_TO_SCROLL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __SCROLL_TYPE_ISSET_ID = 1;
    private static final int __X_ISSET_ID = 2;
    private static final int __Y_ISSET_ID = 3;
    private static final int __MODIFIERS_ISSET_ID = 4;
    private static final int __DELTA_ISSET_ID = 5;
    private static final int __UNITS_TO_SCROLL_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCROLL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("scroll_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODIFIERS, new org.apache.thrift.meta_data.FieldMetaData("modifiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DELTA, new org.apache.thrift.meta_data.FieldMetaData("delta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNITS_TO_SCROLL, new org.apache.thrift.meta_data.FieldMetaData("units_to_scroll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SendMouseWheelEvent_args.class, metaDataMap);
    }

    public Browser_SendMouseWheelEvent_args() {
    }

    public Browser_SendMouseWheelEvent_args(
      int bid,
      int scroll_type,
      int x,
      int y,
      int modifiers,
      int delta,
      int units_to_scroll)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.scroll_type = scroll_type;
      setScroll_typeIsSet(true);
      this.x = x;
      setXIsSet(true);
      this.y = y;
      setYIsSet(true);
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      this.delta = delta;
      setDeltaIsSet(true);
      this.units_to_scroll = units_to_scroll;
      setUnits_to_scrollIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SendMouseWheelEvent_args(Browser_SendMouseWheelEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.scroll_type = other.scroll_type;
      this.x = other.x;
      this.y = other.y;
      this.modifiers = other.modifiers;
      this.delta = other.delta;
      this.units_to_scroll = other.units_to_scroll;
    }

    @Override
    public Browser_SendMouseWheelEvent_args deepCopy() {
      return new Browser_SendMouseWheelEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setScroll_typeIsSet(false);
      this.scroll_type = 0;
      setXIsSet(false);
      this.x = 0;
      setYIsSet(false);
      this.y = 0;
      setModifiersIsSet(false);
      this.modifiers = 0;
      setDeltaIsSet(false);
      this.delta = 0;
      setUnits_to_scrollIsSet(false);
      this.units_to_scroll = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SendMouseWheelEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getScroll_type() {
      return this.scroll_type;
    }

    public Browser_SendMouseWheelEvent_args setScroll_type(int scroll_type) {
      this.scroll_type = scroll_type;
      setScroll_typeIsSet(true);
      return this;
    }

    public void unsetScroll_type() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCROLL_TYPE_ISSET_ID);
    }

    /** Returns true if field scroll_type is set (has been assigned a value) and false otherwise */
    public boolean isSetScroll_type() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCROLL_TYPE_ISSET_ID);
    }

    public void setScroll_typeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCROLL_TYPE_ISSET_ID, value);
    }

    public int getX() {
      return this.x;
    }

    public Browser_SendMouseWheelEvent_args setX(int x) {
      this.x = x;
      setXIsSet(true);
      return this;
    }

    public void unsetX() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
    }

    public void setXIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
    }

    public int getY() {
      return this.y;
    }

    public Browser_SendMouseWheelEvent_args setY(int y) {
      this.y = y;
      setYIsSet(true);
      return this;
    }

    public void unsetY() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
    }

    /** Returns true if field y is set (has been assigned a value) and false otherwise */
    public boolean isSetY() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
    }

    public void setYIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
    }

    public int getModifiers() {
      return this.modifiers;
    }

    public Browser_SendMouseWheelEvent_args setModifiers(int modifiers) {
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      return this;
    }

    public void unsetModifiers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    /** Returns true if field modifiers is set (has been assigned a value) and false otherwise */
    public boolean isSetModifiers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    public void setModifiersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIERS_ISSET_ID, value);
    }

    public int getDelta() {
      return this.delta;
    }

    public Browser_SendMouseWheelEvent_args setDelta(int delta) {
      this.delta = delta;
      setDeltaIsSet(true);
      return this;
    }

    public void unsetDelta() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    /** Returns true if field delta is set (has been assigned a value) and false otherwise */
    public boolean isSetDelta() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    public void setDeltaIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELTA_ISSET_ID, value);
    }

    public int getUnits_to_scroll() {
      return this.units_to_scroll;
    }

    public Browser_SendMouseWheelEvent_args setUnits_to_scroll(int units_to_scroll) {
      this.units_to_scroll = units_to_scroll;
      setUnits_to_scrollIsSet(true);
      return this;
    }

    public void unsetUnits_to_scroll() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNITS_TO_SCROLL_ISSET_ID);
    }

    /** Returns true if field units_to_scroll is set (has been assigned a value) and false otherwise */
    public boolean isSetUnits_to_scroll() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNITS_TO_SCROLL_ISSET_ID);
    }

    public void setUnits_to_scrollIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNITS_TO_SCROLL_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case SCROLL_TYPE:
        if (value == null) {
          unsetScroll_type();
        } else {
          setScroll_type((java.lang.Integer)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((java.lang.Integer)value);
        }
        break;

      case Y:
        if (value == null) {
          unsetY();
        } else {
          setY((java.lang.Integer)value);
        }
        break;

      case MODIFIERS:
        if (value == null) {
          unsetModifiers();
        } else {
          setModifiers((java.lang.Integer)value);
        }
        break;

      case DELTA:
        if (value == null) {
          unsetDelta();
        } else {
          setDelta((java.lang.Integer)value);
        }
        break;

      case UNITS_TO_SCROLL:
        if (value == null) {
          unsetUnits_to_scroll();
        } else {
          setUnits_to_scroll((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case SCROLL_TYPE:
        return getScroll_type();

      case X:
        return getX();

      case Y:
        return getY();

      case MODIFIERS:
        return getModifiers();

      case DELTA:
        return getDelta();

      case UNITS_TO_SCROLL:
        return getUnits_to_scroll();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case SCROLL_TYPE:
        return isSetScroll_type();
      case X:
        return isSetX();
      case Y:
        return isSetY();
      case MODIFIERS:
        return isSetModifiers();
      case DELTA:
        return isSetDelta();
      case UNITS_TO_SCROLL:
        return isSetUnits_to_scroll();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SendMouseWheelEvent_args)
        return this.equals((Browser_SendMouseWheelEvent_args)that);
      return false;
    }

    public boolean equals(Browser_SendMouseWheelEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_scroll_type = true;
      boolean that_present_scroll_type = true;
      if (this_present_scroll_type || that_present_scroll_type) {
        if (!(this_present_scroll_type && that_present_scroll_type))
          return false;
        if (this.scroll_type != that.scroll_type)
          return false;
      }

      boolean this_present_x = true;
      boolean that_present_x = true;
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (this.x != that.x)
          return false;
      }

      boolean this_present_y = true;
      boolean that_present_y = true;
      if (this_present_y || that_present_y) {
        if (!(this_present_y && that_present_y))
          return false;
        if (this.y != that.y)
          return false;
      }

      boolean this_present_modifiers = true;
      boolean that_present_modifiers = true;
      if (this_present_modifiers || that_present_modifiers) {
        if (!(this_present_modifiers && that_present_modifiers))
          return false;
        if (this.modifiers != that.modifiers)
          return false;
      }

      boolean this_present_delta = true;
      boolean that_present_delta = true;
      if (this_present_delta || that_present_delta) {
        if (!(this_present_delta && that_present_delta))
          return false;
        if (this.delta != that.delta)
          return false;
      }

      boolean this_present_units_to_scroll = true;
      boolean that_present_units_to_scroll = true;
      if (this_present_units_to_scroll || that_present_units_to_scroll) {
        if (!(this_present_units_to_scroll && that_present_units_to_scroll))
          return false;
        if (this.units_to_scroll != that.units_to_scroll)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + scroll_type;

      hashCode = hashCode * 8191 + x;

      hashCode = hashCode * 8191 + y;

      hashCode = hashCode * 8191 + modifiers;

      hashCode = hashCode * 8191 + delta;

      hashCode = hashCode * 8191 + units_to_scroll;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SendMouseWheelEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetScroll_type(), other.isSetScroll_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScroll_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scroll_type, other.scroll_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetX(), other.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetY(), other.isSetY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetModifiers(), other.isSetModifiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiers, other.modifiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDelta(), other.isSetDelta());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelta()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta, other.delta);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnits_to_scroll(), other.isSetUnits_to_scroll());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnits_to_scroll()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units_to_scroll, other.units_to_scroll);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SendMouseWheelEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scroll_type:");
      sb.append(this.scroll_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      sb.append(this.x);
      first = false;
      if (!first) sb.append(", ");
      sb.append("y:");
      sb.append(this.y);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modifiers:");
      sb.append(this.modifiers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("delta:");
      sb.append(this.delta);
      first = false;
      if (!first) sb.append(", ");
      sb.append("units_to_scroll:");
      sb.append(this.units_to_scroll);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SendMouseWheelEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseWheelEvent_argsStandardScheme getScheme() {
        return new Browser_SendMouseWheelEvent_argsStandardScheme();
      }
    }

    private static class Browser_SendMouseWheelEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SendMouseWheelEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCROLL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.scroll_type = iprot.readI32();
                struct.setScroll_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.x = iprot.readI32();
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.y = iprot.readI32();
                struct.setYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MODIFIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modifiers = iprot.readI32();
                struct.setModifiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DELTA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.delta = iprot.readI32();
                struct.setDeltaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // UNITS_TO_SCROLL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.units_to_scroll = iprot.readI32();
                struct.setUnits_to_scrollIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SCROLL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.scroll_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(X_FIELD_DESC);
        oprot.writeI32(struct.x);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(Y_FIELD_DESC);
        oprot.writeI32(struct.y);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODIFIERS_FIELD_DESC);
        oprot.writeI32(struct.modifiers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DELTA_FIELD_DESC);
        oprot.writeI32(struct.delta);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UNITS_TO_SCROLL_FIELD_DESC);
        oprot.writeI32(struct.units_to_scroll);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SendMouseWheelEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseWheelEvent_argsTupleScheme getScheme() {
        return new Browser_SendMouseWheelEvent_argsTupleScheme();
      }
    }

    private static class Browser_SendMouseWheelEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SendMouseWheelEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetScroll_type()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        if (struct.isSetY()) {
          optionals.set(3);
        }
        if (struct.isSetModifiers()) {
          optionals.set(4);
        }
        if (struct.isSetDelta()) {
          optionals.set(5);
        }
        if (struct.isSetUnits_to_scroll()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetScroll_type()) {
          oprot.writeI32(struct.scroll_type);
        }
        if (struct.isSetX()) {
          oprot.writeI32(struct.x);
        }
        if (struct.isSetY()) {
          oprot.writeI32(struct.y);
        }
        if (struct.isSetModifiers()) {
          oprot.writeI32(struct.modifiers);
        }
        if (struct.isSetDelta()) {
          oprot.writeI32(struct.delta);
        }
        if (struct.isSetUnits_to_scroll()) {
          oprot.writeI32(struct.units_to_scroll);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.scroll_type = iprot.readI32();
          struct.setScroll_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = iprot.readI32();
          struct.setXIsSet(true);
        }
        if (incoming.get(3)) {
          struct.y = iprot.readI32();
          struct.setYIsSet(true);
        }
        if (incoming.get(4)) {
          struct.modifiers = iprot.readI32();
          struct.setModifiersIsSet(true);
        }
        if (incoming.get(5)) {
          struct.delta = iprot.readI32();
          struct.setDeltaIsSet(true);
        }
        if (incoming.get(6)) {
          struct.units_to_scroll = iprot.readI32();
          struct.setUnits_to_scrollIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_CanGoForward_args implements org.apache.thrift.TBase<Browser_CanGoForward_args, Browser_CanGoForward_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_CanGoForward_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_CanGoForward_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_CanGoForward_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_CanGoForward_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_CanGoForward_args.class, metaDataMap);
    }

    public Browser_CanGoForward_args() {
    }

    public Browser_CanGoForward_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_CanGoForward_args(Browser_CanGoForward_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_CanGoForward_args deepCopy() {
      return new Browser_CanGoForward_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_CanGoForward_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_CanGoForward_args)
        return this.equals((Browser_CanGoForward_args)that);
      return false;
    }

    public boolean equals(Browser_CanGoForward_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_CanGoForward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_CanGoForward_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_CanGoForward_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoForward_argsStandardScheme getScheme() {
        return new Browser_CanGoForward_argsStandardScheme();
      }
    }

    private static class Browser_CanGoForward_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_CanGoForward_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_CanGoForward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_CanGoForward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_CanGoForward_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoForward_argsTupleScheme getScheme() {
        return new Browser_CanGoForward_argsTupleScheme();
      }
    }

    private static class Browser_CanGoForward_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_CanGoForward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoForward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoForward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_CanGoForward_result implements org.apache.thrift.TBase<Browser_CanGoForward_result, Browser_CanGoForward_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_CanGoForward_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_CanGoForward_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_CanGoForward_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_CanGoForward_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_CanGoForward_result.class, metaDataMap);
    }

    public Browser_CanGoForward_result() {
    }

    public Browser_CanGoForward_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_CanGoForward_result(Browser_CanGoForward_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_CanGoForward_result deepCopy() {
      return new Browser_CanGoForward_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Browser_CanGoForward_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_CanGoForward_result)
        return this.equals((Browser_CanGoForward_result)that);
      return false;
    }

    public boolean equals(Browser_CanGoForward_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_CanGoForward_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_CanGoForward_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_CanGoForward_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoForward_resultStandardScheme getScheme() {
        return new Browser_CanGoForward_resultStandardScheme();
      }
    }

    private static class Browser_CanGoForward_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_CanGoForward_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_CanGoForward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_CanGoForward_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_CanGoForward_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoForward_resultTupleScheme getScheme() {
        return new Browser_CanGoForward_resultTupleScheme();
      }
    }

    private static class Browser_CanGoForward_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_CanGoForward_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoForward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoForward_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_CanGoBack_args implements org.apache.thrift.TBase<Browser_CanGoBack_args, Browser_CanGoBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_CanGoBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_CanGoBack_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_CanGoBack_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_CanGoBack_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_CanGoBack_args.class, metaDataMap);
    }

    public Browser_CanGoBack_args() {
    }

    public Browser_CanGoBack_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_CanGoBack_args(Browser_CanGoBack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_CanGoBack_args deepCopy() {
      return new Browser_CanGoBack_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_CanGoBack_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_CanGoBack_args)
        return this.equals((Browser_CanGoBack_args)that);
      return false;
    }

    public boolean equals(Browser_CanGoBack_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_CanGoBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_CanGoBack_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_CanGoBack_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoBack_argsStandardScheme getScheme() {
        return new Browser_CanGoBack_argsStandardScheme();
      }
    }

    private static class Browser_CanGoBack_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_CanGoBack_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_CanGoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_CanGoBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_CanGoBack_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoBack_argsTupleScheme getScheme() {
        return new Browser_CanGoBack_argsTupleScheme();
      }
    }

    private static class Browser_CanGoBack_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_CanGoBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_CanGoBack_result implements org.apache.thrift.TBase<Browser_CanGoBack_result, Browser_CanGoBack_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_CanGoBack_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_CanGoBack_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_CanGoBack_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_CanGoBack_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_CanGoBack_result.class, metaDataMap);
    }

    public Browser_CanGoBack_result() {
    }

    public Browser_CanGoBack_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_CanGoBack_result(Browser_CanGoBack_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_CanGoBack_result deepCopy() {
      return new Browser_CanGoBack_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Browser_CanGoBack_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_CanGoBack_result)
        return this.equals((Browser_CanGoBack_result)that);
      return false;
    }

    public boolean equals(Browser_CanGoBack_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_CanGoBack_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_CanGoBack_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_CanGoBack_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoBack_resultStandardScheme getScheme() {
        return new Browser_CanGoBack_resultStandardScheme();
      }
    }

    private static class Browser_CanGoBack_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_CanGoBack_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_CanGoBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_CanGoBack_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_CanGoBack_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_CanGoBack_resultTupleScheme getScheme() {
        return new Browser_CanGoBack_resultTupleScheme();
      }
    }

    private static class Browser_CanGoBack_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_CanGoBack_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_CanGoBack_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GoBack_args implements org.apache.thrift.TBase<Browser_GoBack_args, Browser_GoBack_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GoBack_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GoBack_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GoBack_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GoBack_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GoBack_args.class, metaDataMap);
    }

    public Browser_GoBack_args() {
    }

    public Browser_GoBack_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GoBack_args(Browser_GoBack_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_GoBack_args deepCopy() {
      return new Browser_GoBack_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GoBack_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GoBack_args)
        return this.equals((Browser_GoBack_args)that);
      return false;
    }

    public boolean equals(Browser_GoBack_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GoBack_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GoBack_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GoBack_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GoBack_argsStandardScheme getScheme() {
        return new Browser_GoBack_argsStandardScheme();
      }
    }

    private static class Browser_GoBack_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GoBack_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GoBack_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GoBack_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GoBack_argsTupleScheme getScheme() {
        return new Browser_GoBack_argsTupleScheme();
      }
    }

    private static class Browser_GoBack_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GoBack_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GoBack_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GoForward_args implements org.apache.thrift.TBase<Browser_GoForward_args, Browser_GoForward_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GoForward_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GoForward_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GoForward_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GoForward_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GoForward_args.class, metaDataMap);
    }

    public Browser_GoForward_args() {
    }

    public Browser_GoForward_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GoForward_args(Browser_GoForward_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_GoForward_args deepCopy() {
      return new Browser_GoForward_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GoForward_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GoForward_args)
        return this.equals((Browser_GoForward_args)that);
      return false;
    }

    public boolean equals(Browser_GoForward_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GoForward_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GoForward_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GoForward_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GoForward_argsStandardScheme getScheme() {
        return new Browser_GoForward_argsStandardScheme();
      }
    }

    private static class Browser_GoForward_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GoForward_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GoForward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GoForward_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GoForward_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GoForward_argsTupleScheme getScheme() {
        return new Browser_GoForward_argsTupleScheme();
      }
    }

    private static class Browser_GoForward_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GoForward_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GoForward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GoForward_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_IsLoading_args implements org.apache.thrift.TBase<Browser_IsLoading_args, Browser_IsLoading_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_IsLoading_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_IsLoading_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_IsLoading_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_IsLoading_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_IsLoading_args.class, metaDataMap);
    }

    public Browser_IsLoading_args() {
    }

    public Browser_IsLoading_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_IsLoading_args(Browser_IsLoading_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_IsLoading_args deepCopy() {
      return new Browser_IsLoading_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_IsLoading_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_IsLoading_args)
        return this.equals((Browser_IsLoading_args)that);
      return false;
    }

    public boolean equals(Browser_IsLoading_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_IsLoading_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_IsLoading_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_IsLoading_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsLoading_argsStandardScheme getScheme() {
        return new Browser_IsLoading_argsStandardScheme();
      }
    }

    private static class Browser_IsLoading_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_IsLoading_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_IsLoading_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_IsLoading_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_IsLoading_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsLoading_argsTupleScheme getScheme() {
        return new Browser_IsLoading_argsTupleScheme();
      }
    }

    private static class Browser_IsLoading_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_IsLoading_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_IsLoading_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_IsLoading_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_IsLoading_result implements org.apache.thrift.TBase<Browser_IsLoading_result, Browser_IsLoading_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_IsLoading_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_IsLoading_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_IsLoading_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_IsLoading_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_IsLoading_result.class, metaDataMap);
    }

    public Browser_IsLoading_result() {
    }

    public Browser_IsLoading_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_IsLoading_result(Browser_IsLoading_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_IsLoading_result deepCopy() {
      return new Browser_IsLoading_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Browser_IsLoading_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_IsLoading_result)
        return this.equals((Browser_IsLoading_result)that);
      return false;
    }

    public boolean equals(Browser_IsLoading_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_IsLoading_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_IsLoading_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_IsLoading_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsLoading_resultStandardScheme getScheme() {
        return new Browser_IsLoading_resultStandardScheme();
      }
    }

    private static class Browser_IsLoading_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_IsLoading_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_IsLoading_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_IsLoading_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_IsLoading_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsLoading_resultTupleScheme getScheme() {
        return new Browser_IsLoading_resultTupleScheme();
      }
    }

    private static class Browser_IsLoading_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_IsLoading_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_IsLoading_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_IsLoading_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_StopLoad_args implements org.apache.thrift.TBase<Browser_StopLoad_args, Browser_StopLoad_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_StopLoad_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_StopLoad_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_StopLoad_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_StopLoad_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_StopLoad_args.class, metaDataMap);
    }

    public Browser_StopLoad_args() {
    }

    public Browser_StopLoad_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_StopLoad_args(Browser_StopLoad_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_StopLoad_args deepCopy() {
      return new Browser_StopLoad_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_StopLoad_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_StopLoad_args)
        return this.equals((Browser_StopLoad_args)that);
      return false;
    }

    public boolean equals(Browser_StopLoad_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_StopLoad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_StopLoad_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_StopLoad_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StopLoad_argsStandardScheme getScheme() {
        return new Browser_StopLoad_argsStandardScheme();
      }
    }

    private static class Browser_StopLoad_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_StopLoad_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_StopLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_StopLoad_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_StopLoad_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StopLoad_argsTupleScheme getScheme() {
        return new Browser_StopLoad_argsTupleScheme();
      }
    }

    private static class Browser_StopLoad_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_StopLoad_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_StopLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_StopLoad_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetFrameCount_args implements org.apache.thrift.TBase<Browser_GetFrameCount_args, Browser_GetFrameCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetFrameCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetFrameCount_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetFrameCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetFrameCount_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetFrameCount_args.class, metaDataMap);
    }

    public Browser_GetFrameCount_args() {
    }

    public Browser_GetFrameCount_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetFrameCount_args(Browser_GetFrameCount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_GetFrameCount_args deepCopy() {
      return new Browser_GetFrameCount_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GetFrameCount_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetFrameCount_args)
        return this.equals((Browser_GetFrameCount_args)that);
      return false;
    }

    public boolean equals(Browser_GetFrameCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetFrameCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetFrameCount_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetFrameCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetFrameCount_argsStandardScheme getScheme() {
        return new Browser_GetFrameCount_argsStandardScheme();
      }
    }

    private static class Browser_GetFrameCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetFrameCount_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetFrameCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetFrameCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetFrameCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetFrameCount_argsTupleScheme getScheme() {
        return new Browser_GetFrameCount_argsTupleScheme();
      }
    }

    private static class Browser_GetFrameCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetFrameCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetFrameCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetFrameCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetFrameCount_result implements org.apache.thrift.TBase<Browser_GetFrameCount_result, Browser_GetFrameCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetFrameCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetFrameCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetFrameCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetFrameCount_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetFrameCount_result.class, metaDataMap);
    }

    public Browser_GetFrameCount_result() {
    }

    public Browser_GetFrameCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetFrameCount_result(Browser_GetFrameCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_GetFrameCount_result deepCopy() {
      return new Browser_GetFrameCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public Browser_GetFrameCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetFrameCount_result)
        return this.equals((Browser_GetFrameCount_result)that);
      return false;
    }

    public boolean equals(Browser_GetFrameCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetFrameCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetFrameCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetFrameCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetFrameCount_resultStandardScheme getScheme() {
        return new Browser_GetFrameCount_resultStandardScheme();
      }
    }

    private static class Browser_GetFrameCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetFrameCount_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetFrameCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetFrameCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetFrameCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetFrameCount_resultTupleScheme getScheme() {
        return new Browser_GetFrameCount_resultTupleScheme();
      }
    }

    private static class Browser_GetFrameCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetFrameCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetFrameCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetFrameCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_IsPopup_args implements org.apache.thrift.TBase<Browser_IsPopup_args, Browser_IsPopup_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_IsPopup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_IsPopup_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_IsPopup_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_IsPopup_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_IsPopup_args.class, metaDataMap);
    }

    public Browser_IsPopup_args() {
    }

    public Browser_IsPopup_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_IsPopup_args(Browser_IsPopup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_IsPopup_args deepCopy() {
      return new Browser_IsPopup_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_IsPopup_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_IsPopup_args)
        return this.equals((Browser_IsPopup_args)that);
      return false;
    }

    public boolean equals(Browser_IsPopup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_IsPopup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_IsPopup_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_IsPopup_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsPopup_argsStandardScheme getScheme() {
        return new Browser_IsPopup_argsStandardScheme();
      }
    }

    private static class Browser_IsPopup_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_IsPopup_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_IsPopup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_IsPopup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_IsPopup_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsPopup_argsTupleScheme getScheme() {
        return new Browser_IsPopup_argsTupleScheme();
      }
    }

    private static class Browser_IsPopup_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_IsPopup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_IsPopup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_IsPopup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_IsPopup_result implements org.apache.thrift.TBase<Browser_IsPopup_result, Browser_IsPopup_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_IsPopup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_IsPopup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_IsPopup_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_IsPopup_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_IsPopup_result.class, metaDataMap);
    }

    public Browser_IsPopup_result() {
    }

    public Browser_IsPopup_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_IsPopup_result(Browser_IsPopup_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_IsPopup_result deepCopy() {
      return new Browser_IsPopup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Browser_IsPopup_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_IsPopup_result)
        return this.equals((Browser_IsPopup_result)that);
      return false;
    }

    public boolean equals(Browser_IsPopup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_IsPopup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_IsPopup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_IsPopup_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsPopup_resultStandardScheme getScheme() {
        return new Browser_IsPopup_resultStandardScheme();
      }
    }

    private static class Browser_IsPopup_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_IsPopup_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_IsPopup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_IsPopup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_IsPopup_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_IsPopup_resultTupleScheme getScheme() {
        return new Browser_IsPopup_resultTupleScheme();
      }
    }

    private static class Browser_IsPopup_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_IsPopup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_IsPopup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_IsPopup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_HasDocument_args implements org.apache.thrift.TBase<Browser_HasDocument_args, Browser_HasDocument_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_HasDocument_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_HasDocument_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_HasDocument_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_HasDocument_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_HasDocument_args.class, metaDataMap);
    }

    public Browser_HasDocument_args() {
    }

    public Browser_HasDocument_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_HasDocument_args(Browser_HasDocument_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_HasDocument_args deepCopy() {
      return new Browser_HasDocument_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_HasDocument_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_HasDocument_args)
        return this.equals((Browser_HasDocument_args)that);
      return false;
    }

    public boolean equals(Browser_HasDocument_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_HasDocument_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_HasDocument_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_HasDocument_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_HasDocument_argsStandardScheme getScheme() {
        return new Browser_HasDocument_argsStandardScheme();
      }
    }

    private static class Browser_HasDocument_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_HasDocument_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_HasDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_HasDocument_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_HasDocument_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_HasDocument_argsTupleScheme getScheme() {
        return new Browser_HasDocument_argsTupleScheme();
      }
    }

    private static class Browser_HasDocument_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_HasDocument_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_HasDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_HasDocument_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_HasDocument_result implements org.apache.thrift.TBase<Browser_HasDocument_result, Browser_HasDocument_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_HasDocument_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_HasDocument_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_HasDocument_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_HasDocument_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_HasDocument_result.class, metaDataMap);
    }

    public Browser_HasDocument_result() {
    }

    public Browser_HasDocument_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_HasDocument_result(Browser_HasDocument_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_HasDocument_result deepCopy() {
      return new Browser_HasDocument_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Browser_HasDocument_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_HasDocument_result)
        return this.equals((Browser_HasDocument_result)that);
      return false;
    }

    public boolean equals(Browser_HasDocument_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_HasDocument_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_HasDocument_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_HasDocument_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_HasDocument_resultStandardScheme getScheme() {
        return new Browser_HasDocument_resultStandardScheme();
      }
    }

    private static class Browser_HasDocument_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_HasDocument_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_HasDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_HasDocument_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_HasDocument_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_HasDocument_resultTupleScheme getScheme() {
        return new Browser_HasDocument_resultTupleScheme();
      }
    }

    private static class Browser_HasDocument_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_HasDocument_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_HasDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_HasDocument_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_ViewSource_args implements org.apache.thrift.TBase<Browser_ViewSource_args, Browser_ViewSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_ViewSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_ViewSource_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_ViewSource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_ViewSource_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_ViewSource_args.class, metaDataMap);
    }

    public Browser_ViewSource_args() {
    }

    public Browser_ViewSource_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_ViewSource_args(Browser_ViewSource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_ViewSource_args deepCopy() {
      return new Browser_ViewSource_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_ViewSource_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_ViewSource_args)
        return this.equals((Browser_ViewSource_args)that);
      return false;
    }

    public boolean equals(Browser_ViewSource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_ViewSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_ViewSource_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_ViewSource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ViewSource_argsStandardScheme getScheme() {
        return new Browser_ViewSource_argsStandardScheme();
      }
    }

    private static class Browser_ViewSource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_ViewSource_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_ViewSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_ViewSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_ViewSource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ViewSource_argsTupleScheme getScheme() {
        return new Browser_ViewSource_argsTupleScheme();
      }
    }

    private static class Browser_ViewSource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_ViewSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_ViewSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_ViewSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetSource_args implements org.apache.thrift.TBase<Browser_GetSource_args, Browser_GetSource_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetSource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetSource_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_VISITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVisitor", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetSource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetSource_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      STRING_VISITOR((short)2, "stringVisitor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // STRING_VISITOR
            return STRING_VISITOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRING_VISITOR, new org.apache.thrift.meta_data.FieldMetaData("stringVisitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetSource_args.class, metaDataMap);
    }

    public Browser_GetSource_args() {
    }

    public Browser_GetSource_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.stringVisitor = stringVisitor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetSource_args(Browser_GetSource_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetStringVisitor()) {
        this.stringVisitor = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.stringVisitor);
      }
    }

    @Override
    public Browser_GetSource_args deepCopy() {
      return new Browser_GetSource_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.stringVisitor = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GetSource_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getStringVisitor() {
      return this.stringVisitor;
    }

    public Browser_GetSource_args setStringVisitor(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) {
      this.stringVisitor = stringVisitor;
      return this;
    }

    public void unsetStringVisitor() {
      this.stringVisitor = null;
    }

    /** Returns true if field stringVisitor is set (has been assigned a value) and false otherwise */
    public boolean isSetStringVisitor() {
      return this.stringVisitor != null;
    }

    public void setStringVisitorIsSet(boolean value) {
      if (!value) {
        this.stringVisitor = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case STRING_VISITOR:
        if (value == null) {
          unsetStringVisitor();
        } else {
          setStringVisitor((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case STRING_VISITOR:
        return getStringVisitor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case STRING_VISITOR:
        return isSetStringVisitor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetSource_args)
        return this.equals((Browser_GetSource_args)that);
      return false;
    }

    public boolean equals(Browser_GetSource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_stringVisitor = true && this.isSetStringVisitor();
      boolean that_present_stringVisitor = true && that.isSetStringVisitor();
      if (this_present_stringVisitor || that_present_stringVisitor) {
        if (!(this_present_stringVisitor && that_present_stringVisitor))
          return false;
        if (!this.stringVisitor.equals(that.stringVisitor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetStringVisitor()) ? 131071 : 524287);
      if (isSetStringVisitor())
        hashCode = hashCode * 8191 + stringVisitor.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetSource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetStringVisitor(), other.isSetStringVisitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringVisitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringVisitor, other.stringVisitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetSource_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringVisitor:");
      if (this.stringVisitor == null) {
        sb.append("null");
      } else {
        sb.append(this.stringVisitor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (stringVisitor != null) {
        stringVisitor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetSource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetSource_argsStandardScheme getScheme() {
        return new Browser_GetSource_argsStandardScheme();
      }
    }

    private static class Browser_GetSource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetSource_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_VISITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stringVisitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.stringVisitor.read(iprot);
                struct.setStringVisitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetSource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.stringVisitor != null) {
          oprot.writeFieldBegin(STRING_VISITOR_FIELD_DESC);
          struct.stringVisitor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetSource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetSource_argsTupleScheme getScheme() {
        return new Browser_GetSource_argsTupleScheme();
      }
    }

    private static class Browser_GetSource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetSource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetStringVisitor()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetStringVisitor()) {
          struct.stringVisitor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetSource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringVisitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.stringVisitor.read(iprot);
          struct.setStringVisitorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetText_args implements org.apache.thrift.TBase<Browser_GetText_args, Browser_GetText_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetText_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetText_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STRING_VISITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVisitor", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetText_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetText_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      STRING_VISITOR((short)2, "stringVisitor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // STRING_VISITOR
            return STRING_VISITOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STRING_VISITOR, new org.apache.thrift.meta_data.FieldMetaData("stringVisitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetText_args.class, metaDataMap);
    }

    public Browser_GetText_args() {
    }

    public Browser_GetText_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.stringVisitor = stringVisitor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetText_args(Browser_GetText_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetStringVisitor()) {
        this.stringVisitor = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.stringVisitor);
      }
    }

    @Override
    public Browser_GetText_args deepCopy() {
      return new Browser_GetText_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.stringVisitor = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GetText_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getStringVisitor() {
      return this.stringVisitor;
    }

    public Browser_GetText_args setStringVisitor(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject stringVisitor) {
      this.stringVisitor = stringVisitor;
      return this;
    }

    public void unsetStringVisitor() {
      this.stringVisitor = null;
    }

    /** Returns true if field stringVisitor is set (has been assigned a value) and false otherwise */
    public boolean isSetStringVisitor() {
      return this.stringVisitor != null;
    }

    public void setStringVisitorIsSet(boolean value) {
      if (!value) {
        this.stringVisitor = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case STRING_VISITOR:
        if (value == null) {
          unsetStringVisitor();
        } else {
          setStringVisitor((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case STRING_VISITOR:
        return getStringVisitor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case STRING_VISITOR:
        return isSetStringVisitor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetText_args)
        return this.equals((Browser_GetText_args)that);
      return false;
    }

    public boolean equals(Browser_GetText_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_stringVisitor = true && this.isSetStringVisitor();
      boolean that_present_stringVisitor = true && that.isSetStringVisitor();
      if (this_present_stringVisitor || that_present_stringVisitor) {
        if (!(this_present_stringVisitor && that_present_stringVisitor))
          return false;
        if (!this.stringVisitor.equals(that.stringVisitor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetStringVisitor()) ? 131071 : 524287);
      if (isSetStringVisitor())
        hashCode = hashCode * 8191 + stringVisitor.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetText_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetStringVisitor(), other.isSetStringVisitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringVisitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringVisitor, other.stringVisitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetText_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringVisitor:");
      if (this.stringVisitor == null) {
        sb.append("null");
      } else {
        sb.append(this.stringVisitor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (stringVisitor != null) {
        stringVisitor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetText_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetText_argsStandardScheme getScheme() {
        return new Browser_GetText_argsStandardScheme();
      }
    }

    private static class Browser_GetText_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetText_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STRING_VISITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.stringVisitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.stringVisitor.read(iprot);
                struct.setStringVisitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetText_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.stringVisitor != null) {
          oprot.writeFieldBegin(STRING_VISITOR_FIELD_DESC);
          struct.stringVisitor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetText_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetText_argsTupleScheme getScheme() {
        return new Browser_GetText_argsTupleScheme();
      }
    }

    private static class Browser_GetText_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetText_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetStringVisitor()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetStringVisitor()) {
          struct.stringVisitor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetText_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.stringVisitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.stringVisitor.read(iprot);
          struct.setStringVisitorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SetFocus_args implements org.apache.thrift.TBase<Browser_SetFocus_args, Browser_SetFocus_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SetFocus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SetFocus_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SetFocus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SetFocus_argsTupleSchemeFactory();

    public int bid; // required
    public boolean enable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      ENABLE((short)2, "enable");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // ENABLE
            return ENABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __ENABLE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENABLE, new org.apache.thrift.meta_data.FieldMetaData("enable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SetFocus_args.class, metaDataMap);
    }

    public Browser_SetFocus_args() {
    }

    public Browser_SetFocus_args(
      int bid,
      boolean enable)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.enable = enable;
      setEnableIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SetFocus_args(Browser_SetFocus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.enable = other.enable;
    }

    @Override
    public Browser_SetFocus_args deepCopy() {
      return new Browser_SetFocus_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setEnableIsSet(false);
      this.enable = false;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SetFocus_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public boolean isEnable() {
      return this.enable;
    }

    public Browser_SetFocus_args setEnable(boolean enable) {
      this.enable = enable;
      setEnableIsSet(true);
      return this;
    }

    public void unsetEnable() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_ISSET_ID);
    }

    /** Returns true if field enable is set (has been assigned a value) and false otherwise */
    public boolean isSetEnable() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_ISSET_ID);
    }

    public void setEnableIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case ENABLE:
        if (value == null) {
          unsetEnable();
        } else {
          setEnable((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case ENABLE:
        return isEnable();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case ENABLE:
        return isSetEnable();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SetFocus_args)
        return this.equals((Browser_SetFocus_args)that);
      return false;
    }

    public boolean equals(Browser_SetFocus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_enable = true;
      boolean that_present_enable = true;
      if (this_present_enable || that_present_enable) {
        if (!(this_present_enable && that_present_enable))
          return false;
        if (this.enable != that.enable)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((enable) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SetFocus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEnable(), other.isSetEnable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable, other.enable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SetFocus_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enable:");
      sb.append(this.enable);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SetFocus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SetFocus_argsStandardScheme getScheme() {
        return new Browser_SetFocus_argsStandardScheme();
      }
    }

    private static class Browser_SetFocus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SetFocus_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SetFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.enable = iprot.readBool();
                struct.setEnableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SetFocus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENABLE_FIELD_DESC);
        oprot.writeBool(struct.enable);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SetFocus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SetFocus_argsTupleScheme getScheme() {
        return new Browser_SetFocus_argsTupleScheme();
      }
    }

    private static class Browser_SetFocus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SetFocus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SetFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEnable()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEnable()) {
          oprot.writeBool(struct.enable);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SetFocus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.enable = iprot.readBool();
          struct.setEnableIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetZoomLevel_args implements org.apache.thrift.TBase<Browser_GetZoomLevel_args, Browser_GetZoomLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetZoomLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetZoomLevel_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetZoomLevel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetZoomLevel_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetZoomLevel_args.class, metaDataMap);
    }

    public Browser_GetZoomLevel_args() {
    }

    public Browser_GetZoomLevel_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetZoomLevel_args(Browser_GetZoomLevel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_GetZoomLevel_args deepCopy() {
      return new Browser_GetZoomLevel_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GetZoomLevel_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetZoomLevel_args)
        return this.equals((Browser_GetZoomLevel_args)that);
      return false;
    }

    public boolean equals(Browser_GetZoomLevel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetZoomLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetZoomLevel_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetZoomLevel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetZoomLevel_argsStandardScheme getScheme() {
        return new Browser_GetZoomLevel_argsStandardScheme();
      }
    }

    private static class Browser_GetZoomLevel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetZoomLevel_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetZoomLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetZoomLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetZoomLevel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetZoomLevel_argsTupleScheme getScheme() {
        return new Browser_GetZoomLevel_argsTupleScheme();
      }
    }

    private static class Browser_GetZoomLevel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetZoomLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetZoomLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetZoomLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetZoomLevel_result implements org.apache.thrift.TBase<Browser_GetZoomLevel_result, Browser_GetZoomLevel_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetZoomLevel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetZoomLevel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetZoomLevel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetZoomLevel_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetZoomLevel_result.class, metaDataMap);
    }

    public Browser_GetZoomLevel_result() {
    }

    public Browser_GetZoomLevel_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetZoomLevel_result(Browser_GetZoomLevel_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public Browser_GetZoomLevel_result deepCopy() {
      return new Browser_GetZoomLevel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public Browser_GetZoomLevel_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetZoomLevel_result)
        return this.equals((Browser_GetZoomLevel_result)that);
      return false;
    }

    public boolean equals(Browser_GetZoomLevel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetZoomLevel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetZoomLevel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetZoomLevel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetZoomLevel_resultStandardScheme getScheme() {
        return new Browser_GetZoomLevel_resultStandardScheme();
      }
    }

    private static class Browser_GetZoomLevel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetZoomLevel_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetZoomLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetZoomLevel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetZoomLevel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetZoomLevel_resultTupleScheme getScheme() {
        return new Browser_GetZoomLevel_resultTupleScheme();
      }
    }

    private static class Browser_GetZoomLevel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetZoomLevel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetZoomLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetZoomLevel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SetZoomLevel_args implements org.apache.thrift.TBase<Browser_SetZoomLevel_args, Browser_SetZoomLevel_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SetZoomLevel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SetZoomLevel_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("val", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SetZoomLevel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SetZoomLevel_argsTupleSchemeFactory();

    public int bid; // required
    public double val; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      VAL((short)2, "val");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // VAL
            return VAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __VAL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VAL, new org.apache.thrift.meta_data.FieldMetaData("val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SetZoomLevel_args.class, metaDataMap);
    }

    public Browser_SetZoomLevel_args() {
    }

    public Browser_SetZoomLevel_args(
      int bid,
      double val)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.val = val;
      setValIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SetZoomLevel_args(Browser_SetZoomLevel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.val = other.val;
    }

    @Override
    public Browser_SetZoomLevel_args deepCopy() {
      return new Browser_SetZoomLevel_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setValIsSet(false);
      this.val = 0.0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SetZoomLevel_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public double getVal() {
      return this.val;
    }

    public Browser_SetZoomLevel_args setVal(double val) {
      this.val = val;
      setValIsSet(true);
      return this;
    }

    public void unsetVal() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VAL_ISSET_ID);
    }

    /** Returns true if field val is set (has been assigned a value) and false otherwise */
    public boolean isSetVal() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VAL_ISSET_ID);
    }

    public void setValIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VAL_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case VAL:
        if (value == null) {
          unsetVal();
        } else {
          setVal((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case VAL:
        return getVal();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case VAL:
        return isSetVal();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SetZoomLevel_args)
        return this.equals((Browser_SetZoomLevel_args)that);
      return false;
    }

    public boolean equals(Browser_SetZoomLevel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_val = true;
      boolean that_present_val = true;
      if (this_present_val || that_present_val) {
        if (!(this_present_val && that_present_val))
          return false;
        if (this.val != that.val)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(val);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SetZoomLevel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVal(), other.isSetVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val, other.val);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SetZoomLevel_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("val:");
      sb.append(this.val);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SetZoomLevel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SetZoomLevel_argsStandardScheme getScheme() {
        return new Browser_SetZoomLevel_argsStandardScheme();
      }
    }

    private static class Browser_SetZoomLevel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SetZoomLevel_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SetZoomLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.val = iprot.readDouble();
                struct.setValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SetZoomLevel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VAL_FIELD_DESC);
        oprot.writeDouble(struct.val);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SetZoomLevel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SetZoomLevel_argsTupleScheme getScheme() {
        return new Browser_SetZoomLevel_argsTupleScheme();
      }
    }

    private static class Browser_SetZoomLevel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SetZoomLevel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SetZoomLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetVal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetVal()) {
          oprot.writeDouble(struct.val);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SetZoomLevel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.val = iprot.readDouble();
          struct.setValIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_StartDownload_args implements org.apache.thrift.TBase<Browser_StartDownload_args, Browser_StartDownload_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_StartDownload_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_StartDownload_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_StartDownload_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_StartDownload_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      URL((short)2, "url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_StartDownload_args.class, metaDataMap);
    }

    public Browser_StartDownload_args() {
    }

    public Browser_StartDownload_args(
      int bid,
      java.lang.String url)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_StartDownload_args(Browser_StartDownload_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    @Override
    public Browser_StartDownload_args deepCopy() {
      return new Browser_StartDownload_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.url = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_StartDownload_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Browser_StartDownload_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case URL:
        return getUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case URL:
        return isSetUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_StartDownload_args)
        return this.equals((Browser_StartDownload_args)that);
      return false;
    }

    public boolean equals(Browser_StartDownload_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_StartDownload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_StartDownload_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_StartDownload_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StartDownload_argsStandardScheme getScheme() {
        return new Browser_StartDownload_argsStandardScheme();
      }
    }

    private static class Browser_StartDownload_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_StartDownload_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_StartDownload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_StartDownload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_StartDownload_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StartDownload_argsTupleScheme getScheme() {
        return new Browser_StartDownload_argsTupleScheme();
      }
    }

    private static class Browser_StartDownload_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_StartDownload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_StartDownload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_StartDownload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_Find_args implements org.apache.thrift.TBase<Browser_Find_args, Browser_Find_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_Find_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_Find_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SEARCH_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("searchText", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FORWARD_FIELD_DESC = new org.apache.thrift.protocol.TField("forward", org.apache.thrift.protocol.TType.BOOL, (short)3);
    private static final org.apache.thrift.protocol.TField MATCH_CASE_FIELD_DESC = new org.apache.thrift.protocol.TField("matchCase", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField FIND_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("findNext", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_Find_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_Find_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String searchText; // required
    public boolean forward; // required
    public boolean matchCase; // required
    public boolean findNext; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      SEARCH_TEXT((short)2, "searchText"),
      FORWARD((short)3, "forward"),
      MATCH_CASE((short)4, "matchCase"),
      FIND_NEXT((short)5, "findNext");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // SEARCH_TEXT
            return SEARCH_TEXT;
          case 3: // FORWARD
            return FORWARD;
          case 4: // MATCH_CASE
            return MATCH_CASE;
          case 5: // FIND_NEXT
            return FIND_NEXT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __FORWARD_ISSET_ID = 1;
    private static final int __MATCHCASE_ISSET_ID = 2;
    private static final int __FINDNEXT_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SEARCH_TEXT, new org.apache.thrift.meta_data.FieldMetaData("searchText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FORWARD, new org.apache.thrift.meta_data.FieldMetaData("forward", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.MATCH_CASE, new org.apache.thrift.meta_data.FieldMetaData("matchCase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.FIND_NEXT, new org.apache.thrift.meta_data.FieldMetaData("findNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_Find_args.class, metaDataMap);
    }

    public Browser_Find_args() {
    }

    public Browser_Find_args(
      int bid,
      java.lang.String searchText,
      boolean forward,
      boolean matchCase,
      boolean findNext)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.searchText = searchText;
      this.forward = forward;
      setForwardIsSet(true);
      this.matchCase = matchCase;
      setMatchCaseIsSet(true);
      this.findNext = findNext;
      setFindNextIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_Find_args(Browser_Find_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetSearchText()) {
        this.searchText = other.searchText;
      }
      this.forward = other.forward;
      this.matchCase = other.matchCase;
      this.findNext = other.findNext;
    }

    @Override
    public Browser_Find_args deepCopy() {
      return new Browser_Find_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.searchText = null;
      setForwardIsSet(false);
      this.forward = false;
      setMatchCaseIsSet(false);
      this.matchCase = false;
      setFindNextIsSet(false);
      this.findNext = false;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_Find_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSearchText() {
      return this.searchText;
    }

    public Browser_Find_args setSearchText(@org.apache.thrift.annotation.Nullable java.lang.String searchText) {
      this.searchText = searchText;
      return this;
    }

    public void unsetSearchText() {
      this.searchText = null;
    }

    /** Returns true if field searchText is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchText() {
      return this.searchText != null;
    }

    public void setSearchTextIsSet(boolean value) {
      if (!value) {
        this.searchText = null;
      }
    }

    public boolean isForward() {
      return this.forward;
    }

    public Browser_Find_args setForward(boolean forward) {
      this.forward = forward;
      setForwardIsSet(true);
      return this;
    }

    public void unsetForward() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FORWARD_ISSET_ID);
    }

    /** Returns true if field forward is set (has been assigned a value) and false otherwise */
    public boolean isSetForward() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FORWARD_ISSET_ID);
    }

    public void setForwardIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FORWARD_ISSET_ID, value);
    }

    public boolean isMatchCase() {
      return this.matchCase;
    }

    public Browser_Find_args setMatchCase(boolean matchCase) {
      this.matchCase = matchCase;
      setMatchCaseIsSet(true);
      return this;
    }

    public void unsetMatchCase() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MATCHCASE_ISSET_ID);
    }

    /** Returns true if field matchCase is set (has been assigned a value) and false otherwise */
    public boolean isSetMatchCase() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MATCHCASE_ISSET_ID);
    }

    public void setMatchCaseIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MATCHCASE_ISSET_ID, value);
    }

    public boolean isFindNext() {
      return this.findNext;
    }

    public Browser_Find_args setFindNext(boolean findNext) {
      this.findNext = findNext;
      setFindNextIsSet(true);
      return this;
    }

    public void unsetFindNext() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FINDNEXT_ISSET_ID);
    }

    /** Returns true if field findNext is set (has been assigned a value) and false otherwise */
    public boolean isSetFindNext() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FINDNEXT_ISSET_ID);
    }

    public void setFindNextIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FINDNEXT_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case SEARCH_TEXT:
        if (value == null) {
          unsetSearchText();
        } else {
          setSearchText((java.lang.String)value);
        }
        break;

      case FORWARD:
        if (value == null) {
          unsetForward();
        } else {
          setForward((java.lang.Boolean)value);
        }
        break;

      case MATCH_CASE:
        if (value == null) {
          unsetMatchCase();
        } else {
          setMatchCase((java.lang.Boolean)value);
        }
        break;

      case FIND_NEXT:
        if (value == null) {
          unsetFindNext();
        } else {
          setFindNext((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case SEARCH_TEXT:
        return getSearchText();

      case FORWARD:
        return isForward();

      case MATCH_CASE:
        return isMatchCase();

      case FIND_NEXT:
        return isFindNext();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case SEARCH_TEXT:
        return isSetSearchText();
      case FORWARD:
        return isSetForward();
      case MATCH_CASE:
        return isSetMatchCase();
      case FIND_NEXT:
        return isSetFindNext();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_Find_args)
        return this.equals((Browser_Find_args)that);
      return false;
    }

    public boolean equals(Browser_Find_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_searchText = true && this.isSetSearchText();
      boolean that_present_searchText = true && that.isSetSearchText();
      if (this_present_searchText || that_present_searchText) {
        if (!(this_present_searchText && that_present_searchText))
          return false;
        if (!this.searchText.equals(that.searchText))
          return false;
      }

      boolean this_present_forward = true;
      boolean that_present_forward = true;
      if (this_present_forward || that_present_forward) {
        if (!(this_present_forward && that_present_forward))
          return false;
        if (this.forward != that.forward)
          return false;
      }

      boolean this_present_matchCase = true;
      boolean that_present_matchCase = true;
      if (this_present_matchCase || that_present_matchCase) {
        if (!(this_present_matchCase && that_present_matchCase))
          return false;
        if (this.matchCase != that.matchCase)
          return false;
      }

      boolean this_present_findNext = true;
      boolean that_present_findNext = true;
      if (this_present_findNext || that_present_findNext) {
        if (!(this_present_findNext && that_present_findNext))
          return false;
        if (this.findNext != that.findNext)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetSearchText()) ? 131071 : 524287);
      if (isSetSearchText())
        hashCode = hashCode * 8191 + searchText.hashCode();

      hashCode = hashCode * 8191 + ((forward) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((matchCase) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((findNext) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_Find_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSearchText(), other.isSetSearchText());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchText()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchText, other.searchText);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetForward(), other.isSetForward());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetForward()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forward, other.forward);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMatchCase(), other.isSetMatchCase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMatchCase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.matchCase, other.matchCase);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFindNext(), other.isSetFindNext());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindNext()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findNext, other.findNext);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_Find_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchText:");
      if (this.searchText == null) {
        sb.append("null");
      } else {
        sb.append(this.searchText);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("forward:");
      sb.append(this.forward);
      first = false;
      if (!first) sb.append(", ");
      sb.append("matchCase:");
      sb.append(this.matchCase);
      first = false;
      if (!first) sb.append(", ");
      sb.append("findNext:");
      sb.append(this.findNext);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_Find_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Find_argsStandardScheme getScheme() {
        return new Browser_Find_argsStandardScheme();
      }
    }

    private static class Browser_Find_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_Find_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_Find_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEARCH_TEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.searchText = iprot.readString();
                struct.setSearchTextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FORWARD
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.forward = iprot.readBool();
                struct.setForwardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MATCH_CASE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.matchCase = iprot.readBool();
                struct.setMatchCaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FIND_NEXT
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.findNext = iprot.readBool();
                struct.setFindNextIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_Find_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.searchText != null) {
          oprot.writeFieldBegin(SEARCH_TEXT_FIELD_DESC);
          oprot.writeString(struct.searchText);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FORWARD_FIELD_DESC);
        oprot.writeBool(struct.forward);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MATCH_CASE_FIELD_DESC);
        oprot.writeBool(struct.matchCase);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(FIND_NEXT_FIELD_DESC);
        oprot.writeBool(struct.findNext);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_Find_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Find_argsTupleScheme getScheme() {
        return new Browser_Find_argsTupleScheme();
      }
    }

    private static class Browser_Find_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_Find_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_Find_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetSearchText()) {
          optionals.set(1);
        }
        if (struct.isSetForward()) {
          optionals.set(2);
        }
        if (struct.isSetMatchCase()) {
          optionals.set(3);
        }
        if (struct.isSetFindNext()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetSearchText()) {
          oprot.writeString(struct.searchText);
        }
        if (struct.isSetForward()) {
          oprot.writeBool(struct.forward);
        }
        if (struct.isSetMatchCase()) {
          oprot.writeBool(struct.matchCase);
        }
        if (struct.isSetFindNext()) {
          oprot.writeBool(struct.findNext);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_Find_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.searchText = iprot.readString();
          struct.setSearchTextIsSet(true);
        }
        if (incoming.get(2)) {
          struct.forward = iprot.readBool();
          struct.setForwardIsSet(true);
        }
        if (incoming.get(3)) {
          struct.matchCase = iprot.readBool();
          struct.setMatchCaseIsSet(true);
        }
        if (incoming.get(4)) {
          struct.findNext = iprot.readBool();
          struct.setFindNextIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_StopFinding_args implements org.apache.thrift.TBase<Browser_StopFinding_args, Browser_StopFinding_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_StopFinding_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_StopFinding_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CLEAR_SELECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("clearSelection", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_StopFinding_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_StopFinding_argsTupleSchemeFactory();

    public int bid; // required
    public boolean clearSelection; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      CLEAR_SELECTION((short)2, "clearSelection");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // CLEAR_SELECTION
            return CLEAR_SELECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __CLEARSELECTION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLEAR_SELECTION, new org.apache.thrift.meta_data.FieldMetaData("clearSelection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_StopFinding_args.class, metaDataMap);
    }

    public Browser_StopFinding_args() {
    }

    public Browser_StopFinding_args(
      int bid,
      boolean clearSelection)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.clearSelection = clearSelection;
      setClearSelectionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_StopFinding_args(Browser_StopFinding_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.clearSelection = other.clearSelection;
    }

    @Override
    public Browser_StopFinding_args deepCopy() {
      return new Browser_StopFinding_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setClearSelectionIsSet(false);
      this.clearSelection = false;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_StopFinding_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public boolean isClearSelection() {
      return this.clearSelection;
    }

    public Browser_StopFinding_args setClearSelection(boolean clearSelection) {
      this.clearSelection = clearSelection;
      setClearSelectionIsSet(true);
      return this;
    }

    public void unsetClearSelection() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLEARSELECTION_ISSET_ID);
    }

    /** Returns true if field clearSelection is set (has been assigned a value) and false otherwise */
    public boolean isSetClearSelection() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLEARSELECTION_ISSET_ID);
    }

    public void setClearSelectionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLEARSELECTION_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case CLEAR_SELECTION:
        if (value == null) {
          unsetClearSelection();
        } else {
          setClearSelection((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case CLEAR_SELECTION:
        return isClearSelection();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case CLEAR_SELECTION:
        return isSetClearSelection();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_StopFinding_args)
        return this.equals((Browser_StopFinding_args)that);
      return false;
    }

    public boolean equals(Browser_StopFinding_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_clearSelection = true;
      boolean that_present_clearSelection = true;
      if (this_present_clearSelection || that_present_clearSelection) {
        if (!(this_present_clearSelection && that_present_clearSelection))
          return false;
        if (this.clearSelection != that.clearSelection)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((clearSelection) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Browser_StopFinding_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetClearSelection(), other.isSetClearSelection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClearSelection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearSelection, other.clearSelection);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_StopFinding_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clearSelection:");
      sb.append(this.clearSelection);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_StopFinding_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StopFinding_argsStandardScheme getScheme() {
        return new Browser_StopFinding_argsStandardScheme();
      }
    }

    private static class Browser_StopFinding_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_StopFinding_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_StopFinding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLEAR_SELECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.clearSelection = iprot.readBool();
                struct.setClearSelectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_StopFinding_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLEAR_SELECTION_FIELD_DESC);
        oprot.writeBool(struct.clearSelection);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_StopFinding_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_StopFinding_argsTupleScheme getScheme() {
        return new Browser_StopFinding_argsTupleScheme();
      }
    }

    private static class Browser_StopFinding_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_StopFinding_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_StopFinding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetClearSelection()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetClearSelection()) {
          oprot.writeBool(struct.clearSelection);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_StopFinding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clearSelection = iprot.readBool();
          struct.setClearSelectionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_ReplaceMisspelling_args implements org.apache.thrift.TBase<Browser_ReplaceMisspelling_args, Browser_ReplaceMisspelling_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_ReplaceMisspelling_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_ReplaceMisspelling_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("word", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_ReplaceMisspelling_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_ReplaceMisspelling_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String word; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      WORD((short)2, "word");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // WORD
            return WORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WORD, new org.apache.thrift.meta_data.FieldMetaData("word", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_ReplaceMisspelling_args.class, metaDataMap);
    }

    public Browser_ReplaceMisspelling_args() {
    }

    public Browser_ReplaceMisspelling_args(
      int bid,
      java.lang.String word)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.word = word;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_ReplaceMisspelling_args(Browser_ReplaceMisspelling_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetWord()) {
        this.word = other.word;
      }
    }

    @Override
    public Browser_ReplaceMisspelling_args deepCopy() {
      return new Browser_ReplaceMisspelling_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.word = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_ReplaceMisspelling_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getWord() {
      return this.word;
    }

    public Browser_ReplaceMisspelling_args setWord(@org.apache.thrift.annotation.Nullable java.lang.String word) {
      this.word = word;
      return this;
    }

    public void unsetWord() {
      this.word = null;
    }

    /** Returns true if field word is set (has been assigned a value) and false otherwise */
    public boolean isSetWord() {
      return this.word != null;
    }

    public void setWordIsSet(boolean value) {
      if (!value) {
        this.word = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case WORD:
        if (value == null) {
          unsetWord();
        } else {
          setWord((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case WORD:
        return getWord();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case WORD:
        return isSetWord();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_ReplaceMisspelling_args)
        return this.equals((Browser_ReplaceMisspelling_args)that);
      return false;
    }

    public boolean equals(Browser_ReplaceMisspelling_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_word = true && this.isSetWord();
      boolean that_present_word = true && that.isSetWord();
      if (this_present_word || that_present_word) {
        if (!(this_present_word && that_present_word))
          return false;
        if (!this.word.equals(that.word))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetWord()) ? 131071 : 524287);
      if (isSetWord())
        hashCode = hashCode * 8191 + word.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_ReplaceMisspelling_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWord(), other.isSetWord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.word, other.word);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_ReplaceMisspelling_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("word:");
      if (this.word == null) {
        sb.append("null");
      } else {
        sb.append(this.word);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_ReplaceMisspelling_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ReplaceMisspelling_argsStandardScheme getScheme() {
        return new Browser_ReplaceMisspelling_argsStandardScheme();
      }
    }

    private static class Browser_ReplaceMisspelling_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_ReplaceMisspelling_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_ReplaceMisspelling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.word = iprot.readString();
                struct.setWordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_ReplaceMisspelling_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.word != null) {
          oprot.writeFieldBegin(WORD_FIELD_DESC);
          oprot.writeString(struct.word);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_ReplaceMisspelling_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ReplaceMisspelling_argsTupleScheme getScheme() {
        return new Browser_ReplaceMisspelling_argsTupleScheme();
      }
    }

    private static class Browser_ReplaceMisspelling_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_ReplaceMisspelling_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_ReplaceMisspelling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetWord()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetWord()) {
          oprot.writeString(struct.word);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_ReplaceMisspelling_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.word = iprot.readString();
          struct.setWordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SetFrameRate_args implements org.apache.thrift.TBase<Browser_SetFrameRate_args, Browser_SetFrameRate_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SetFrameRate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SetFrameRate_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("val", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SetFrameRate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SetFrameRate_argsTupleSchemeFactory();

    public int bid; // required
    public int val; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      VAL((short)2, "val");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // VAL
            return VAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __VAL_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VAL, new org.apache.thrift.meta_data.FieldMetaData("val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SetFrameRate_args.class, metaDataMap);
    }

    public Browser_SetFrameRate_args() {
    }

    public Browser_SetFrameRate_args(
      int bid,
      int val)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.val = val;
      setValIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SetFrameRate_args(Browser_SetFrameRate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.val = other.val;
    }

    @Override
    public Browser_SetFrameRate_args deepCopy() {
      return new Browser_SetFrameRate_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setValIsSet(false);
      this.val = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SetFrameRate_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getVal() {
      return this.val;
    }

    public Browser_SetFrameRate_args setVal(int val) {
      this.val = val;
      setValIsSet(true);
      return this;
    }

    public void unsetVal() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VAL_ISSET_ID);
    }

    /** Returns true if field val is set (has been assigned a value) and false otherwise */
    public boolean isSetVal() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VAL_ISSET_ID);
    }

    public void setValIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VAL_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case VAL:
        if (value == null) {
          unsetVal();
        } else {
          setVal((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case VAL:
        return getVal();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case VAL:
        return isSetVal();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SetFrameRate_args)
        return this.equals((Browser_SetFrameRate_args)that);
      return false;
    }

    public boolean equals(Browser_SetFrameRate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_val = true;
      boolean that_present_val = true;
      if (this_present_val || that_present_val) {
        if (!(this_present_val && that_present_val))
          return false;
        if (this.val != that.val)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + val;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SetFrameRate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVal(), other.isSetVal());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVal()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val, other.val);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SetFrameRate_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("val:");
      sb.append(this.val);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SetFrameRate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SetFrameRate_argsStandardScheme getScheme() {
        return new Browser_SetFrameRate_argsStandardScheme();
      }
    }

    private static class Browser_SetFrameRate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SetFrameRate_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SetFrameRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VAL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.val = iprot.readI32();
                struct.setValIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SetFrameRate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VAL_FIELD_DESC);
        oprot.writeI32(struct.val);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SetFrameRate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SetFrameRate_argsTupleScheme getScheme() {
        return new Browser_SetFrameRate_argsTupleScheme();
      }
    }

    private static class Browser_SetFrameRate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SetFrameRate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SetFrameRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetVal()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetVal()) {
          oprot.writeI32(struct.val);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SetFrameRate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.val = iprot.readI32();
          struct.setValIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Frame_ExecuteJavaScript_args implements org.apache.thrift.TBase<Frame_ExecuteJavaScript_args, Frame_ExecuteJavaScript_args._Fields>, java.io.Serializable, Cloneable, Comparable<Frame_ExecuteJavaScript_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Frame_ExecuteJavaScript_args");

    private static final org.apache.thrift.protocol.TField FRAME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("frameId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Frame_ExecuteJavaScript_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Frame_ExecuteJavaScript_argsTupleSchemeFactory();

    public int frameId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String code; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public int line; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FRAME_ID((short)1, "frameId"),
      CODE((short)2, "code"),
      URL((short)3, "url"),
      LINE((short)4, "line");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FRAME_ID
            return FRAME_ID;
          case 2: // CODE
            return CODE;
          case 3: // URL
            return URL;
          case 4: // LINE
            return LINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FRAMEID_ISSET_ID = 0;
    private static final int __LINE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FRAME_ID, new org.apache.thrift.meta_data.FieldMetaData("frameId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Frame_ExecuteJavaScript_args.class, metaDataMap);
    }

    public Frame_ExecuteJavaScript_args() {
    }

    public Frame_ExecuteJavaScript_args(
      int frameId,
      java.lang.String code,
      java.lang.String url,
      int line)
    {
      this();
      this.frameId = frameId;
      setFrameIdIsSet(true);
      this.code = code;
      this.url = url;
      this.line = line;
      setLineIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Frame_ExecuteJavaScript_args(Frame_ExecuteJavaScript_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.frameId = other.frameId;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      this.line = other.line;
    }

    @Override
    public Frame_ExecuteJavaScript_args deepCopy() {
      return new Frame_ExecuteJavaScript_args(this);
    }

    @Override
    public void clear() {
      setFrameIdIsSet(false);
      this.frameId = 0;
      this.code = null;
      this.url = null;
      setLineIsSet(false);
      this.line = 0;
    }

    public int getFrameId() {
      return this.frameId;
    }

    public Frame_ExecuteJavaScript_args setFrameId(int frameId) {
      this.frameId = frameId;
      setFrameIdIsSet(true);
      return this;
    }

    public void unsetFrameId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FRAMEID_ISSET_ID);
    }

    /** Returns true if field frameId is set (has been assigned a value) and false otherwise */
    public boolean isSetFrameId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FRAMEID_ISSET_ID);
    }

    public void setFrameIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FRAMEID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCode() {
      return this.code;
    }

    public Frame_ExecuteJavaScript_args setCode(@org.apache.thrift.annotation.Nullable java.lang.String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Frame_ExecuteJavaScript_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public int getLine() {
      return this.line;
    }

    public Frame_ExecuteJavaScript_args setLine(int line) {
      this.line = line;
      setLineIsSet(true);
      return this;
    }

    public void unsetLine() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    /** Returns true if field line is set (has been assigned a value) and false otherwise */
    public boolean isSetLine() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    public void setLineIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FRAME_ID:
        if (value == null) {
          unsetFrameId();
        } else {
          setFrameId((java.lang.Integer)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((java.lang.String)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case LINE:
        if (value == null) {
          unsetLine();
        } else {
          setLine((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FRAME_ID:
        return getFrameId();

      case CODE:
        return getCode();

      case URL:
        return getUrl();

      case LINE:
        return getLine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FRAME_ID:
        return isSetFrameId();
      case CODE:
        return isSetCode();
      case URL:
        return isSetUrl();
      case LINE:
        return isSetLine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Frame_ExecuteJavaScript_args)
        return this.equals((Frame_ExecuteJavaScript_args)that);
      return false;
    }

    public boolean equals(Frame_ExecuteJavaScript_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_frameId = true;
      boolean that_present_frameId = true;
      if (this_present_frameId || that_present_frameId) {
        if (!(this_present_frameId && that_present_frameId))
          return false;
        if (this.frameId != that.frameId)
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_line = true;
      boolean that_present_line = true;
      if (this_present_line || that_present_line) {
        if (!(this_present_line && that_present_line))
          return false;
        if (this.line != that.line)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + frameId;

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + line;

      return hashCode;
    }

    @Override
    public int compareTo(Frame_ExecuteJavaScript_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFrameId(), other.isSetFrameId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFrameId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameId, other.frameId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCode(), other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLine(), other.isSetLine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, other.line);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Frame_ExecuteJavaScript_args(");
      boolean first = true;

      sb.append("frameId:");
      sb.append(this.frameId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("line:");
      sb.append(this.line);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Frame_ExecuteJavaScript_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Frame_ExecuteJavaScript_argsStandardScheme getScheme() {
        return new Frame_ExecuteJavaScript_argsStandardScheme();
      }
    }

    private static class Frame_ExecuteJavaScript_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Frame_ExecuteJavaScript_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Frame_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FRAME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.frameId = iprot.readI32();
                struct.setFrameIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.line = iprot.readI32();
                struct.setLineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Frame_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FRAME_ID_FIELD_DESC);
        oprot.writeI32(struct.frameId);
        oprot.writeFieldEnd();
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LINE_FIELD_DESC);
        oprot.writeI32(struct.line);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Frame_ExecuteJavaScript_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Frame_ExecuteJavaScript_argsTupleScheme getScheme() {
        return new Frame_ExecuteJavaScript_argsTupleScheme();
      }
    }

    private static class Frame_ExecuteJavaScript_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Frame_ExecuteJavaScript_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Frame_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFrameId()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetUrl()) {
          optionals.set(2);
        }
        if (struct.isSetLine()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFrameId()) {
          oprot.writeI32(struct.frameId);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetLine()) {
          oprot.writeI32(struct.line);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Frame_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.frameId = iprot.readI32();
          struct.setFrameIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.line = iprot.readI32();
          struct.setLineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Update_args implements org.apache.thrift.TBase<Request_Update_args, Request_Update_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Update_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Update_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Update_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Update_args.class, metaDataMap);
    }

    public Request_Update_args() {
    }

    public Request_Update_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Update_args(Request_Update_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public Request_Update_args deepCopy() {
      return new Request_Update_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_Update_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Update_args)
        return this.equals((Request_Update_args)that);
      return false;
    }

    public boolean equals(Request_Update_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_Update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Update_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Update_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_argsStandardScheme getScheme() {
        return new Request_Update_argsStandardScheme();
      }
    }

    private static class Request_Update_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Update_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Update_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_argsTupleScheme getScheme() {
        return new Request_Update_argsTupleScheme();
      }
    }

    private static class Request_Update_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Update_result implements org.apache.thrift.TBase<Request_Update_result, Request_Update_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Update_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Update_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Update_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Update_result.class, metaDataMap);
    }

    public Request_Update_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Update_result(Request_Update_result other) {
    }

    @Override
    public Request_Update_result deepCopy() {
      return new Request_Update_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Update_result)
        return this.equals((Request_Update_result)that);
      return false;
    }

    public boolean equals(Request_Update_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_Update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Update_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Update_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_resultStandardScheme getScheme() {
        return new Request_Update_resultStandardScheme();
      }
    }

    private static class Request_Update_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Update_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Update_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_resultTupleScheme getScheme() {
        return new Request_Update_resultTupleScheme();
      }
    }

    private static class Request_Update_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetPostData_args implements org.apache.thrift.TBase<Request_GetPostData_args, Request_GetPostData_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetPostData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetPostData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetPostData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetPostData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetPostData_args.class, metaDataMap);
    }

    public Request_GetPostData_args() {
    }

    public Request_GetPostData_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetPostData_args(Request_GetPostData_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public Request_GetPostData_args deepCopy() {
      return new Request_GetPostData_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_GetPostData_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetPostData_args)
        return this.equals((Request_GetPostData_args)that);
      return false;
    }

    public boolean equals(Request_GetPostData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetPostData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetPostData_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetPostData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_argsStandardScheme getScheme() {
        return new Request_GetPostData_argsStandardScheme();
      }
    }

    private static class Request_GetPostData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetPostData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetPostData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_argsTupleScheme getScheme() {
        return new Request_GetPostData_argsTupleScheme();
      }
    }

    private static class Request_GetPostData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetPostData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetPostData_result implements org.apache.thrift.TBase<Request_GetPostData_result, Request_GetPostData_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetPostData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetPostData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetPostData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetPostData_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.PostData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetPostData_result.class, metaDataMap);
    }

    public Request_GetPostData_result() {
    }

    public Request_GetPostData_result(
      com.jetbrains.cef.remote.thrift_codegen.PostData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetPostData_result(Request_GetPostData_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.PostData(other.success);
      }
    }

    @Override
    public Request_GetPostData_result deepCopy() {
      return new Request_GetPostData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.PostData getSuccess() {
      return this.success;
    }

    public Request_GetPostData_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.PostData)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetPostData_result)
        return this.equals((Request_GetPostData_result)that);
      return false;
    }

    public boolean equals(Request_GetPostData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetPostData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetPostData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetPostData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_resultStandardScheme getScheme() {
        return new Request_GetPostData_resultStandardScheme();
      }
    }

    private static class Request_GetPostData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetPostData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.PostData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetPostData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_resultTupleScheme getScheme() {
        return new Request_GetPostData_resultTupleScheme();
      }
    }

    private static class Request_GetPostData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetPostData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.PostData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetPostData_args implements org.apache.thrift.TBase<Request_SetPostData_args, Request_SetPostData_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetPostData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetPostData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField POST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("postData", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetPostData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetPostData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      POST_DATA((short)2, "postData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // POST_DATA
            return POST_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.POST_DATA, new org.apache.thrift.meta_data.FieldMetaData("postData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.PostData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetPostData_args.class, metaDataMap);
    }

    public Request_SetPostData_args() {
    }

    public Request_SetPostData_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      com.jetbrains.cef.remote.thrift_codegen.PostData postData)
    {
      this();
      this.request = request;
      this.postData = postData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetPostData_args(Request_SetPostData_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetPostData()) {
        this.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData(other.postData);
      }
    }

    @Override
    public Request_SetPostData_args deepCopy() {
      return new Request_SetPostData_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.postData = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_SetPostData_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.PostData getPostData() {
      return this.postData;
    }

    public Request_SetPostData_args setPostData(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData) {
      this.postData = postData;
      return this;
    }

    public void unsetPostData() {
      this.postData = null;
    }

    /** Returns true if field postData is set (has been assigned a value) and false otherwise */
    public boolean isSetPostData() {
      return this.postData != null;
    }

    public void setPostDataIsSet(boolean value) {
      if (!value) {
        this.postData = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case POST_DATA:
        if (value == null) {
          unsetPostData();
        } else {
          setPostData((com.jetbrains.cef.remote.thrift_codegen.PostData)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case POST_DATA:
        return getPostData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case POST_DATA:
        return isSetPostData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetPostData_args)
        return this.equals((Request_SetPostData_args)that);
      return false;
    }

    public boolean equals(Request_SetPostData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_postData = true && this.isSetPostData();
      boolean that_present_postData = true && that.isSetPostData();
      if (this_present_postData || that_present_postData) {
        if (!(this_present_postData && that_present_postData))
          return false;
        if (!this.postData.equals(that.postData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetPostData()) ? 131071 : 524287);
      if (isSetPostData())
        hashCode = hashCode * 8191 + postData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetPostData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPostData(), other.isSetPostData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postData, other.postData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetPostData_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("postData:");
      if (this.postData == null) {
        sb.append("null");
      } else {
        sb.append(this.postData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (postData != null) {
        postData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetPostData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_argsStandardScheme getScheme() {
        return new Request_SetPostData_argsStandardScheme();
      }
    }

    private static class Request_SetPostData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetPostData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
                struct.postData.read(iprot);
                struct.setPostDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.postData != null) {
          oprot.writeFieldBegin(POST_DATA_FIELD_DESC);
          struct.postData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetPostData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_argsTupleScheme getScheme() {
        return new Request_SetPostData_argsTupleScheme();
      }
    }

    private static class Request_SetPostData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetPostData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetPostData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetPostData()) {
          struct.postData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
          struct.postData.read(iprot);
          struct.setPostDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetPostData_result implements org.apache.thrift.TBase<Request_SetPostData_result, Request_SetPostData_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetPostData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetPostData_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetPostData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetPostData_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetPostData_result.class, metaDataMap);
    }

    public Request_SetPostData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetPostData_result(Request_SetPostData_result other) {
    }

    @Override
    public Request_SetPostData_result deepCopy() {
      return new Request_SetPostData_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetPostData_result)
        return this.equals((Request_SetPostData_result)that);
      return false;
    }

    public boolean equals(Request_SetPostData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetPostData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetPostData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetPostData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_resultStandardScheme getScheme() {
        return new Request_SetPostData_resultStandardScheme();
      }
    }

    private static class Request_SetPostData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetPostData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetPostData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_resultTupleScheme getScheme() {
        return new Request_SetPostData_resultTupleScheme();
      }
    }

    private static class Request_SetPostData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetPostData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderByName_args implements org.apache.thrift.TBase<Request_GetHeaderByName_args, Request_GetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      NAME((short)2, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderByName_args.class, metaDataMap);
    }

    public Request_GetHeaderByName_args() {
    }

    public Request_GetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.lang.String name)
    {
      this();
      this.request = request;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderByName_args(Request_GetHeaderByName_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public Request_GetHeaderByName_args deepCopy() {
      return new Request_GetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.name = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_GetHeaderByName_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Request_GetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderByName_args)
        return this.equals((Request_GetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Request_GetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderByName_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_argsStandardScheme getScheme() {
        return new Request_GetHeaderByName_argsStandardScheme();
      }
    }

    private static class Request_GetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_argsTupleScheme getScheme() {
        return new Request_GetHeaderByName_argsTupleScheme();
      }
    }

    private static class Request_GetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderByName_result implements org.apache.thrift.TBase<Request_GetHeaderByName_result, Request_GetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderByName_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderByName_result.class, metaDataMap);
    }

    public Request_GetHeaderByName_result() {
    }

    public Request_GetHeaderByName_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderByName_result(Request_GetHeaderByName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public Request_GetHeaderByName_result deepCopy() {
      return new Request_GetHeaderByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public Request_GetHeaderByName_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderByName_result)
        return this.equals((Request_GetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Request_GetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_resultStandardScheme getScheme() {
        return new Request_GetHeaderByName_resultStandardScheme();
      }
    }

    private static class Request_GetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_resultTupleScheme getScheme() {
        return new Request_GetHeaderByName_resultTupleScheme();
      }
    }

    private static class Request_GetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderByName_args implements org.apache.thrift.TBase<Request_SetHeaderByName_args, Request_SetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("overwrite", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String value; // required
    public boolean overwrite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      NAME((short)2, "name"),
      VALUE((short)3, "value"),
      OVERWRITE((short)4, "overwrite");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // NAME
            return NAME;
          case 3: // VALUE
            return VALUE;
          case 4: // OVERWRITE
            return OVERWRITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OVERWRITE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("overwrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderByName_args.class, metaDataMap);
    }

    public Request_SetHeaderByName_args() {
    }

    public Request_SetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.lang.String name,
      java.lang.String value,
      boolean overwrite)
    {
      this();
      this.request = request;
      this.name = name;
      this.value = value;
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderByName_args(Request_SetHeaderByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      this.overwrite = other.overwrite;
    }

    @Override
    public Request_SetHeaderByName_args deepCopy() {
      return new Request_SetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.name = null;
      this.value = null;
      setOverwriteIsSet(false);
      this.overwrite = false;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_SetHeaderByName_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Request_SetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getValue() {
      return this.value;
    }

    public Request_SetHeaderByName_args setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean isOverwrite() {
      return this.overwrite;
    }

    public Request_SetHeaderByName_args setOverwrite(boolean overwrite) {
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
      return this;
    }

    public void unsetOverwrite() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    /** Returns true if field overwrite is set (has been assigned a value) and false otherwise */
    public boolean isSetOverwrite() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    public void setOverwriteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERWRITE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.String)value);
        }
        break;

      case OVERWRITE:
        if (value == null) {
          unsetOverwrite();
        } else {
          setOverwrite((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case NAME:
        return getName();

      case VALUE:
        return getValue();

      case OVERWRITE:
        return isOverwrite();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case NAME:
        return isSetName();
      case VALUE:
        return isSetValue();
      case OVERWRITE:
        return isSetOverwrite();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderByName_args)
        return this.equals((Request_SetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Request_SetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_overwrite = true;
      boolean that_present_overwrite = true;
      if (this_present_overwrite || that_present_overwrite) {
        if (!(this_present_overwrite && that_present_overwrite))
          return false;
        if (this.overwrite != that.overwrite)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      hashCode = hashCode * 8191 + ((overwrite) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOverwrite(), other.isSetOverwrite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverwrite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overwrite, other.overwrite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderByName_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("overwrite:");
      sb.append(this.overwrite);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_argsStandardScheme getScheme() {
        return new Request_SetHeaderByName_argsStandardScheme();
      }
    }

    private static class Request_SetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OVERWRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.overwrite = iprot.readBool();
                struct.setOverwriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OVERWRITE_FIELD_DESC);
        oprot.writeBool(struct.overwrite);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_argsTupleScheme getScheme() {
        return new Request_SetHeaderByName_argsTupleScheme();
      }
    }

    private static class Request_SetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        if (struct.isSetOverwrite()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetOverwrite()) {
          oprot.writeBool(struct.overwrite);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.overwrite = iprot.readBool();
          struct.setOverwriteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderByName_result implements org.apache.thrift.TBase<Request_SetHeaderByName_result, Request_SetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderByName_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderByName_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderByName_result.class, metaDataMap);
    }

    public Request_SetHeaderByName_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderByName_result(Request_SetHeaderByName_result other) {
    }

    @Override
    public Request_SetHeaderByName_result deepCopy() {
      return new Request_SetHeaderByName_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderByName_result)
        return this.equals((Request_SetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Request_SetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderByName_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_resultStandardScheme getScheme() {
        return new Request_SetHeaderByName_resultStandardScheme();
      }
    }

    private static class Request_SetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_resultTupleScheme getScheme() {
        return new Request_SetHeaderByName_resultTupleScheme();
      }
    }

    private static class Request_SetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderMap_args implements org.apache.thrift.TBase<Request_GetHeaderMap_args, Request_GetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderMap_args.class, metaDataMap);
    }

    public Request_GetHeaderMap_args() {
    }

    public Request_GetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderMap_args(Request_GetHeaderMap_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public Request_GetHeaderMap_args deepCopy() {
      return new Request_GetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_GetHeaderMap_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderMap_args)
        return this.equals((Request_GetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Request_GetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderMap_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_argsStandardScheme getScheme() {
        return new Request_GetHeaderMap_argsStandardScheme();
      }
    }

    private static class Request_GetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_argsTupleScheme getScheme() {
        return new Request_GetHeaderMap_argsTupleScheme();
      }
    }

    private static class Request_GetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderMap_result implements org.apache.thrift.TBase<Request_GetHeaderMap_result, Request_GetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderMap_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderMap_result.class, metaDataMap);
    }

    public Request_GetHeaderMap_result() {
    }

    public Request_GetHeaderMap_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderMap_result(Request_GetHeaderMap_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    @Override
    public Request_GetHeaderMap_result deepCopy() {
      return new Request_GetHeaderMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public Request_GetHeaderMap_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderMap_result)
        return this.equals((Request_GetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Request_GetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_resultStandardScheme getScheme() {
        return new Request_GetHeaderMap_resultStandardScheme();
      }
    }

    private static class Request_GetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_resultTupleScheme getScheme() {
        return new Request_GetHeaderMap_resultTupleScheme();
      }
    }

    private static class Request_GetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key7;
            @org.apache.thrift.annotation.Nullable java.lang.String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderMap_args implements org.apache.thrift.TBase<Request_SetHeaderMap_args, Request_SetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HEADER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("headerMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      HEADER_MAP((short)2, "headerMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // HEADER_MAP
            return HEADER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HEADER_MAP, new org.apache.thrift.meta_data.FieldMetaData("headerMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderMap_args.class, metaDataMap);
    }

    public Request_SetHeaderMap_args() {
    }

    public Request_SetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.util.Map<java.lang.String,java.lang.String> headerMap)
    {
      this();
      this.request = request;
      this.headerMap = headerMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderMap_args(Request_SetHeaderMap_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetHeaderMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.headerMap);
        this.headerMap = __this__headerMap;
      }
    }

    @Override
    public Request_SetHeaderMap_args deepCopy() {
      return new Request_SetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.headerMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_SetHeaderMap_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public int getHeaderMapSize() {
      return (this.headerMap == null) ? 0 : this.headerMap.size();
    }

    public void putToHeaderMap(java.lang.String key, java.lang.String val) {
      if (this.headerMap == null) {
        this.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.headerMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getHeaderMap() {
      return this.headerMap;
    }

    public Request_SetHeaderMap_args setHeaderMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap) {
      this.headerMap = headerMap;
      return this;
    }

    public void unsetHeaderMap() {
      this.headerMap = null;
    }

    /** Returns true if field headerMap is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderMap() {
      return this.headerMap != null;
    }

    public void setHeaderMapIsSet(boolean value) {
      if (!value) {
        this.headerMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HEADER_MAP:
        if (value == null) {
          unsetHeaderMap();
        } else {
          setHeaderMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case HEADER_MAP:
        return getHeaderMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case HEADER_MAP:
        return isSetHeaderMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderMap_args)
        return this.equals((Request_SetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Request_SetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_headerMap = true && this.isSetHeaderMap();
      boolean that_present_headerMap = true && that.isSetHeaderMap();
      if (this_present_headerMap || that_present_headerMap) {
        if (!(this_present_headerMap && that_present_headerMap))
          return false;
        if (!this.headerMap.equals(that.headerMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaderMap()) ? 131071 : 524287);
      if (isSetHeaderMap())
        hashCode = hashCode * 8191 + headerMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeaderMap(), other.isSetHeaderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerMap, other.headerMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderMap_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headerMap:");
      if (this.headerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.headerMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_argsStandardScheme getScheme() {
        return new Request_SetHeaderMap_argsStandardScheme();
      }
    }

    private static class Request_SetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HEADER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map10.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key11;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.headerMap.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setHeaderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.headerMap != null) {
          oprot.writeFieldBegin(HEADER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headerMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_argsTupleScheme getScheme() {
        return new Request_SetHeaderMap_argsTupleScheme();
      }
    }

    private static class Request_SetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetHeaderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetHeaderMap()) {
          {
            oprot.writeI32(struct.headerMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map16.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key17;
            @org.apache.thrift.annotation.Nullable java.lang.String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.headerMap.put(_key17, _val18);
            }
          }
          struct.setHeaderMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderMap_result implements org.apache.thrift.TBase<Request_SetHeaderMap_result, Request_SetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderMap_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderMap_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderMap_result.class, metaDataMap);
    }

    public Request_SetHeaderMap_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderMap_result(Request_SetHeaderMap_result other) {
    }

    @Override
    public Request_SetHeaderMap_result deepCopy() {
      return new Request_SetHeaderMap_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderMap_result)
        return this.equals((Request_SetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Request_SetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderMap_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_resultStandardScheme getScheme() {
        return new Request_SetHeaderMap_resultStandardScheme();
      }
    }

    private static class Request_SetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_resultTupleScheme getScheme() {
        return new Request_SetHeaderMap_resultTupleScheme();
      }
    }

    private static class Request_SetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Set_args implements org.apache.thrift.TBase<Request_Set_args, Request_Set_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Set_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Set_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("postData", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField HEADER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("headerMap", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Set_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Set_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String method; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      URL((short)2, "url"),
      METHOD((short)3, "method"),
      POST_DATA((short)4, "postData"),
      HEADER_MAP((short)5, "headerMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // URL
            return URL;
          case 3: // METHOD
            return METHOD;
          case 4: // POST_DATA
            return POST_DATA;
          case 5: // HEADER_MAP
            return HEADER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_DATA, new org.apache.thrift.meta_data.FieldMetaData("postData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.PostData.class)));
      tmpMap.put(_Fields.HEADER_MAP, new org.apache.thrift.meta_data.FieldMetaData("headerMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Set_args.class, metaDataMap);
    }

    public Request_Set_args() {
    }

    public Request_Set_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.lang.String url,
      java.lang.String method,
      com.jetbrains.cef.remote.thrift_codegen.PostData postData,
      java.util.Map<java.lang.String,java.lang.String> headerMap)
    {
      this();
      this.request = request;
      this.url = url;
      this.method = method;
      this.postData = postData;
      this.headerMap = headerMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Set_args(Request_Set_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
      if (other.isSetPostData()) {
        this.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData(other.postData);
      }
      if (other.isSetHeaderMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.headerMap);
        this.headerMap = __this__headerMap;
      }
    }

    @Override
    public Request_Set_args deepCopy() {
      return new Request_Set_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.url = null;
      this.method = null;
      this.postData = null;
      this.headerMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_Set_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Request_Set_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMethod() {
      return this.method;
    }

    public Request_Set_args setMethod(@org.apache.thrift.annotation.Nullable java.lang.String method) {
      this.method = method;
      return this;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.PostData getPostData() {
      return this.postData;
    }

    public Request_Set_args setPostData(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData) {
      this.postData = postData;
      return this;
    }

    public void unsetPostData() {
      this.postData = null;
    }

    /** Returns true if field postData is set (has been assigned a value) and false otherwise */
    public boolean isSetPostData() {
      return this.postData != null;
    }

    public void setPostDataIsSet(boolean value) {
      if (!value) {
        this.postData = null;
      }
    }

    public int getHeaderMapSize() {
      return (this.headerMap == null) ? 0 : this.headerMap.size();
    }

    public void putToHeaderMap(java.lang.String key, java.lang.String val) {
      if (this.headerMap == null) {
        this.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.headerMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getHeaderMap() {
      return this.headerMap;
    }

    public Request_Set_args setHeaderMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap) {
      this.headerMap = headerMap;
      return this;
    }

    public void unsetHeaderMap() {
      this.headerMap = null;
    }

    /** Returns true if field headerMap is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderMap() {
      return this.headerMap != null;
    }

    public void setHeaderMapIsSet(boolean value) {
      if (!value) {
        this.headerMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          setMethod((java.lang.String)value);
        }
        break;

      case POST_DATA:
        if (value == null) {
          unsetPostData();
        } else {
          setPostData((com.jetbrains.cef.remote.thrift_codegen.PostData)value);
        }
        break;

      case HEADER_MAP:
        if (value == null) {
          unsetHeaderMap();
        } else {
          setHeaderMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case URL:
        return getUrl();

      case METHOD:
        return getMethod();

      case POST_DATA:
        return getPostData();

      case HEADER_MAP:
        return getHeaderMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case URL:
        return isSetUrl();
      case METHOD:
        return isSetMethod();
      case POST_DATA:
        return isSetPostData();
      case HEADER_MAP:
        return isSetHeaderMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Set_args)
        return this.equals((Request_Set_args)that);
      return false;
    }

    public boolean equals(Request_Set_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      boolean this_present_postData = true && this.isSetPostData();
      boolean that_present_postData = true && that.isSetPostData();
      if (this_present_postData || that_present_postData) {
        if (!(this_present_postData && that_present_postData))
          return false;
        if (!this.postData.equals(that.postData))
          return false;
      }

      boolean this_present_headerMap = true && this.isSetHeaderMap();
      boolean that_present_headerMap = true && that.isSetHeaderMap();
      if (this_present_headerMap || that_present_headerMap) {
        if (!(this_present_headerMap && that_present_headerMap))
          return false;
        if (!this.headerMap.equals(that.headerMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
      if (isSetMethod())
        hashCode = hashCode * 8191 + method.hashCode();

      hashCode = hashCode * 8191 + ((isSetPostData()) ? 131071 : 524287);
      if (isSetPostData())
        hashCode = hashCode * 8191 + postData.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaderMap()) ? 131071 : 524287);
      if (isSetHeaderMap())
        hashCode = hashCode * 8191 + headerMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_Set_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMethod(), other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPostData(), other.isSetPostData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postData, other.postData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeaderMap(), other.isSetHeaderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerMap, other.headerMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Set_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("postData:");
      if (this.postData == null) {
        sb.append("null");
      } else {
        sb.append(this.postData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headerMap:");
      if (this.headerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.headerMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (postData != null) {
        postData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Set_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_argsStandardScheme getScheme() {
        return new Request_Set_argsStandardScheme();
      }
    }

    private static class Request_Set_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Set_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Set_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POST_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
                struct.postData.read(iprot);
                struct.setPostDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // HEADER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map20.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key21;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    struct.headerMap.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setHeaderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Set_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.method != null) {
          oprot.writeFieldBegin(METHOD_FIELD_DESC);
          oprot.writeString(struct.method);
          oprot.writeFieldEnd();
        }
        if (struct.postData != null) {
          oprot.writeFieldBegin(POST_DATA_FIELD_DESC);
          struct.postData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.headerMap != null) {
          oprot.writeFieldBegin(HEADER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headerMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter24 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Set_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_argsTupleScheme getScheme() {
        return new Request_Set_argsTupleScheme();
      }
    }

    private static class Request_Set_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Set_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Set_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        if (struct.isSetMethod()) {
          optionals.set(2);
        }
        if (struct.isSetPostData()) {
          optionals.set(3);
        }
        if (struct.isSetHeaderMap()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetMethod()) {
          oprot.writeString(struct.method);
        }
        if (struct.isSetPostData()) {
          struct.postData.write(oprot);
        }
        if (struct.isSetHeaderMap()) {
          {
            oprot.writeI32(struct.headerMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter25 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Set_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.method = iprot.readString();
          struct.setMethodIsSet(true);
        }
        if (incoming.get(3)) {
          struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
          struct.postData.read(iprot);
          struct.setPostDataIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map26.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key27;
            @org.apache.thrift.annotation.Nullable java.lang.String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.headerMap.put(_key27, _val28);
            }
          }
          struct.setHeaderMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Set_result implements org.apache.thrift.TBase<Request_Set_result, Request_Set_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Set_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Set_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Set_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Set_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Set_result.class, metaDataMap);
    }

    public Request_Set_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Set_result(Request_Set_result other) {
    }

    @Override
    public Request_Set_result deepCopy() {
      return new Request_Set_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Set_result)
        return this.equals((Request_Set_result)that);
      return false;
    }

    public boolean equals(Request_Set_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_Set_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Set_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Set_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_resultStandardScheme getScheme() {
        return new Request_Set_resultStandardScheme();
      }
    }

    private static class Request_Set_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Set_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Set_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Set_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Set_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_resultTupleScheme getScheme() {
        return new Request_Set_resultTupleScheme();
      }
    }

    private static class Request_Set_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Set_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Set_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Set_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_Update_args implements org.apache.thrift.TBase<Response_Update_args, Response_Update_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_Update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_Update_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_Update_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_Update_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_Update_args.class, metaDataMap);
    }

    public Response_Update_args() {
    }

    public Response_Update_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response)
    {
      this();
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_Update_args(Response_Update_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
    }

    @Override
    public Response_Update_args deepCopy() {
      return new Response_Update_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_Update_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_Update_args)
        return this.equals((Response_Update_args)that);
      return false;
    }

    public boolean equals(Response_Update_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_Update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_Update_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_Update_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_argsStandardScheme getScheme() {
        return new Response_Update_argsStandardScheme();
      }
    }

    private static class Response_Update_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_Update_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_Update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_Update_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_argsTupleScheme getScheme() {
        return new Response_Update_argsTupleScheme();
      }
    }

    private static class Response_Update_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_Update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_Update_result implements org.apache.thrift.TBase<Response_Update_result, Response_Update_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_Update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_Update_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_Update_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_Update_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_Update_result.class, metaDataMap);
    }

    public Response_Update_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_Update_result(Response_Update_result other) {
    }

    @Override
    public Response_Update_result deepCopy() {
      return new Response_Update_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_Update_result)
        return this.equals((Response_Update_result)that);
      return false;
    }

    public boolean equals(Response_Update_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Response_Update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_Update_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_Update_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_resultStandardScheme getScheme() {
        return new Response_Update_resultStandardScheme();
      }
    }

    private static class Response_Update_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_Update_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_Update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_Update_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_resultTupleScheme getScheme() {
        return new Response_Update_resultTupleScheme();
      }
    }

    private static class Response_Update_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_Update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderByName_args implements org.apache.thrift.TBase<Response_GetHeaderByName_args, Response_GetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response"),
      NAME((short)2, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderByName_args.class, metaDataMap);
    }

    public Response_GetHeaderByName_args() {
    }

    public Response_GetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.lang.String name)
    {
      this();
      this.response = response;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderByName_args(Response_GetHeaderByName_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public Response_GetHeaderByName_args deepCopy() {
      return new Response_GetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
      this.name = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_GetHeaderByName_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Response_GetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderByName_args)
        return this.equals((Response_GetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Response_GetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderByName_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_argsStandardScheme getScheme() {
        return new Response_GetHeaderByName_argsStandardScheme();
      }
    }

    private static class Response_GetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_argsTupleScheme getScheme() {
        return new Response_GetHeaderByName_argsTupleScheme();
      }
    }

    private static class Response_GetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderByName_result implements org.apache.thrift.TBase<Response_GetHeaderByName_result, Response_GetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderByName_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderByName_result.class, metaDataMap);
    }

    public Response_GetHeaderByName_result() {
    }

    public Response_GetHeaderByName_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderByName_result(Response_GetHeaderByName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public Response_GetHeaderByName_result deepCopy() {
      return new Response_GetHeaderByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public Response_GetHeaderByName_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderByName_result)
        return this.equals((Response_GetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Response_GetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_resultStandardScheme getScheme() {
        return new Response_GetHeaderByName_resultStandardScheme();
      }
    }

    private static class Response_GetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_resultTupleScheme getScheme() {
        return new Response_GetHeaderByName_resultTupleScheme();
      }
    }

    private static class Response_GetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderByName_args implements org.apache.thrift.TBase<Response_SetHeaderByName_args, Response_SetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("overwrite", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String value; // required
    public boolean overwrite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response"),
      NAME((short)2, "name"),
      VALUE((short)3, "value"),
      OVERWRITE((short)4, "overwrite");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          case 2: // NAME
            return NAME;
          case 3: // VALUE
            return VALUE;
          case 4: // OVERWRITE
            return OVERWRITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OVERWRITE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("overwrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderByName_args.class, metaDataMap);
    }

    public Response_SetHeaderByName_args() {
    }

    public Response_SetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.lang.String name,
      java.lang.String value,
      boolean overwrite)
    {
      this();
      this.response = response;
      this.name = name;
      this.value = value;
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderByName_args(Response_SetHeaderByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      this.overwrite = other.overwrite;
    }

    @Override
    public Response_SetHeaderByName_args deepCopy() {
      return new Response_SetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
      this.name = null;
      this.value = null;
      setOverwriteIsSet(false);
      this.overwrite = false;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_SetHeaderByName_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Response_SetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getValue() {
      return this.value;
    }

    public Response_SetHeaderByName_args setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean isOverwrite() {
      return this.overwrite;
    }

    public Response_SetHeaderByName_args setOverwrite(boolean overwrite) {
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
      return this;
    }

    public void unsetOverwrite() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    /** Returns true if field overwrite is set (has been assigned a value) and false otherwise */
    public boolean isSetOverwrite() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    public void setOverwriteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERWRITE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.String)value);
        }
        break;

      case OVERWRITE:
        if (value == null) {
          unsetOverwrite();
        } else {
          setOverwrite((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      case NAME:
        return getName();

      case VALUE:
        return getValue();

      case OVERWRITE:
        return isOverwrite();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      case NAME:
        return isSetName();
      case VALUE:
        return isSetValue();
      case OVERWRITE:
        return isSetOverwrite();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderByName_args)
        return this.equals((Response_SetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Response_SetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_overwrite = true;
      boolean that_present_overwrite = true;
      if (this_present_overwrite || that_present_overwrite) {
        if (!(this_present_overwrite && that_present_overwrite))
          return false;
        if (this.overwrite != that.overwrite)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      hashCode = hashCode * 8191 + ((overwrite) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOverwrite(), other.isSetOverwrite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverwrite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overwrite, other.overwrite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderByName_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("overwrite:");
      sb.append(this.overwrite);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_argsStandardScheme getScheme() {
        return new Response_SetHeaderByName_argsStandardScheme();
      }
    }

    private static class Response_SetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OVERWRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.overwrite = iprot.readBool();
                struct.setOverwriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OVERWRITE_FIELD_DESC);
        oprot.writeBool(struct.overwrite);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_argsTupleScheme getScheme() {
        return new Response_SetHeaderByName_argsTupleScheme();
      }
    }

    private static class Response_SetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        if (struct.isSetOverwrite()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetOverwrite()) {
          oprot.writeBool(struct.overwrite);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.overwrite = iprot.readBool();
          struct.setOverwriteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderByName_result implements org.apache.thrift.TBase<Response_SetHeaderByName_result, Response_SetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderByName_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderByName_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderByName_result.class, metaDataMap);
    }

    public Response_SetHeaderByName_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderByName_result(Response_SetHeaderByName_result other) {
    }

    @Override
    public Response_SetHeaderByName_result deepCopy() {
      return new Response_SetHeaderByName_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderByName_result)
        return this.equals((Response_SetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Response_SetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderByName_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_resultStandardScheme getScheme() {
        return new Response_SetHeaderByName_resultStandardScheme();
      }
    }

    private static class Response_SetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_resultTupleScheme getScheme() {
        return new Response_SetHeaderByName_resultTupleScheme();
      }
    }

    private static class Response_SetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderMap_args implements org.apache.thrift.TBase<Response_GetHeaderMap_args, Response_GetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderMap_args.class, metaDataMap);
    }

    public Response_GetHeaderMap_args() {
    }

    public Response_GetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response)
    {
      this();
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderMap_args(Response_GetHeaderMap_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
    }

    @Override
    public Response_GetHeaderMap_args deepCopy() {
      return new Response_GetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_GetHeaderMap_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderMap_args)
        return this.equals((Response_GetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Response_GetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderMap_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_argsStandardScheme getScheme() {
        return new Response_GetHeaderMap_argsStandardScheme();
      }
    }

    private static class Response_GetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_argsTupleScheme getScheme() {
        return new Response_GetHeaderMap_argsTupleScheme();
      }
    }

    private static class Response_GetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderMap_result implements org.apache.thrift.TBase<Response_GetHeaderMap_result, Response_GetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderMap_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderMap_result.class, metaDataMap);
    }

    public Response_GetHeaderMap_result() {
    }

    public Response_GetHeaderMap_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderMap_result(Response_GetHeaderMap_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    @Override
    public Response_GetHeaderMap_result deepCopy() {
      return new Response_GetHeaderMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public Response_GetHeaderMap_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderMap_result)
        return this.equals((Response_GetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Response_GetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_resultStandardScheme getScheme() {
        return new Response_GetHeaderMap_resultStandardScheme();
      }
    }

    private static class Response_GetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map30.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key31;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val32;
                  for (int _i33 = 0; _i33 < _map30.size; ++_i33)
                  {
                    _key31 = iprot.readString();
                    _val32 = iprot.readString();
                    struct.success.put(_key31, _val32);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter34 : struct.success.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_resultTupleScheme getScheme() {
        return new Response_GetHeaderMap_resultTupleScheme();
      }
    }

    private static class Response_GetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter35 : struct.success.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map36.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key37;
            @org.apache.thrift.annotation.Nullable java.lang.String _val38;
            for (int _i39 = 0; _i39 < _map36.size; ++_i39)
            {
              _key37 = iprot.readString();
              _val38 = iprot.readString();
              struct.success.put(_key37, _val38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderMap_args implements org.apache.thrift.TBase<Response_SetHeaderMap_args, Response_SetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HEADER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("headerMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response"),
      HEADER_MAP((short)2, "headerMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          case 2: // HEADER_MAP
            return HEADER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HEADER_MAP, new org.apache.thrift.meta_data.FieldMetaData("headerMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderMap_args.class, metaDataMap);
    }

    public Response_SetHeaderMap_args() {
    }

    public Response_SetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.util.Map<java.lang.String,java.lang.String> headerMap)
    {
      this();
      this.response = response;
      this.headerMap = headerMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderMap_args(Response_SetHeaderMap_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetHeaderMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.headerMap);
        this.headerMap = __this__headerMap;
      }
    }

    @Override
    public Response_SetHeaderMap_args deepCopy() {
      return new Response_SetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
      this.headerMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_SetHeaderMap_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    public int getHeaderMapSize() {
      return (this.headerMap == null) ? 0 : this.headerMap.size();
    }

    public void putToHeaderMap(java.lang.String key, java.lang.String val) {
      if (this.headerMap == null) {
        this.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.headerMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getHeaderMap() {
      return this.headerMap;
    }

    public Response_SetHeaderMap_args setHeaderMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap) {
      this.headerMap = headerMap;
      return this;
    }

    public void unsetHeaderMap() {
      this.headerMap = null;
    }

    /** Returns true if field headerMap is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderMap() {
      return this.headerMap != null;
    }

    public void setHeaderMapIsSet(boolean value) {
      if (!value) {
        this.headerMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HEADER_MAP:
        if (value == null) {
          unsetHeaderMap();
        } else {
          setHeaderMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      case HEADER_MAP:
        return getHeaderMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      case HEADER_MAP:
        return isSetHeaderMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderMap_args)
        return this.equals((Response_SetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Response_SetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_headerMap = true && this.isSetHeaderMap();
      boolean that_present_headerMap = true && that.isSetHeaderMap();
      if (this_present_headerMap || that_present_headerMap) {
        if (!(this_present_headerMap && that_present_headerMap))
          return false;
        if (!this.headerMap.equals(that.headerMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaderMap()) ? 131071 : 524287);
      if (isSetHeaderMap())
        hashCode = hashCode * 8191 + headerMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeaderMap(), other.isSetHeaderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerMap, other.headerMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderMap_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headerMap:");
      if (this.headerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.headerMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_argsStandardScheme getScheme() {
        return new Response_SetHeaderMap_argsStandardScheme();
      }
    }

    private static class Response_SetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HEADER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map40.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key41;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val42;
                  for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                  {
                    _key41 = iprot.readString();
                    _val42 = iprot.readString();
                    struct.headerMap.put(_key41, _val42);
                  }
                  iprot.readMapEnd();
                }
                struct.setHeaderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.headerMap != null) {
          oprot.writeFieldBegin(HEADER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headerMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter44 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_argsTupleScheme getScheme() {
        return new Response_SetHeaderMap_argsTupleScheme();
      }
    }

    private static class Response_SetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        if (struct.isSetHeaderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetHeaderMap()) {
          {
            oprot.writeI32(struct.headerMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter45 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map46.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key47;
            @org.apache.thrift.annotation.Nullable java.lang.String _val48;
            for (int _i49 = 0; _i49 < _map46.size; ++_i49)
            {
              _key47 = iprot.readString();
              _val48 = iprot.readString();
              struct.headerMap.put(_key47, _val48);
            }
          }
          struct.setHeaderMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderMap_result implements org.apache.thrift.TBase<Response_SetHeaderMap_result, Response_SetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderMap_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderMap_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderMap_result.class, metaDataMap);
    }

    public Response_SetHeaderMap_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderMap_result(Response_SetHeaderMap_result other) {
    }

    @Override
    public Response_SetHeaderMap_result deepCopy() {
      return new Response_SetHeaderMap_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderMap_result)
        return this.equals((Response_SetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Response_SetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderMap_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_resultStandardScheme getScheme() {
        return new Response_SetHeaderMap_resultStandardScheme();
      }
    }

    private static class Response_SetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_resultTupleScheme getScheme() {
        return new Response_SetHeaderMap_resultTupleScheme();
      }
    }

    private static class Response_SetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Callback_Dispose_args implements org.apache.thrift.TBase<Callback_Dispose_args, Callback_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<Callback_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Callback_Dispose_args");

    private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Callback_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Callback_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLBACK((short)1, "callback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLBACK
            return CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Callback_Dispose_args.class, metaDataMap);
    }

    public Callback_Dispose_args() {
    }

    public Callback_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject callback)
    {
      this();
      this.callback = callback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Callback_Dispose_args(Callback_Dispose_args other) {
      if (other.isSetCallback()) {
        this.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.callback);
      }
    }

    @Override
    public Callback_Dispose_args deepCopy() {
      return new Callback_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.callback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCallback() {
      return this.callback;
    }

    public Callback_Dispose_args setCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback) {
      this.callback = callback;
      return this;
    }

    public void unsetCallback() {
      this.callback = null;
    }

    /** Returns true if field callback is set (has been assigned a value) and false otherwise */
    public boolean isSetCallback() {
      return this.callback != null;
    }

    public void setCallbackIsSet(boolean value) {
      if (!value) {
        this.callback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          setCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLBACK:
        return getCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALLBACK:
        return isSetCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Callback_Dispose_args)
        return this.equals((Callback_Dispose_args)that);
      return false;
    }

    public boolean equals(Callback_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callback = true && this.isSetCallback();
      boolean that_present_callback = true && that.isSetCallback();
      if (this_present_callback || that_present_callback) {
        if (!(this_present_callback && that_present_callback))
          return false;
        if (!this.callback.equals(that.callback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCallback()) ? 131071 : 524287);
      if (isSetCallback())
        hashCode = hashCode * 8191 + callback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Callback_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCallback(), other.isSetCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, other.callback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Callback_Dispose_args(");
      boolean first = true;

      sb.append("callback:");
      if (this.callback == null) {
        sb.append("null");
      } else {
        sb.append(this.callback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (callback != null) {
        callback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Callback_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Dispose_argsStandardScheme getScheme() {
        return new Callback_Dispose_argsStandardScheme();
      }
    }

    private static class Callback_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Callback_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.callback.read(iprot);
                struct.setCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.callback != null) {
          oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
          struct.callback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Callback_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Dispose_argsTupleScheme getScheme() {
        return new Callback_Dispose_argsTupleScheme();
      }
    }

    private static class Callback_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Callback_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCallback()) {
          struct.callback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.callback.read(iprot);
          struct.setCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Callback_Continue_args implements org.apache.thrift.TBase<Callback_Continue_args, Callback_Continue_args._Fields>, java.io.Serializable, Cloneable, Comparable<Callback_Continue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Callback_Continue_args");

    private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Callback_Continue_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Callback_Continue_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLBACK((short)1, "callback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLBACK
            return CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Callback_Continue_args.class, metaDataMap);
    }

    public Callback_Continue_args() {
    }

    public Callback_Continue_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject callback)
    {
      this();
      this.callback = callback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Callback_Continue_args(Callback_Continue_args other) {
      if (other.isSetCallback()) {
        this.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.callback);
      }
    }

    @Override
    public Callback_Continue_args deepCopy() {
      return new Callback_Continue_args(this);
    }

    @Override
    public void clear() {
      this.callback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCallback() {
      return this.callback;
    }

    public Callback_Continue_args setCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback) {
      this.callback = callback;
      return this;
    }

    public void unsetCallback() {
      this.callback = null;
    }

    /** Returns true if field callback is set (has been assigned a value) and false otherwise */
    public boolean isSetCallback() {
      return this.callback != null;
    }

    public void setCallbackIsSet(boolean value) {
      if (!value) {
        this.callback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          setCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLBACK:
        return getCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALLBACK:
        return isSetCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Callback_Continue_args)
        return this.equals((Callback_Continue_args)that);
      return false;
    }

    public boolean equals(Callback_Continue_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callback = true && this.isSetCallback();
      boolean that_present_callback = true && that.isSetCallback();
      if (this_present_callback || that_present_callback) {
        if (!(this_present_callback && that_present_callback))
          return false;
        if (!this.callback.equals(that.callback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCallback()) ? 131071 : 524287);
      if (isSetCallback())
        hashCode = hashCode * 8191 + callback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Callback_Continue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCallback(), other.isSetCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, other.callback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Callback_Continue_args(");
      boolean first = true;

      sb.append("callback:");
      if (this.callback == null) {
        sb.append("null");
      } else {
        sb.append(this.callback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (callback != null) {
        callback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Callback_Continue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Continue_argsStandardScheme getScheme() {
        return new Callback_Continue_argsStandardScheme();
      }
    }

    private static class Callback_Continue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Callback_Continue_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.callback.read(iprot);
                struct.setCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.callback != null) {
          oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
          struct.callback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Callback_Continue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Continue_argsTupleScheme getScheme() {
        return new Callback_Continue_argsTupleScheme();
      }
    }

    private static class Callback_Continue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Callback_Continue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCallback()) {
          struct.callback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.callback.read(iprot);
          struct.setCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Callback_Cancel_args implements org.apache.thrift.TBase<Callback_Cancel_args, Callback_Cancel_args._Fields>, java.io.Serializable, Cloneable, Comparable<Callback_Cancel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Callback_Cancel_args");

    private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Callback_Cancel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Callback_Cancel_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLBACK((short)1, "callback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLBACK
            return CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Callback_Cancel_args.class, metaDataMap);
    }

    public Callback_Cancel_args() {
    }

    public Callback_Cancel_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject callback)
    {
      this();
      this.callback = callback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Callback_Cancel_args(Callback_Cancel_args other) {
      if (other.isSetCallback()) {
        this.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.callback);
      }
    }

    @Override
    public Callback_Cancel_args deepCopy() {
      return new Callback_Cancel_args(this);
    }

    @Override
    public void clear() {
      this.callback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCallback() {
      return this.callback;
    }

    public Callback_Cancel_args setCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback) {
      this.callback = callback;
      return this;
    }

    public void unsetCallback() {
      this.callback = null;
    }

    /** Returns true if field callback is set (has been assigned a value) and false otherwise */
    public boolean isSetCallback() {
      return this.callback != null;
    }

    public void setCallbackIsSet(boolean value) {
      if (!value) {
        this.callback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          setCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLBACK:
        return getCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALLBACK:
        return isSetCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Callback_Cancel_args)
        return this.equals((Callback_Cancel_args)that);
      return false;
    }

    public boolean equals(Callback_Cancel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callback = true && this.isSetCallback();
      boolean that_present_callback = true && that.isSetCallback();
      if (this_present_callback || that_present_callback) {
        if (!(this_present_callback && that_present_callback))
          return false;
        if (!this.callback.equals(that.callback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCallback()) ? 131071 : 524287);
      if (isSetCallback())
        hashCode = hashCode * 8191 + callback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Callback_Cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCallback(), other.isSetCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, other.callback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Callback_Cancel_args(");
      boolean first = true;

      sb.append("callback:");
      if (this.callback == null) {
        sb.append("null");
      } else {
        sb.append(this.callback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (callback != null) {
        callback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Callback_Cancel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Cancel_argsStandardScheme getScheme() {
        return new Callback_Cancel_argsStandardScheme();
      }
    }

    private static class Callback_Cancel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Callback_Cancel_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.callback.read(iprot);
                struct.setCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.callback != null) {
          oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
          struct.callback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Callback_Cancel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Cancel_argsTupleScheme getScheme() {
        return new Callback_Cancel_argsTupleScheme();
      }
    }

    private static class Callback_Cancel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Callback_Cancel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCallback()) {
          struct.callback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.callback.read(iprot);
          struct.setCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AuthCallback_Dispose_args implements org.apache.thrift.TBase<AuthCallback_Dispose_args, AuthCallback_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCallback_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCallback_Dispose_args");

    private static final org.apache.thrift.protocol.TField AUTH_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("authCallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCallback_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCallback_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_CALLBACK((short)1, "authCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_CALLBACK
            return AUTH_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("authCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCallback_Dispose_args.class, metaDataMap);
    }

    public AuthCallback_Dispose_args() {
    }

    public AuthCallback_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject authCallback)
    {
      this();
      this.authCallback = authCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCallback_Dispose_args(AuthCallback_Dispose_args other) {
      if (other.isSetAuthCallback()) {
        this.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.authCallback);
      }
    }

    @Override
    public AuthCallback_Dispose_args deepCopy() {
      return new AuthCallback_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.authCallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getAuthCallback() {
      return this.authCallback;
    }

    public AuthCallback_Dispose_args setAuthCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) {
      this.authCallback = authCallback;
      return this;
    }

    public void unsetAuthCallback() {
      this.authCallback = null;
    }

    /** Returns true if field authCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthCallback() {
      return this.authCallback != null;
    }

    public void setAuthCallbackIsSet(boolean value) {
      if (!value) {
        this.authCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AUTH_CALLBACK:
        if (value == null) {
          unsetAuthCallback();
        } else {
          setAuthCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_CALLBACK:
        return getAuthCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH_CALLBACK:
        return isSetAuthCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AuthCallback_Dispose_args)
        return this.equals((AuthCallback_Dispose_args)that);
      return false;
    }

    public boolean equals(AuthCallback_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authCallback = true && this.isSetAuthCallback();
      boolean that_present_authCallback = true && that.isSetAuthCallback();
      if (this_present_authCallback || that_present_authCallback) {
        if (!(this_present_authCallback && that_present_authCallback))
          return false;
        if (!this.authCallback.equals(that.authCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthCallback()) ? 131071 : 524287);
      if (isSetAuthCallback())
        hashCode = hashCode * 8191 + authCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCallback_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetAuthCallback(), other.isSetAuthCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCallback, other.authCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCallback_Dispose_args(");
      boolean first = true;

      sb.append("authCallback:");
      if (this.authCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.authCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authCallback != null) {
        authCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCallback_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Dispose_argsStandardScheme getScheme() {
        return new AuthCallback_Dispose_argsStandardScheme();
      }
    }

    private static class AuthCallback_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCallback_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.authCallback.read(iprot);
                struct.setAuthCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authCallback != null) {
          oprot.writeFieldBegin(AUTH_CALLBACK_FIELD_DESC);
          struct.authCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCallback_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Dispose_argsTupleScheme getScheme() {
        return new AuthCallback_Dispose_argsTupleScheme();
      }
    }

    private static class AuthCallback_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCallback_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuthCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthCallback()) {
          struct.authCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.authCallback.read(iprot);
          struct.setAuthCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AuthCallback_Continue_args implements org.apache.thrift.TBase<AuthCallback_Continue_args, AuthCallback_Continue_args._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCallback_Continue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCallback_Continue_args");

    private static final org.apache.thrift.protocol.TField AUTH_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("authCallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCallback_Continue_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCallback_Continue_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_CALLBACK((short)1, "authCallback"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_CALLBACK
            return AUTH_CALLBACK;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("authCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCallback_Continue_args.class, metaDataMap);
    }

    public AuthCallback_Continue_args() {
    }

    public AuthCallback_Continue_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject authCallback,
      java.lang.String username,
      java.lang.String password)
    {
      this();
      this.authCallback = authCallback;
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCallback_Continue_args(AuthCallback_Continue_args other) {
      if (other.isSetAuthCallback()) {
        this.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.authCallback);
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    @Override
    public AuthCallback_Continue_args deepCopy() {
      return new AuthCallback_Continue_args(this);
    }

    @Override
    public void clear() {
      this.authCallback = null;
      this.username = null;
      this.password = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getAuthCallback() {
      return this.authCallback;
    }

    public AuthCallback_Continue_args setAuthCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) {
      this.authCallback = authCallback;
      return this;
    }

    public void unsetAuthCallback() {
      this.authCallback = null;
    }

    /** Returns true if field authCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthCallback() {
      return this.authCallback != null;
    }

    public void setAuthCallbackIsSet(boolean value) {
      if (!value) {
        this.authCallback = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsername() {
      return this.username;
    }

    public AuthCallback_Continue_args setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
      return this.password;
    }

    public AuthCallback_Continue_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AUTH_CALLBACK:
        if (value == null) {
          unsetAuthCallback();
        } else {
          setAuthCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_CALLBACK:
        return getAuthCallback();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH_CALLBACK:
        return isSetAuthCallback();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AuthCallback_Continue_args)
        return this.equals((AuthCallback_Continue_args)that);
      return false;
    }

    public boolean equals(AuthCallback_Continue_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authCallback = true && this.isSetAuthCallback();
      boolean that_present_authCallback = true && that.isSetAuthCallback();
      if (this_present_authCallback || that_present_authCallback) {
        if (!(this_present_authCallback && that_present_authCallback))
          return false;
        if (!this.authCallback.equals(that.authCallback))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthCallback()) ? 131071 : 524287);
      if (isSetAuthCallback())
        hashCode = hashCode * 8191 + authCallback.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCallback_Continue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetAuthCallback(), other.isSetAuthCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCallback, other.authCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCallback_Continue_args(");
      boolean first = true;

      sb.append("authCallback:");
      if (this.authCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.authCallback);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authCallback != null) {
        authCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCallback_Continue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Continue_argsStandardScheme getScheme() {
        return new AuthCallback_Continue_argsStandardScheme();
      }
    }

    private static class AuthCallback_Continue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCallback_Continue_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.authCallback.read(iprot);
                struct.setAuthCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authCallback != null) {
          oprot.writeFieldBegin(AUTH_CALLBACK_FIELD_DESC);
          struct.authCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCallback_Continue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Continue_argsTupleScheme getScheme() {
        return new AuthCallback_Continue_argsTupleScheme();
      }
    }

    private static class AuthCallback_Continue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCallback_Continue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuthCallback()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthCallback()) {
          struct.authCallback.write(oprot);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.authCallback.read(iprot);
          struct.setAuthCallbackIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AuthCallback_Cancel_args implements org.apache.thrift.TBase<AuthCallback_Cancel_args, AuthCallback_Cancel_args._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCallback_Cancel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCallback_Cancel_args");

    private static final org.apache.thrift.protocol.TField AUTH_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("authCallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCallback_Cancel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCallback_Cancel_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_CALLBACK((short)1, "authCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_CALLBACK
            return AUTH_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("authCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCallback_Cancel_args.class, metaDataMap);
    }

    public AuthCallback_Cancel_args() {
    }

    public AuthCallback_Cancel_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject authCallback)
    {
      this();
      this.authCallback = authCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCallback_Cancel_args(AuthCallback_Cancel_args other) {
      if (other.isSetAuthCallback()) {
        this.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.authCallback);
      }
    }

    @Override
    public AuthCallback_Cancel_args deepCopy() {
      return new AuthCallback_Cancel_args(this);
    }

    @Override
    public void clear() {
      this.authCallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getAuthCallback() {
      return this.authCallback;
    }

    public AuthCallback_Cancel_args setAuthCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) {
      this.authCallback = authCallback;
      return this;
    }

    public void unsetAuthCallback() {
      this.authCallback = null;
    }

    /** Returns true if field authCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthCallback() {
      return this.authCallback != null;
    }

    public void setAuthCallbackIsSet(boolean value) {
      if (!value) {
        this.authCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AUTH_CALLBACK:
        if (value == null) {
          unsetAuthCallback();
        } else {
          setAuthCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_CALLBACK:
        return getAuthCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH_CALLBACK:
        return isSetAuthCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AuthCallback_Cancel_args)
        return this.equals((AuthCallback_Cancel_args)that);
      return false;
    }

    public boolean equals(AuthCallback_Cancel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authCallback = true && this.isSetAuthCallback();
      boolean that_present_authCallback = true && that.isSetAuthCallback();
      if (this_present_authCallback || that_present_authCallback) {
        if (!(this_present_authCallback && that_present_authCallback))
          return false;
        if (!this.authCallback.equals(that.authCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthCallback()) ? 131071 : 524287);
      if (isSetAuthCallback())
        hashCode = hashCode * 8191 + authCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCallback_Cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetAuthCallback(), other.isSetAuthCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCallback, other.authCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCallback_Cancel_args(");
      boolean first = true;

      sb.append("authCallback:");
      if (this.authCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.authCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authCallback != null) {
        authCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCallback_Cancel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Cancel_argsStandardScheme getScheme() {
        return new AuthCallback_Cancel_argsStandardScheme();
      }
    }

    private static class AuthCallback_Cancel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCallback_Cancel_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.authCallback.read(iprot);
                struct.setAuthCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authCallback != null) {
          oprot.writeFieldBegin(AUTH_CALLBACK_FIELD_DESC);
          struct.authCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCallback_Cancel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Cancel_argsTupleScheme getScheme() {
        return new AuthCallback_Cancel_argsTupleScheme();
      }
    }

    private static class AuthCallback_Cancel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCallback_Cancel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuthCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthCallback()) {
          struct.authCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.authCallback.read(iprot);
          struct.setAuthCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_Create_args implements org.apache.thrift.TBase<MessageRouter_Create_args, MessageRouter_Create_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_Create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_Create_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cancel", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_Create_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_Create_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String query; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String cancel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      CANCEL((short)2, "cancel");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // CANCEL
            return CANCEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CANCEL, new org.apache.thrift.meta_data.FieldMetaData("cancel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_Create_args.class, metaDataMap);
    }

    public MessageRouter_Create_args() {
    }

    public MessageRouter_Create_args(
      java.lang.String query,
      java.lang.String cancel)
    {
      this();
      this.query = query;
      this.cancel = cancel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_Create_args(MessageRouter_Create_args other) {
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      if (other.isSetCancel()) {
        this.cancel = other.cancel;
      }
    }

    @Override
    public MessageRouter_Create_args deepCopy() {
      return new MessageRouter_Create_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.cancel = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getQuery() {
      return this.query;
    }

    public MessageRouter_Create_args setQuery(@org.apache.thrift.annotation.Nullable java.lang.String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCancel() {
      return this.cancel;
    }

    public MessageRouter_Create_args setCancel(@org.apache.thrift.annotation.Nullable java.lang.String cancel) {
      this.cancel = cancel;
      return this;
    }

    public void unsetCancel() {
      this.cancel = null;
    }

    /** Returns true if field cancel is set (has been assigned a value) and false otherwise */
    public boolean isSetCancel() {
      return this.cancel != null;
    }

    public void setCancelIsSet(boolean value) {
      if (!value) {
        this.cancel = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((java.lang.String)value);
        }
        break;

      case CANCEL:
        if (value == null) {
          unsetCancel();
        } else {
          setCancel((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case CANCEL:
        return getCancel();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case CANCEL:
        return isSetCancel();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_Create_args)
        return this.equals((MessageRouter_Create_args)that);
      return false;
    }

    public boolean equals(MessageRouter_Create_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_cancel = true && this.isSetCancel();
      boolean that_present_cancel = true && that.isSetCancel();
      if (this_present_cancel || that_present_cancel) {
        if (!(this_present_cancel && that_present_cancel))
          return false;
        if (!this.cancel.equals(that.cancel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetCancel()) ? 131071 : 524287);
      if (isSetCancel())
        hashCode = hashCode * 8191 + cancel.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_Create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQuery(), other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCancel(), other.isSetCancel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCancel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancel, other.cancel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_Create_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cancel:");
      if (this.cancel == null) {
        sb.append("null");
      } else {
        sb.append(this.cancel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_Create_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_argsStandardScheme getScheme() {
        return new MessageRouter_Create_argsStandardScheme();
      }
    }

    private static class MessageRouter_Create_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_Create_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CANCEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cancel = iprot.readString();
                struct.setCancelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.cancel != null) {
          oprot.writeFieldBegin(CANCEL_FIELD_DESC);
          oprot.writeString(struct.cancel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_Create_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_argsTupleScheme getScheme() {
        return new MessageRouter_Create_argsTupleScheme();
      }
    }

    private static class MessageRouter_Create_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_Create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetCancel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
        if (struct.isSetCancel()) {
          oprot.writeString(struct.cancel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cancel = iprot.readString();
          struct.setCancelIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_Create_result implements org.apache.thrift.TBase<MessageRouter_Create_result, MessageRouter_Create_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_Create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_Create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_Create_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_Create_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_Create_result.class, metaDataMap);
    }

    public MessageRouter_Create_result() {
    }

    public MessageRouter_Create_result(
      com.jetbrains.cef.remote.thrift_codegen.RObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_Create_result(MessageRouter_Create_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.success);
      }
    }

    @Override
    public MessageRouter_Create_result deepCopy() {
      return new MessageRouter_Create_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSuccess() {
      return this.success;
    }

    public MessageRouter_Create_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_Create_result)
        return this.equals((MessageRouter_Create_result)that);
      return false;
    }

    public boolean equals(MessageRouter_Create_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_Create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_Create_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_Create_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_resultStandardScheme getScheme() {
        return new MessageRouter_Create_resultStandardScheme();
      }
    }

    private static class MessageRouter_Create_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_Create_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_Create_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_resultTupleScheme getScheme() {
        return new MessageRouter_Create_resultTupleScheme();
      }
    }

    private static class MessageRouter_Create_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_Create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_Dispose_args implements org.apache.thrift.TBase<MessageRouter_Dispose_args, MessageRouter_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_Dispose_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_Dispose_args.class, metaDataMap);
    }

    public MessageRouter_Dispose_args() {
    }

    public MessageRouter_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter)
    {
      this();
      this.msgRouter = msgRouter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_Dispose_args(MessageRouter_Dispose_args other) {
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
    }

    @Override
    public MessageRouter_Dispose_args deepCopy() {
      return new MessageRouter_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_Dispose_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_Dispose_args)
        return this.equals((MessageRouter_Dispose_args)that);
      return false;
    }

    public boolean equals(MessageRouter_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_Dispose_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Dispose_argsStandardScheme getScheme() {
        return new MessageRouter_Dispose_argsStandardScheme();
      }
    }

    private static class MessageRouter_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Dispose_argsTupleScheme getScheme() {
        return new MessageRouter_Dispose_argsTupleScheme();
      }
    }

    private static class MessageRouter_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddMessageRouterToBrowser_args implements org.apache.thrift.TBase<MessageRouter_AddMessageRouterToBrowser_args, MessageRouter_AddMessageRouterToBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddMessageRouterToBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddMessageRouterToBrowser_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      BID((short)2, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddMessageRouterToBrowser_args.class, metaDataMap);
    }

    public MessageRouter_AddMessageRouterToBrowser_args() {
    }

    public MessageRouter_AddMessageRouterToBrowser_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      int bid)
    {
      this();
      this.msgRouter = msgRouter;
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddMessageRouterToBrowser_args(MessageRouter_AddMessageRouterToBrowser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      this.bid = other.bid;
    }

    @Override
    public MessageRouter_AddMessageRouterToBrowser_args deepCopy() {
      return new MessageRouter_AddMessageRouterToBrowser_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      setBidIsSet(false);
      this.bid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_AddMessageRouterToBrowser_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouter_AddMessageRouterToBrowser_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddMessageRouterToBrowser_args)
        return this.equals((MessageRouter_AddMessageRouterToBrowser_args)that);
      return false;
    }

    public boolean equals(MessageRouter_AddMessageRouterToBrowser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddMessageRouterToBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddMessageRouterToBrowser_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_argsStandardScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_argsStandardScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddMessageRouterToBrowser_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_argsTupleScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_argsTupleScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddMessageRouterToBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddMessageRouterToBrowser_result implements org.apache.thrift.TBase<MessageRouter_AddMessageRouterToBrowser_result, MessageRouter_AddMessageRouterToBrowser_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddMessageRouterToBrowser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddMessageRouterToBrowser_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddMessageRouterToBrowser_result.class, metaDataMap);
    }

    public MessageRouter_AddMessageRouterToBrowser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddMessageRouterToBrowser_result(MessageRouter_AddMessageRouterToBrowser_result other) {
    }

    @Override
    public MessageRouter_AddMessageRouterToBrowser_result deepCopy() {
      return new MessageRouter_AddMessageRouterToBrowser_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddMessageRouterToBrowser_result)
        return this.equals((MessageRouter_AddMessageRouterToBrowser_result)that);
      return false;
    }

    public boolean equals(MessageRouter_AddMessageRouterToBrowser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddMessageRouterToBrowser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddMessageRouterToBrowser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_resultStandardScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_resultStandardScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddMessageRouterToBrowser_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_resultTupleScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_resultTupleScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddMessageRouterToBrowser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveMessageRouterFromBrowser_args implements org.apache.thrift.TBase<MessageRouter_RemoveMessageRouterFromBrowser_args, MessageRouter_RemoveMessageRouterFromBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveMessageRouterFromBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveMessageRouterFromBrowser_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      BID((short)2, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveMessageRouterFromBrowser_args.class, metaDataMap);
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args() {
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      int bid)
    {
      this();
      this.msgRouter = msgRouter;
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveMessageRouterFromBrowser_args(MessageRouter_RemoveMessageRouterFromBrowser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      this.bid = other.bid;
    }

    @Override
    public MessageRouter_RemoveMessageRouterFromBrowser_args deepCopy() {
      return new MessageRouter_RemoveMessageRouterFromBrowser_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      setBidIsSet(false);
      this.bid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveMessageRouterFromBrowser_args)
        return this.equals((MessageRouter_RemoveMessageRouterFromBrowser_args)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveMessageRouterFromBrowser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveMessageRouterFromBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveMessageRouterFromBrowser_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_argsStandardScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_argsStandardScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveMessageRouterFromBrowser_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_argsTupleScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_argsTupleScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveMessageRouterFromBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveMessageRouterFromBrowser_result implements org.apache.thrift.TBase<MessageRouter_RemoveMessageRouterFromBrowser_result, MessageRouter_RemoveMessageRouterFromBrowser_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveMessageRouterFromBrowser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveMessageRouterFromBrowser_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveMessageRouterFromBrowser_result.class, metaDataMap);
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveMessageRouterFromBrowser_result(MessageRouter_RemoveMessageRouterFromBrowser_result other) {
    }

    @Override
    public MessageRouter_RemoveMessageRouterFromBrowser_result deepCopy() {
      return new MessageRouter_RemoveMessageRouterFromBrowser_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveMessageRouterFromBrowser_result)
        return this.equals((MessageRouter_RemoveMessageRouterFromBrowser_result)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveMessageRouterFromBrowser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveMessageRouterFromBrowser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveMessageRouterFromBrowser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_resultStandardScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_resultStandardScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveMessageRouterFromBrowser_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_resultTupleScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_resultTupleScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveMessageRouterFromBrowser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddHandler_args implements org.apache.thrift.TBase<MessageRouter_AddHandler_args, MessageRouter_AddHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddHandler_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddHandler_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required
    public boolean first; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      HANDLER((short)2, "handler"),
      FIRST((short)3, "first");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // HANDLER
            return HANDLER;
          case 3: // FIRST
            return FIRST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FIRST_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddHandler_args.class, metaDataMap);
    }

    public MessageRouter_AddHandler_args() {
    }

    public MessageRouter_AddHandler_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      com.jetbrains.cef.remote.thrift_codegen.RObject handler,
      boolean first)
    {
      this();
      this.msgRouter = msgRouter;
      this.handler = handler;
      this.first = first;
      setFirstIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddHandler_args(MessageRouter_AddHandler_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
      this.first = other.first;
    }

    @Override
    public MessageRouter_AddHandler_args deepCopy() {
      return new MessageRouter_AddHandler_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      this.handler = null;
      setFirstIsSet(false);
      this.first = false;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_AddHandler_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouter_AddHandler_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    public boolean isFirst() {
      return this.first;
    }

    public MessageRouter_AddHandler_args setFirst(boolean first) {
      this.first = first;
      setFirstIsSet(true);
      return this;
    }

    public void unsetFirst() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRST_ISSET_ID);
    }

    /** Returns true if field first is set (has been assigned a value) and false otherwise */
    public boolean isSetFirst() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRST_ISSET_ID);
    }

    public void setFirstIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRST_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case FIRST:
        if (value == null) {
          unsetFirst();
        } else {
          setFirst((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case HANDLER:
        return getHandler();

      case FIRST:
        return isFirst();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case HANDLER:
        return isSetHandler();
      case FIRST:
        return isSetFirst();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddHandler_args)
        return this.equals((MessageRouter_AddHandler_args)that);
      return false;
    }

    public boolean equals(MessageRouter_AddHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      boolean this_present_first = true;
      boolean that_present_first = true;
      if (this_present_first || that_present_first) {
        if (!(this_present_first && that_present_first))
          return false;
        if (this.first != that.first)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      hashCode = hashCode * 8191 + ((first) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFirst(), other.isSetFirst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddHandler_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("first:");
      sb.append(this.first);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
      if (handler != null) {
        handler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_argsStandardScheme getScheme() {
        return new MessageRouter_AddHandler_argsStandardScheme();
      }
    }

    private static class MessageRouter_AddHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddHandler_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FIRST
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.first = iprot.readBool();
                struct.setFirstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        oprot.writeBool(struct.first);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_argsTupleScheme getScheme() {
        return new MessageRouter_AddHandler_argsTupleScheme();
      }
    }

    private static class MessageRouter_AddHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetHandler()) {
          optionals.set(1);
        }
        if (struct.isSetFirst()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
        if (struct.isSetFirst()) {
          oprot.writeBool(struct.first);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.first = iprot.readBool();
          struct.setFirstIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddHandler_result implements org.apache.thrift.TBase<MessageRouter_AddHandler_result, MessageRouter_AddHandler_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddHandler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddHandler_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddHandler_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddHandler_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddHandler_result.class, metaDataMap);
    }

    public MessageRouter_AddHandler_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddHandler_result(MessageRouter_AddHandler_result other) {
    }

    @Override
    public MessageRouter_AddHandler_result deepCopy() {
      return new MessageRouter_AddHandler_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddHandler_result)
        return this.equals((MessageRouter_AddHandler_result)that);
      return false;
    }

    public boolean equals(MessageRouter_AddHandler_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddHandler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddHandler_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddHandler_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_resultStandardScheme getScheme() {
        return new MessageRouter_AddHandler_resultStandardScheme();
      }
    }

    private static class MessageRouter_AddHandler_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddHandler_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddHandler_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_resultTupleScheme getScheme() {
        return new MessageRouter_AddHandler_resultTupleScheme();
      }
    }

    private static class MessageRouter_AddHandler_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddHandler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveHandler_args implements org.apache.thrift.TBase<MessageRouter_RemoveHandler_args, MessageRouter_RemoveHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveHandler_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveHandler_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      HANDLER((short)2, "handler");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // HANDLER
            return HANDLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveHandler_args.class, metaDataMap);
    }

    public MessageRouter_RemoveHandler_args() {
    }

    public MessageRouter_RemoveHandler_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      com.jetbrains.cef.remote.thrift_codegen.RObject handler)
    {
      this();
      this.msgRouter = msgRouter;
      this.handler = handler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveHandler_args(MessageRouter_RemoveHandler_args other) {
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
    }

    @Override
    public MessageRouter_RemoveHandler_args deepCopy() {
      return new MessageRouter_RemoveHandler_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      this.handler = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_RemoveHandler_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouter_RemoveHandler_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case HANDLER:
        return getHandler();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case HANDLER:
        return isSetHandler();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveHandler_args)
        return this.equals((MessageRouter_RemoveHandler_args)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveHandler_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
      if (handler != null) {
        handler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_argsStandardScheme getScheme() {
        return new MessageRouter_RemoveHandler_argsStandardScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveHandler_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_argsTupleScheme getScheme() {
        return new MessageRouter_RemoveHandler_argsTupleScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetHandler()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveHandler_result implements org.apache.thrift.TBase<MessageRouter_RemoveHandler_result, MessageRouter_RemoveHandler_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveHandler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveHandler_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveHandler_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveHandler_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveHandler_result.class, metaDataMap);
    }

    public MessageRouter_RemoveHandler_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveHandler_result(MessageRouter_RemoveHandler_result other) {
    }

    @Override
    public MessageRouter_RemoveHandler_result deepCopy() {
      return new MessageRouter_RemoveHandler_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveHandler_result)
        return this.equals((MessageRouter_RemoveHandler_result)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveHandler_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveHandler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveHandler_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveHandler_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_resultStandardScheme getScheme() {
        return new MessageRouter_RemoveHandler_resultStandardScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveHandler_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveHandler_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_resultTupleScheme getScheme() {
        return new MessageRouter_RemoveHandler_resultTupleScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveHandler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_CancelPending_args implements org.apache.thrift.TBase<MessageRouter_CancelPending_args, MessageRouter_CancelPending_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_CancelPending_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_CancelPending_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_CancelPending_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_CancelPending_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      BID((short)2, "bid"),
      HANDLER((short)3, "handler");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // BID
            return BID;
          case 3: // HANDLER
            return HANDLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_CancelPending_args.class, metaDataMap);
    }

    public MessageRouter_CancelPending_args() {
    }

    public MessageRouter_CancelPending_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject handler)
    {
      this();
      this.msgRouter = msgRouter;
      this.bid = bid;
      setBidIsSet(true);
      this.handler = handler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_CancelPending_args(MessageRouter_CancelPending_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      this.bid = other.bid;
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
    }

    @Override
    public MessageRouter_CancelPending_args deepCopy() {
      return new MessageRouter_CancelPending_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      setBidIsSet(false);
      this.bid = 0;
      this.handler = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_CancelPending_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouter_CancelPending_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouter_CancelPending_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case BID:
        return getBid();

      case HANDLER:
        return getHandler();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case BID:
        return isSetBid();
      case HANDLER:
        return isSetHandler();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_CancelPending_args)
        return this.equals((MessageRouter_CancelPending_args)that);
      return false;
    }

    public boolean equals(MessageRouter_CancelPending_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_CancelPending_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_CancelPending_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
      if (handler != null) {
        handler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_CancelPending_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_argsStandardScheme getScheme() {
        return new MessageRouter_CancelPending_argsStandardScheme();
      }
    }

    private static class MessageRouter_CancelPending_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_CancelPending_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_CancelPending_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_argsTupleScheme getScheme() {
        return new MessageRouter_CancelPending_argsTupleScheme();
      }
    }

    private static class MessageRouter_CancelPending_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_CancelPending_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetHandler()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_CancelPending_result implements org.apache.thrift.TBase<MessageRouter_CancelPending_result, MessageRouter_CancelPending_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_CancelPending_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_CancelPending_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_CancelPending_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_CancelPending_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_CancelPending_result.class, metaDataMap);
    }

    public MessageRouter_CancelPending_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_CancelPending_result(MessageRouter_CancelPending_result other) {
    }

    @Override
    public MessageRouter_CancelPending_result deepCopy() {
      return new MessageRouter_CancelPending_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_CancelPending_result)
        return this.equals((MessageRouter_CancelPending_result)that);
      return false;
    }

    public boolean equals(MessageRouter_CancelPending_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_CancelPending_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_CancelPending_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_CancelPending_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_resultStandardScheme getScheme() {
        return new MessageRouter_CancelPending_resultStandardScheme();
      }
    }

    private static class MessageRouter_CancelPending_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_CancelPending_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_CancelPending_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_resultTupleScheme getScheme() {
        return new MessageRouter_CancelPending_resultTupleScheme();
      }
    }

    private static class MessageRouter_CancelPending_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_CancelPending_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class QueryCallback_Dispose_args implements org.apache.thrift.TBase<QueryCallback_Dispose_args, QueryCallback_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryCallback_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryCallback_Dispose_args");

    private static final org.apache.thrift.protocol.TField QCALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("qcallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryCallback_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryCallback_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QCALLBACK((short)1, "qcallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QCALLBACK
            return QCALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QCALLBACK, new org.apache.thrift.meta_data.FieldMetaData("qcallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryCallback_Dispose_args.class, metaDataMap);
    }

    public QueryCallback_Dispose_args() {
    }

    public QueryCallback_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject qcallback)
    {
      this();
      this.qcallback = qcallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryCallback_Dispose_args(QueryCallback_Dispose_args other) {
      if (other.isSetQcallback()) {
        this.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.qcallback);
      }
    }

    @Override
    public QueryCallback_Dispose_args deepCopy() {
      return new QueryCallback_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.qcallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getQcallback() {
      return this.qcallback;
    }

    public QueryCallback_Dispose_args setQcallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) {
      this.qcallback = qcallback;
      return this;
    }

    public void unsetQcallback() {
      this.qcallback = null;
    }

    /** Returns true if field qcallback is set (has been assigned a value) and false otherwise */
    public boolean isSetQcallback() {
      return this.qcallback != null;
    }

    public void setQcallbackIsSet(boolean value) {
      if (!value) {
        this.qcallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QCALLBACK:
        if (value == null) {
          unsetQcallback();
        } else {
          setQcallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QCALLBACK:
        return getQcallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QCALLBACK:
        return isSetQcallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof QueryCallback_Dispose_args)
        return this.equals((QueryCallback_Dispose_args)that);
      return false;
    }

    public boolean equals(QueryCallback_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qcallback = true && this.isSetQcallback();
      boolean that_present_qcallback = true && that.isSetQcallback();
      if (this_present_qcallback || that_present_qcallback) {
        if (!(this_present_qcallback && that_present_qcallback))
          return false;
        if (!this.qcallback.equals(that.qcallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQcallback()) ? 131071 : 524287);
      if (isSetQcallback())
        hashCode = hashCode * 8191 + qcallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QueryCallback_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQcallback(), other.isSetQcallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQcallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qcallback, other.qcallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryCallback_Dispose_args(");
      boolean first = true;

      sb.append("qcallback:");
      if (this.qcallback == null) {
        sb.append("null");
      } else {
        sb.append(this.qcallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qcallback != null) {
        qcallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryCallback_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Dispose_argsStandardScheme getScheme() {
        return new QueryCallback_Dispose_argsStandardScheme();
      }
    }

    private static class QueryCallback_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryCallback_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QCALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.qcallback.read(iprot);
                struct.setQcallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qcallback != null) {
          oprot.writeFieldBegin(QCALLBACK_FIELD_DESC);
          struct.qcallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryCallback_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Dispose_argsTupleScheme getScheme() {
        return new QueryCallback_Dispose_argsTupleScheme();
      }
    }

    private static class QueryCallback_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryCallback_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQcallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQcallback()) {
          struct.qcallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.qcallback.read(iprot);
          struct.setQcallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class QueryCallback_Success_args implements org.apache.thrift.TBase<QueryCallback_Success_args, QueryCallback_Success_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryCallback_Success_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryCallback_Success_args");

    private static final org.apache.thrift.protocol.TField QCALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("qcallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryCallback_Success_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryCallback_Success_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QCALLBACK((short)1, "qcallback"),
      RESPONSE((short)2, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QCALLBACK
            return QCALLBACK;
          case 2: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QCALLBACK, new org.apache.thrift.meta_data.FieldMetaData("qcallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryCallback_Success_args.class, metaDataMap);
    }

    public QueryCallback_Success_args() {
    }

    public QueryCallback_Success_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject qcallback,
      java.lang.String response)
    {
      this();
      this.qcallback = qcallback;
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryCallback_Success_args(QueryCallback_Success_args other) {
      if (other.isSetQcallback()) {
        this.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.qcallback);
      }
      if (other.isSetResponse()) {
        this.response = other.response;
      }
    }

    @Override
    public QueryCallback_Success_args deepCopy() {
      return new QueryCallback_Success_args(this);
    }

    @Override
    public void clear() {
      this.qcallback = null;
      this.response = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getQcallback() {
      return this.qcallback;
    }

    public QueryCallback_Success_args setQcallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) {
      this.qcallback = qcallback;
      return this;
    }

    public void unsetQcallback() {
      this.qcallback = null;
    }

    /** Returns true if field qcallback is set (has been assigned a value) and false otherwise */
    public boolean isSetQcallback() {
      return this.qcallback != null;
    }

    public void setQcallbackIsSet(boolean value) {
      if (!value) {
        this.qcallback = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getResponse() {
      return this.response;
    }

    public QueryCallback_Success_args setResponse(@org.apache.thrift.annotation.Nullable java.lang.String response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QCALLBACK:
        if (value == null) {
          unsetQcallback();
        } else {
          setQcallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QCALLBACK:
        return getQcallback();

      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QCALLBACK:
        return isSetQcallback();
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof QueryCallback_Success_args)
        return this.equals((QueryCallback_Success_args)that);
      return false;
    }

    public boolean equals(QueryCallback_Success_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qcallback = true && this.isSetQcallback();
      boolean that_present_qcallback = true && that.isSetQcallback();
      if (this_present_qcallback || that_present_qcallback) {
        if (!(this_present_qcallback && that_present_qcallback))
          return false;
        if (!this.qcallback.equals(that.qcallback))
          return false;
      }

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQcallback()) ? 131071 : 524287);
      if (isSetQcallback())
        hashCode = hashCode * 8191 + qcallback.hashCode();

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QueryCallback_Success_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQcallback(), other.isSetQcallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQcallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qcallback, other.qcallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryCallback_Success_args(");
      boolean first = true;

      sb.append("qcallback:");
      if (this.qcallback == null) {
        sb.append("null");
      } else {
        sb.append(this.qcallback);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qcallback != null) {
        qcallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryCallback_Success_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Success_argsStandardScheme getScheme() {
        return new QueryCallback_Success_argsStandardScheme();
      }
    }

    private static class QueryCallback_Success_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryCallback_Success_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QCALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.qcallback.read(iprot);
                struct.setQcallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.response = iprot.readString();
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qcallback != null) {
          oprot.writeFieldBegin(QCALLBACK_FIELD_DESC);
          struct.qcallback.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          oprot.writeString(struct.response);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryCallback_Success_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Success_argsTupleScheme getScheme() {
        return new QueryCallback_Success_argsTupleScheme();
      }
    }

    private static class QueryCallback_Success_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryCallback_Success_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQcallback()) {
          optionals.set(0);
        }
        if (struct.isSetResponse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQcallback()) {
          struct.qcallback.write(oprot);
        }
        if (struct.isSetResponse()) {
          oprot.writeString(struct.response);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.qcallback.read(iprot);
          struct.setQcallbackIsSet(true);
        }
        if (incoming.get(1)) {
          struct.response = iprot.readString();
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class QueryCallback_Failure_args implements org.apache.thrift.TBase<QueryCallback_Failure_args, QueryCallback_Failure_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryCallback_Failure_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryCallback_Failure_args");

    private static final org.apache.thrift.protocol.TField QCALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("qcallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_code", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_message", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryCallback_Failure_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryCallback_Failure_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback; // required
    public int error_code; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String error_message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QCALLBACK((short)1, "qcallback"),
      ERROR_CODE((short)2, "error_code"),
      ERROR_MESSAGE((short)3, "error_message");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QCALLBACK
            return QCALLBACK;
          case 2: // ERROR_CODE
            return ERROR_CODE;
          case 3: // ERROR_MESSAGE
            return ERROR_MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERROR_CODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QCALLBACK, new org.apache.thrift.meta_data.FieldMetaData("qcallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("error_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("error_message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryCallback_Failure_args.class, metaDataMap);
    }

    public QueryCallback_Failure_args() {
    }

    public QueryCallback_Failure_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject qcallback,
      int error_code,
      java.lang.String error_message)
    {
      this();
      this.qcallback = qcallback;
      this.error_code = error_code;
      setError_codeIsSet(true);
      this.error_message = error_message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryCallback_Failure_args(QueryCallback_Failure_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetQcallback()) {
        this.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.qcallback);
      }
      this.error_code = other.error_code;
      if (other.isSetError_message()) {
        this.error_message = other.error_message;
      }
    }

    @Override
    public QueryCallback_Failure_args deepCopy() {
      return new QueryCallback_Failure_args(this);
    }

    @Override
    public void clear() {
      this.qcallback = null;
      setError_codeIsSet(false);
      this.error_code = 0;
      this.error_message = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getQcallback() {
      return this.qcallback;
    }

    public QueryCallback_Failure_args setQcallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) {
      this.qcallback = qcallback;
      return this;
    }

    public void unsetQcallback() {
      this.qcallback = null;
    }

    /** Returns true if field qcallback is set (has been assigned a value) and false otherwise */
    public boolean isSetQcallback() {
      return this.qcallback != null;
    }

    public void setQcallbackIsSet(boolean value) {
      if (!value) {
        this.qcallback = null;
      }
    }

    public int getError_code() {
      return this.error_code;
    }

    public QueryCallback_Failure_args setError_code(int error_code) {
      this.error_code = error_code;
      setError_codeIsSet(true);
      return this;
    }

    public void unsetError_code() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
    }

    /** Returns true if field error_code is set (has been assigned a value) and false otherwise */
    public boolean isSetError_code() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
    }

    public void setError_codeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERROR_CODE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getError_message() {
      return this.error_message;
    }

    public QueryCallback_Failure_args setError_message(@org.apache.thrift.annotation.Nullable java.lang.String error_message) {
      this.error_message = error_message;
      return this;
    }

    public void unsetError_message() {
      this.error_message = null;
    }

    /** Returns true if field error_message is set (has been assigned a value) and false otherwise */
    public boolean isSetError_message() {
      return this.error_message != null;
    }

    public void setError_messageIsSet(boolean value) {
      if (!value) {
        this.error_message = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QCALLBACK:
        if (value == null) {
          unsetQcallback();
        } else {
          setQcallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetError_code();
        } else {
          setError_code((java.lang.Integer)value);
        }
        break;

      case ERROR_MESSAGE:
        if (value == null) {
          unsetError_message();
        } else {
          setError_message((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QCALLBACK:
        return getQcallback();

      case ERROR_CODE:
        return getError_code();

      case ERROR_MESSAGE:
        return getError_message();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QCALLBACK:
        return isSetQcallback();
      case ERROR_CODE:
        return isSetError_code();
      case ERROR_MESSAGE:
        return isSetError_message();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof QueryCallback_Failure_args)
        return this.equals((QueryCallback_Failure_args)that);
      return false;
    }

    public boolean equals(QueryCallback_Failure_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qcallback = true && this.isSetQcallback();
      boolean that_present_qcallback = true && that.isSetQcallback();
      if (this_present_qcallback || that_present_qcallback) {
        if (!(this_present_qcallback && that_present_qcallback))
          return false;
        if (!this.qcallback.equals(that.qcallback))
          return false;
      }

      boolean this_present_error_code = true;
      boolean that_present_error_code = true;
      if (this_present_error_code || that_present_error_code) {
        if (!(this_present_error_code && that_present_error_code))
          return false;
        if (this.error_code != that.error_code)
          return false;
      }

      boolean this_present_error_message = true && this.isSetError_message();
      boolean that_present_error_message = true && that.isSetError_message();
      if (this_present_error_message || that_present_error_message) {
        if (!(this_present_error_message && that_present_error_message))
          return false;
        if (!this.error_message.equals(that.error_message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQcallback()) ? 131071 : 524287);
      if (isSetQcallback())
        hashCode = hashCode * 8191 + qcallback.hashCode();

      hashCode = hashCode * 8191 + error_code;

      hashCode = hashCode * 8191 + ((isSetError_message()) ? 131071 : 524287);
      if (isSetError_message())
        hashCode = hashCode * 8191 + error_message.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QueryCallback_Failure_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQcallback(), other.isSetQcallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQcallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qcallback, other.qcallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetError_code(), other.isSetError_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_code, other.error_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetError_message(), other.isSetError_message());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError_message()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_message, other.error_message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryCallback_Failure_args(");
      boolean first = true;

      sb.append("qcallback:");
      if (this.qcallback == null) {
        sb.append("null");
      } else {
        sb.append(this.qcallback);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error_code:");
      sb.append(this.error_code);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error_message:");
      if (this.error_message == null) {
        sb.append("null");
      } else {
        sb.append(this.error_message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qcallback != null) {
        qcallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryCallback_Failure_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Failure_argsStandardScheme getScheme() {
        return new QueryCallback_Failure_argsStandardScheme();
      }
    }

    private static class QueryCallback_Failure_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryCallback_Failure_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QCALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.qcallback.read(iprot);
                struct.setQcallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.error_code = iprot.readI32();
                struct.setError_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERROR_MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.error_message = iprot.readString();
                struct.setError_messageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qcallback != null) {
          oprot.writeFieldBegin(QCALLBACK_FIELD_DESC);
          struct.qcallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.error_code);
        oprot.writeFieldEnd();
        if (struct.error_message != null) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.error_message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryCallback_Failure_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Failure_argsTupleScheme getScheme() {
        return new QueryCallback_Failure_argsTupleScheme();
      }
    }

    private static class QueryCallback_Failure_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryCallback_Failure_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQcallback()) {
          optionals.set(0);
        }
        if (struct.isSetError_code()) {
          optionals.set(1);
        }
        if (struct.isSetError_message()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetQcallback()) {
          struct.qcallback.write(oprot);
        }
        if (struct.isSetError_code()) {
          oprot.writeI32(struct.error_code);
        }
        if (struct.isSetError_message()) {
          oprot.writeString(struct.error_message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.qcallback.read(iprot);
          struct.setQcallbackIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error_code = iprot.readI32();
          struct.setError_codeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.error_message = iprot.readString();
          struct.setError_messageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class SchemeHandlerFactory_Register_args implements org.apache.thrift.TBase<SchemeHandlerFactory_Register_args, SchemeHandlerFactory_Register_args._Fields>, java.io.Serializable, Cloneable, Comparable<SchemeHandlerFactory_Register_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SchemeHandlerFactory_Register_args");

    private static final org.apache.thrift.protocol.TField SCHEME_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("schemeName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEME_HANDLER_FACTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("schemeHandlerFactory", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SchemeHandlerFactory_Register_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SchemeHandlerFactory_Register_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String schemeName; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String domainName; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCHEME_NAME((short)1, "schemeName"),
      DOMAIN_NAME((short)2, "domainName"),
      SCHEME_HANDLER_FACTORY((short)3, "schemeHandlerFactory");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCHEME_NAME
            return SCHEME_NAME;
          case 2: // DOMAIN_NAME
            return DOMAIN_NAME;
          case 3: // SCHEME_HANDLER_FACTORY
            return SCHEME_HANDLER_FACTORY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCHEME_NAME, new org.apache.thrift.meta_data.FieldMetaData("schemeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEME_HANDLER_FACTORY, new org.apache.thrift.meta_data.FieldMetaData("schemeHandlerFactory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SchemeHandlerFactory_Register_args.class, metaDataMap);
    }

    public SchemeHandlerFactory_Register_args() {
    }

    public SchemeHandlerFactory_Register_args(
      java.lang.String schemeName,
      java.lang.String domainName,
      com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory)
    {
      this();
      this.schemeName = schemeName;
      this.domainName = domainName;
      this.schemeHandlerFactory = schemeHandlerFactory;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SchemeHandlerFactory_Register_args(SchemeHandlerFactory_Register_args other) {
      if (other.isSetSchemeName()) {
        this.schemeName = other.schemeName;
      }
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
      if (other.isSetSchemeHandlerFactory()) {
        this.schemeHandlerFactory = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.schemeHandlerFactory);
      }
    }

    @Override
    public SchemeHandlerFactory_Register_args deepCopy() {
      return new SchemeHandlerFactory_Register_args(this);
    }

    @Override
    public void clear() {
      this.schemeName = null;
      this.domainName = null;
      this.schemeHandlerFactory = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSchemeName() {
      return this.schemeName;
    }

    public SchemeHandlerFactory_Register_args setSchemeName(@org.apache.thrift.annotation.Nullable java.lang.String schemeName) {
      this.schemeName = schemeName;
      return this;
    }

    public void unsetSchemeName() {
      this.schemeName = null;
    }

    /** Returns true if field schemeName is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemeName() {
      return this.schemeName != null;
    }

    public void setSchemeNameIsSet(boolean value) {
      if (!value) {
        this.schemeName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDomainName() {
      return this.domainName;
    }

    public SchemeHandlerFactory_Register_args setDomainName(@org.apache.thrift.annotation.Nullable java.lang.String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSchemeHandlerFactory() {
      return this.schemeHandlerFactory;
    }

    public SchemeHandlerFactory_Register_args setSchemeHandlerFactory(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject schemeHandlerFactory) {
      this.schemeHandlerFactory = schemeHandlerFactory;
      return this;
    }

    public void unsetSchemeHandlerFactory() {
      this.schemeHandlerFactory = null;
    }

    /** Returns true if field schemeHandlerFactory is set (has been assigned a value) and false otherwise */
    public boolean isSetSchemeHandlerFactory() {
      return this.schemeHandlerFactory != null;
    }

    public void setSchemeHandlerFactoryIsSet(boolean value) {
      if (!value) {
        this.schemeHandlerFactory = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SCHEME_NAME:
        if (value == null) {
          unsetSchemeName();
        } else {
          setSchemeName((java.lang.String)value);
        }
        break;

      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((java.lang.String)value);
        }
        break;

      case SCHEME_HANDLER_FACTORY:
        if (value == null) {
          unsetSchemeHandlerFactory();
        } else {
          setSchemeHandlerFactory((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEME_NAME:
        return getSchemeName();

      case DOMAIN_NAME:
        return getDomainName();

      case SCHEME_HANDLER_FACTORY:
        return getSchemeHandlerFactory();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SCHEME_NAME:
        return isSetSchemeName();
      case DOMAIN_NAME:
        return isSetDomainName();
      case SCHEME_HANDLER_FACTORY:
        return isSetSchemeHandlerFactory();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof SchemeHandlerFactory_Register_args)
        return this.equals((SchemeHandlerFactory_Register_args)that);
      return false;
    }

    public boolean equals(SchemeHandlerFactory_Register_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_schemeName = true && this.isSetSchemeName();
      boolean that_present_schemeName = true && that.isSetSchemeName();
      if (this_present_schemeName || that_present_schemeName) {
        if (!(this_present_schemeName && that_present_schemeName))
          return false;
        if (!this.schemeName.equals(that.schemeName))
          return false;
      }

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      boolean this_present_schemeHandlerFactory = true && this.isSetSchemeHandlerFactory();
      boolean that_present_schemeHandlerFactory = true && that.isSetSchemeHandlerFactory();
      if (this_present_schemeHandlerFactory || that_present_schemeHandlerFactory) {
        if (!(this_present_schemeHandlerFactory && that_present_schemeHandlerFactory))
          return false;
        if (!this.schemeHandlerFactory.equals(that.schemeHandlerFactory))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSchemeName()) ? 131071 : 524287);
      if (isSetSchemeName())
        hashCode = hashCode * 8191 + schemeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDomainName()) ? 131071 : 524287);
      if (isSetDomainName())
        hashCode = hashCode * 8191 + domainName.hashCode();

      hashCode = hashCode * 8191 + ((isSetSchemeHandlerFactory()) ? 131071 : 524287);
      if (isSetSchemeHandlerFactory())
        hashCode = hashCode * 8191 + schemeHandlerFactory.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(SchemeHandlerFactory_Register_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSchemeName(), other.isSetSchemeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemeName, other.schemeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDomainName(), other.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSchemeHandlerFactory(), other.isSetSchemeHandlerFactory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchemeHandlerFactory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schemeHandlerFactory, other.schemeHandlerFactory);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("SchemeHandlerFactory_Register_args(");
      boolean first = true;

      sb.append("schemeName:");
      if (this.schemeName == null) {
        sb.append("null");
      } else {
        sb.append(this.schemeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schemeHandlerFactory:");
      if (this.schemeHandlerFactory == null) {
        sb.append("null");
      } else {
        sb.append(this.schemeHandlerFactory);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (schemeHandlerFactory != null) {
        schemeHandlerFactory.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class SchemeHandlerFactory_Register_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public SchemeHandlerFactory_Register_argsStandardScheme getScheme() {
        return new SchemeHandlerFactory_Register_argsStandardScheme();
      }
    }

    private static class SchemeHandlerFactory_Register_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<SchemeHandlerFactory_Register_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, SchemeHandlerFactory_Register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SCHEME_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.schemeName = iprot.readString();
                struct.setSchemeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SCHEME_HANDLER_FACTORY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.schemeHandlerFactory = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.schemeHandlerFactory.read(iprot);
                struct.setSchemeHandlerFactoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, SchemeHandlerFactory_Register_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.schemeName != null) {
          oprot.writeFieldBegin(SCHEME_NAME_FIELD_DESC);
          oprot.writeString(struct.schemeName);
          oprot.writeFieldEnd();
        }
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        if (struct.schemeHandlerFactory != null) {
          oprot.writeFieldBegin(SCHEME_HANDLER_FACTORY_FIELD_DESC);
          struct.schemeHandlerFactory.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class SchemeHandlerFactory_Register_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public SchemeHandlerFactory_Register_argsTupleScheme getScheme() {
        return new SchemeHandlerFactory_Register_argsTupleScheme();
      }
    }

    private static class SchemeHandlerFactory_Register_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<SchemeHandlerFactory_Register_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, SchemeHandlerFactory_Register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSchemeName()) {
          optionals.set(0);
        }
        if (struct.isSetDomainName()) {
          optionals.set(1);
        }
        if (struct.isSetSchemeHandlerFactory()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSchemeName()) {
          oprot.writeString(struct.schemeName);
        }
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
        if (struct.isSetSchemeHandlerFactory()) {
          struct.schemeHandlerFactory.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, SchemeHandlerFactory_Register_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.schemeName = iprot.readString();
          struct.setSchemeNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.schemeHandlerFactory = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.schemeHandlerFactory.read(iprot);
          struct.setSchemeHandlerFactoryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class ClearAllSchemeHandlerFactories_args implements org.apache.thrift.TBase<ClearAllSchemeHandlerFactories_args, ClearAllSchemeHandlerFactories_args._Fields>, java.io.Serializable, Cloneable, Comparable<ClearAllSchemeHandlerFactories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClearAllSchemeHandlerFactories_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClearAllSchemeHandlerFactories_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClearAllSchemeHandlerFactories_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClearAllSchemeHandlerFactories_args.class, metaDataMap);
    }

    public ClearAllSchemeHandlerFactories_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ClearAllSchemeHandlerFactories_args(ClearAllSchemeHandlerFactories_args other) {
    }

    @Override
    public ClearAllSchemeHandlerFactories_args deepCopy() {
      return new ClearAllSchemeHandlerFactories_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ClearAllSchemeHandlerFactories_args)
        return this.equals((ClearAllSchemeHandlerFactories_args)that);
      return false;
    }

    public boolean equals(ClearAllSchemeHandlerFactories_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ClearAllSchemeHandlerFactories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ClearAllSchemeHandlerFactories_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ClearAllSchemeHandlerFactories_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ClearAllSchemeHandlerFactories_argsStandardScheme getScheme() {
        return new ClearAllSchemeHandlerFactories_argsStandardScheme();
      }
    }

    private static class ClearAllSchemeHandlerFactories_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ClearAllSchemeHandlerFactories_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, ClearAllSchemeHandlerFactories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, ClearAllSchemeHandlerFactories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ClearAllSchemeHandlerFactories_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public ClearAllSchemeHandlerFactories_argsTupleScheme getScheme() {
        return new ClearAllSchemeHandlerFactories_argsTupleScheme();
      }
    }

    private static class ClearAllSchemeHandlerFactories_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ClearAllSchemeHandlerFactories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ClearAllSchemeHandlerFactories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ClearAllSchemeHandlerFactories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestContext_ClearCertificateExceptions_args implements org.apache.thrift.TBase<RequestContext_ClearCertificateExceptions_args, RequestContext_ClearCertificateExceptions_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestContext_ClearCertificateExceptions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestContext_ClearCertificateExceptions_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPLETION_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("completionCallback", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestContext_ClearCertificateExceptions_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestContext_ClearCertificateExceptions_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      COMPLETION_CALLBACK((short)2, "completionCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // COMPLETION_CALLBACK
            return COMPLETION_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPLETION_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("completionCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestContext_ClearCertificateExceptions_args.class, metaDataMap);
    }

    public RequestContext_ClearCertificateExceptions_args() {
    }

    public RequestContext_ClearCertificateExceptions_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.completionCallback = completionCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestContext_ClearCertificateExceptions_args(RequestContext_ClearCertificateExceptions_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetCompletionCallback()) {
        this.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.completionCallback);
      }
    }

    @Override
    public RequestContext_ClearCertificateExceptions_args deepCopy() {
      return new RequestContext_ClearCertificateExceptions_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.completionCallback = null;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestContext_ClearCertificateExceptions_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCompletionCallback() {
      return this.completionCallback;
    }

    public RequestContext_ClearCertificateExceptions_args setCompletionCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) {
      this.completionCallback = completionCallback;
      return this;
    }

    public void unsetCompletionCallback() {
      this.completionCallback = null;
    }

    /** Returns true if field completionCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetCompletionCallback() {
      return this.completionCallback != null;
    }

    public void setCompletionCallbackIsSet(boolean value) {
      if (!value) {
        this.completionCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case COMPLETION_CALLBACK:
        if (value == null) {
          unsetCompletionCallback();
        } else {
          setCompletionCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case COMPLETION_CALLBACK:
        return getCompletionCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case COMPLETION_CALLBACK:
        return isSetCompletionCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestContext_ClearCertificateExceptions_args)
        return this.equals((RequestContext_ClearCertificateExceptions_args)that);
      return false;
    }

    public boolean equals(RequestContext_ClearCertificateExceptions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_completionCallback = true && this.isSetCompletionCallback();
      boolean that_present_completionCallback = true && that.isSetCompletionCallback();
      if (this_present_completionCallback || that_present_completionCallback) {
        if (!(this_present_completionCallback && that_present_completionCallback))
          return false;
        if (!this.completionCallback.equals(that.completionCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetCompletionCallback()) ? 131071 : 524287);
      if (isSetCompletionCallback())
        hashCode = hashCode * 8191 + completionCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RequestContext_ClearCertificateExceptions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCompletionCallback(), other.isSetCompletionCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompletionCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completionCallback, other.completionCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestContext_ClearCertificateExceptions_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("completionCallback:");
      if (this.completionCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.completionCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (completionCallback != null) {
        completionCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestContext_ClearCertificateExceptions_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestContext_ClearCertificateExceptions_argsStandardScheme getScheme() {
        return new RequestContext_ClearCertificateExceptions_argsStandardScheme();
      }
    }

    private static class RequestContext_ClearCertificateExceptions_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestContext_ClearCertificateExceptions_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestContext_ClearCertificateExceptions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPLETION_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.completionCallback.read(iprot);
                struct.setCompletionCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestContext_ClearCertificateExceptions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.completionCallback != null) {
          oprot.writeFieldBegin(COMPLETION_CALLBACK_FIELD_DESC);
          struct.completionCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestContext_ClearCertificateExceptions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestContext_ClearCertificateExceptions_argsTupleScheme getScheme() {
        return new RequestContext_ClearCertificateExceptions_argsTupleScheme();
      }
    }

    private static class RequestContext_ClearCertificateExceptions_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestContext_ClearCertificateExceptions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestContext_ClearCertificateExceptions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetCompletionCallback()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetCompletionCallback()) {
          struct.completionCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestContext_ClearCertificateExceptions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.completionCallback.read(iprot);
          struct.setCompletionCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class RequestContext_CloseAllConnections_args implements org.apache.thrift.TBase<RequestContext_CloseAllConnections_args, RequestContext_CloseAllConnections_args._Fields>, java.io.Serializable, Cloneable, Comparable<RequestContext_CloseAllConnections_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestContext_CloseAllConnections_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField COMPLETION_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("completionCallback", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestContext_CloseAllConnections_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestContext_CloseAllConnections_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      COMPLETION_CALLBACK((short)2, "completionCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // COMPLETION_CALLBACK
            return COMPLETION_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMPLETION_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("completionCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestContext_CloseAllConnections_args.class, metaDataMap);
    }

    public RequestContext_CloseAllConnections_args() {
    }

    public RequestContext_CloseAllConnections_args(
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.completionCallback = completionCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestContext_CloseAllConnections_args(RequestContext_CloseAllConnections_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetCompletionCallback()) {
        this.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.completionCallback);
      }
    }

    @Override
    public RequestContext_CloseAllConnections_args deepCopy() {
      return new RequestContext_CloseAllConnections_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.completionCallback = null;
    }

    public int getBid() {
      return this.bid;
    }

    public RequestContext_CloseAllConnections_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCompletionCallback() {
      return this.completionCallback;
    }

    public RequestContext_CloseAllConnections_args setCompletionCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) {
      this.completionCallback = completionCallback;
      return this;
    }

    public void unsetCompletionCallback() {
      this.completionCallback = null;
    }

    /** Returns true if field completionCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetCompletionCallback() {
      return this.completionCallback != null;
    }

    public void setCompletionCallbackIsSet(boolean value) {
      if (!value) {
        this.completionCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case COMPLETION_CALLBACK:
        if (value == null) {
          unsetCompletionCallback();
        } else {
          setCompletionCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case COMPLETION_CALLBACK:
        return getCompletionCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case COMPLETION_CALLBACK:
        return isSetCompletionCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof RequestContext_CloseAllConnections_args)
        return this.equals((RequestContext_CloseAllConnections_args)that);
      return false;
    }

    public boolean equals(RequestContext_CloseAllConnections_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_completionCallback = true && this.isSetCompletionCallback();
      boolean that_present_completionCallback = true && that.isSetCompletionCallback();
      if (this_present_completionCallback || that_present_completionCallback) {
        if (!(this_present_completionCallback && that_present_completionCallback))
          return false;
        if (!this.completionCallback.equals(that.completionCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetCompletionCallback()) ? 131071 : 524287);
      if (isSetCompletionCallback())
        hashCode = hashCode * 8191 + completionCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RequestContext_CloseAllConnections_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCompletionCallback(), other.isSetCompletionCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompletionCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completionCallback, other.completionCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestContext_CloseAllConnections_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("completionCallback:");
      if (this.completionCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.completionCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (completionCallback != null) {
        completionCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RequestContext_CloseAllConnections_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestContext_CloseAllConnections_argsStandardScheme getScheme() {
        return new RequestContext_CloseAllConnections_argsStandardScheme();
      }
    }

    private static class RequestContext_CloseAllConnections_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestContext_CloseAllConnections_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, RequestContext_CloseAllConnections_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPLETION_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.completionCallback.read(iprot);
                struct.setCompletionCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, RequestContext_CloseAllConnections_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.completionCallback != null) {
          oprot.writeFieldBegin(COMPLETION_CALLBACK_FIELD_DESC);
          struct.completionCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RequestContext_CloseAllConnections_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public RequestContext_CloseAllConnections_argsTupleScheme getScheme() {
        return new RequestContext_CloseAllConnections_argsTupleScheme();
      }
    }

    private static class RequestContext_CloseAllConnections_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestContext_CloseAllConnections_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RequestContext_CloseAllConnections_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetCompletionCallback()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetCompletionCallback()) {
          struct.completionCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RequestContext_CloseAllConnections_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.completionCallback.read(iprot);
          struct.setCompletionCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_Create_args implements org.apache.thrift.TBase<CookieManager_Create_args, CookieManager_Create_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_Create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_Create_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_Create_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_Create_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_Create_args.class, metaDataMap);
    }

    public CookieManager_Create_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_Create_args(CookieManager_Create_args other) {
    }

    @Override
    public CookieManager_Create_args deepCopy() {
      return new CookieManager_Create_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_Create_args)
        return this.equals((CookieManager_Create_args)that);
      return false;
    }

    public boolean equals(CookieManager_Create_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_Create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_Create_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_Create_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_Create_argsStandardScheme getScheme() {
        return new CookieManager_Create_argsStandardScheme();
      }
    }

    private static class CookieManager_Create_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_Create_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_Create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_Create_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_Create_argsTupleScheme getScheme() {
        return new CookieManager_Create_argsTupleScheme();
      }
    }

    private static class CookieManager_Create_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_Create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_Create_result implements org.apache.thrift.TBase<CookieManager_Create_result, CookieManager_Create_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_Create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_Create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_Create_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_Create_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_Create_result.class, metaDataMap);
    }

    public CookieManager_Create_result() {
    }

    public CookieManager_Create_result(
      com.jetbrains.cef.remote.thrift_codegen.RObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_Create_result(CookieManager_Create_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.success);
      }
    }

    @Override
    public CookieManager_Create_result deepCopy() {
      return new CookieManager_Create_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSuccess() {
      return this.success;
    }

    public CookieManager_Create_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_Create_result)
        return this.equals((CookieManager_Create_result)that);
      return false;
    }

    public boolean equals(CookieManager_Create_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_Create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_Create_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_Create_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_Create_resultStandardScheme getScheme() {
        return new CookieManager_Create_resultStandardScheme();
      }
    }

    private static class CookieManager_Create_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_Create_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_Create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_Create_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_Create_resultTupleScheme getScheme() {
        return new CookieManager_Create_resultTupleScheme();
      }
    }

    private static class CookieManager_Create_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_Create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_Dispose_args implements org.apache.thrift.TBase<CookieManager_Dispose_args, CookieManager_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_Dispose_args");

    private static final org.apache.thrift.protocol.TField COOKIE_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieManager", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOKIE_MANAGER((short)1, "cookieManager");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOKIE_MANAGER
            return COOKIE_MANAGER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOKIE_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("cookieManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_Dispose_args.class, metaDataMap);
    }

    public CookieManager_Dispose_args() {
    }

    public CookieManager_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager)
    {
      this();
      this.cookieManager = cookieManager;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_Dispose_args(CookieManager_Dispose_args other) {
      if (other.isSetCookieManager()) {
        this.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.cookieManager);
      }
    }

    @Override
    public CookieManager_Dispose_args deepCopy() {
      return new CookieManager_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.cookieManager = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCookieManager() {
      return this.cookieManager;
    }

    public CookieManager_Dispose_args setCookieManager(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) {
      this.cookieManager = cookieManager;
      return this;
    }

    public void unsetCookieManager() {
      this.cookieManager = null;
    }

    /** Returns true if field cookieManager is set (has been assigned a value) and false otherwise */
    public boolean isSetCookieManager() {
      return this.cookieManager != null;
    }

    public void setCookieManagerIsSet(boolean value) {
      if (!value) {
        this.cookieManager = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COOKIE_MANAGER:
        if (value == null) {
          unsetCookieManager();
        } else {
          setCookieManager((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COOKIE_MANAGER:
        return getCookieManager();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COOKIE_MANAGER:
        return isSetCookieManager();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_Dispose_args)
        return this.equals((CookieManager_Dispose_args)that);
      return false;
    }

    public boolean equals(CookieManager_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cookieManager = true && this.isSetCookieManager();
      boolean that_present_cookieManager = true && that.isSetCookieManager();
      if (this_present_cookieManager || that_present_cookieManager) {
        if (!(this_present_cookieManager && that_present_cookieManager))
          return false;
        if (!this.cookieManager.equals(that.cookieManager))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCookieManager()) ? 131071 : 524287);
      if (isSetCookieManager())
        hashCode = hashCode * 8191 + cookieManager.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCookieManager(), other.isSetCookieManager());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookieManager()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieManager, other.cookieManager);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_Dispose_args(");
      boolean first = true;

      sb.append("cookieManager:");
      if (this.cookieManager == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieManager);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cookieManager != null) {
        cookieManager.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_Dispose_argsStandardScheme getScheme() {
        return new CookieManager_Dispose_argsStandardScheme();
      }
    }

    private static class CookieManager_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOKIE_MANAGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.cookieManager.read(iprot);
                struct.setCookieManagerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cookieManager != null) {
          oprot.writeFieldBegin(COOKIE_MANAGER_FIELD_DESC);
          struct.cookieManager.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_Dispose_argsTupleScheme getScheme() {
        return new CookieManager_Dispose_argsTupleScheme();
      }
    }

    private static class CookieManager_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCookieManager()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCookieManager()) {
          struct.cookieManager.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.cookieManager.read(iprot);
          struct.setCookieManagerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_VisitAllCookies_args implements org.apache.thrift.TBase<CookieManager_VisitAllCookies_args, CookieManager_VisitAllCookies_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_VisitAllCookies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_VisitAllCookies_args");

    private static final org.apache.thrift.protocol.TField COOKIE_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieManager", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VISITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("visitor", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_VisitAllCookies_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_VisitAllCookies_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject visitor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOKIE_MANAGER((short)1, "cookieManager"),
      VISITOR((short)2, "visitor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOKIE_MANAGER
            return COOKIE_MANAGER;
          case 2: // VISITOR
            return VISITOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOKIE_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("cookieManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.VISITOR, new org.apache.thrift.meta_data.FieldMetaData("visitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_VisitAllCookies_args.class, metaDataMap);
    }

    public CookieManager_VisitAllCookies_args() {
    }

    public CookieManager_VisitAllCookies_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager,
      com.jetbrains.cef.remote.thrift_codegen.RObject visitor)
    {
      this();
      this.cookieManager = cookieManager;
      this.visitor = visitor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_VisitAllCookies_args(CookieManager_VisitAllCookies_args other) {
      if (other.isSetCookieManager()) {
        this.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.cookieManager);
      }
      if (other.isSetVisitor()) {
        this.visitor = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.visitor);
      }
    }

    @Override
    public CookieManager_VisitAllCookies_args deepCopy() {
      return new CookieManager_VisitAllCookies_args(this);
    }

    @Override
    public void clear() {
      this.cookieManager = null;
      this.visitor = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCookieManager() {
      return this.cookieManager;
    }

    public CookieManager_VisitAllCookies_args setCookieManager(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) {
      this.cookieManager = cookieManager;
      return this;
    }

    public void unsetCookieManager() {
      this.cookieManager = null;
    }

    /** Returns true if field cookieManager is set (has been assigned a value) and false otherwise */
    public boolean isSetCookieManager() {
      return this.cookieManager != null;
    }

    public void setCookieManagerIsSet(boolean value) {
      if (!value) {
        this.cookieManager = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getVisitor() {
      return this.visitor;
    }

    public CookieManager_VisitAllCookies_args setVisitor(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject visitor) {
      this.visitor = visitor;
      return this;
    }

    public void unsetVisitor() {
      this.visitor = null;
    }

    /** Returns true if field visitor is set (has been assigned a value) and false otherwise */
    public boolean isSetVisitor() {
      return this.visitor != null;
    }

    public void setVisitorIsSet(boolean value) {
      if (!value) {
        this.visitor = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COOKIE_MANAGER:
        if (value == null) {
          unsetCookieManager();
        } else {
          setCookieManager((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case VISITOR:
        if (value == null) {
          unsetVisitor();
        } else {
          setVisitor((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COOKIE_MANAGER:
        return getCookieManager();

      case VISITOR:
        return getVisitor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COOKIE_MANAGER:
        return isSetCookieManager();
      case VISITOR:
        return isSetVisitor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_VisitAllCookies_args)
        return this.equals((CookieManager_VisitAllCookies_args)that);
      return false;
    }

    public boolean equals(CookieManager_VisitAllCookies_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cookieManager = true && this.isSetCookieManager();
      boolean that_present_cookieManager = true && that.isSetCookieManager();
      if (this_present_cookieManager || that_present_cookieManager) {
        if (!(this_present_cookieManager && that_present_cookieManager))
          return false;
        if (!this.cookieManager.equals(that.cookieManager))
          return false;
      }

      boolean this_present_visitor = true && this.isSetVisitor();
      boolean that_present_visitor = true && that.isSetVisitor();
      if (this_present_visitor || that_present_visitor) {
        if (!(this_present_visitor && that_present_visitor))
          return false;
        if (!this.visitor.equals(that.visitor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCookieManager()) ? 131071 : 524287);
      if (isSetCookieManager())
        hashCode = hashCode * 8191 + cookieManager.hashCode();

      hashCode = hashCode * 8191 + ((isSetVisitor()) ? 131071 : 524287);
      if (isSetVisitor())
        hashCode = hashCode * 8191 + visitor.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_VisitAllCookies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCookieManager(), other.isSetCookieManager());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookieManager()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieManager, other.cookieManager);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVisitor(), other.isSetVisitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitor, other.visitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_VisitAllCookies_args(");
      boolean first = true;

      sb.append("cookieManager:");
      if (this.cookieManager == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieManager);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visitor:");
      if (this.visitor == null) {
        sb.append("null");
      } else {
        sb.append(this.visitor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cookieManager != null) {
        cookieManager.validate();
      }
      if (visitor != null) {
        visitor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_VisitAllCookies_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitAllCookies_argsStandardScheme getScheme() {
        return new CookieManager_VisitAllCookies_argsStandardScheme();
      }
    }

    private static class CookieManager_VisitAllCookies_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_VisitAllCookies_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_VisitAllCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOKIE_MANAGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.cookieManager.read(iprot);
                struct.setCookieManagerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.visitor.read(iprot);
                struct.setVisitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_VisitAllCookies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cookieManager != null) {
          oprot.writeFieldBegin(COOKIE_MANAGER_FIELD_DESC);
          struct.cookieManager.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.visitor != null) {
          oprot.writeFieldBegin(VISITOR_FIELD_DESC);
          struct.visitor.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_VisitAllCookies_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitAllCookies_argsTupleScheme getScheme() {
        return new CookieManager_VisitAllCookies_argsTupleScheme();
      }
    }

    private static class CookieManager_VisitAllCookies_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_VisitAllCookies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitAllCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCookieManager()) {
          optionals.set(0);
        }
        if (struct.isSetVisitor()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCookieManager()) {
          struct.cookieManager.write(oprot);
        }
        if (struct.isSetVisitor()) {
          struct.visitor.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitAllCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.cookieManager.read(iprot);
          struct.setCookieManagerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.visitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.visitor.read(iprot);
          struct.setVisitorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_VisitAllCookies_result implements org.apache.thrift.TBase<CookieManager_VisitAllCookies_result, CookieManager_VisitAllCookies_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_VisitAllCookies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_VisitAllCookies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_VisitAllCookies_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_VisitAllCookies_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_VisitAllCookies_result.class, metaDataMap);
    }

    public CookieManager_VisitAllCookies_result() {
    }

    public CookieManager_VisitAllCookies_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_VisitAllCookies_result(CookieManager_VisitAllCookies_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public CookieManager_VisitAllCookies_result deepCopy() {
      return new CookieManager_VisitAllCookies_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CookieManager_VisitAllCookies_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_VisitAllCookies_result)
        return this.equals((CookieManager_VisitAllCookies_result)that);
      return false;
    }

    public boolean equals(CookieManager_VisitAllCookies_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_VisitAllCookies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_VisitAllCookies_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_VisitAllCookies_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitAllCookies_resultStandardScheme getScheme() {
        return new CookieManager_VisitAllCookies_resultStandardScheme();
      }
    }

    private static class CookieManager_VisitAllCookies_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_VisitAllCookies_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_VisitAllCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_VisitAllCookies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_VisitAllCookies_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitAllCookies_resultTupleScheme getScheme() {
        return new CookieManager_VisitAllCookies_resultTupleScheme();
      }
    }

    private static class CookieManager_VisitAllCookies_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_VisitAllCookies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitAllCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitAllCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_VisitUrlCookies_args implements org.apache.thrift.TBase<CookieManager_VisitUrlCookies_args, CookieManager_VisitUrlCookies_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_VisitUrlCookies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_VisitUrlCookies_args");

    private static final org.apache.thrift.protocol.TField COOKIE_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieManager", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VISITOR_FIELD_DESC = new org.apache.thrift.protocol.TField("visitor", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INCLUDE_HTTP_ONLY_FIELD_DESC = new org.apache.thrift.protocol.TField("includeHttpOnly", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_VisitUrlCookies_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_VisitUrlCookies_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject visitor; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public boolean includeHttpOnly; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOKIE_MANAGER((short)1, "cookieManager"),
      VISITOR((short)2, "visitor"),
      URL((short)3, "url"),
      INCLUDE_HTTP_ONLY((short)4, "includeHttpOnly");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOKIE_MANAGER
            return COOKIE_MANAGER;
          case 2: // VISITOR
            return VISITOR;
          case 3: // URL
            return URL;
          case 4: // INCLUDE_HTTP_ONLY
            return INCLUDE_HTTP_ONLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INCLUDEHTTPONLY_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOKIE_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("cookieManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.VISITOR, new org.apache.thrift.meta_data.FieldMetaData("visitor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INCLUDE_HTTP_ONLY, new org.apache.thrift.meta_data.FieldMetaData("includeHttpOnly", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_VisitUrlCookies_args.class, metaDataMap);
    }

    public CookieManager_VisitUrlCookies_args() {
    }

    public CookieManager_VisitUrlCookies_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager,
      com.jetbrains.cef.remote.thrift_codegen.RObject visitor,
      java.lang.String url,
      boolean includeHttpOnly)
    {
      this();
      this.cookieManager = cookieManager;
      this.visitor = visitor;
      this.url = url;
      this.includeHttpOnly = includeHttpOnly;
      setIncludeHttpOnlyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_VisitUrlCookies_args(CookieManager_VisitUrlCookies_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCookieManager()) {
        this.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.cookieManager);
      }
      if (other.isSetVisitor()) {
        this.visitor = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.visitor);
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      this.includeHttpOnly = other.includeHttpOnly;
    }

    @Override
    public CookieManager_VisitUrlCookies_args deepCopy() {
      return new CookieManager_VisitUrlCookies_args(this);
    }

    @Override
    public void clear() {
      this.cookieManager = null;
      this.visitor = null;
      this.url = null;
      setIncludeHttpOnlyIsSet(false);
      this.includeHttpOnly = false;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCookieManager() {
      return this.cookieManager;
    }

    public CookieManager_VisitUrlCookies_args setCookieManager(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) {
      this.cookieManager = cookieManager;
      return this;
    }

    public void unsetCookieManager() {
      this.cookieManager = null;
    }

    /** Returns true if field cookieManager is set (has been assigned a value) and false otherwise */
    public boolean isSetCookieManager() {
      return this.cookieManager != null;
    }

    public void setCookieManagerIsSet(boolean value) {
      if (!value) {
        this.cookieManager = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getVisitor() {
      return this.visitor;
    }

    public CookieManager_VisitUrlCookies_args setVisitor(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject visitor) {
      this.visitor = visitor;
      return this;
    }

    public void unsetVisitor() {
      this.visitor = null;
    }

    /** Returns true if field visitor is set (has been assigned a value) and false otherwise */
    public boolean isSetVisitor() {
      return this.visitor != null;
    }

    public void setVisitorIsSet(boolean value) {
      if (!value) {
        this.visitor = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public CookieManager_VisitUrlCookies_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public boolean isIncludeHttpOnly() {
      return this.includeHttpOnly;
    }

    public CookieManager_VisitUrlCookies_args setIncludeHttpOnly(boolean includeHttpOnly) {
      this.includeHttpOnly = includeHttpOnly;
      setIncludeHttpOnlyIsSet(true);
      return this;
    }

    public void unsetIncludeHttpOnly() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCLUDEHTTPONLY_ISSET_ID);
    }

    /** Returns true if field includeHttpOnly is set (has been assigned a value) and false otherwise */
    public boolean isSetIncludeHttpOnly() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCLUDEHTTPONLY_ISSET_ID);
    }

    public void setIncludeHttpOnlyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCLUDEHTTPONLY_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COOKIE_MANAGER:
        if (value == null) {
          unsetCookieManager();
        } else {
          setCookieManager((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case VISITOR:
        if (value == null) {
          unsetVisitor();
        } else {
          setVisitor((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case INCLUDE_HTTP_ONLY:
        if (value == null) {
          unsetIncludeHttpOnly();
        } else {
          setIncludeHttpOnly((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COOKIE_MANAGER:
        return getCookieManager();

      case VISITOR:
        return getVisitor();

      case URL:
        return getUrl();

      case INCLUDE_HTTP_ONLY:
        return isIncludeHttpOnly();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COOKIE_MANAGER:
        return isSetCookieManager();
      case VISITOR:
        return isSetVisitor();
      case URL:
        return isSetUrl();
      case INCLUDE_HTTP_ONLY:
        return isSetIncludeHttpOnly();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_VisitUrlCookies_args)
        return this.equals((CookieManager_VisitUrlCookies_args)that);
      return false;
    }

    public boolean equals(CookieManager_VisitUrlCookies_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cookieManager = true && this.isSetCookieManager();
      boolean that_present_cookieManager = true && that.isSetCookieManager();
      if (this_present_cookieManager || that_present_cookieManager) {
        if (!(this_present_cookieManager && that_present_cookieManager))
          return false;
        if (!this.cookieManager.equals(that.cookieManager))
          return false;
      }

      boolean this_present_visitor = true && this.isSetVisitor();
      boolean that_present_visitor = true && that.isSetVisitor();
      if (this_present_visitor || that_present_visitor) {
        if (!(this_present_visitor && that_present_visitor))
          return false;
        if (!this.visitor.equals(that.visitor))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_includeHttpOnly = true;
      boolean that_present_includeHttpOnly = true;
      if (this_present_includeHttpOnly || that_present_includeHttpOnly) {
        if (!(this_present_includeHttpOnly && that_present_includeHttpOnly))
          return false;
        if (this.includeHttpOnly != that.includeHttpOnly)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCookieManager()) ? 131071 : 524287);
      if (isSetCookieManager())
        hashCode = hashCode * 8191 + cookieManager.hashCode();

      hashCode = hashCode * 8191 + ((isSetVisitor()) ? 131071 : 524287);
      if (isSetVisitor())
        hashCode = hashCode * 8191 + visitor.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + ((includeHttpOnly) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_VisitUrlCookies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCookieManager(), other.isSetCookieManager());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookieManager()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieManager, other.cookieManager);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetVisitor(), other.isSetVisitor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisitor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitor, other.visitor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIncludeHttpOnly(), other.isSetIncludeHttpOnly());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncludeHttpOnly()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeHttpOnly, other.includeHttpOnly);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_VisitUrlCookies_args(");
      boolean first = true;

      sb.append("cookieManager:");
      if (this.cookieManager == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieManager);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visitor:");
      if (this.visitor == null) {
        sb.append("null");
      } else {
        sb.append(this.visitor);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("includeHttpOnly:");
      sb.append(this.includeHttpOnly);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cookieManager != null) {
        cookieManager.validate();
      }
      if (visitor != null) {
        visitor.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_VisitUrlCookies_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitUrlCookies_argsStandardScheme getScheme() {
        return new CookieManager_VisitUrlCookies_argsStandardScheme();
      }
    }

    private static class CookieManager_VisitUrlCookies_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_VisitUrlCookies_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_VisitUrlCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOKIE_MANAGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.cookieManager.read(iprot);
                struct.setCookieManagerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISITOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.visitor.read(iprot);
                struct.setVisitorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INCLUDE_HTTP_ONLY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.includeHttpOnly = iprot.readBool();
                struct.setIncludeHttpOnlyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_VisitUrlCookies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cookieManager != null) {
          oprot.writeFieldBegin(COOKIE_MANAGER_FIELD_DESC);
          struct.cookieManager.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.visitor != null) {
          oprot.writeFieldBegin(VISITOR_FIELD_DESC);
          struct.visitor.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INCLUDE_HTTP_ONLY_FIELD_DESC);
        oprot.writeBool(struct.includeHttpOnly);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_VisitUrlCookies_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitUrlCookies_argsTupleScheme getScheme() {
        return new CookieManager_VisitUrlCookies_argsTupleScheme();
      }
    }

    private static class CookieManager_VisitUrlCookies_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_VisitUrlCookies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitUrlCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCookieManager()) {
          optionals.set(0);
        }
        if (struct.isSetVisitor()) {
          optionals.set(1);
        }
        if (struct.isSetUrl()) {
          optionals.set(2);
        }
        if (struct.isSetIncludeHttpOnly()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCookieManager()) {
          struct.cookieManager.write(oprot);
        }
        if (struct.isSetVisitor()) {
          struct.visitor.write(oprot);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetIncludeHttpOnly()) {
          oprot.writeBool(struct.includeHttpOnly);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitUrlCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.cookieManager.read(iprot);
          struct.setCookieManagerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.visitor = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.visitor.read(iprot);
          struct.setVisitorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.includeHttpOnly = iprot.readBool();
          struct.setIncludeHttpOnlyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_VisitUrlCookies_result implements org.apache.thrift.TBase<CookieManager_VisitUrlCookies_result, CookieManager_VisitUrlCookies_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_VisitUrlCookies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_VisitUrlCookies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_VisitUrlCookies_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_VisitUrlCookies_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_VisitUrlCookies_result.class, metaDataMap);
    }

    public CookieManager_VisitUrlCookies_result() {
    }

    public CookieManager_VisitUrlCookies_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_VisitUrlCookies_result(CookieManager_VisitUrlCookies_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public CookieManager_VisitUrlCookies_result deepCopy() {
      return new CookieManager_VisitUrlCookies_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CookieManager_VisitUrlCookies_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_VisitUrlCookies_result)
        return this.equals((CookieManager_VisitUrlCookies_result)that);
      return false;
    }

    public boolean equals(CookieManager_VisitUrlCookies_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_VisitUrlCookies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_VisitUrlCookies_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_VisitUrlCookies_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitUrlCookies_resultStandardScheme getScheme() {
        return new CookieManager_VisitUrlCookies_resultStandardScheme();
      }
    }

    private static class CookieManager_VisitUrlCookies_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_VisitUrlCookies_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_VisitUrlCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_VisitUrlCookies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_VisitUrlCookies_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_VisitUrlCookies_resultTupleScheme getScheme() {
        return new CookieManager_VisitUrlCookies_resultTupleScheme();
      }
    }

    private static class CookieManager_VisitUrlCookies_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_VisitUrlCookies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitUrlCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_VisitUrlCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_SetCookie_args implements org.apache.thrift.TBase<CookieManager_SetCookie_args, CookieManager_SetCookie_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_SetCookie_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_SetCookie_args");

    private static final org.apache.thrift.protocol.TField COOKIE_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieManager", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COOKIE_FIELD_DESC = new org.apache.thrift.protocol.TField("cookie", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_SetCookie_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_SetCookie_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.Cookie cookie; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOKIE_MANAGER((short)1, "cookieManager"),
      URL((short)2, "url"),
      COOKIE((short)3, "cookie");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOKIE_MANAGER
            return COOKIE_MANAGER;
          case 2: // URL
            return URL;
          case 3: // COOKIE
            return COOKIE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOKIE_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("cookieManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COOKIE, new org.apache.thrift.meta_data.FieldMetaData("cookie", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.Cookie.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_SetCookie_args.class, metaDataMap);
    }

    public CookieManager_SetCookie_args() {
    }

    public CookieManager_SetCookie_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager,
      java.lang.String url,
      com.jetbrains.cef.remote.thrift_codegen.Cookie cookie)
    {
      this();
      this.cookieManager = cookieManager;
      this.url = url;
      this.cookie = cookie;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_SetCookie_args(CookieManager_SetCookie_args other) {
      if (other.isSetCookieManager()) {
        this.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.cookieManager);
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetCookie()) {
        this.cookie = new com.jetbrains.cef.remote.thrift_codegen.Cookie(other.cookie);
      }
    }

    @Override
    public CookieManager_SetCookie_args deepCopy() {
      return new CookieManager_SetCookie_args(this);
    }

    @Override
    public void clear() {
      this.cookieManager = null;
      this.url = null;
      this.cookie = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCookieManager() {
      return this.cookieManager;
    }

    public CookieManager_SetCookie_args setCookieManager(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) {
      this.cookieManager = cookieManager;
      return this;
    }

    public void unsetCookieManager() {
      this.cookieManager = null;
    }

    /** Returns true if field cookieManager is set (has been assigned a value) and false otherwise */
    public boolean isSetCookieManager() {
      return this.cookieManager != null;
    }

    public void setCookieManagerIsSet(boolean value) {
      if (!value) {
        this.cookieManager = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public CookieManager_SetCookie_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.Cookie getCookie() {
      return this.cookie;
    }

    public CookieManager_SetCookie_args setCookie(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.Cookie cookie) {
      this.cookie = cookie;
      return this;
    }

    public void unsetCookie() {
      this.cookie = null;
    }

    /** Returns true if field cookie is set (has been assigned a value) and false otherwise */
    public boolean isSetCookie() {
      return this.cookie != null;
    }

    public void setCookieIsSet(boolean value) {
      if (!value) {
        this.cookie = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COOKIE_MANAGER:
        if (value == null) {
          unsetCookieManager();
        } else {
          setCookieManager((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case COOKIE:
        if (value == null) {
          unsetCookie();
        } else {
          setCookie((com.jetbrains.cef.remote.thrift_codegen.Cookie)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COOKIE_MANAGER:
        return getCookieManager();

      case URL:
        return getUrl();

      case COOKIE:
        return getCookie();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COOKIE_MANAGER:
        return isSetCookieManager();
      case URL:
        return isSetUrl();
      case COOKIE:
        return isSetCookie();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_SetCookie_args)
        return this.equals((CookieManager_SetCookie_args)that);
      return false;
    }

    public boolean equals(CookieManager_SetCookie_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cookieManager = true && this.isSetCookieManager();
      boolean that_present_cookieManager = true && that.isSetCookieManager();
      if (this_present_cookieManager || that_present_cookieManager) {
        if (!(this_present_cookieManager && that_present_cookieManager))
          return false;
        if (!this.cookieManager.equals(that.cookieManager))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_cookie = true && this.isSetCookie();
      boolean that_present_cookie = true && that.isSetCookie();
      if (this_present_cookie || that_present_cookie) {
        if (!(this_present_cookie && that_present_cookie))
          return false;
        if (!this.cookie.equals(that.cookie))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCookieManager()) ? 131071 : 524287);
      if (isSetCookieManager())
        hashCode = hashCode * 8191 + cookieManager.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + ((isSetCookie()) ? 131071 : 524287);
      if (isSetCookie())
        hashCode = hashCode * 8191 + cookie.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_SetCookie_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCookieManager(), other.isSetCookieManager());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookieManager()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieManager, other.cookieManager);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCookie(), other.isSetCookie());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookie()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookie, other.cookie);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_SetCookie_args(");
      boolean first = true;

      sb.append("cookieManager:");
      if (this.cookieManager == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieManager);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cookie:");
      if (this.cookie == null) {
        sb.append("null");
      } else {
        sb.append(this.cookie);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cookieManager != null) {
        cookieManager.validate();
      }
      if (cookie != null) {
        cookie.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_SetCookie_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_SetCookie_argsStandardScheme getScheme() {
        return new CookieManager_SetCookie_argsStandardScheme();
      }
    }

    private static class CookieManager_SetCookie_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_SetCookie_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_SetCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOKIE_MANAGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.cookieManager.read(iprot);
                struct.setCookieManagerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COOKIE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cookie = new com.jetbrains.cef.remote.thrift_codegen.Cookie();
                struct.cookie.read(iprot);
                struct.setCookieIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_SetCookie_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cookieManager != null) {
          oprot.writeFieldBegin(COOKIE_MANAGER_FIELD_DESC);
          struct.cookieManager.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.cookie != null) {
          oprot.writeFieldBegin(COOKIE_FIELD_DESC);
          struct.cookie.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_SetCookie_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_SetCookie_argsTupleScheme getScheme() {
        return new CookieManager_SetCookie_argsTupleScheme();
      }
    }

    private static class CookieManager_SetCookie_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_SetCookie_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_SetCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCookieManager()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        if (struct.isSetCookie()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCookieManager()) {
          struct.cookieManager.write(oprot);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetCookie()) {
          struct.cookie.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_SetCookie_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.cookieManager.read(iprot);
          struct.setCookieManagerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cookie = new com.jetbrains.cef.remote.thrift_codegen.Cookie();
          struct.cookie.read(iprot);
          struct.setCookieIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_SetCookie_result implements org.apache.thrift.TBase<CookieManager_SetCookie_result, CookieManager_SetCookie_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_SetCookie_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_SetCookie_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_SetCookie_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_SetCookie_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_SetCookie_result.class, metaDataMap);
    }

    public CookieManager_SetCookie_result() {
    }

    public CookieManager_SetCookie_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_SetCookie_result(CookieManager_SetCookie_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public CookieManager_SetCookie_result deepCopy() {
      return new CookieManager_SetCookie_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CookieManager_SetCookie_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_SetCookie_result)
        return this.equals((CookieManager_SetCookie_result)that);
      return false;
    }

    public boolean equals(CookieManager_SetCookie_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_SetCookie_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_SetCookie_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_SetCookie_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_SetCookie_resultStandardScheme getScheme() {
        return new CookieManager_SetCookie_resultStandardScheme();
      }
    }

    private static class CookieManager_SetCookie_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_SetCookie_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_SetCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_SetCookie_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_SetCookie_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_SetCookie_resultTupleScheme getScheme() {
        return new CookieManager_SetCookie_resultTupleScheme();
      }
    }

    private static class CookieManager_SetCookie_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_SetCookie_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_SetCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_SetCookie_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_DeleteCookies_args implements org.apache.thrift.TBase<CookieManager_DeleteCookies_args, CookieManager_DeleteCookies_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_DeleteCookies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_DeleteCookies_args");

    private static final org.apache.thrift.protocol.TField COOKIE_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieManager", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField COOKIE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieName", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_DeleteCookies_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_DeleteCookies_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String cookieName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOKIE_MANAGER((short)1, "cookieManager"),
      URL((short)2, "url"),
      COOKIE_NAME((short)3, "cookieName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOKIE_MANAGER
            return COOKIE_MANAGER;
          case 2: // URL
            return URL;
          case 3: // COOKIE_NAME
            return COOKIE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOKIE_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("cookieManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COOKIE_NAME, new org.apache.thrift.meta_data.FieldMetaData("cookieName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_DeleteCookies_args.class, metaDataMap);
    }

    public CookieManager_DeleteCookies_args() {
    }

    public CookieManager_DeleteCookies_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager,
      java.lang.String url,
      java.lang.String cookieName)
    {
      this();
      this.cookieManager = cookieManager;
      this.url = url;
      this.cookieName = cookieName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_DeleteCookies_args(CookieManager_DeleteCookies_args other) {
      if (other.isSetCookieManager()) {
        this.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.cookieManager);
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetCookieName()) {
        this.cookieName = other.cookieName;
      }
    }

    @Override
    public CookieManager_DeleteCookies_args deepCopy() {
      return new CookieManager_DeleteCookies_args(this);
    }

    @Override
    public void clear() {
      this.cookieManager = null;
      this.url = null;
      this.cookieName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCookieManager() {
      return this.cookieManager;
    }

    public CookieManager_DeleteCookies_args setCookieManager(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) {
      this.cookieManager = cookieManager;
      return this;
    }

    public void unsetCookieManager() {
      this.cookieManager = null;
    }

    /** Returns true if field cookieManager is set (has been assigned a value) and false otherwise */
    public boolean isSetCookieManager() {
      return this.cookieManager != null;
    }

    public void setCookieManagerIsSet(boolean value) {
      if (!value) {
        this.cookieManager = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public CookieManager_DeleteCookies_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCookieName() {
      return this.cookieName;
    }

    public CookieManager_DeleteCookies_args setCookieName(@org.apache.thrift.annotation.Nullable java.lang.String cookieName) {
      this.cookieName = cookieName;
      return this;
    }

    public void unsetCookieName() {
      this.cookieName = null;
    }

    /** Returns true if field cookieName is set (has been assigned a value) and false otherwise */
    public boolean isSetCookieName() {
      return this.cookieName != null;
    }

    public void setCookieNameIsSet(boolean value) {
      if (!value) {
        this.cookieName = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COOKIE_MANAGER:
        if (value == null) {
          unsetCookieManager();
        } else {
          setCookieManager((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case COOKIE_NAME:
        if (value == null) {
          unsetCookieName();
        } else {
          setCookieName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COOKIE_MANAGER:
        return getCookieManager();

      case URL:
        return getUrl();

      case COOKIE_NAME:
        return getCookieName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COOKIE_MANAGER:
        return isSetCookieManager();
      case URL:
        return isSetUrl();
      case COOKIE_NAME:
        return isSetCookieName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_DeleteCookies_args)
        return this.equals((CookieManager_DeleteCookies_args)that);
      return false;
    }

    public boolean equals(CookieManager_DeleteCookies_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cookieManager = true && this.isSetCookieManager();
      boolean that_present_cookieManager = true && that.isSetCookieManager();
      if (this_present_cookieManager || that_present_cookieManager) {
        if (!(this_present_cookieManager && that_present_cookieManager))
          return false;
        if (!this.cookieManager.equals(that.cookieManager))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_cookieName = true && this.isSetCookieName();
      boolean that_present_cookieName = true && that.isSetCookieName();
      if (this_present_cookieName || that_present_cookieName) {
        if (!(this_present_cookieName && that_present_cookieName))
          return false;
        if (!this.cookieName.equals(that.cookieName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCookieManager()) ? 131071 : 524287);
      if (isSetCookieManager())
        hashCode = hashCode * 8191 + cookieManager.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + ((isSetCookieName()) ? 131071 : 524287);
      if (isSetCookieName())
        hashCode = hashCode * 8191 + cookieName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_DeleteCookies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCookieManager(), other.isSetCookieManager());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookieManager()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieManager, other.cookieManager);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCookieName(), other.isSetCookieName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookieName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieName, other.cookieName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_DeleteCookies_args(");
      boolean first = true;

      sb.append("cookieManager:");
      if (this.cookieManager == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieManager);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cookieName:");
      if (this.cookieName == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cookieManager != null) {
        cookieManager.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_DeleteCookies_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_DeleteCookies_argsStandardScheme getScheme() {
        return new CookieManager_DeleteCookies_argsStandardScheme();
      }
    }

    private static class CookieManager_DeleteCookies_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_DeleteCookies_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_DeleteCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOKIE_MANAGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.cookieManager.read(iprot);
                struct.setCookieManagerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // COOKIE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cookieName = iprot.readString();
                struct.setCookieNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_DeleteCookies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cookieManager != null) {
          oprot.writeFieldBegin(COOKIE_MANAGER_FIELD_DESC);
          struct.cookieManager.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.cookieName != null) {
          oprot.writeFieldBegin(COOKIE_NAME_FIELD_DESC);
          oprot.writeString(struct.cookieName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_DeleteCookies_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_DeleteCookies_argsTupleScheme getScheme() {
        return new CookieManager_DeleteCookies_argsTupleScheme();
      }
    }

    private static class CookieManager_DeleteCookies_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_DeleteCookies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_DeleteCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCookieManager()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        if (struct.isSetCookieName()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCookieManager()) {
          struct.cookieManager.write(oprot);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetCookieName()) {
          oprot.writeString(struct.cookieName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_DeleteCookies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.cookieManager.read(iprot);
          struct.setCookieManagerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cookieName = iprot.readString();
          struct.setCookieNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_DeleteCookies_result implements org.apache.thrift.TBase<CookieManager_DeleteCookies_result, CookieManager_DeleteCookies_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_DeleteCookies_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_DeleteCookies_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_DeleteCookies_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_DeleteCookies_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_DeleteCookies_result.class, metaDataMap);
    }

    public CookieManager_DeleteCookies_result() {
    }

    public CookieManager_DeleteCookies_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_DeleteCookies_result(CookieManager_DeleteCookies_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public CookieManager_DeleteCookies_result deepCopy() {
      return new CookieManager_DeleteCookies_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CookieManager_DeleteCookies_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_DeleteCookies_result)
        return this.equals((CookieManager_DeleteCookies_result)that);
      return false;
    }

    public boolean equals(CookieManager_DeleteCookies_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_DeleteCookies_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_DeleteCookies_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_DeleteCookies_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_DeleteCookies_resultStandardScheme getScheme() {
        return new CookieManager_DeleteCookies_resultStandardScheme();
      }
    }

    private static class CookieManager_DeleteCookies_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_DeleteCookies_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_DeleteCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_DeleteCookies_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_DeleteCookies_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_DeleteCookies_resultTupleScheme getScheme() {
        return new CookieManager_DeleteCookies_resultTupleScheme();
      }
    }

    private static class CookieManager_DeleteCookies_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_DeleteCookies_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_DeleteCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_DeleteCookies_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_FlushStore_args implements org.apache.thrift.TBase<CookieManager_FlushStore_args, CookieManager_FlushStore_args._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_FlushStore_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_FlushStore_args");

    private static final org.apache.thrift.protocol.TField COOKIE_MANAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("cookieManager", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField COMPLETION_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("completionCallback", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_FlushStore_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_FlushStore_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COOKIE_MANAGER((short)1, "cookieManager"),
      COMPLETION_CALLBACK((short)2, "completionCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COOKIE_MANAGER
            return COOKIE_MANAGER;
          case 2: // COMPLETION_CALLBACK
            return COMPLETION_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COOKIE_MANAGER, new org.apache.thrift.meta_data.FieldMetaData("cookieManager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.COMPLETION_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("completionCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_FlushStore_args.class, metaDataMap);
    }

    public CookieManager_FlushStore_args() {
    }

    public CookieManager_FlushStore_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager,
      com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback)
    {
      this();
      this.cookieManager = cookieManager;
      this.completionCallback = completionCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_FlushStore_args(CookieManager_FlushStore_args other) {
      if (other.isSetCookieManager()) {
        this.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.cookieManager);
      }
      if (other.isSetCompletionCallback()) {
        this.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.completionCallback);
      }
    }

    @Override
    public CookieManager_FlushStore_args deepCopy() {
      return new CookieManager_FlushStore_args(this);
    }

    @Override
    public void clear() {
      this.cookieManager = null;
      this.completionCallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCookieManager() {
      return this.cookieManager;
    }

    public CookieManager_FlushStore_args setCookieManager(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject cookieManager) {
      this.cookieManager = cookieManager;
      return this;
    }

    public void unsetCookieManager() {
      this.cookieManager = null;
    }

    /** Returns true if field cookieManager is set (has been assigned a value) and false otherwise */
    public boolean isSetCookieManager() {
      return this.cookieManager != null;
    }

    public void setCookieManagerIsSet(boolean value) {
      if (!value) {
        this.cookieManager = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCompletionCallback() {
      return this.completionCallback;
    }

    public CookieManager_FlushStore_args setCompletionCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject completionCallback) {
      this.completionCallback = completionCallback;
      return this;
    }

    public void unsetCompletionCallback() {
      this.completionCallback = null;
    }

    /** Returns true if field completionCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetCompletionCallback() {
      return this.completionCallback != null;
    }

    public void setCompletionCallbackIsSet(boolean value) {
      if (!value) {
        this.completionCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COOKIE_MANAGER:
        if (value == null) {
          unsetCookieManager();
        } else {
          setCookieManager((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case COMPLETION_CALLBACK:
        if (value == null) {
          unsetCompletionCallback();
        } else {
          setCompletionCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COOKIE_MANAGER:
        return getCookieManager();

      case COMPLETION_CALLBACK:
        return getCompletionCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COOKIE_MANAGER:
        return isSetCookieManager();
      case COMPLETION_CALLBACK:
        return isSetCompletionCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_FlushStore_args)
        return this.equals((CookieManager_FlushStore_args)that);
      return false;
    }

    public boolean equals(CookieManager_FlushStore_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cookieManager = true && this.isSetCookieManager();
      boolean that_present_cookieManager = true && that.isSetCookieManager();
      if (this_present_cookieManager || that_present_cookieManager) {
        if (!(this_present_cookieManager && that_present_cookieManager))
          return false;
        if (!this.cookieManager.equals(that.cookieManager))
          return false;
      }

      boolean this_present_completionCallback = true && this.isSetCompletionCallback();
      boolean that_present_completionCallback = true && that.isSetCompletionCallback();
      if (this_present_completionCallback || that_present_completionCallback) {
        if (!(this_present_completionCallback && that_present_completionCallback))
          return false;
        if (!this.completionCallback.equals(that.completionCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCookieManager()) ? 131071 : 524287);
      if (isSetCookieManager())
        hashCode = hashCode * 8191 + cookieManager.hashCode();

      hashCode = hashCode * 8191 + ((isSetCompletionCallback()) ? 131071 : 524287);
      if (isSetCompletionCallback())
        hashCode = hashCode * 8191 + completionCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_FlushStore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCookieManager(), other.isSetCookieManager());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCookieManager()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookieManager, other.cookieManager);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCompletionCallback(), other.isSetCompletionCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompletionCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completionCallback, other.completionCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_FlushStore_args(");
      boolean first = true;

      sb.append("cookieManager:");
      if (this.cookieManager == null) {
        sb.append("null");
      } else {
        sb.append(this.cookieManager);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("completionCallback:");
      if (this.completionCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.completionCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cookieManager != null) {
        cookieManager.validate();
      }
      if (completionCallback != null) {
        completionCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_FlushStore_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_FlushStore_argsStandardScheme getScheme() {
        return new CookieManager_FlushStore_argsStandardScheme();
      }
    }

    private static class CookieManager_FlushStore_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_FlushStore_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_FlushStore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COOKIE_MANAGER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.cookieManager.read(iprot);
                struct.setCookieManagerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // COMPLETION_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.completionCallback.read(iprot);
                struct.setCompletionCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_FlushStore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cookieManager != null) {
          oprot.writeFieldBegin(COOKIE_MANAGER_FIELD_DESC);
          struct.cookieManager.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.completionCallback != null) {
          oprot.writeFieldBegin(COMPLETION_CALLBACK_FIELD_DESC);
          struct.completionCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_FlushStore_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_FlushStore_argsTupleScheme getScheme() {
        return new CookieManager_FlushStore_argsTupleScheme();
      }
    }

    private static class CookieManager_FlushStore_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_FlushStore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_FlushStore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCookieManager()) {
          optionals.set(0);
        }
        if (struct.isSetCompletionCallback()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCookieManager()) {
          struct.cookieManager.write(oprot);
        }
        if (struct.isSetCompletionCallback()) {
          struct.completionCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_FlushStore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cookieManager = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.cookieManager.read(iprot);
          struct.setCookieManagerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.completionCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.completionCallback.read(iprot);
          struct.setCompletionCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class CookieManager_FlushStore_result implements org.apache.thrift.TBase<CookieManager_FlushStore_result, CookieManager_FlushStore_result._Fields>, java.io.Serializable, Cloneable, Comparable<CookieManager_FlushStore_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CookieManager_FlushStore_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CookieManager_FlushStore_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CookieManager_FlushStore_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CookieManager_FlushStore_result.class, metaDataMap);
    }

    public CookieManager_FlushStore_result() {
    }

    public CookieManager_FlushStore_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CookieManager_FlushStore_result(CookieManager_FlushStore_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public CookieManager_FlushStore_result deepCopy() {
      return new CookieManager_FlushStore_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public CookieManager_FlushStore_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof CookieManager_FlushStore_result)
        return this.equals((CookieManager_FlushStore_result)that);
      return false;
    }

    public boolean equals(CookieManager_FlushStore_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(CookieManager_FlushStore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CookieManager_FlushStore_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CookieManager_FlushStore_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_FlushStore_resultStandardScheme getScheme() {
        return new CookieManager_FlushStore_resultStandardScheme();
      }
    }

    private static class CookieManager_FlushStore_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CookieManager_FlushStore_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, CookieManager_FlushStore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, CookieManager_FlushStore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CookieManager_FlushStore_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public CookieManager_FlushStore_resultTupleScheme getScheme() {
        return new CookieManager_FlushStore_resultTupleScheme();
      }
    }

    private static class CookieManager_FlushStore_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CookieManager_FlushStore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CookieManager_FlushStore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CookieManager_FlushStore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
