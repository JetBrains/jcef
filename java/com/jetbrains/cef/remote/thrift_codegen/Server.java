/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jetbrains.cef.remote.thrift_codegen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Server {

  public interface Iface {

    public int connect(int backwardConnectionPort, java.util.List<java.lang.String> cmdLineArgs, java.util.Map<java.lang.String,java.lang.String> settings) throws org.apache.thrift.TException;

    public void log(java.lang.String msg) throws org.apache.thrift.TException;

    public int createBrowser(int cid, java.lang.String url) throws org.apache.thrift.TException;

    public void closeBrowser(int bid) throws org.apache.thrift.TException;

    public void Browser_Reload(int bid) throws org.apache.thrift.TException;

    public void Browser_ReloadIgnoreCache(int bid) throws org.apache.thrift.TException;

    public void Browser_LoadURL(int bid, java.lang.String url) throws org.apache.thrift.TException;

    public java.lang.String Browser_GetURL(int bid) throws org.apache.thrift.TException;

    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException;

    public void Browser_WasResized(int bid, int width, int height) throws org.apache.thrift.TException;

    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code) throws org.apache.thrift.TException;

    public void Browser_SendCefKeyEvent(int bid, CefKeyEvent event) throws org.apache.thrift.TException;

    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button) throws org.apache.thrift.TException;

    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll) throws org.apache.thrift.TException;

    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.PostData Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData) throws org.apache.thrift.TException;

    public java.lang.String Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name) throws org.apache.thrift.TException;

    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException;

    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException;

    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException;

    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException;

    public java.lang.String Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name) throws org.apache.thrift.TException;

    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.String> Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException;

    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException;

    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException;

    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException;

    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException;

    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException;

    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password) throws org.apache.thrift.TException;

    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException;

    public com.jetbrains.cef.remote.thrift_codegen.RObject MessageRouter_Create(java.lang.String query, java.lang.String cancel) throws org.apache.thrift.TException;

    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) throws org.apache.thrift.TException;

    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException;

    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException;

    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException;

    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) throws org.apache.thrift.TException;

    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response) throws org.apache.thrift.TException;

    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void connect(int backwardConnectionPort, java.util.List<java.lang.String> cmdLineArgs, java.util.Map<java.lang.String,java.lang.String> settings, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void log(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void createBrowser(int cid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void closeBrowser(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_Reload(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_ReloadIgnoreCache(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_LoadURL(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_GetURL(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_WasResized(int bid, int width, int height, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SendCefKeyEvent(int bid, CefKeyEvent event, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler) throws org.apache.thrift.TException;

    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_Create(java.lang.String query, java.lang.String cancel, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public int connect(int backwardConnectionPort, java.util.List<java.lang.String> cmdLineArgs, java.util.Map<java.lang.String,java.lang.String> settings) throws org.apache.thrift.TException
    {
      send_connect(backwardConnectionPort, cmdLineArgs, settings);
      return recv_connect();
    }

    public void send_connect(int backwardConnectionPort, java.util.List<java.lang.String> cmdLineArgs, java.util.Map<java.lang.String,java.lang.String> settings) throws org.apache.thrift.TException
    {
      connect_args args = new connect_args();
      args.setBackwardConnectionPort(backwardConnectionPort);
      args.setCmdLineArgs(cmdLineArgs);
      args.setSettings(settings);
      sendBase("connect", args);
    }

    public int recv_connect() throws org.apache.thrift.TException
    {
      connect_result result = new connect_result();
      receiveBase(result, "connect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "connect failed: unknown result");
    }

    @Override
    public void log(java.lang.String msg) throws org.apache.thrift.TException
    {
      send_log(msg);
    }

    public void send_log(java.lang.String msg) throws org.apache.thrift.TException
    {
      log_args args = new log_args();
      args.setMsg(msg);
      sendBaseOneway("log", args);
    }

    @Override
    public int createBrowser(int cid, java.lang.String url) throws org.apache.thrift.TException
    {
      send_createBrowser(cid, url);
      return recv_createBrowser();
    }

    public void send_createBrowser(int cid, java.lang.String url) throws org.apache.thrift.TException
    {
      createBrowser_args args = new createBrowser_args();
      args.setCid(cid);
      args.setUrl(url);
      sendBase("createBrowser", args);
    }

    public int recv_createBrowser() throws org.apache.thrift.TException
    {
      createBrowser_result result = new createBrowser_result();
      receiveBase(result, "createBrowser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createBrowser failed: unknown result");
    }

    @Override
    public void closeBrowser(int bid) throws org.apache.thrift.TException
    {
      send_closeBrowser(bid);
    }

    public void send_closeBrowser(int bid) throws org.apache.thrift.TException
    {
      closeBrowser_args args = new closeBrowser_args();
      args.setBid(bid);
      sendBaseOneway("closeBrowser", args);
    }

    @Override
    public void Browser_Reload(int bid) throws org.apache.thrift.TException
    {
      send_Browser_Reload(bid);
    }

    public void send_Browser_Reload(int bid) throws org.apache.thrift.TException
    {
      Browser_Reload_args args = new Browser_Reload_args();
      args.setBid(bid);
      sendBaseOneway("Browser_Reload", args);
    }

    @Override
    public void Browser_ReloadIgnoreCache(int bid) throws org.apache.thrift.TException
    {
      send_Browser_ReloadIgnoreCache(bid);
    }

    public void send_Browser_ReloadIgnoreCache(int bid) throws org.apache.thrift.TException
    {
      Browser_ReloadIgnoreCache_args args = new Browser_ReloadIgnoreCache_args();
      args.setBid(bid);
      sendBaseOneway("Browser_ReloadIgnoreCache", args);
    }

    @Override
    public void Browser_LoadURL(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      send_Browser_LoadURL(bid, url);
    }

    public void send_Browser_LoadURL(int bid, java.lang.String url) throws org.apache.thrift.TException
    {
      Browser_LoadURL_args args = new Browser_LoadURL_args();
      args.setBid(bid);
      args.setUrl(url);
      sendBaseOneway("Browser_LoadURL", args);
    }

    @Override
    public java.lang.String Browser_GetURL(int bid) throws org.apache.thrift.TException
    {
      send_Browser_GetURL(bid);
      return recv_Browser_GetURL();
    }

    public void send_Browser_GetURL(int bid) throws org.apache.thrift.TException
    {
      Browser_GetURL_args args = new Browser_GetURL_args();
      args.setBid(bid);
      sendBase("Browser_GetURL", args);
    }

    public java.lang.String recv_Browser_GetURL() throws org.apache.thrift.TException
    {
      Browser_GetURL_result result = new Browser_GetURL_result();
      receiveBase(result, "Browser_GetURL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Browser_GetURL failed: unknown result");
    }

    @Override
    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException
    {
      send_Browser_ExecuteJavaScript(bid, code, url, line);
    }

    public void send_Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line) throws org.apache.thrift.TException
    {
      Browser_ExecuteJavaScript_args args = new Browser_ExecuteJavaScript_args();
      args.setBid(bid);
      args.setCode(code);
      args.setUrl(url);
      args.setLine(line);
      sendBaseOneway("Browser_ExecuteJavaScript", args);
    }

    @Override
    public void Browser_WasResized(int bid, int width, int height) throws org.apache.thrift.TException
    {
      send_Browser_WasResized(bid, width, height);
    }

    public void send_Browser_WasResized(int bid, int width, int height) throws org.apache.thrift.TException
    {
      Browser_WasResized_args args = new Browser_WasResized_args();
      args.setBid(bid);
      args.setWidth(width);
      args.setHeight(height);
      sendBaseOneway("Browser_WasResized", args);
    }

    @Override
    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code) throws org.apache.thrift.TException
    {
      send_Browser_SendKeyEvent(bid, event_type, modifiers, key_char, scanCode, key_code);
    }

    public void send_Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code) throws org.apache.thrift.TException
    {
      Browser_SendKeyEvent_args args = new Browser_SendKeyEvent_args();
      args.setBid(bid);
      args.setEvent_type(event_type);
      args.setModifiers(modifiers);
      args.setKey_char(key_char);
      args.setScanCode(scanCode);
      args.setKey_code(key_code);
      sendBaseOneway("Browser_SendKeyEvent", args);
    }

    @Override
    public void Browser_SendCefKeyEvent(int bid, CefKeyEvent event) throws org.apache.thrift.TException
    {
      send_Browser_SendCefKeyEvent(bid, event);
    }

    public void send_Browser_SendCefKeyEvent(int bid, CefKeyEvent event) throws org.apache.thrift.TException
    {
      Browser_SendCefKeyEvent_args args = new Browser_SendCefKeyEvent_args();
      args.setBid(bid);
      args.setEvent(event);
      sendBaseOneway("Browser_SendCefKeyEvent", args);
    }

    @Override
    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button) throws org.apache.thrift.TException
    {
      send_Browser_SendMouseEvent(bid, event_type, x, y, modifiers, click_count, button);
    }

    public void send_Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button) throws org.apache.thrift.TException
    {
      Browser_SendMouseEvent_args args = new Browser_SendMouseEvent_args();
      args.setBid(bid);
      args.setEvent_type(event_type);
      args.setX(x);
      args.setY(y);
      args.setModifiers(modifiers);
      args.setClick_count(click_count);
      args.setButton(button);
      sendBaseOneway("Browser_SendMouseEvent", args);
    }

    @Override
    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll) throws org.apache.thrift.TException
    {
      send_Browser_SendMouseWheelEvent(bid, scroll_type, x, y, modifiers, delta, units_to_scroll);
    }

    public void send_Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll) throws org.apache.thrift.TException
    {
      Browser_SendMouseWheelEvent_args args = new Browser_SendMouseWheelEvent_args();
      args.setBid(bid);
      args.setScroll_type(scroll_type);
      args.setX(x);
      args.setY(y);
      args.setModifiers(modifiers);
      args.setDelta(delta);
      args.setUnits_to_scroll(units_to_scroll);
      sendBaseOneway("Browser_SendMouseWheelEvent", args);
    }

    @Override
    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_Request_Update(request);
      recv_Request_Update();
    }

    public void send_Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      Request_Update_args args = new Request_Update_args();
      args.setRequest(request);
      sendBase("Request_Update", args);
    }

    public void recv_Request_Update() throws org.apache.thrift.TException
    {
      Request_Update_result result = new Request_Update_result();
      receiveBase(result, "Request_Update");
      return;
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.PostData Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_Request_GetPostData(request);
      return recv_Request_GetPostData();
    }

    public void send_Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      Request_GetPostData_args args = new Request_GetPostData_args();
      args.setRequest(request);
      sendBase("Request_GetPostData", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.PostData recv_Request_GetPostData() throws org.apache.thrift.TException
    {
      Request_GetPostData_result result = new Request_GetPostData_result();
      receiveBase(result, "Request_GetPostData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Request_GetPostData failed: unknown result");
    }

    @Override
    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData) throws org.apache.thrift.TException
    {
      send_Request_SetPostData(request, postData);
      recv_Request_SetPostData();
    }

    public void send_Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData) throws org.apache.thrift.TException
    {
      Request_SetPostData_args args = new Request_SetPostData_args();
      args.setRequest(request);
      args.setPostData(postData);
      sendBase("Request_SetPostData", args);
    }

    public void recv_Request_SetPostData() throws org.apache.thrift.TException
    {
      Request_SetPostData_result result = new Request_SetPostData_result();
      receiveBase(result, "Request_SetPostData");
      return;
    }

    @Override
    public java.lang.String Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name) throws org.apache.thrift.TException
    {
      send_Request_GetHeaderByName(request, name);
      return recv_Request_GetHeaderByName();
    }

    public void send_Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name) throws org.apache.thrift.TException
    {
      Request_GetHeaderByName_args args = new Request_GetHeaderByName_args();
      args.setRequest(request);
      args.setName(name);
      sendBase("Request_GetHeaderByName", args);
    }

    public java.lang.String recv_Request_GetHeaderByName() throws org.apache.thrift.TException
    {
      Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
      receiveBase(result, "Request_GetHeaderByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Request_GetHeaderByName failed: unknown result");
    }

    @Override
    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      send_Request_SetHeaderByName(request, name, value, overwrite);
      recv_Request_SetHeaderByName();
    }

    public void send_Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      Request_SetHeaderByName_args args = new Request_SetHeaderByName_args();
      args.setRequest(request);
      args.setName(name);
      args.setValue(value);
      args.setOverwrite(overwrite);
      sendBase("Request_SetHeaderByName", args);
    }

    public void recv_Request_SetHeaderByName() throws org.apache.thrift.TException
    {
      Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
      receiveBase(result, "Request_SetHeaderByName");
      return;
    }

    @Override
    public java.util.Map<java.lang.String,java.lang.String> Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      send_Request_GetHeaderMap(request);
      return recv_Request_GetHeaderMap();
    }

    public void send_Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request) throws org.apache.thrift.TException
    {
      Request_GetHeaderMap_args args = new Request_GetHeaderMap_args();
      args.setRequest(request);
      sendBase("Request_GetHeaderMap", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_Request_GetHeaderMap() throws org.apache.thrift.TException
    {
      Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
      receiveBase(result, "Request_GetHeaderMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Request_GetHeaderMap failed: unknown result");
    }

    @Override
    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      send_Request_SetHeaderMap(request, headerMap);
      recv_Request_SetHeaderMap();
    }

    public void send_Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      Request_SetHeaderMap_args args = new Request_SetHeaderMap_args();
      args.setRequest(request);
      args.setHeaderMap(headerMap);
      sendBase("Request_SetHeaderMap", args);
    }

    public void recv_Request_SetHeaderMap() throws org.apache.thrift.TException
    {
      Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
      receiveBase(result, "Request_SetHeaderMap");
      return;
    }

    @Override
    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      send_Request_Set(request, url, method, postData, headerMap);
      recv_Request_Set();
    }

    public void send_Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      Request_Set_args args = new Request_Set_args();
      args.setRequest(request);
      args.setUrl(url);
      args.setMethod(method);
      args.setPostData(postData);
      args.setHeaderMap(headerMap);
      sendBase("Request_Set", args);
    }

    public void recv_Request_Set() throws org.apache.thrift.TException
    {
      Request_Set_result result = new Request_Set_result();
      receiveBase(result, "Request_Set");
      return;
    }

    @Override
    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      send_Response_Update(response);
      recv_Response_Update();
    }

    public void send_Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      Response_Update_args args = new Response_Update_args();
      args.setResponse(response);
      sendBase("Response_Update", args);
    }

    public void recv_Response_Update() throws org.apache.thrift.TException
    {
      Response_Update_result result = new Response_Update_result();
      receiveBase(result, "Response_Update");
      return;
    }

    @Override
    public java.lang.String Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name) throws org.apache.thrift.TException
    {
      send_Response_GetHeaderByName(response, name);
      return recv_Response_GetHeaderByName();
    }

    public void send_Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name) throws org.apache.thrift.TException
    {
      Response_GetHeaderByName_args args = new Response_GetHeaderByName_args();
      args.setResponse(response);
      args.setName(name);
      sendBase("Response_GetHeaderByName", args);
    }

    public java.lang.String recv_Response_GetHeaderByName() throws org.apache.thrift.TException
    {
      Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
      receiveBase(result, "Response_GetHeaderByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Response_GetHeaderByName failed: unknown result");
    }

    @Override
    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      send_Response_SetHeaderByName(response, name, value, overwrite);
      recv_Response_SetHeaderByName();
    }

    public void send_Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite) throws org.apache.thrift.TException
    {
      Response_SetHeaderByName_args args = new Response_SetHeaderByName_args();
      args.setResponse(response);
      args.setName(name);
      args.setValue(value);
      args.setOverwrite(overwrite);
      sendBase("Response_SetHeaderByName", args);
    }

    public void recv_Response_SetHeaderByName() throws org.apache.thrift.TException
    {
      Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
      receiveBase(result, "Response_SetHeaderByName");
      return;
    }

    @Override
    public java.util.Map<java.lang.String,java.lang.String> Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      send_Response_GetHeaderMap(response);
      return recv_Response_GetHeaderMap();
    }

    public void send_Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response) throws org.apache.thrift.TException
    {
      Response_GetHeaderMap_args args = new Response_GetHeaderMap_args();
      args.setResponse(response);
      sendBase("Response_GetHeaderMap", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_Response_GetHeaderMap() throws org.apache.thrift.TException
    {
      Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
      receiveBase(result, "Response_GetHeaderMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Response_GetHeaderMap failed: unknown result");
    }

    @Override
    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      send_Response_SetHeaderMap(response, headerMap);
      recv_Response_SetHeaderMap();
    }

    public void send_Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap) throws org.apache.thrift.TException
    {
      Response_SetHeaderMap_args args = new Response_SetHeaderMap_args();
      args.setResponse(response);
      args.setHeaderMap(headerMap);
      sendBase("Response_SetHeaderMap", args);
    }

    public void recv_Response_SetHeaderMap() throws org.apache.thrift.TException
    {
      Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
      receiveBase(result, "Response_SetHeaderMap");
      return;
    }

    @Override
    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      send_Callback_Dispose(callback);
    }

    public void send_Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      Callback_Dispose_args args = new Callback_Dispose_args();
      args.setCallback(callback);
      sendBaseOneway("Callback_Dispose", args);
    }

    @Override
    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      send_Callback_Continue(callback);
    }

    public void send_Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      Callback_Continue_args args = new Callback_Continue_args();
      args.setCallback(callback);
      sendBaseOneway("Callback_Continue", args);
    }

    @Override
    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      send_Callback_Cancel(callback);
    }

    public void send_Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback) throws org.apache.thrift.TException
    {
      Callback_Cancel_args args = new Callback_Cancel_args();
      args.setCallback(callback);
      sendBaseOneway("Callback_Cancel", args);
    }

    @Override
    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      send_AuthCallback_Dispose(authCallback);
    }

    public void send_AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      AuthCallback_Dispose_args args = new AuthCallback_Dispose_args();
      args.setAuthCallback(authCallback);
      sendBaseOneway("AuthCallback_Dispose", args);
    }

    @Override
    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      send_AuthCallback_Continue(authCallback, username, password);
    }

    public void send_AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password) throws org.apache.thrift.TException
    {
      AuthCallback_Continue_args args = new AuthCallback_Continue_args();
      args.setAuthCallback(authCallback);
      args.setUsername(username);
      args.setPassword(password);
      sendBaseOneway("AuthCallback_Continue", args);
    }

    @Override
    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      send_AuthCallback_Cancel(authCallback);
    }

    public void send_AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) throws org.apache.thrift.TException
    {
      AuthCallback_Cancel_args args = new AuthCallback_Cancel_args();
      args.setAuthCallback(authCallback);
      sendBaseOneway("AuthCallback_Cancel", args);
    }

    @Override
    public com.jetbrains.cef.remote.thrift_codegen.RObject MessageRouter_Create(java.lang.String query, java.lang.String cancel) throws org.apache.thrift.TException
    {
      send_MessageRouter_Create(query, cancel);
      return recv_MessageRouter_Create();
    }

    public void send_MessageRouter_Create(java.lang.String query, java.lang.String cancel) throws org.apache.thrift.TException
    {
      MessageRouter_Create_args args = new MessageRouter_Create_args();
      args.setQuery(query);
      args.setCancel(cancel);
      sendBase("MessageRouter_Create", args);
    }

    public com.jetbrains.cef.remote.thrift_codegen.RObject recv_MessageRouter_Create() throws org.apache.thrift.TException
    {
      MessageRouter_Create_result result = new MessageRouter_Create_result();
      receiveBase(result, "MessageRouter_Create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "MessageRouter_Create failed: unknown result");
    }

    @Override
    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) throws org.apache.thrift.TException
    {
      send_MessageRouter_Dispose(msgRouter);
    }

    public void send_MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) throws org.apache.thrift.TException
    {
      MessageRouter_Dispose_args args = new MessageRouter_Dispose_args();
      args.setMsgRouter(msgRouter);
      sendBaseOneway("MessageRouter_Dispose", args);
    }

    @Override
    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      send_MessageRouter_AddMessageRouterToBrowser(msgRouter, bid);
      recv_MessageRouter_AddMessageRouterToBrowser();
    }

    public void send_MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      MessageRouter_AddMessageRouterToBrowser_args args = new MessageRouter_AddMessageRouterToBrowser_args();
      args.setMsgRouter(msgRouter);
      args.setBid(bid);
      sendBase("MessageRouter_AddMessageRouterToBrowser", args);
    }

    public void recv_MessageRouter_AddMessageRouterToBrowser() throws org.apache.thrift.TException
    {
      MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
      receiveBase(result, "MessageRouter_AddMessageRouterToBrowser");
      return;
    }

    @Override
    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      send_MessageRouter_RemoveMessageRouterFromBrowser(msgRouter, bid);
      recv_MessageRouter_RemoveMessageRouterFromBrowser();
    }

    public void send_MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid) throws org.apache.thrift.TException
    {
      MessageRouter_RemoveMessageRouterFromBrowser_args args = new MessageRouter_RemoveMessageRouterFromBrowser_args();
      args.setMsgRouter(msgRouter);
      args.setBid(bid);
      sendBase("MessageRouter_RemoveMessageRouterFromBrowser", args);
    }

    public void recv_MessageRouter_RemoveMessageRouterFromBrowser() throws org.apache.thrift.TException
    {
      MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
      receiveBase(result, "MessageRouter_RemoveMessageRouterFromBrowser");
      return;
    }

    @Override
    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first) throws org.apache.thrift.TException
    {
      send_MessageRouter_AddHandler(msgRouter, handler, first);
      recv_MessageRouter_AddHandler();
    }

    public void send_MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first) throws org.apache.thrift.TException
    {
      MessageRouter_AddHandler_args args = new MessageRouter_AddHandler_args();
      args.setMsgRouter(msgRouter);
      args.setHandler(handler);
      args.setFirst(first);
      sendBase("MessageRouter_AddHandler", args);
    }

    public void recv_MessageRouter_AddHandler() throws org.apache.thrift.TException
    {
      MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
      receiveBase(result, "MessageRouter_AddHandler");
      return;
    }

    @Override
    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      send_MessageRouter_RemoveHandler(msgRouter, handler);
      recv_MessageRouter_RemoveHandler();
    }

    public void send_MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      MessageRouter_RemoveHandler_args args = new MessageRouter_RemoveHandler_args();
      args.setMsgRouter(msgRouter);
      args.setHandler(handler);
      sendBase("MessageRouter_RemoveHandler", args);
    }

    public void recv_MessageRouter_RemoveHandler() throws org.apache.thrift.TException
    {
      MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
      receiveBase(result, "MessageRouter_RemoveHandler");
      return;
    }

    @Override
    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      send_MessageRouter_CancelPending(msgRouter, bid, handler);
      recv_MessageRouter_CancelPending();
    }

    public void send_MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler) throws org.apache.thrift.TException
    {
      MessageRouter_CancelPending_args args = new MessageRouter_CancelPending_args();
      args.setMsgRouter(msgRouter);
      args.setBid(bid);
      args.setHandler(handler);
      sendBase("MessageRouter_CancelPending", args);
    }

    public void recv_MessageRouter_CancelPending() throws org.apache.thrift.TException
    {
      MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
      receiveBase(result, "MessageRouter_CancelPending");
      return;
    }

    @Override
    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) throws org.apache.thrift.TException
    {
      send_QueryCallback_Dispose(qcallback);
    }

    public void send_QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) throws org.apache.thrift.TException
    {
      QueryCallback_Dispose_args args = new QueryCallback_Dispose_args();
      args.setQcallback(qcallback);
      sendBaseOneway("QueryCallback_Dispose", args);
    }

    @Override
    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response) throws org.apache.thrift.TException
    {
      send_QueryCallback_Success(qcallback, response);
    }

    public void send_QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response) throws org.apache.thrift.TException
    {
      QueryCallback_Success_args args = new QueryCallback_Success_args();
      args.setQcallback(qcallback);
      args.setResponse(response);
      sendBaseOneway("QueryCallback_Success", args);
    }

    @Override
    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message) throws org.apache.thrift.TException
    {
      send_QueryCallback_Failure(qcallback, error_code, error_message);
    }

    public void send_QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message) throws org.apache.thrift.TException
    {
      QueryCallback_Failure_args args = new QueryCallback_Failure_args();
      args.setQcallback(qcallback);
      args.setError_code(error_code);
      args.setError_message(error_message);
      sendBaseOneway("QueryCallback_Failure", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void connect(int backwardConnectionPort, java.util.List<java.lang.String> cmdLineArgs, java.util.Map<java.lang.String,java.lang.String> settings, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      connect_call method_call = new connect_call(backwardConnectionPort, cmdLineArgs, settings, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class connect_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int backwardConnectionPort;
      private java.util.List<java.lang.String> cmdLineArgs;
      private java.util.Map<java.lang.String,java.lang.String> settings;
      public connect_call(int backwardConnectionPort, java.util.List<java.lang.String> cmdLineArgs, java.util.Map<java.lang.String,java.lang.String> settings, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.backwardConnectionPort = backwardConnectionPort;
        this.cmdLineArgs = cmdLineArgs;
        this.settings = settings;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("connect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        connect_args args = new connect_args();
        args.setBackwardConnectionPort(backwardConnectionPort);
        args.setCmdLineArgs(cmdLineArgs);
        args.setSettings(settings);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_connect();
      }
    }

    @Override
    public void log(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      log_call method_call = new log_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class log_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String msg;
      public log_call(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.msg = msg;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("log", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        log_args args = new log_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void createBrowser(int cid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createBrowser_call method_call = new createBrowser_call(cid, url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createBrowser_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int cid;
      private java.lang.String url;
      public createBrowser_call(int cid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cid = cid;
        this.url = url;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createBrowser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createBrowser_args args = new createBrowser_args();
        args.setCid(cid);
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createBrowser();
      }
    }

    @Override
    public void closeBrowser(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      closeBrowser_call method_call = new closeBrowser_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class closeBrowser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public closeBrowser_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("closeBrowser", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        closeBrowser_args args = new closeBrowser_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_Reload(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_Reload_call method_call = new Browser_Reload_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_Reload_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_Reload_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_Reload", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_Reload_args args = new Browser_Reload_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_ReloadIgnoreCache(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_ReloadIgnoreCache_call method_call = new Browser_ReloadIgnoreCache_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_ReloadIgnoreCache_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      public Browser_ReloadIgnoreCache_call(int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_ReloadIgnoreCache", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_ReloadIgnoreCache_args args = new Browser_ReloadIgnoreCache_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_LoadURL(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_LoadURL_call method_call = new Browser_LoadURL_call(bid, url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_LoadURL_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String url;
      public Browser_LoadURL_call(int bid, java.lang.String url, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.url = url;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_LoadURL", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_LoadURL_args args = new Browser_LoadURL_args();
        args.setBid(bid);
        args.setUrl(url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_GetURL(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_GetURL_call method_call = new Browser_GetURL_call(bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_GetURL_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int bid;
      public Browser_GetURL_call(int bid, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_GetURL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Browser_GetURL_args args = new Browser_GetURL_args();
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Browser_GetURL();
      }
    }

    @Override
    public void Browser_ExecuteJavaScript(int bid, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_ExecuteJavaScript_call method_call = new Browser_ExecuteJavaScript_call(bid, code, url, line, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_ExecuteJavaScript_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private java.lang.String code;
      private java.lang.String url;
      private int line;
      public Browser_ExecuteJavaScript_call(int bid, java.lang.String code, java.lang.String url, int line, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.code = code;
        this.url = url;
        this.line = line;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_ExecuteJavaScript", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_ExecuteJavaScript_args args = new Browser_ExecuteJavaScript_args();
        args.setBid(bid);
        args.setCode(code);
        args.setUrl(url);
        args.setLine(line);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_WasResized(int bid, int width, int height, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_WasResized_call method_call = new Browser_WasResized_call(bid, width, height, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_WasResized_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int width;
      private int height;
      public Browser_WasResized_call(int bid, int width, int height, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.width = width;
        this.height = height;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_WasResized", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_WasResized_args args = new Browser_WasResized_args();
        args.setBid(bid);
        args.setWidth(width);
        args.setHeight(height);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SendKeyEvent(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SendKeyEvent_call method_call = new Browser_SendKeyEvent_call(bid, event_type, modifiers, key_char, scanCode, key_code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SendKeyEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int event_type;
      private int modifiers;
      private short key_char;
      private long scanCode;
      private int key_code;
      public Browser_SendKeyEvent_call(int bid, int event_type, int modifiers, short key_char, long scanCode, int key_code, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.event_type = event_type;
        this.modifiers = modifiers;
        this.key_char = key_char;
        this.scanCode = scanCode;
        this.key_code = key_code;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SendKeyEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SendKeyEvent_args args = new Browser_SendKeyEvent_args();
        args.setBid(bid);
        args.setEvent_type(event_type);
        args.setModifiers(modifiers);
        args.setKey_char(key_char);
        args.setScanCode(scanCode);
        args.setKey_code(key_code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SendCefKeyEvent(int bid, CefKeyEvent event, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SendCefKeyEvent_call method_call = new Browser_SendCefKeyEvent_call(bid, event, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SendCefKeyEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private CefKeyEvent event;
      public Browser_SendCefKeyEvent_call(int bid, CefKeyEvent event, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.event = event;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SendCefKeyEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SendCefKeyEvent_args args = new Browser_SendCefKeyEvent_args();
        args.setBid(bid);
        args.setEvent(event);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SendMouseEvent(int bid, int event_type, int x, int y, int modifiers, int click_count, int button, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SendMouseEvent_call method_call = new Browser_SendMouseEvent_call(bid, event_type, x, y, modifiers, click_count, button, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SendMouseEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int event_type;
      private int x;
      private int y;
      private int modifiers;
      private int click_count;
      private int button;
      public Browser_SendMouseEvent_call(int bid, int event_type, int x, int y, int modifiers, int click_count, int button, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.event_type = event_type;
        this.x = x;
        this.y = y;
        this.modifiers = modifiers;
        this.click_count = click_count;
        this.button = button;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SendMouseEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SendMouseEvent_args args = new Browser_SendMouseEvent_args();
        args.setBid(bid);
        args.setEvent_type(event_type);
        args.setX(x);
        args.setY(y);
        args.setModifiers(modifiers);
        args.setClick_count(click_count);
        args.setButton(button);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Browser_SendMouseWheelEvent(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Browser_SendMouseWheelEvent_call method_call = new Browser_SendMouseWheelEvent_call(bid, scroll_type, x, y, modifiers, delta, units_to_scroll, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Browser_SendMouseWheelEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int bid;
      private int scroll_type;
      private int x;
      private int y;
      private int modifiers;
      private int delta;
      private int units_to_scroll;
      public Browser_SendMouseWheelEvent_call(int bid, int scroll_type, int x, int y, int modifiers, int delta, int units_to_scroll, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.bid = bid;
        this.scroll_type = scroll_type;
        this.x = x;
        this.y = y;
        this.modifiers = modifiers;
        this.delta = delta;
        this.units_to_scroll = units_to_scroll;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Browser_SendMouseWheelEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Browser_SendMouseWheelEvent_args args = new Browser_SendMouseWheelEvent_args();
        args.setBid(bid);
        args.setScroll_type(scroll_type);
        args.setX(x);
        args.setY(y);
        args.setModifiers(modifiers);
        args.setDelta(delta);
        args.setUnits_to_scroll(units_to_scroll);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Request_Update(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_Update_call method_call = new Request_Update_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_Update_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public Request_Update_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_Update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_Update_args args = new Request_Update_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_Update();
        return null;
      }
    }

    @Override
    public void Request_GetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_GetPostData_call method_call = new Request_GetPostData_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_GetPostData_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.PostData> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public Request_GetPostData_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_GetPostData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_GetPostData_args args = new Request_GetPostData_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.PostData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Request_GetPostData();
      }
    }

    @Override
    public void Request_SetPostData(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_SetPostData_call method_call = new Request_SetPostData_call(request, postData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_SetPostData_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private com.jetbrains.cef.remote.thrift_codegen.PostData postData;
      public Request_SetPostData_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, com.jetbrains.cef.remote.thrift_codegen.PostData postData, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.postData = postData;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_SetPostData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_SetPostData_args args = new Request_SetPostData_args();
        args.setRequest(request);
        args.setPostData(postData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_SetPostData();
        return null;
      }
    }

    @Override
    public void Request_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_GetHeaderByName_call method_call = new Request_GetHeaderByName_call(request, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_GetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.lang.String name;
      public Request_GetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.name = name;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_GetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_GetHeaderByName_args args = new Request_GetHeaderByName_args();
        args.setRequest(request);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Request_GetHeaderByName();
      }
    }

    @Override
    public void Request_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_SetHeaderByName_call method_call = new Request_SetHeaderByName_call(request, name, value, overwrite, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_SetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.lang.String name;
      private java.lang.String value;
      private boolean overwrite;
      public Request_SetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.name = name;
        this.value = value;
        this.overwrite = overwrite;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_SetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_SetHeaderByName_args args = new Request_SetHeaderByName_args();
        args.setRequest(request);
        args.setName(name);
        args.setValue(value);
        args.setOverwrite(overwrite);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_SetHeaderByName();
        return null;
      }
    }

    @Override
    public void Request_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_GetHeaderMap_call method_call = new Request_GetHeaderMap_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_GetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      public Request_GetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_GetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_GetHeaderMap_args args = new Request_GetHeaderMap_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Request_GetHeaderMap();
      }
    }

    @Override
    public void Request_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_SetHeaderMap_call method_call = new Request_SetHeaderMap_call(request, headerMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_SetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.util.Map<java.lang.String,java.lang.String> headerMap;
      public Request_SetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.headerMap = headerMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_SetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_SetHeaderMap_args args = new Request_SetHeaderMap_args();
        args.setRequest(request);
        args.setHeaderMap(headerMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_SetHeaderMap();
        return null;
      }
    }

    @Override
    public void Request_Set(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Request_Set_call method_call = new Request_Set_call(request, url, method, postData, headerMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Request_Set_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject request;
      private java.lang.String url;
      private java.lang.String method;
      private com.jetbrains.cef.remote.thrift_codegen.PostData postData;
      private java.util.Map<java.lang.String,java.lang.String> headerMap;
      public Request_Set_call(com.jetbrains.cef.remote.thrift_codegen.RObject request, java.lang.String url, java.lang.String method, com.jetbrains.cef.remote.thrift_codegen.PostData postData, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
        this.url = url;
        this.method = method;
        this.postData = postData;
        this.headerMap = headerMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Request_Set", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Request_Set_args args = new Request_Set_args();
        args.setRequest(request);
        args.setUrl(url);
        args.setMethod(method);
        args.setPostData(postData);
        args.setHeaderMap(headerMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Request_Set();
        return null;
      }
    }

    @Override
    public void Response_Update(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_Update_call method_call = new Response_Update_call(response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_Update_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      public Response_Update_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_Update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_Update_args args = new Response_Update_args();
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Response_Update();
        return null;
      }
    }

    @Override
    public void Response_GetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_GetHeaderByName_call method_call = new Response_GetHeaderByName_call(response, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_GetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.lang.String name;
      public Response_GetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
        this.name = name;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_GetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_GetHeaderByName_args args = new Response_GetHeaderByName_args();
        args.setResponse(response);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Response_GetHeaderByName();
      }
    }

    @Override
    public void Response_SetHeaderByName(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_SetHeaderByName_call method_call = new Response_SetHeaderByName_call(response, name, value, overwrite, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_SetHeaderByName_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.lang.String name;
      private java.lang.String value;
      private boolean overwrite;
      public Response_SetHeaderByName_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.lang.String name, java.lang.String value, boolean overwrite, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
        this.name = name;
        this.value = value;
        this.overwrite = overwrite;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_SetHeaderByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_SetHeaderByName_args args = new Response_SetHeaderByName_args();
        args.setResponse(response);
        args.setName(name);
        args.setValue(value);
        args.setOverwrite(overwrite);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Response_SetHeaderByName();
        return null;
      }
    }

    @Override
    public void Response_GetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_GetHeaderMap_call method_call = new Response_GetHeaderMap_call(response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_GetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      public Response_GetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_GetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_GetHeaderMap_args args = new Response_GetHeaderMap_args();
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Response_GetHeaderMap();
      }
    }

    @Override
    public void Response_SetHeaderMap(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Response_SetHeaderMap_call method_call = new Response_SetHeaderMap_call(response, headerMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Response_SetHeaderMap_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject response;
      private java.util.Map<java.lang.String,java.lang.String> headerMap;
      public Response_SetHeaderMap_call(com.jetbrains.cef.remote.thrift_codegen.RObject response, java.util.Map<java.lang.String,java.lang.String> headerMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.response = response;
        this.headerMap = headerMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Response_SetHeaderMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Response_SetHeaderMap_args args = new Response_SetHeaderMap_args();
        args.setResponse(response);
        args.setHeaderMap(headerMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Response_SetHeaderMap();
        return null;
      }
    }

    @Override
    public void Callback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Callback_Dispose_call method_call = new Callback_Dispose_call(callback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Callback_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject callback;
      public Callback_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.callback = callback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Callback_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Callback_Dispose_args args = new Callback_Dispose_args();
        args.setCallback(callback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Callback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Callback_Continue_call method_call = new Callback_Continue_call(callback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Callback_Continue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject callback;
      public Callback_Continue_call(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.callback = callback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Callback_Continue", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Callback_Continue_args args = new Callback_Continue_args();
        args.setCallback(callback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void Callback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Callback_Cancel_call method_call = new Callback_Cancel_call(callback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Callback_Cancel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject callback;
      public Callback_Cancel_call(com.jetbrains.cef.remote.thrift_codegen.RObject callback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.callback = callback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Callback_Cancel", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        Callback_Cancel_args args = new Callback_Cancel_args();
        args.setCallback(callback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void AuthCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AuthCallback_Dispose_call method_call = new AuthCallback_Dispose_call(authCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AuthCallback_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject authCallback;
      public AuthCallback_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authCallback = authCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AuthCallback_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        AuthCallback_Dispose_args args = new AuthCallback_Dispose_args();
        args.setAuthCallback(authCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void AuthCallback_Continue(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AuthCallback_Continue_call method_call = new AuthCallback_Continue_call(authCallback, username, password, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AuthCallback_Continue_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject authCallback;
      private java.lang.String username;
      private java.lang.String password;
      public AuthCallback_Continue_call(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, java.lang.String username, java.lang.String password, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authCallback = authCallback;
        this.username = username;
        this.password = password;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AuthCallback_Continue", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        AuthCallback_Continue_args args = new AuthCallback_Continue_args();
        args.setAuthCallback(authCallback);
        args.setUsername(username);
        args.setPassword(password);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void AuthCallback_Cancel(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AuthCallback_Cancel_call method_call = new AuthCallback_Cancel_call(authCallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AuthCallback_Cancel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject authCallback;
      public AuthCallback_Cancel_call(com.jetbrains.cef.remote.thrift_codegen.RObject authCallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.authCallback = authCallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AuthCallback_Cancel", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        AuthCallback_Cancel_args args = new AuthCallback_Cancel_args();
        args.setAuthCallback(authCallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void MessageRouter_Create(java.lang.String query, java.lang.String cancel, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_Create_call method_call = new MessageRouter_Create_call(query, cancel, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_Create_call extends org.apache.thrift.async.TAsyncMethodCall<com.jetbrains.cef.remote.thrift_codegen.RObject> {
      private java.lang.String query;
      private java.lang.String cancel;
      public MessageRouter_Create_call(java.lang.String query, java.lang.String cancel, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.cancel = cancel;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_Create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_Create_args args = new MessageRouter_Create_args();
        args.setQuery(query);
        args.setCancel(cancel);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public com.jetbrains.cef.remote.thrift_codegen.RObject getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_MessageRouter_Create();
      }
    }

    @Override
    public void MessageRouter_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_Dispose_call method_call = new MessageRouter_Dispose_call(msgRouter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      public MessageRouter_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.msgRouter = msgRouter;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        MessageRouter_Dispose_args args = new MessageRouter_Dispose_args();
        args.setMsgRouter(msgRouter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void MessageRouter_AddMessageRouterToBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_AddMessageRouterToBrowser_call method_call = new MessageRouter_AddMessageRouterToBrowser_call(msgRouter, bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_AddMessageRouterToBrowser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private int bid;
      public MessageRouter_AddMessageRouterToBrowser_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_AddMessageRouterToBrowser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_AddMessageRouterToBrowser_args args = new MessageRouter_AddMessageRouterToBrowser_args();
        args.setMsgRouter(msgRouter);
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_AddMessageRouterToBrowser();
        return null;
      }
    }

    @Override
    public void MessageRouter_RemoveMessageRouterFromBrowser(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_RemoveMessageRouterFromBrowser_call method_call = new MessageRouter_RemoveMessageRouterFromBrowser_call(msgRouter, bid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_RemoveMessageRouterFromBrowser_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private int bid;
      public MessageRouter_RemoveMessageRouterFromBrowser_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.bid = bid;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_RemoveMessageRouterFromBrowser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_RemoveMessageRouterFromBrowser_args args = new MessageRouter_RemoveMessageRouterFromBrowser_args();
        args.setMsgRouter(msgRouter);
        args.setBid(bid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_RemoveMessageRouterFromBrowser();
        return null;
      }
    }

    @Override
    public void MessageRouter_AddHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_AddHandler_call method_call = new MessageRouter_AddHandler_call(msgRouter, handler, first, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_AddHandler_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      private boolean first;
      public MessageRouter_AddHandler_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, boolean first, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.handler = handler;
        this.first = first;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_AddHandler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_AddHandler_args args = new MessageRouter_AddHandler_args();
        args.setMsgRouter(msgRouter);
        args.setHandler(handler);
        args.setFirst(first);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_AddHandler();
        return null;
      }
    }

    @Override
    public void MessageRouter_RemoveHandler(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_RemoveHandler_call method_call = new MessageRouter_RemoveHandler_call(msgRouter, handler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_RemoveHandler_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      public MessageRouter_RemoveHandler_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.handler = handler;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_RemoveHandler", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_RemoveHandler_args args = new MessageRouter_RemoveHandler_args();
        args.setMsgRouter(msgRouter);
        args.setHandler(handler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_RemoveHandler();
        return null;
      }
    }

    @Override
    public void MessageRouter_CancelPending(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MessageRouter_CancelPending_call method_call = new MessageRouter_CancelPending_call(msgRouter, bid, handler, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MessageRouter_CancelPending_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter;
      private int bid;
      private com.jetbrains.cef.remote.thrift_codegen.RObject handler;
      public MessageRouter_CancelPending_call(com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter, int bid, com.jetbrains.cef.remote.thrift_codegen.RObject handler, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgRouter = msgRouter;
        this.bid = bid;
        this.handler = handler;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MessageRouter_CancelPending", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MessageRouter_CancelPending_args args = new MessageRouter_CancelPending_args();
        args.setMsgRouter(msgRouter);
        args.setBid(bid);
        args.setHandler(handler);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MessageRouter_CancelPending();
        return null;
      }
    }

    @Override
    public void QueryCallback_Dispose(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryCallback_Dispose_call method_call = new QueryCallback_Dispose_call(qcallback, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryCallback_Dispose_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject qcallback;
      public QueryCallback_Dispose_call(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.qcallback = qcallback;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryCallback_Dispose", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        QueryCallback_Dispose_args args = new QueryCallback_Dispose_args();
        args.setQcallback(qcallback);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void QueryCallback_Success(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryCallback_Success_call method_call = new QueryCallback_Success_call(qcallback, response, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryCallback_Success_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject qcallback;
      private java.lang.String response;
      public QueryCallback_Success_call(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, java.lang.String response, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.qcallback = qcallback;
        this.response = response;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryCallback_Success", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        QueryCallback_Success_args args = new QueryCallback_Success_args();
        args.setQcallback(qcallback);
        args.setResponse(response);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    @Override
    public void QueryCallback_Failure(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryCallback_Failure_call method_call = new QueryCallback_Failure_call(qcallback, error_code, error_message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryCallback_Failure_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private com.jetbrains.cef.remote.thrift_codegen.RObject qcallback;
      private int error_code;
      private java.lang.String error_message;
      public QueryCallback_Failure_call(com.jetbrains.cef.remote.thrift_codegen.RObject qcallback, int error_code, java.lang.String error_message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.qcallback = qcallback;
        this.error_code = error_code;
        this.error_message = error_message;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryCallback_Failure", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        QueryCallback_Failure_args args = new QueryCallback_Failure_args();
        args.setQcallback(qcallback);
        args.setError_code(error_code);
        args.setError_message(error_message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("log", new log());
      processMap.put("createBrowser", new createBrowser());
      processMap.put("closeBrowser", new closeBrowser());
      processMap.put("Browser_Reload", new Browser_Reload());
      processMap.put("Browser_ReloadIgnoreCache", new Browser_ReloadIgnoreCache());
      processMap.put("Browser_LoadURL", new Browser_LoadURL());
      processMap.put("Browser_GetURL", new Browser_GetURL());
      processMap.put("Browser_ExecuteJavaScript", new Browser_ExecuteJavaScript());
      processMap.put("Browser_WasResized", new Browser_WasResized());
      processMap.put("Browser_SendKeyEvent", new Browser_SendKeyEvent());
      processMap.put("Browser_SendCefKeyEvent", new Browser_SendCefKeyEvent());
      processMap.put("Browser_SendMouseEvent", new Browser_SendMouseEvent());
      processMap.put("Browser_SendMouseWheelEvent", new Browser_SendMouseWheelEvent());
      processMap.put("Request_Update", new Request_Update());
      processMap.put("Request_GetPostData", new Request_GetPostData());
      processMap.put("Request_SetPostData", new Request_SetPostData());
      processMap.put("Request_GetHeaderByName", new Request_GetHeaderByName());
      processMap.put("Request_SetHeaderByName", new Request_SetHeaderByName());
      processMap.put("Request_GetHeaderMap", new Request_GetHeaderMap());
      processMap.put("Request_SetHeaderMap", new Request_SetHeaderMap());
      processMap.put("Request_Set", new Request_Set());
      processMap.put("Response_Update", new Response_Update());
      processMap.put("Response_GetHeaderByName", new Response_GetHeaderByName());
      processMap.put("Response_SetHeaderByName", new Response_SetHeaderByName());
      processMap.put("Response_GetHeaderMap", new Response_GetHeaderMap());
      processMap.put("Response_SetHeaderMap", new Response_SetHeaderMap());
      processMap.put("Callback_Dispose", new Callback_Dispose());
      processMap.put("Callback_Continue", new Callback_Continue());
      processMap.put("Callback_Cancel", new Callback_Cancel());
      processMap.put("AuthCallback_Dispose", new AuthCallback_Dispose());
      processMap.put("AuthCallback_Continue", new AuthCallback_Continue());
      processMap.put("AuthCallback_Cancel", new AuthCallback_Cancel());
      processMap.put("MessageRouter_Create", new MessageRouter_Create());
      processMap.put("MessageRouter_Dispose", new MessageRouter_Dispose());
      processMap.put("MessageRouter_AddMessageRouterToBrowser", new MessageRouter_AddMessageRouterToBrowser());
      processMap.put("MessageRouter_RemoveMessageRouterFromBrowser", new MessageRouter_RemoveMessageRouterFromBrowser());
      processMap.put("MessageRouter_AddHandler", new MessageRouter_AddHandler());
      processMap.put("MessageRouter_RemoveHandler", new MessageRouter_RemoveHandler());
      processMap.put("MessageRouter_CancelPending", new MessageRouter_CancelPending());
      processMap.put("QueryCallback_Dispose", new QueryCallback_Dispose());
      processMap.put("QueryCallback_Success", new QueryCallback_Success());
      processMap.put("QueryCallback_Failure", new QueryCallback_Failure());
      return processMap;
    }

    public static class connect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, connect_args> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public connect_result getResult(I iface, connect_args args) throws org.apache.thrift.TException {
        connect_result result = new connect_result();
        result.success = iface.connect(args.backwardConnectionPort, args.cmdLineArgs, args.settings);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class log<I extends Iface> extends org.apache.thrift.ProcessFunction<I, log_args> {
      public log() {
        super("log");
      }

      @Override
      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, log_args args) throws org.apache.thrift.TException {
        iface.log(args.msg);
        return null;
      }
    }

    public static class createBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createBrowser_args> {
      public createBrowser() {
        super("createBrowser");
      }

      @Override
      public createBrowser_args getEmptyArgsInstance() {
        return new createBrowser_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public createBrowser_result getResult(I iface, createBrowser_args args) throws org.apache.thrift.TException {
        createBrowser_result result = new createBrowser_result();
        result.success = iface.createBrowser(args.cid, args.url);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class closeBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, closeBrowser_args> {
      public closeBrowser() {
        super("closeBrowser");
      }

      @Override
      public closeBrowser_args getEmptyArgsInstance() {
        return new closeBrowser_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, closeBrowser_args args) throws org.apache.thrift.TException {
        iface.closeBrowser(args.bid);
        return null;
      }
    }

    public static class Browser_Reload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_Reload_args> {
      public Browser_Reload() {
        super("Browser_Reload");
      }

      @Override
      public Browser_Reload_args getEmptyArgsInstance() {
        return new Browser_Reload_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_Reload_args args) throws org.apache.thrift.TException {
        iface.Browser_Reload(args.bid);
        return null;
      }
    }

    public static class Browser_ReloadIgnoreCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_ReloadIgnoreCache_args> {
      public Browser_ReloadIgnoreCache() {
        super("Browser_ReloadIgnoreCache");
      }

      @Override
      public Browser_ReloadIgnoreCache_args getEmptyArgsInstance() {
        return new Browser_ReloadIgnoreCache_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_ReloadIgnoreCache_args args) throws org.apache.thrift.TException {
        iface.Browser_ReloadIgnoreCache(args.bid);
        return null;
      }
    }

    public static class Browser_LoadURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_LoadURL_args> {
      public Browser_LoadURL() {
        super("Browser_LoadURL");
      }

      @Override
      public Browser_LoadURL_args getEmptyArgsInstance() {
        return new Browser_LoadURL_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_LoadURL_args args) throws org.apache.thrift.TException {
        iface.Browser_LoadURL(args.bid, args.url);
        return null;
      }
    }

    public static class Browser_GetURL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_GetURL_args> {
      public Browser_GetURL() {
        super("Browser_GetURL");
      }

      @Override
      public Browser_GetURL_args getEmptyArgsInstance() {
        return new Browser_GetURL_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Browser_GetURL_result getResult(I iface, Browser_GetURL_args args) throws org.apache.thrift.TException {
        Browser_GetURL_result result = new Browser_GetURL_result();
        result.success = iface.Browser_GetURL(args.bid);
        return result;
      }
    }

    public static class Browser_ExecuteJavaScript<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_ExecuteJavaScript_args> {
      public Browser_ExecuteJavaScript() {
        super("Browser_ExecuteJavaScript");
      }

      @Override
      public Browser_ExecuteJavaScript_args getEmptyArgsInstance() {
        return new Browser_ExecuteJavaScript_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_ExecuteJavaScript_args args) throws org.apache.thrift.TException {
        iface.Browser_ExecuteJavaScript(args.bid, args.code, args.url, args.line);
        return null;
      }
    }

    public static class Browser_WasResized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_WasResized_args> {
      public Browser_WasResized() {
        super("Browser_WasResized");
      }

      @Override
      public Browser_WasResized_args getEmptyArgsInstance() {
        return new Browser_WasResized_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_WasResized_args args) throws org.apache.thrift.TException {
        iface.Browser_WasResized(args.bid, args.width, args.height);
        return null;
      }
    }

    public static class Browser_SendKeyEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SendKeyEvent_args> {
      public Browser_SendKeyEvent() {
        super("Browser_SendKeyEvent");
      }

      @Override
      public Browser_SendKeyEvent_args getEmptyArgsInstance() {
        return new Browser_SendKeyEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SendKeyEvent_args args) throws org.apache.thrift.TException {
        iface.Browser_SendKeyEvent(args.bid, args.event_type, args.modifiers, args.key_char, args.scanCode, args.key_code);
        return null;
      }
    }

    public static class Browser_SendCefKeyEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SendCefKeyEvent_args> {
      public Browser_SendCefKeyEvent() {
        super("Browser_SendCefKeyEvent");
      }

      @Override
      public Browser_SendCefKeyEvent_args getEmptyArgsInstance() {
        return new Browser_SendCefKeyEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SendCefKeyEvent_args args) throws org.apache.thrift.TException {
        iface.Browser_SendCefKeyEvent(args.bid, args.event);
        return null;
      }
    }

    public static class Browser_SendMouseEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SendMouseEvent_args> {
      public Browser_SendMouseEvent() {
        super("Browser_SendMouseEvent");
      }

      @Override
      public Browser_SendMouseEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SendMouseEvent_args args) throws org.apache.thrift.TException {
        iface.Browser_SendMouseEvent(args.bid, args.event_type, args.x, args.y, args.modifiers, args.click_count, args.button);
        return null;
      }
    }

    public static class Browser_SendMouseWheelEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Browser_SendMouseWheelEvent_args> {
      public Browser_SendMouseWheelEvent() {
        super("Browser_SendMouseWheelEvent");
      }

      @Override
      public Browser_SendMouseWheelEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseWheelEvent_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Browser_SendMouseWheelEvent_args args) throws org.apache.thrift.TException {
        iface.Browser_SendMouseWheelEvent(args.bid, args.scroll_type, args.x, args.y, args.modifiers, args.delta, args.units_to_scroll);
        return null;
      }
    }

    public static class Request_Update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_Update_args> {
      public Request_Update() {
        super("Request_Update");
      }

      @Override
      public Request_Update_args getEmptyArgsInstance() {
        return new Request_Update_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_Update_result getResult(I iface, Request_Update_args args) throws org.apache.thrift.TException {
        Request_Update_result result = new Request_Update_result();
        iface.Request_Update(args.request);
        return result;
      }
    }

    public static class Request_GetPostData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_GetPostData_args> {
      public Request_GetPostData() {
        super("Request_GetPostData");
      }

      @Override
      public Request_GetPostData_args getEmptyArgsInstance() {
        return new Request_GetPostData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_GetPostData_result getResult(I iface, Request_GetPostData_args args) throws org.apache.thrift.TException {
        Request_GetPostData_result result = new Request_GetPostData_result();
        result.success = iface.Request_GetPostData(args.request);
        return result;
      }
    }

    public static class Request_SetPostData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_SetPostData_args> {
      public Request_SetPostData() {
        super("Request_SetPostData");
      }

      @Override
      public Request_SetPostData_args getEmptyArgsInstance() {
        return new Request_SetPostData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_SetPostData_result getResult(I iface, Request_SetPostData_args args) throws org.apache.thrift.TException {
        Request_SetPostData_result result = new Request_SetPostData_result();
        iface.Request_SetPostData(args.request, args.postData);
        return result;
      }
    }

    public static class Request_GetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_GetHeaderByName_args> {
      public Request_GetHeaderByName() {
        super("Request_GetHeaderByName");
      }

      @Override
      public Request_GetHeaderByName_args getEmptyArgsInstance() {
        return new Request_GetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_GetHeaderByName_result getResult(I iface, Request_GetHeaderByName_args args) throws org.apache.thrift.TException {
        Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
        result.success = iface.Request_GetHeaderByName(args.request, args.name);
        return result;
      }
    }

    public static class Request_SetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_SetHeaderByName_args> {
      public Request_SetHeaderByName() {
        super("Request_SetHeaderByName");
      }

      @Override
      public Request_SetHeaderByName_args getEmptyArgsInstance() {
        return new Request_SetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_SetHeaderByName_result getResult(I iface, Request_SetHeaderByName_args args) throws org.apache.thrift.TException {
        Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
        iface.Request_SetHeaderByName(args.request, args.name, args.value, args.overwrite);
        return result;
      }
    }

    public static class Request_GetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_GetHeaderMap_args> {
      public Request_GetHeaderMap() {
        super("Request_GetHeaderMap");
      }

      @Override
      public Request_GetHeaderMap_args getEmptyArgsInstance() {
        return new Request_GetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_GetHeaderMap_result getResult(I iface, Request_GetHeaderMap_args args) throws org.apache.thrift.TException {
        Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
        result.success = iface.Request_GetHeaderMap(args.request);
        return result;
      }
    }

    public static class Request_SetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_SetHeaderMap_args> {
      public Request_SetHeaderMap() {
        super("Request_SetHeaderMap");
      }

      @Override
      public Request_SetHeaderMap_args getEmptyArgsInstance() {
        return new Request_SetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_SetHeaderMap_result getResult(I iface, Request_SetHeaderMap_args args) throws org.apache.thrift.TException {
        Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
        iface.Request_SetHeaderMap(args.request, args.headerMap);
        return result;
      }
    }

    public static class Request_Set<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Request_Set_args> {
      public Request_Set() {
        super("Request_Set");
      }

      @Override
      public Request_Set_args getEmptyArgsInstance() {
        return new Request_Set_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Request_Set_result getResult(I iface, Request_Set_args args) throws org.apache.thrift.TException {
        Request_Set_result result = new Request_Set_result();
        iface.Request_Set(args.request, args.url, args.method, args.postData, args.headerMap);
        return result;
      }
    }

    public static class Response_Update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_Update_args> {
      public Response_Update() {
        super("Response_Update");
      }

      @Override
      public Response_Update_args getEmptyArgsInstance() {
        return new Response_Update_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_Update_result getResult(I iface, Response_Update_args args) throws org.apache.thrift.TException {
        Response_Update_result result = new Response_Update_result();
        iface.Response_Update(args.response);
        return result;
      }
    }

    public static class Response_GetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_GetHeaderByName_args> {
      public Response_GetHeaderByName() {
        super("Response_GetHeaderByName");
      }

      @Override
      public Response_GetHeaderByName_args getEmptyArgsInstance() {
        return new Response_GetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_GetHeaderByName_result getResult(I iface, Response_GetHeaderByName_args args) throws org.apache.thrift.TException {
        Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
        result.success = iface.Response_GetHeaderByName(args.response, args.name);
        return result;
      }
    }

    public static class Response_SetHeaderByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_SetHeaderByName_args> {
      public Response_SetHeaderByName() {
        super("Response_SetHeaderByName");
      }

      @Override
      public Response_SetHeaderByName_args getEmptyArgsInstance() {
        return new Response_SetHeaderByName_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_SetHeaderByName_result getResult(I iface, Response_SetHeaderByName_args args) throws org.apache.thrift.TException {
        Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
        iface.Response_SetHeaderByName(args.response, args.name, args.value, args.overwrite);
        return result;
      }
    }

    public static class Response_GetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_GetHeaderMap_args> {
      public Response_GetHeaderMap() {
        super("Response_GetHeaderMap");
      }

      @Override
      public Response_GetHeaderMap_args getEmptyArgsInstance() {
        return new Response_GetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_GetHeaderMap_result getResult(I iface, Response_GetHeaderMap_args args) throws org.apache.thrift.TException {
        Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
        result.success = iface.Response_GetHeaderMap(args.response);
        return result;
      }
    }

    public static class Response_SetHeaderMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Response_SetHeaderMap_args> {
      public Response_SetHeaderMap() {
        super("Response_SetHeaderMap");
      }

      @Override
      public Response_SetHeaderMap_args getEmptyArgsInstance() {
        return new Response_SetHeaderMap_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public Response_SetHeaderMap_result getResult(I iface, Response_SetHeaderMap_args args) throws org.apache.thrift.TException {
        Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
        iface.Response_SetHeaderMap(args.response, args.headerMap);
        return result;
      }
    }

    public static class Callback_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Callback_Dispose_args> {
      public Callback_Dispose() {
        super("Callback_Dispose");
      }

      @Override
      public Callback_Dispose_args getEmptyArgsInstance() {
        return new Callback_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Callback_Dispose_args args) throws org.apache.thrift.TException {
        iface.Callback_Dispose(args.callback);
        return null;
      }
    }

    public static class Callback_Continue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Callback_Continue_args> {
      public Callback_Continue() {
        super("Callback_Continue");
      }

      @Override
      public Callback_Continue_args getEmptyArgsInstance() {
        return new Callback_Continue_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Callback_Continue_args args) throws org.apache.thrift.TException {
        iface.Callback_Continue(args.callback);
        return null;
      }
    }

    public static class Callback_Cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Callback_Cancel_args> {
      public Callback_Cancel() {
        super("Callback_Cancel");
      }

      @Override
      public Callback_Cancel_args getEmptyArgsInstance() {
        return new Callback_Cancel_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, Callback_Cancel_args args) throws org.apache.thrift.TException {
        iface.Callback_Cancel(args.callback);
        return null;
      }
    }

    public static class AuthCallback_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AuthCallback_Dispose_args> {
      public AuthCallback_Dispose() {
        super("AuthCallback_Dispose");
      }

      @Override
      public AuthCallback_Dispose_args getEmptyArgsInstance() {
        return new AuthCallback_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, AuthCallback_Dispose_args args) throws org.apache.thrift.TException {
        iface.AuthCallback_Dispose(args.authCallback);
        return null;
      }
    }

    public static class AuthCallback_Continue<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AuthCallback_Continue_args> {
      public AuthCallback_Continue() {
        super("AuthCallback_Continue");
      }

      @Override
      public AuthCallback_Continue_args getEmptyArgsInstance() {
        return new AuthCallback_Continue_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, AuthCallback_Continue_args args) throws org.apache.thrift.TException {
        iface.AuthCallback_Continue(args.authCallback, args.username, args.password);
        return null;
      }
    }

    public static class AuthCallback_Cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AuthCallback_Cancel_args> {
      public AuthCallback_Cancel() {
        super("AuthCallback_Cancel");
      }

      @Override
      public AuthCallback_Cancel_args getEmptyArgsInstance() {
        return new AuthCallback_Cancel_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, AuthCallback_Cancel_args args) throws org.apache.thrift.TException {
        iface.AuthCallback_Cancel(args.authCallback);
        return null;
      }
    }

    public static class MessageRouter_Create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_Create_args> {
      public MessageRouter_Create() {
        super("MessageRouter_Create");
      }

      @Override
      public MessageRouter_Create_args getEmptyArgsInstance() {
        return new MessageRouter_Create_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_Create_result getResult(I iface, MessageRouter_Create_args args) throws org.apache.thrift.TException {
        MessageRouter_Create_result result = new MessageRouter_Create_result();
        result.success = iface.MessageRouter_Create(args.query, args.cancel);
        return result;
      }
    }

    public static class MessageRouter_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_Dispose_args> {
      public MessageRouter_Dispose() {
        super("MessageRouter_Dispose");
      }

      @Override
      public MessageRouter_Dispose_args getEmptyArgsInstance() {
        return new MessageRouter_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, MessageRouter_Dispose_args args) throws org.apache.thrift.TException {
        iface.MessageRouter_Dispose(args.msgRouter);
        return null;
      }
    }

    public static class MessageRouter_AddMessageRouterToBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_AddMessageRouterToBrowser_args> {
      public MessageRouter_AddMessageRouterToBrowser() {
        super("MessageRouter_AddMessageRouterToBrowser");
      }

      @Override
      public MessageRouter_AddMessageRouterToBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_AddMessageRouterToBrowser_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_AddMessageRouterToBrowser_result getResult(I iface, MessageRouter_AddMessageRouterToBrowser_args args) throws org.apache.thrift.TException {
        MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
        iface.MessageRouter_AddMessageRouterToBrowser(args.msgRouter, args.bid);
        return result;
      }
    }

    public static class MessageRouter_RemoveMessageRouterFromBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_RemoveMessageRouterFromBrowser_args> {
      public MessageRouter_RemoveMessageRouterFromBrowser() {
        super("MessageRouter_RemoveMessageRouterFromBrowser");
      }

      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_result getResult(I iface, MessageRouter_RemoveMessageRouterFromBrowser_args args) throws org.apache.thrift.TException {
        MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
        iface.MessageRouter_RemoveMessageRouterFromBrowser(args.msgRouter, args.bid);
        return result;
      }
    }

    public static class MessageRouter_AddHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_AddHandler_args> {
      public MessageRouter_AddHandler() {
        super("MessageRouter_AddHandler");
      }

      @Override
      public MessageRouter_AddHandler_args getEmptyArgsInstance() {
        return new MessageRouter_AddHandler_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_AddHandler_result getResult(I iface, MessageRouter_AddHandler_args args) throws org.apache.thrift.TException {
        MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
        iface.MessageRouter_AddHandler(args.msgRouter, args.handler, args.first);
        return result;
      }
    }

    public static class MessageRouter_RemoveHandler<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_RemoveHandler_args> {
      public MessageRouter_RemoveHandler() {
        super("MessageRouter_RemoveHandler");
      }

      @Override
      public MessageRouter_RemoveHandler_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveHandler_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_RemoveHandler_result getResult(I iface, MessageRouter_RemoveHandler_args args) throws org.apache.thrift.TException {
        MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
        iface.MessageRouter_RemoveHandler(args.msgRouter, args.handler);
        return result;
      }
    }

    public static class MessageRouter_CancelPending<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MessageRouter_CancelPending_args> {
      public MessageRouter_CancelPending() {
        super("MessageRouter_CancelPending");
      }

      @Override
      public MessageRouter_CancelPending_args getEmptyArgsInstance() {
        return new MessageRouter_CancelPending_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public MessageRouter_CancelPending_result getResult(I iface, MessageRouter_CancelPending_args args) throws org.apache.thrift.TException {
        MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
        iface.MessageRouter_CancelPending(args.msgRouter, args.bid, args.handler);
        return result;
      }
    }

    public static class QueryCallback_Dispose<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryCallback_Dispose_args> {
      public QueryCallback_Dispose() {
        super("QueryCallback_Dispose");
      }

      @Override
      public QueryCallback_Dispose_args getEmptyArgsInstance() {
        return new QueryCallback_Dispose_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, QueryCallback_Dispose_args args) throws org.apache.thrift.TException {
        iface.QueryCallback_Dispose(args.qcallback);
        return null;
      }
    }

    public static class QueryCallback_Success<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryCallback_Success_args> {
      public QueryCallback_Success() {
        super("QueryCallback_Success");
      }

      @Override
      public QueryCallback_Success_args getEmptyArgsInstance() {
        return new QueryCallback_Success_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, QueryCallback_Success_args args) throws org.apache.thrift.TException {
        iface.QueryCallback_Success(args.qcallback, args.response);
        return null;
      }
    }

    public static class QueryCallback_Failure<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryCallback_Failure_args> {
      public QueryCallback_Failure() {
        super("QueryCallback_Failure");
      }

      @Override
      public QueryCallback_Failure_args getEmptyArgsInstance() {
        return new QueryCallback_Failure_args();
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public org.apache.thrift.TBase getResult(I iface, QueryCallback_Failure_args args) throws org.apache.thrift.TException {
        iface.QueryCallback_Failure(args.qcallback, args.error_code, args.error_message);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("connect", new connect());
      processMap.put("log", new log());
      processMap.put("createBrowser", new createBrowser());
      processMap.put("closeBrowser", new closeBrowser());
      processMap.put("Browser_Reload", new Browser_Reload());
      processMap.put("Browser_ReloadIgnoreCache", new Browser_ReloadIgnoreCache());
      processMap.put("Browser_LoadURL", new Browser_LoadURL());
      processMap.put("Browser_GetURL", new Browser_GetURL());
      processMap.put("Browser_ExecuteJavaScript", new Browser_ExecuteJavaScript());
      processMap.put("Browser_WasResized", new Browser_WasResized());
      processMap.put("Browser_SendKeyEvent", new Browser_SendKeyEvent());
      processMap.put("Browser_SendCefKeyEvent", new Browser_SendCefKeyEvent());
      processMap.put("Browser_SendMouseEvent", new Browser_SendMouseEvent());
      processMap.put("Browser_SendMouseWheelEvent", new Browser_SendMouseWheelEvent());
      processMap.put("Request_Update", new Request_Update());
      processMap.put("Request_GetPostData", new Request_GetPostData());
      processMap.put("Request_SetPostData", new Request_SetPostData());
      processMap.put("Request_GetHeaderByName", new Request_GetHeaderByName());
      processMap.put("Request_SetHeaderByName", new Request_SetHeaderByName());
      processMap.put("Request_GetHeaderMap", new Request_GetHeaderMap());
      processMap.put("Request_SetHeaderMap", new Request_SetHeaderMap());
      processMap.put("Request_Set", new Request_Set());
      processMap.put("Response_Update", new Response_Update());
      processMap.put("Response_GetHeaderByName", new Response_GetHeaderByName());
      processMap.put("Response_SetHeaderByName", new Response_SetHeaderByName());
      processMap.put("Response_GetHeaderMap", new Response_GetHeaderMap());
      processMap.put("Response_SetHeaderMap", new Response_SetHeaderMap());
      processMap.put("Callback_Dispose", new Callback_Dispose());
      processMap.put("Callback_Continue", new Callback_Continue());
      processMap.put("Callback_Cancel", new Callback_Cancel());
      processMap.put("AuthCallback_Dispose", new AuthCallback_Dispose());
      processMap.put("AuthCallback_Continue", new AuthCallback_Continue());
      processMap.put("AuthCallback_Cancel", new AuthCallback_Cancel());
      processMap.put("MessageRouter_Create", new MessageRouter_Create());
      processMap.put("MessageRouter_Dispose", new MessageRouter_Dispose());
      processMap.put("MessageRouter_AddMessageRouterToBrowser", new MessageRouter_AddMessageRouterToBrowser());
      processMap.put("MessageRouter_RemoveMessageRouterFromBrowser", new MessageRouter_RemoveMessageRouterFromBrowser());
      processMap.put("MessageRouter_AddHandler", new MessageRouter_AddHandler());
      processMap.put("MessageRouter_RemoveHandler", new MessageRouter_RemoveHandler());
      processMap.put("MessageRouter_CancelPending", new MessageRouter_CancelPending());
      processMap.put("QueryCallback_Dispose", new QueryCallback_Dispose());
      processMap.put("QueryCallback_Success", new QueryCallback_Success());
      processMap.put("QueryCallback_Failure", new QueryCallback_Failure());
      return processMap;
    }

    public static class connect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, connect_args, java.lang.Integer> {
      public connect() {
        super("connect");
      }

      @Override
      public connect_args getEmptyArgsInstance() {
        return new connect_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            connect_result result = new connect_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            connect_result result = new connect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, connect_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.connect(args.backwardConnectionPort, args.cmdLineArgs, args.settings,resultHandler);
      }
    }

    public static class log<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, log_args, Void> {
      public log() {
        super("log");
      }

      @Override
      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, log_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.log(args.msg,resultHandler);
      }
    }

    public static class createBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createBrowser_args, java.lang.Integer> {
      public createBrowser() {
        super("createBrowser");
      }

      @Override
      public createBrowser_args getEmptyArgsInstance() {
        return new createBrowser_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            createBrowser_result result = new createBrowser_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createBrowser_result result = new createBrowser_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, createBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.createBrowser(args.cid, args.url,resultHandler);
      }
    }

    public static class closeBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, closeBrowser_args, Void> {
      public closeBrowser() {
        super("closeBrowser");
      }

      @Override
      public closeBrowser_args getEmptyArgsInstance() {
        return new closeBrowser_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, closeBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.closeBrowser(args.bid,resultHandler);
      }
    }

    public static class Browser_Reload<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_Reload_args, Void> {
      public Browser_Reload() {
        super("Browser_Reload");
      }

      @Override
      public Browser_Reload_args getEmptyArgsInstance() {
        return new Browser_Reload_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_Reload_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_Reload(args.bid,resultHandler);
      }
    }

    public static class Browser_ReloadIgnoreCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_ReloadIgnoreCache_args, Void> {
      public Browser_ReloadIgnoreCache() {
        super("Browser_ReloadIgnoreCache");
      }

      @Override
      public Browser_ReloadIgnoreCache_args getEmptyArgsInstance() {
        return new Browser_ReloadIgnoreCache_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_ReloadIgnoreCache_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_ReloadIgnoreCache(args.bid,resultHandler);
      }
    }

    public static class Browser_LoadURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_LoadURL_args, Void> {
      public Browser_LoadURL() {
        super("Browser_LoadURL");
      }

      @Override
      public Browser_LoadURL_args getEmptyArgsInstance() {
        return new Browser_LoadURL_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_LoadURL_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_LoadURL(args.bid, args.url,resultHandler);
      }
    }

    public static class Browser_GetURL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_GetURL_args, java.lang.String> {
      public Browser_GetURL() {
        super("Browser_GetURL");
      }

      @Override
      public Browser_GetURL_args getEmptyArgsInstance() {
        return new Browser_GetURL_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            Browser_GetURL_result result = new Browser_GetURL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Browser_GetURL_result result = new Browser_GetURL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Browser_GetURL_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_GetURL(args.bid,resultHandler);
      }
    }

    public static class Browser_ExecuteJavaScript<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_ExecuteJavaScript_args, Void> {
      public Browser_ExecuteJavaScript() {
        super("Browser_ExecuteJavaScript");
      }

      @Override
      public Browser_ExecuteJavaScript_args getEmptyArgsInstance() {
        return new Browser_ExecuteJavaScript_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_ExecuteJavaScript_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_ExecuteJavaScript(args.bid, args.code, args.url, args.line,resultHandler);
      }
    }

    public static class Browser_WasResized<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_WasResized_args, Void> {
      public Browser_WasResized() {
        super("Browser_WasResized");
      }

      @Override
      public Browser_WasResized_args getEmptyArgsInstance() {
        return new Browser_WasResized_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_WasResized_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_WasResized(args.bid, args.width, args.height,resultHandler);
      }
    }

    public static class Browser_SendKeyEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SendKeyEvent_args, Void> {
      public Browser_SendKeyEvent() {
        super("Browser_SendKeyEvent");
      }

      @Override
      public Browser_SendKeyEvent_args getEmptyArgsInstance() {
        return new Browser_SendKeyEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SendKeyEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SendKeyEvent(args.bid, args.event_type, args.modifiers, args.key_char, args.scanCode, args.key_code,resultHandler);
      }
    }

    public static class Browser_SendCefKeyEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SendCefKeyEvent_args, Void> {
      public Browser_SendCefKeyEvent() {
        super("Browser_SendCefKeyEvent");
      }

      @Override
      public Browser_SendCefKeyEvent_args getEmptyArgsInstance() {
        return new Browser_SendCefKeyEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SendCefKeyEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SendCefKeyEvent(args.bid, args.event,resultHandler);
      }
    }

    public static class Browser_SendMouseEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SendMouseEvent_args, Void> {
      public Browser_SendMouseEvent() {
        super("Browser_SendMouseEvent");
      }

      @Override
      public Browser_SendMouseEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SendMouseEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SendMouseEvent(args.bid, args.event_type, args.x, args.y, args.modifiers, args.click_count, args.button,resultHandler);
      }
    }

    public static class Browser_SendMouseWheelEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Browser_SendMouseWheelEvent_args, Void> {
      public Browser_SendMouseWheelEvent() {
        super("Browser_SendMouseWheelEvent");
      }

      @Override
      public Browser_SendMouseWheelEvent_args getEmptyArgsInstance() {
        return new Browser_SendMouseWheelEvent_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Browser_SendMouseWheelEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Browser_SendMouseWheelEvent(args.bid, args.scroll_type, args.x, args.y, args.modifiers, args.delta, args.units_to_scroll,resultHandler);
      }
    }

    public static class Request_Update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_Update_args, Void> {
      public Request_Update() {
        super("Request_Update");
      }

      @Override
      public Request_Update_args getEmptyArgsInstance() {
        return new Request_Update_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_Update_result result = new Request_Update_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_Update_result result = new Request_Update_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_Update_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_Update(args.request,resultHandler);
      }
    }

    public static class Request_GetPostData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_GetPostData_args, com.jetbrains.cef.remote.thrift_codegen.PostData> {
      public Request_GetPostData() {
        super("Request_GetPostData");
      }

      @Override
      public Request_GetPostData_args getEmptyArgsInstance() {
        return new Request_GetPostData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.PostData o) {
            Request_GetPostData_result result = new Request_GetPostData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_GetPostData_result result = new Request_GetPostData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_GetPostData_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.PostData> resultHandler) throws org.apache.thrift.TException {
        iface.Request_GetPostData(args.request,resultHandler);
      }
    }

    public static class Request_SetPostData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_SetPostData_args, Void> {
      public Request_SetPostData() {
        super("Request_SetPostData");
      }

      @Override
      public Request_SetPostData_args getEmptyArgsInstance() {
        return new Request_SetPostData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_SetPostData_result result = new Request_SetPostData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_SetPostData_result result = new Request_SetPostData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_SetPostData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_SetPostData(args.request, args.postData,resultHandler);
      }
    }

    public static class Request_GetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_GetHeaderByName_args, java.lang.String> {
      public Request_GetHeaderByName() {
        super("Request_GetHeaderByName");
      }

      @Override
      public Request_GetHeaderByName_args getEmptyArgsInstance() {
        return new Request_GetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_GetHeaderByName_result result = new Request_GetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_GetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Request_GetHeaderByName(args.request, args.name,resultHandler);
      }
    }

    public static class Request_SetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_SetHeaderByName_args, Void> {
      public Request_SetHeaderByName() {
        super("Request_SetHeaderByName");
      }

      @Override
      public Request_SetHeaderByName_args getEmptyArgsInstance() {
        return new Request_SetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_SetHeaderByName_result result = new Request_SetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_SetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_SetHeaderByName(args.request, args.name, args.value, args.overwrite,resultHandler);
      }
    }

    public static class Request_GetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_GetHeaderMap_args, java.util.Map<java.lang.String,java.lang.String>> {
      public Request_GetHeaderMap() {
        super("Request_GetHeaderMap");
      }

      @Override
      public Request_GetHeaderMap_args getEmptyArgsInstance() {
        return new Request_GetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_GetHeaderMap_result result = new Request_GetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_GetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.Request_GetHeaderMap(args.request,resultHandler);
      }
    }

    public static class Request_SetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_SetHeaderMap_args, Void> {
      public Request_SetHeaderMap() {
        super("Request_SetHeaderMap");
      }

      @Override
      public Request_SetHeaderMap_args getEmptyArgsInstance() {
        return new Request_SetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_SetHeaderMap_result result = new Request_SetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_SetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_SetHeaderMap(args.request, args.headerMap,resultHandler);
      }
    }

    public static class Request_Set<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Request_Set_args, Void> {
      public Request_Set() {
        super("Request_Set");
      }

      @Override
      public Request_Set_args getEmptyArgsInstance() {
        return new Request_Set_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Request_Set_result result = new Request_Set_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Request_Set_result result = new Request_Set_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Request_Set_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Request_Set(args.request, args.url, args.method, args.postData, args.headerMap,resultHandler);
      }
    }

    public static class Response_Update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_Update_args, Void> {
      public Response_Update() {
        super("Response_Update");
      }

      @Override
      public Response_Update_args getEmptyArgsInstance() {
        return new Response_Update_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Response_Update_result result = new Response_Update_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_Update_result result = new Response_Update_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_Update_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Response_Update(args.response,resultHandler);
      }
    }

    public static class Response_GetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_GetHeaderByName_args, java.lang.String> {
      public Response_GetHeaderByName() {
        super("Response_GetHeaderByName");
      }

      @Override
      public Response_GetHeaderByName_args getEmptyArgsInstance() {
        return new Response_GetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_GetHeaderByName_result result = new Response_GetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_GetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.Response_GetHeaderByName(args.response, args.name,resultHandler);
      }
    }

    public static class Response_SetHeaderByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_SetHeaderByName_args, Void> {
      public Response_SetHeaderByName() {
        super("Response_SetHeaderByName");
      }

      @Override
      public Response_SetHeaderByName_args getEmptyArgsInstance() {
        return new Response_SetHeaderByName_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_SetHeaderByName_result result = new Response_SetHeaderByName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_SetHeaderByName_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Response_SetHeaderByName(args.response, args.name, args.value, args.overwrite,resultHandler);
      }
    }

    public static class Response_GetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_GetHeaderMap_args, java.util.Map<java.lang.String,java.lang.String>> {
      public Response_GetHeaderMap() {
        super("Response_GetHeaderMap");
      }

      @Override
      public Response_GetHeaderMap_args getEmptyArgsInstance() {
        return new Response_GetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          @Override
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_GetHeaderMap_result result = new Response_GetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_GetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.Response_GetHeaderMap(args.response,resultHandler);
      }
    }

    public static class Response_SetHeaderMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Response_SetHeaderMap_args, Void> {
      public Response_SetHeaderMap() {
        super("Response_SetHeaderMap");
      }

      @Override
      public Response_SetHeaderMap_args getEmptyArgsInstance() {
        return new Response_SetHeaderMap_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Response_SetHeaderMap_result result = new Response_SetHeaderMap_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, Response_SetHeaderMap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Response_SetHeaderMap(args.response, args.headerMap,resultHandler);
      }
    }

    public static class Callback_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Callback_Dispose_args, Void> {
      public Callback_Dispose() {
        super("Callback_Dispose");
      }

      @Override
      public Callback_Dispose_args getEmptyArgsInstance() {
        return new Callback_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Callback_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Callback_Dispose(args.callback,resultHandler);
      }
    }

    public static class Callback_Continue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Callback_Continue_args, Void> {
      public Callback_Continue() {
        super("Callback_Continue");
      }

      @Override
      public Callback_Continue_args getEmptyArgsInstance() {
        return new Callback_Continue_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Callback_Continue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Callback_Continue(args.callback,resultHandler);
      }
    }

    public static class Callback_Cancel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Callback_Cancel_args, Void> {
      public Callback_Cancel() {
        super("Callback_Cancel");
      }

      @Override
      public Callback_Cancel_args getEmptyArgsInstance() {
        return new Callback_Cancel_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, Callback_Cancel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.Callback_Cancel(args.callback,resultHandler);
      }
    }

    public static class AuthCallback_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AuthCallback_Dispose_args, Void> {
      public AuthCallback_Dispose() {
        super("AuthCallback_Dispose");
      }

      @Override
      public AuthCallback_Dispose_args getEmptyArgsInstance() {
        return new AuthCallback_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, AuthCallback_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.AuthCallback_Dispose(args.authCallback,resultHandler);
      }
    }

    public static class AuthCallback_Continue<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AuthCallback_Continue_args, Void> {
      public AuthCallback_Continue() {
        super("AuthCallback_Continue");
      }

      @Override
      public AuthCallback_Continue_args getEmptyArgsInstance() {
        return new AuthCallback_Continue_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, AuthCallback_Continue_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.AuthCallback_Continue(args.authCallback, args.username, args.password,resultHandler);
      }
    }

    public static class AuthCallback_Cancel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AuthCallback_Cancel_args, Void> {
      public AuthCallback_Cancel() {
        super("AuthCallback_Cancel");
      }

      @Override
      public AuthCallback_Cancel_args getEmptyArgsInstance() {
        return new AuthCallback_Cancel_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, AuthCallback_Cancel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.AuthCallback_Cancel(args.authCallback,resultHandler);
      }
    }

    public static class MessageRouter_Create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_Create_args, com.jetbrains.cef.remote.thrift_codegen.RObject> {
      public MessageRouter_Create() {
        super("MessageRouter_Create");
      }

      @Override
      public MessageRouter_Create_args getEmptyArgsInstance() {
        return new MessageRouter_Create_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject>() { 
          @Override
          public void onComplete(com.jetbrains.cef.remote.thrift_codegen.RObject o) {
            MessageRouter_Create_result result = new MessageRouter_Create_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_Create_result result = new MessageRouter_Create_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_Create_args args, org.apache.thrift.async.AsyncMethodCallback<com.jetbrains.cef.remote.thrift_codegen.RObject> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_Create(args.query, args.cancel,resultHandler);
      }
    }

    public static class MessageRouter_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_Dispose_args, Void> {
      public MessageRouter_Dispose() {
        super("MessageRouter_Dispose");
      }

      @Override
      public MessageRouter_Dispose_args getEmptyArgsInstance() {
        return new MessageRouter_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, MessageRouter_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_Dispose(args.msgRouter,resultHandler);
      }
    }

    public static class MessageRouter_AddMessageRouterToBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_AddMessageRouterToBrowser_args, Void> {
      public MessageRouter_AddMessageRouterToBrowser() {
        super("MessageRouter_AddMessageRouterToBrowser");
      }

      @Override
      public MessageRouter_AddMessageRouterToBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_AddMessageRouterToBrowser_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_AddMessageRouterToBrowser_result result = new MessageRouter_AddMessageRouterToBrowser_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_AddMessageRouterToBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_AddMessageRouterToBrowser(args.msgRouter, args.bid,resultHandler);
      }
    }

    public static class MessageRouter_RemoveMessageRouterFromBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_RemoveMessageRouterFromBrowser_args, Void> {
      public MessageRouter_RemoveMessageRouterFromBrowser() {
        super("MessageRouter_RemoveMessageRouterFromBrowser");
      }

      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_RemoveMessageRouterFromBrowser_result result = new MessageRouter_RemoveMessageRouterFromBrowser_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_RemoveMessageRouterFromBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_RemoveMessageRouterFromBrowser(args.msgRouter, args.bid,resultHandler);
      }
    }

    public static class MessageRouter_AddHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_AddHandler_args, Void> {
      public MessageRouter_AddHandler() {
        super("MessageRouter_AddHandler");
      }

      @Override
      public MessageRouter_AddHandler_args getEmptyArgsInstance() {
        return new MessageRouter_AddHandler_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_AddHandler_result result = new MessageRouter_AddHandler_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_AddHandler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_AddHandler(args.msgRouter, args.handler, args.first,resultHandler);
      }
    }

    public static class MessageRouter_RemoveHandler<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_RemoveHandler_args, Void> {
      public MessageRouter_RemoveHandler() {
        super("MessageRouter_RemoveHandler");
      }

      @Override
      public MessageRouter_RemoveHandler_args getEmptyArgsInstance() {
        return new MessageRouter_RemoveHandler_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_RemoveHandler_result result = new MessageRouter_RemoveHandler_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_RemoveHandler_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_RemoveHandler(args.msgRouter, args.handler,resultHandler);
      }
    }

    public static class MessageRouter_CancelPending<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MessageRouter_CancelPending_args, Void> {
      public MessageRouter_CancelPending() {
        super("MessageRouter_CancelPending");
      }

      @Override
      public MessageRouter_CancelPending_args getEmptyArgsInstance() {
        return new MessageRouter_CancelPending_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MessageRouter_CancelPending_result result = new MessageRouter_CancelPending_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, MessageRouter_CancelPending_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.MessageRouter_CancelPending(args.msgRouter, args.bid, args.handler,resultHandler);
      }
    }

    public static class QueryCallback_Dispose<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryCallback_Dispose_args, Void> {
      public QueryCallback_Dispose() {
        super("QueryCallback_Dispose");
      }

      @Override
      public QueryCallback_Dispose_args getEmptyArgsInstance() {
        return new QueryCallback_Dispose_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, QueryCallback_Dispose_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.QueryCallback_Dispose(args.qcallback,resultHandler);
      }
    }

    public static class QueryCallback_Success<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryCallback_Success_args, Void> {
      public QueryCallback_Success() {
        super("QueryCallback_Success");
      }

      @Override
      public QueryCallback_Success_args getEmptyArgsInstance() {
        return new QueryCallback_Success_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, QueryCallback_Success_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.QueryCallback_Success(args.qcallback, args.response,resultHandler);
      }
    }

    public static class QueryCallback_Failure<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryCallback_Failure_args, Void> {
      public QueryCallback_Failure() {
        super("QueryCallback_Failure");
      }

      @Override
      public QueryCallback_Failure_args getEmptyArgsInstance() {
        return new QueryCallback_Failure_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
          }
          @Override
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return true;
      }

      @Override
      public void start(I iface, QueryCallback_Failure_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.QueryCallback_Failure(args.qcallback, args.error_code, args.error_message,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_args implements org.apache.thrift.TBase<connect_args, connect_args._Fields>, java.io.Serializable, Cloneable, Comparable<connect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_args");

    private static final org.apache.thrift.protocol.TField BACKWARD_CONNECTION_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("backwardConnectionPort", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CMD_LINE_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("cmdLineArgs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("settings", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_argsTupleSchemeFactory();

    public int backwardConnectionPort; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cmdLineArgs; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> settings; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BACKWARD_CONNECTION_PORT((short)1, "backwardConnectionPort"),
      CMD_LINE_ARGS((short)2, "cmdLineArgs"),
      SETTINGS((short)3, "settings");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BACKWARD_CONNECTION_PORT
            return BACKWARD_CONNECTION_PORT;
          case 2: // CMD_LINE_ARGS
            return CMD_LINE_ARGS;
          case 3: // SETTINGS
            return SETTINGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BACKWARDCONNECTIONPORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BACKWARD_CONNECTION_PORT, new org.apache.thrift.meta_data.FieldMetaData("backwardConnectionPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CMD_LINE_ARGS, new org.apache.thrift.meta_data.FieldMetaData("cmdLineArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("settings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_args.class, metaDataMap);
    }

    public connect_args() {
    }

    public connect_args(
      int backwardConnectionPort,
      java.util.List<java.lang.String> cmdLineArgs,
      java.util.Map<java.lang.String,java.lang.String> settings)
    {
      this();
      this.backwardConnectionPort = backwardConnectionPort;
      setBackwardConnectionPortIsSet(true);
      this.cmdLineArgs = cmdLineArgs;
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_args(connect_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.backwardConnectionPort = other.backwardConnectionPort;
      if (other.isSetCmdLineArgs()) {
        java.util.List<java.lang.String> __this__cmdLineArgs = new java.util.ArrayList<java.lang.String>(other.cmdLineArgs);
        this.cmdLineArgs = __this__cmdLineArgs;
      }
      if (other.isSetSettings()) {
        java.util.Map<java.lang.String,java.lang.String> __this__settings = new java.util.HashMap<java.lang.String,java.lang.String>(other.settings);
        this.settings = __this__settings;
      }
    }

    @Override
    public connect_args deepCopy() {
      return new connect_args(this);
    }

    @Override
    public void clear() {
      setBackwardConnectionPortIsSet(false);
      this.backwardConnectionPort = 0;
      this.cmdLineArgs = null;
      this.settings = null;
    }

    public int getBackwardConnectionPort() {
      return this.backwardConnectionPort;
    }

    public connect_args setBackwardConnectionPort(int backwardConnectionPort) {
      this.backwardConnectionPort = backwardConnectionPort;
      setBackwardConnectionPortIsSet(true);
      return this;
    }

    public void unsetBackwardConnectionPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BACKWARDCONNECTIONPORT_ISSET_ID);
    }

    /** Returns true if field backwardConnectionPort is set (has been assigned a value) and false otherwise */
    public boolean isSetBackwardConnectionPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BACKWARDCONNECTIONPORT_ISSET_ID);
    }

    public void setBackwardConnectionPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BACKWARDCONNECTIONPORT_ISSET_ID, value);
    }

    public int getCmdLineArgsSize() {
      return (this.cmdLineArgs == null) ? 0 : this.cmdLineArgs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getCmdLineArgsIterator() {
      return (this.cmdLineArgs == null) ? null : this.cmdLineArgs.iterator();
    }

    public void addToCmdLineArgs(java.lang.String elem) {
      if (this.cmdLineArgs == null) {
        this.cmdLineArgs = new java.util.ArrayList<java.lang.String>();
      }
      this.cmdLineArgs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getCmdLineArgs() {
      return this.cmdLineArgs;
    }

    public connect_args setCmdLineArgs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cmdLineArgs) {
      this.cmdLineArgs = cmdLineArgs;
      return this;
    }

    public void unsetCmdLineArgs() {
      this.cmdLineArgs = null;
    }

    /** Returns true if field cmdLineArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetCmdLineArgs() {
      return this.cmdLineArgs != null;
    }

    public void setCmdLineArgsIsSet(boolean value) {
      if (!value) {
        this.cmdLineArgs = null;
      }
    }

    public int getSettingsSize() {
      return (this.settings == null) ? 0 : this.settings.size();
    }

    public void putToSettings(java.lang.String key, java.lang.String val) {
      if (this.settings == null) {
        this.settings = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.settings.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSettings() {
      return this.settings;
    }

    public connect_args setSettings(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> settings) {
      this.settings = settings;
      return this;
    }

    public void unsetSettings() {
      this.settings = null;
    }

    /** Returns true if field settings is set (has been assigned a value) and false otherwise */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BACKWARD_CONNECTION_PORT:
        if (value == null) {
          unsetBackwardConnectionPort();
        } else {
          setBackwardConnectionPort((java.lang.Integer)value);
        }
        break;

      case CMD_LINE_ARGS:
        if (value == null) {
          unsetCmdLineArgs();
        } else {
          setCmdLineArgs((java.util.List<java.lang.String>)value);
        }
        break;

      case SETTINGS:
        if (value == null) {
          unsetSettings();
        } else {
          setSettings((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BACKWARD_CONNECTION_PORT:
        return getBackwardConnectionPort();

      case CMD_LINE_ARGS:
        return getCmdLineArgs();

      case SETTINGS:
        return getSettings();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BACKWARD_CONNECTION_PORT:
        return isSetBackwardConnectionPort();
      case CMD_LINE_ARGS:
        return isSetCmdLineArgs();
      case SETTINGS:
        return isSetSettings();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_args)
        return this.equals((connect_args)that);
      return false;
    }

    public boolean equals(connect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_backwardConnectionPort = true;
      boolean that_present_backwardConnectionPort = true;
      if (this_present_backwardConnectionPort || that_present_backwardConnectionPort) {
        if (!(this_present_backwardConnectionPort && that_present_backwardConnectionPort))
          return false;
        if (this.backwardConnectionPort != that.backwardConnectionPort)
          return false;
      }

      boolean this_present_cmdLineArgs = true && this.isSetCmdLineArgs();
      boolean that_present_cmdLineArgs = true && that.isSetCmdLineArgs();
      if (this_present_cmdLineArgs || that_present_cmdLineArgs) {
        if (!(this_present_cmdLineArgs && that_present_cmdLineArgs))
          return false;
        if (!this.cmdLineArgs.equals(that.cmdLineArgs))
          return false;
      }

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + backwardConnectionPort;

      hashCode = hashCode * 8191 + ((isSetCmdLineArgs()) ? 131071 : 524287);
      if (isSetCmdLineArgs())
        hashCode = hashCode * 8191 + cmdLineArgs.hashCode();

      hashCode = hashCode * 8191 + ((isSetSettings()) ? 131071 : 524287);
      if (isSetSettings())
        hashCode = hashCode * 8191 + settings.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(connect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBackwardConnectionPort(), other.isSetBackwardConnectionPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBackwardConnectionPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backwardConnectionPort, other.backwardConnectionPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCmdLineArgs(), other.isSetCmdLineArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCmdLineArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmdLineArgs, other.cmdLineArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetSettings(), other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settings, other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_args(");
      boolean first = true;

      sb.append("backwardConnectionPort:");
      sb.append(this.backwardConnectionPort);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cmdLineArgs:");
      if (this.cmdLineArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.cmdLineArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsStandardScheme getScheme() {
        return new connect_argsStandardScheme();
      }
    }

    private static class connect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BACKWARD_CONNECTION_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.backwardConnectionPort = iprot.readI32();
                struct.setBackwardConnectionPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CMD_LINE_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.cmdLineArgs = new java.util.ArrayList<java.lang.String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.cmdLineArgs.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setCmdLineArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SETTINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                  struct.settings = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map3.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key4;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val5;
                  for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                  {
                    _key4 = iprot.readString();
                    _val5 = iprot.readString();
                    struct.settings.put(_key4, _val5);
                  }
                  iprot.readMapEnd();
                }
                struct.setSettingsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BACKWARD_CONNECTION_PORT_FIELD_DESC);
        oprot.writeI32(struct.backwardConnectionPort);
        oprot.writeFieldEnd();
        if (struct.cmdLineArgs != null) {
          oprot.writeFieldBegin(CMD_LINE_ARGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cmdLineArgs.size()));
            for (java.lang.String _iter7 : struct.cmdLineArgs)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.settings != null) {
          oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.settings.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter8 : struct.settings.entrySet())
            {
              oprot.writeString(_iter8.getKey());
              oprot.writeString(_iter8.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_argsTupleScheme getScheme() {
        return new connect_argsTupleScheme();
      }
    }

    private static class connect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBackwardConnectionPort()) {
          optionals.set(0);
        }
        if (struct.isSetCmdLineArgs()) {
          optionals.set(1);
        }
        if (struct.isSetSettings()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBackwardConnectionPort()) {
          oprot.writeI32(struct.backwardConnectionPort);
        }
        if (struct.isSetCmdLineArgs()) {
          {
            oprot.writeI32(struct.cmdLineArgs.size());
            for (java.lang.String _iter9 : struct.cmdLineArgs)
            {
              oprot.writeString(_iter9);
            }
          }
        }
        if (struct.isSetSettings()) {
          {
            oprot.writeI32(struct.settings.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter10 : struct.settings.entrySet())
            {
              oprot.writeString(_iter10.getKey());
              oprot.writeString(_iter10.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.backwardConnectionPort = iprot.readI32();
          struct.setBackwardConnectionPortIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list11 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.cmdLineArgs = new java.util.ArrayList<java.lang.String>(_list11.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem12;
            for (int _i13 = 0; _i13 < _list11.size; ++_i13)
            {
              _elem12 = iprot.readString();
              struct.cmdLineArgs.add(_elem12);
            }
          }
          struct.setCmdLineArgsIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map14 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.settings = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map14.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key15;
            @org.apache.thrift.annotation.Nullable java.lang.String _val16;
            for (int _i17 = 0; _i17 < _map14.size; ++_i17)
            {
              _key15 = iprot.readString();
              _val16 = iprot.readString();
              struct.settings.put(_key15, _val16);
            }
          }
          struct.setSettingsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class connect_result implements org.apache.thrift.TBase<connect_result, connect_result._Fields>, java.io.Serializable, Cloneable, Comparable<connect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("connect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new connect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new connect_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(connect_result.class, metaDataMap);
    }

    public connect_result() {
    }

    public connect_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public connect_result(connect_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public connect_result deepCopy() {
      return new connect_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public connect_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof connect_result)
        return this.equals((connect_result)that);
      return false;
    }

    public boolean equals(connect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(connect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("connect_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class connect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultStandardScheme getScheme() {
        return new connect_resultStandardScheme();
      }
    }

    private static class connect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<connect_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, connect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class connect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public connect_resultTupleScheme getScheme() {
        return new connect_resultTupleScheme();
      }
    }

    private static class connect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<connect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, connect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class log_args implements org.apache.thrift.TBase<log_args, log_args._Fields>, java.io.Serializable, Cloneable, Comparable<log_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_args.class, metaDataMap);
    }

    public log_args() {
    }

    public log_args(
      java.lang.String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_args(log_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    @Override
    public log_args deepCopy() {
      return new log_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMsg() {
      return this.msg;
    }

    public log_args setMsg(@org.apache.thrift.annotation.Nullable java.lang.String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof log_args)
        return this.equals((log_args)that);
      return false;
    }

    public boolean equals(log_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
      if (isSetMsg())
        hashCode = hashCode * 8191 + msg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(log_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public log_argsStandardScheme getScheme() {
        return new log_argsStandardScheme();
      }
    }

    private static class log_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<log_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, log_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public log_argsTupleScheme getScheme() {
        return new log_argsTupleScheme();
      }
    }

    private static class log_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<log_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class createBrowser_args implements org.apache.thrift.TBase<createBrowser_args, createBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<createBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBrowser_args");

    private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createBrowser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createBrowser_argsTupleSchemeFactory();

    public int cid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CID((short)1, "cid"),
      URL((short)2, "url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CID
            return CID;
          case 2: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBrowser_args.class, metaDataMap);
    }

    public createBrowser_args() {
    }

    public createBrowser_args(
      int cid,
      java.lang.String url)
    {
      this();
      this.cid = cid;
      setCidIsSet(true);
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBrowser_args(createBrowser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.cid = other.cid;
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    @Override
    public createBrowser_args deepCopy() {
      return new createBrowser_args(this);
    }

    @Override
    public void clear() {
      setCidIsSet(false);
      this.cid = 0;
      this.url = null;
    }

    public int getCid() {
      return this.cid;
    }

    public createBrowser_args setCid(int cid) {
      this.cid = cid;
      setCidIsSet(true);
      return this;
    }

    public void unsetCid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
    }

    /** Returns true if field cid is set (has been assigned a value) and false otherwise */
    public boolean isSetCid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
    }

    public void setCidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public createBrowser_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CID:
        if (value == null) {
          unsetCid();
        } else {
          setCid((java.lang.Integer)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CID:
        return getCid();

      case URL:
        return getUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CID:
        return isSetCid();
      case URL:
        return isSetUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createBrowser_args)
        return this.equals((createBrowser_args)that);
      return false;
    }

    public boolean equals(createBrowser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cid = true;
      boolean that_present_cid = true;
      if (this_present_cid || that_present_cid) {
        if (!(this_present_cid && that_present_cid))
          return false;
        if (this.cid != that.cid)
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + cid;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCid(), other.isSetCid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createBrowser_args(");
      boolean first = true;

      sb.append("cid:");
      sb.append(this.cid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBrowser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createBrowser_argsStandardScheme getScheme() {
        return new createBrowser_argsStandardScheme();
      }
    }

    private static class createBrowser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createBrowser_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, createBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cid = iprot.readI32();
                struct.setCidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, createBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI32(struct.cid);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBrowser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createBrowser_argsTupleScheme getScheme() {
        return new createBrowser_argsTupleScheme();
      }
    }

    private static class createBrowser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCid()) {
          oprot.writeI32(struct.cid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cid = iprot.readI32();
          struct.setCidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class createBrowser_result implements org.apache.thrift.TBase<createBrowser_result, createBrowser_result._Fields>, java.io.Serializable, Cloneable, Comparable<createBrowser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createBrowser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createBrowser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createBrowser_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createBrowser_result.class, metaDataMap);
    }

    public createBrowser_result() {
    }

    public createBrowser_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createBrowser_result(createBrowser_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public createBrowser_result deepCopy() {
      return new createBrowser_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public createBrowser_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createBrowser_result)
        return this.equals((createBrowser_result)that);
      return false;
    }

    public boolean equals(createBrowser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(createBrowser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createBrowser_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createBrowser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createBrowser_resultStandardScheme getScheme() {
        return new createBrowser_resultStandardScheme();
      }
    }

    private static class createBrowser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createBrowser_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, createBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, createBrowser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createBrowser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public createBrowser_resultTupleScheme getScheme() {
        return new createBrowser_resultTupleScheme();
      }
    }

    private static class createBrowser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createBrowser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class closeBrowser_args implements org.apache.thrift.TBase<closeBrowser_args, closeBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<closeBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("closeBrowser_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new closeBrowser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new closeBrowser_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(closeBrowser_args.class, metaDataMap);
    }

    public closeBrowser_args() {
    }

    public closeBrowser_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeBrowser_args(closeBrowser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public closeBrowser_args deepCopy() {
      return new closeBrowser_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public closeBrowser_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof closeBrowser_args)
        return this.equals((closeBrowser_args)that);
      return false;
    }

    public boolean equals(closeBrowser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(closeBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("closeBrowser_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class closeBrowser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public closeBrowser_argsStandardScheme getScheme() {
        return new closeBrowser_argsStandardScheme();
      }
    }

    private static class closeBrowser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<closeBrowser_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, closeBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, closeBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class closeBrowser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public closeBrowser_argsTupleScheme getScheme() {
        return new closeBrowser_argsTupleScheme();
      }
    }

    private static class closeBrowser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<closeBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, closeBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, closeBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_Reload_args implements org.apache.thrift.TBase<Browser_Reload_args, Browser_Reload_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_Reload_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_Reload_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_Reload_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_Reload_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_Reload_args.class, metaDataMap);
    }

    public Browser_Reload_args() {
    }

    public Browser_Reload_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_Reload_args(Browser_Reload_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_Reload_args deepCopy() {
      return new Browser_Reload_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_Reload_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_Reload_args)
        return this.equals((Browser_Reload_args)that);
      return false;
    }

    public boolean equals(Browser_Reload_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_Reload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_Reload_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_Reload_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Reload_argsStandardScheme getScheme() {
        return new Browser_Reload_argsStandardScheme();
      }
    }

    private static class Browser_Reload_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_Reload_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_Reload_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_Reload_argsTupleScheme getScheme() {
        return new Browser_Reload_argsTupleScheme();
      }
    }

    private static class Browser_Reload_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_Reload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_Reload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_ReloadIgnoreCache_args implements org.apache.thrift.TBase<Browser_ReloadIgnoreCache_args, Browser_ReloadIgnoreCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_ReloadIgnoreCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_ReloadIgnoreCache_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_ReloadIgnoreCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_ReloadIgnoreCache_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_ReloadIgnoreCache_args.class, metaDataMap);
    }

    public Browser_ReloadIgnoreCache_args() {
    }

    public Browser_ReloadIgnoreCache_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_ReloadIgnoreCache_args(Browser_ReloadIgnoreCache_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_ReloadIgnoreCache_args deepCopy() {
      return new Browser_ReloadIgnoreCache_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_ReloadIgnoreCache_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_ReloadIgnoreCache_args)
        return this.equals((Browser_ReloadIgnoreCache_args)that);
      return false;
    }

    public boolean equals(Browser_ReloadIgnoreCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_ReloadIgnoreCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_ReloadIgnoreCache_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_ReloadIgnoreCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ReloadIgnoreCache_argsStandardScheme getScheme() {
        return new Browser_ReloadIgnoreCache_argsStandardScheme();
      }
    }

    private static class Browser_ReloadIgnoreCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_ReloadIgnoreCache_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_ReloadIgnoreCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ReloadIgnoreCache_argsTupleScheme getScheme() {
        return new Browser_ReloadIgnoreCache_argsTupleScheme();
      }
    }

    private static class Browser_ReloadIgnoreCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_ReloadIgnoreCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_ReloadIgnoreCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_LoadURL_args implements org.apache.thrift.TBase<Browser_LoadURL_args, Browser_LoadURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_LoadURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_LoadURL_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_LoadURL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_LoadURL_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      URL((short)2, "url");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_LoadURL_args.class, metaDataMap);
    }

    public Browser_LoadURL_args() {
    }

    public Browser_LoadURL_args(
      int bid,
      java.lang.String url)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_LoadURL_args(Browser_LoadURL_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetUrl()) {
        this.url = other.url;
      }
    }

    @Override
    public Browser_LoadURL_args deepCopy() {
      return new Browser_LoadURL_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.url = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_LoadURL_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Browser_LoadURL_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case URL:
        return getUrl();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case URL:
        return isSetUrl();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_LoadURL_args)
        return this.equals((Browser_LoadURL_args)that);
      return false;
    }

    public boolean equals(Browser_LoadURL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_LoadURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_LoadURL_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_LoadURL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_LoadURL_argsStandardScheme getScheme() {
        return new Browser_LoadURL_argsStandardScheme();
      }
    }

    private static class Browser_LoadURL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_LoadURL_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_LoadURL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_LoadURL_argsTupleScheme getScheme() {
        return new Browser_LoadURL_argsTupleScheme();
      }
    }

    private static class Browser_LoadURL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_LoadURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_LoadURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetURL_args implements org.apache.thrift.TBase<Browser_GetURL_args, Browser_GetURL_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetURL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetURL_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetURL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetURL_argsTupleSchemeFactory();

    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetURL_args.class, metaDataMap);
    }

    public Browser_GetURL_args() {
    }

    public Browser_GetURL_args(
      int bid)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetURL_args(Browser_GetURL_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
    }

    @Override
    public Browser_GetURL_args deepCopy() {
      return new Browser_GetURL_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_GetURL_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetURL_args)
        return this.equals((Browser_GetURL_args)that);
      return false;
    }

    public boolean equals(Browser_GetURL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetURL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetURL_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetURL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_argsStandardScheme getScheme() {
        return new Browser_GetURL_argsStandardScheme();
      }
    }

    private static class Browser_GetURL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetURL_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetURL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_argsTupleScheme getScheme() {
        return new Browser_GetURL_argsTupleScheme();
      }
    }

    private static class Browser_GetURL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetURL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_GetURL_result implements org.apache.thrift.TBase<Browser_GetURL_result, Browser_GetURL_result._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_GetURL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_GetURL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_GetURL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_GetURL_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_GetURL_result.class, metaDataMap);
    }

    public Browser_GetURL_result() {
    }

    public Browser_GetURL_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_GetURL_result(Browser_GetURL_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public Browser_GetURL_result deepCopy() {
      return new Browser_GetURL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public Browser_GetURL_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_GetURL_result)
        return this.equals((Browser_GetURL_result)that);
      return false;
    }

    public boolean equals(Browser_GetURL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_GetURL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_GetURL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_GetURL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_resultStandardScheme getScheme() {
        return new Browser_GetURL_resultStandardScheme();
      }
    }

    private static class Browser_GetURL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_GetURL_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_GetURL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_GetURL_resultTupleScheme getScheme() {
        return new Browser_GetURL_resultTupleScheme();
      }
    }

    private static class Browser_GetURL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_GetURL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_GetURL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_ExecuteJavaScript_args implements org.apache.thrift.TBase<Browser_ExecuteJavaScript_args, Browser_ExecuteJavaScript_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_ExecuteJavaScript_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_ExecuteJavaScript_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("line", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_ExecuteJavaScript_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_ExecuteJavaScript_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String code; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public int line; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      CODE((short)2, "code"),
      URL((short)3, "url"),
      LINE((short)4, "line");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // CODE
            return CODE;
          case 3: // URL
            return URL;
          case 4: // LINE
            return LINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __LINE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINE, new org.apache.thrift.meta_data.FieldMetaData("line", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_ExecuteJavaScript_args.class, metaDataMap);
    }

    public Browser_ExecuteJavaScript_args() {
    }

    public Browser_ExecuteJavaScript_args(
      int bid,
      java.lang.String code,
      java.lang.String url,
      int line)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.code = code;
      this.url = url;
      this.line = line;
      setLineIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_ExecuteJavaScript_args(Browser_ExecuteJavaScript_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      this.line = other.line;
    }

    @Override
    public Browser_ExecuteJavaScript_args deepCopy() {
      return new Browser_ExecuteJavaScript_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.code = null;
      this.url = null;
      setLineIsSet(false);
      this.line = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_ExecuteJavaScript_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCode() {
      return this.code;
    }

    public Browser_ExecuteJavaScript_args setCode(@org.apache.thrift.annotation.Nullable java.lang.String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Browser_ExecuteJavaScript_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public int getLine() {
      return this.line;
    }

    public Browser_ExecuteJavaScript_args setLine(int line) {
      this.line = line;
      setLineIsSet(true);
      return this;
    }

    public void unsetLine() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    /** Returns true if field line is set (has been assigned a value) and false otherwise */
    public boolean isSetLine() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LINE_ISSET_ID);
    }

    public void setLineIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LINE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((java.lang.String)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case LINE:
        if (value == null) {
          unsetLine();
        } else {
          setLine((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case CODE:
        return getCode();

      case URL:
        return getUrl();

      case LINE:
        return getLine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case CODE:
        return isSetCode();
      case URL:
        return isSetUrl();
      case LINE:
        return isSetLine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_ExecuteJavaScript_args)
        return this.equals((Browser_ExecuteJavaScript_args)that);
      return false;
    }

    public boolean equals(Browser_ExecuteJavaScript_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_line = true;
      boolean that_present_line = true;
      if (this_present_line || that_present_line) {
        if (!(this_present_line && that_present_line))
          return false;
        if (this.line != that.line)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
      if (isSetCode())
        hashCode = hashCode * 8191 + code.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + line;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_ExecuteJavaScript_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCode(), other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLine(), other.isSetLine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.line, other.line);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_ExecuteJavaScript_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("line:");
      sb.append(this.line);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_ExecuteJavaScript_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ExecuteJavaScript_argsStandardScheme getScheme() {
        return new Browser_ExecuteJavaScript_argsStandardScheme();
      }
    }

    private static class Browser_ExecuteJavaScript_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_ExecuteJavaScript_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LINE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.line = iprot.readI32();
                struct.setLineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LINE_FIELD_DESC);
        oprot.writeI32(struct.line);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_ExecuteJavaScript_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_ExecuteJavaScript_argsTupleScheme getScheme() {
        return new Browser_ExecuteJavaScript_argsTupleScheme();
      }
    }

    private static class Browser_ExecuteJavaScript_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_ExecuteJavaScript_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetUrl()) {
          optionals.set(2);
        }
        if (struct.isSetLine()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetLine()) {
          oprot.writeI32(struct.line);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_ExecuteJavaScript_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(3)) {
          struct.line = iprot.readI32();
          struct.setLineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_WasResized_args implements org.apache.thrift.TBase<Browser_WasResized_args, Browser_WasResized_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_WasResized_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_WasResized_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_WasResized_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_WasResized_argsTupleSchemeFactory();

    public int bid; // required
    public int width; // required
    public int height; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      WIDTH((short)2, "width"),
      HEIGHT((short)3, "height");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // WIDTH
            return WIDTH;
          case 3: // HEIGHT
            return HEIGHT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __WIDTH_ISSET_ID = 1;
    private static final int __HEIGHT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_WasResized_args.class, metaDataMap);
    }

    public Browser_WasResized_args() {
    }

    public Browser_WasResized_args(
      int bid,
      int width,
      int height)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.width = width;
      setWidthIsSet(true);
      this.height = height;
      setHeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_WasResized_args(Browser_WasResized_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.width = other.width;
      this.height = other.height;
    }

    @Override
    public Browser_WasResized_args deepCopy() {
      return new Browser_WasResized_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setWidthIsSet(false);
      this.width = 0;
      setHeightIsSet(false);
      this.height = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_WasResized_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getWidth() {
      return this.width;
    }

    public Browser_WasResized_args setWidth(int width) {
      this.width = width;
      setWidthIsSet(true);
      return this;
    }

    public void unsetWidth() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
    }

    /** Returns true if field width is set (has been assigned a value) and false otherwise */
    public boolean isSetWidth() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
    }

    public void setWidthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
    }

    public int getHeight() {
      return this.height;
    }

    public Browser_WasResized_args setHeight(int height) {
      this.height = height;
      setHeightIsSet(true);
      return this;
    }

    public void unsetHeight() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
    }

    /** Returns true if field height is set (has been assigned a value) and false otherwise */
    public boolean isSetHeight() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
    }

    public void setHeightIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case WIDTH:
        if (value == null) {
          unsetWidth();
        } else {
          setWidth((java.lang.Integer)value);
        }
        break;

      case HEIGHT:
        if (value == null) {
          unsetHeight();
        } else {
          setHeight((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case WIDTH:
        return getWidth();

      case HEIGHT:
        return getHeight();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case WIDTH:
        return isSetWidth();
      case HEIGHT:
        return isSetHeight();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_WasResized_args)
        return this.equals((Browser_WasResized_args)that);
      return false;
    }

    public boolean equals(Browser_WasResized_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_width = true;
      boolean that_present_width = true;
      if (this_present_width || that_present_width) {
        if (!(this_present_width && that_present_width))
          return false;
        if (this.width != that.width)
          return false;
      }

      boolean this_present_height = true;
      boolean that_present_height = true;
      if (this_present_height || that_present_height) {
        if (!(this_present_height && that_present_height))
          return false;
        if (this.height != that.height)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + width;

      hashCode = hashCode * 8191 + height;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_WasResized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWidth(), other.isSetWidth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWidth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeight(), other.isSetHeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeight()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_WasResized_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("width:");
      sb.append(this.width);
      first = false;
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_WasResized_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_WasResized_argsStandardScheme getScheme() {
        return new Browser_WasResized_argsStandardScheme();
      }
    }

    private static class Browser_WasResized_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_WasResized_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WIDTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.width = iprot.readI32();
                struct.setWidthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HEIGHT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.height = iprot.readI32();
                struct.setHeightIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WIDTH_FIELD_DESC);
        oprot.writeI32(struct.width);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
        oprot.writeI32(struct.height);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_WasResized_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_WasResized_argsTupleScheme getScheme() {
        return new Browser_WasResized_argsTupleScheme();
      }
    }

    private static class Browser_WasResized_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_WasResized_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetWidth()) {
          optionals.set(1);
        }
        if (struct.isSetHeight()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetWidth()) {
          oprot.writeI32(struct.width);
        }
        if (struct.isSetHeight()) {
          oprot.writeI32(struct.height);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_WasResized_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.width = iprot.readI32();
          struct.setWidthIsSet(true);
        }
        if (incoming.get(2)) {
          struct.height = iprot.readI32();
          struct.setHeightIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SendKeyEvent_args implements org.apache.thrift.TBase<Browser_SendKeyEvent_args, Browser_SendKeyEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SendKeyEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SendKeyEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MODIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiers", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField KEY_CHAR_FIELD_DESC = new org.apache.thrift.protocol.TField("key_char", org.apache.thrift.protocol.TType.I16, (short)4);
    private static final org.apache.thrift.protocol.TField SCAN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("scanCode", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField KEY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("key_code", org.apache.thrift.protocol.TType.I32, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SendKeyEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SendKeyEvent_argsTupleSchemeFactory();

    public int bid; // required
    public int event_type; // required
    public int modifiers; // required
    public short key_char; // required
    public long scanCode; // required
    public int key_code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      EVENT_TYPE((short)2, "event_type"),
      MODIFIERS((short)3, "modifiers"),
      KEY_CHAR((short)4, "key_char"),
      SCAN_CODE((short)5, "scanCode"),
      KEY_CODE((short)6, "key_code");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // EVENT_TYPE
            return EVENT_TYPE;
          case 3: // MODIFIERS
            return MODIFIERS;
          case 4: // KEY_CHAR
            return KEY_CHAR;
          case 5: // SCAN_CODE
            return SCAN_CODE;
          case 6: // KEY_CODE
            return KEY_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __EVENT_TYPE_ISSET_ID = 1;
    private static final int __MODIFIERS_ISSET_ID = 2;
    private static final int __KEY_CHAR_ISSET_ID = 3;
    private static final int __SCANCODE_ISSET_ID = 4;
    private static final int __KEY_CODE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("event_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODIFIERS, new org.apache.thrift.meta_data.FieldMetaData("modifiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.KEY_CHAR, new org.apache.thrift.meta_data.FieldMetaData("key_char", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.SCAN_CODE, new org.apache.thrift.meta_data.FieldMetaData("scanCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.KEY_CODE, new org.apache.thrift.meta_data.FieldMetaData("key_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SendKeyEvent_args.class, metaDataMap);
    }

    public Browser_SendKeyEvent_args() {
    }

    public Browser_SendKeyEvent_args(
      int bid,
      int event_type,
      int modifiers,
      short key_char,
      long scanCode,
      int key_code)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      this.key_char = key_char;
      setKey_charIsSet(true);
      this.scanCode = scanCode;
      setScanCodeIsSet(true);
      this.key_code = key_code;
      setKey_codeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SendKeyEvent_args(Browser_SendKeyEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.event_type = other.event_type;
      this.modifiers = other.modifiers;
      this.key_char = other.key_char;
      this.scanCode = other.scanCode;
      this.key_code = other.key_code;
    }

    @Override
    public Browser_SendKeyEvent_args deepCopy() {
      return new Browser_SendKeyEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setEvent_typeIsSet(false);
      this.event_type = 0;
      setModifiersIsSet(false);
      this.modifiers = 0;
      setKey_charIsSet(false);
      this.key_char = 0;
      setScanCodeIsSet(false);
      this.scanCode = 0;
      setKey_codeIsSet(false);
      this.key_code = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SendKeyEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getEvent_type() {
      return this.event_type;
    }

    public Browser_SendKeyEvent_args setEvent_type(int event_type) {
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      return this;
    }

    public void unsetEvent_type() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    /** Returns true if field event_type is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent_type() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    public void setEvent_typeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID, value);
    }

    public int getModifiers() {
      return this.modifiers;
    }

    public Browser_SendKeyEvent_args setModifiers(int modifiers) {
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      return this;
    }

    public void unsetModifiers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    /** Returns true if field modifiers is set (has been assigned a value) and false otherwise */
    public boolean isSetModifiers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    public void setModifiersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIERS_ISSET_ID, value);
    }

    public short getKey_char() {
      return this.key_char;
    }

    public Browser_SendKeyEvent_args setKey_char(short key_char) {
      this.key_char = key_char;
      setKey_charIsSet(true);
      return this;
    }

    public void unsetKey_char() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_CHAR_ISSET_ID);
    }

    /** Returns true if field key_char is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_char() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_CHAR_ISSET_ID);
    }

    public void setKey_charIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_CHAR_ISSET_ID, value);
    }

    public long getScanCode() {
      return this.scanCode;
    }

    public Browser_SendKeyEvent_args setScanCode(long scanCode) {
      this.scanCode = scanCode;
      setScanCodeIsSet(true);
      return this;
    }

    public void unsetScanCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANCODE_ISSET_ID);
    }

    /** Returns true if field scanCode is set (has been assigned a value) and false otherwise */
    public boolean isSetScanCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANCODE_ISSET_ID);
    }

    public void setScanCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANCODE_ISSET_ID, value);
    }

    public int getKey_code() {
      return this.key_code;
    }

    public Browser_SendKeyEvent_args setKey_code(int key_code) {
      this.key_code = key_code;
      setKey_codeIsSet(true);
      return this;
    }

    public void unsetKey_code() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __KEY_CODE_ISSET_ID);
    }

    /** Returns true if field key_code is set (has been assigned a value) and false otherwise */
    public boolean isSetKey_code() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __KEY_CODE_ISSET_ID);
    }

    public void setKey_codeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __KEY_CODE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case EVENT_TYPE:
        if (value == null) {
          unsetEvent_type();
        } else {
          setEvent_type((java.lang.Integer)value);
        }
        break;

      case MODIFIERS:
        if (value == null) {
          unsetModifiers();
        } else {
          setModifiers((java.lang.Integer)value);
        }
        break;

      case KEY_CHAR:
        if (value == null) {
          unsetKey_char();
        } else {
          setKey_char((java.lang.Short)value);
        }
        break;

      case SCAN_CODE:
        if (value == null) {
          unsetScanCode();
        } else {
          setScanCode((java.lang.Long)value);
        }
        break;

      case KEY_CODE:
        if (value == null) {
          unsetKey_code();
        } else {
          setKey_code((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case EVENT_TYPE:
        return getEvent_type();

      case MODIFIERS:
        return getModifiers();

      case KEY_CHAR:
        return getKey_char();

      case SCAN_CODE:
        return getScanCode();

      case KEY_CODE:
        return getKey_code();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case EVENT_TYPE:
        return isSetEvent_type();
      case MODIFIERS:
        return isSetModifiers();
      case KEY_CHAR:
        return isSetKey_char();
      case SCAN_CODE:
        return isSetScanCode();
      case KEY_CODE:
        return isSetKey_code();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SendKeyEvent_args)
        return this.equals((Browser_SendKeyEvent_args)that);
      return false;
    }

    public boolean equals(Browser_SendKeyEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_event_type = true;
      boolean that_present_event_type = true;
      if (this_present_event_type || that_present_event_type) {
        if (!(this_present_event_type && that_present_event_type))
          return false;
        if (this.event_type != that.event_type)
          return false;
      }

      boolean this_present_modifiers = true;
      boolean that_present_modifiers = true;
      if (this_present_modifiers || that_present_modifiers) {
        if (!(this_present_modifiers && that_present_modifiers))
          return false;
        if (this.modifiers != that.modifiers)
          return false;
      }

      boolean this_present_key_char = true;
      boolean that_present_key_char = true;
      if (this_present_key_char || that_present_key_char) {
        if (!(this_present_key_char && that_present_key_char))
          return false;
        if (this.key_char != that.key_char)
          return false;
      }

      boolean this_present_scanCode = true;
      boolean that_present_scanCode = true;
      if (this_present_scanCode || that_present_scanCode) {
        if (!(this_present_scanCode && that_present_scanCode))
          return false;
        if (this.scanCode != that.scanCode)
          return false;
      }

      boolean this_present_key_code = true;
      boolean that_present_key_code = true;
      if (this_present_key_code || that_present_key_code) {
        if (!(this_present_key_code && that_present_key_code))
          return false;
        if (this.key_code != that.key_code)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + event_type;

      hashCode = hashCode * 8191 + modifiers;

      hashCode = hashCode * 8191 + key_char;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scanCode);

      hashCode = hashCode * 8191 + key_code;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SendKeyEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEvent_type(), other.isSetEvent_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_type, other.event_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetModifiers(), other.isSetModifiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiers, other.modifiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetKey_char(), other.isSetKey_char());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_char()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_char, other.key_char);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetScanCode(), other.isSetScanCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanCode, other.scanCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetKey_code(), other.isSetKey_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_code, other.key_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SendKeyEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("event_type:");
      sb.append(this.event_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modifiers:");
      sb.append(this.modifiers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_char:");
      sb.append(this.key_char);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scanCode:");
      sb.append(this.scanCode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("key_code:");
      sb.append(this.key_code);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SendKeyEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendKeyEvent_argsStandardScheme getScheme() {
        return new Browser_SendKeyEvent_argsStandardScheme();
      }
    }

    private static class Browser_SendKeyEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SendKeyEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.event_type = iprot.readI32();
                struct.setEvent_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODIFIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modifiers = iprot.readI32();
                struct.setModifiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // KEY_CHAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.key_char = iprot.readI16();
                struct.setKey_charIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SCAN_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.scanCode = iprot.readI64();
                struct.setScanCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // KEY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.key_code = iprot.readI32();
                struct.setKey_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.event_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODIFIERS_FIELD_DESC);
        oprot.writeI32(struct.modifiers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KEY_CHAR_FIELD_DESC);
        oprot.writeI16(struct.key_char);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SCAN_CODE_FIELD_DESC);
        oprot.writeI64(struct.scanCode);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(KEY_CODE_FIELD_DESC);
        oprot.writeI32(struct.key_code);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SendKeyEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendKeyEvent_argsTupleScheme getScheme() {
        return new Browser_SendKeyEvent_argsTupleScheme();
      }
    }

    private static class Browser_SendKeyEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SendKeyEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEvent_type()) {
          optionals.set(1);
        }
        if (struct.isSetModifiers()) {
          optionals.set(2);
        }
        if (struct.isSetKey_char()) {
          optionals.set(3);
        }
        if (struct.isSetScanCode()) {
          optionals.set(4);
        }
        if (struct.isSetKey_code()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEvent_type()) {
          oprot.writeI32(struct.event_type);
        }
        if (struct.isSetModifiers()) {
          oprot.writeI32(struct.modifiers);
        }
        if (struct.isSetKey_char()) {
          oprot.writeI16(struct.key_char);
        }
        if (struct.isSetScanCode()) {
          oprot.writeI64(struct.scanCode);
        }
        if (struct.isSetKey_code()) {
          oprot.writeI32(struct.key_code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SendKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.event_type = iprot.readI32();
          struct.setEvent_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modifiers = iprot.readI32();
          struct.setModifiersIsSet(true);
        }
        if (incoming.get(3)) {
          struct.key_char = iprot.readI16();
          struct.setKey_charIsSet(true);
        }
        if (incoming.get(4)) {
          struct.scanCode = iprot.readI64();
          struct.setScanCodeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.key_code = iprot.readI32();
          struct.setKey_codeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SendCefKeyEvent_args implements org.apache.thrift.TBase<Browser_SendCefKeyEvent_args, Browser_SendCefKeyEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SendCefKeyEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SendCefKeyEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SendCefKeyEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SendCefKeyEvent_argsTupleSchemeFactory();

    public int bid; // required
    public @org.apache.thrift.annotation.Nullable CefKeyEvent event; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      EVENT((short)2, "event");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // EVENT
            return EVENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CefKeyEvent.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SendCefKeyEvent_args.class, metaDataMap);
    }

    public Browser_SendCefKeyEvent_args() {
    }

    public Browser_SendCefKeyEvent_args(
      int bid,
      CefKeyEvent event)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.event = event;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SendCefKeyEvent_args(Browser_SendCefKeyEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      if (other.isSetEvent()) {
        this.event = new CefKeyEvent(other.event);
      }
    }

    @Override
    public Browser_SendCefKeyEvent_args deepCopy() {
      return new Browser_SendCefKeyEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      this.event = null;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SendCefKeyEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public CefKeyEvent getEvent() {
      return this.event;
    }

    public Browser_SendCefKeyEvent_args setEvent(@org.apache.thrift.annotation.Nullable CefKeyEvent event) {
      this.event = event;
      return this;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case EVENT:
        if (value == null) {
          unsetEvent();
        } else {
          setEvent((CefKeyEvent)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case EVENT:
        return getEvent();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case EVENT:
        return isSetEvent();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SendCefKeyEvent_args)
        return this.equals((Browser_SendCefKeyEvent_args)that);
      return false;
    }

    public boolean equals(Browser_SendCefKeyEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetEvent()) ? 131071 : 524287);
      if (isSetEvent())
        hashCode = hashCode * 8191 + event.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SendCefKeyEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEvent(), other.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SendCefKeyEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (event != null) {
        event.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SendCefKeyEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendCefKeyEvent_argsStandardScheme getScheme() {
        return new Browser_SendCefKeyEvent_argsStandardScheme();
      }
    }

    private static class Browser_SendCefKeyEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SendCefKeyEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SendCefKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.event = new CefKeyEvent();
                struct.event.read(iprot);
                struct.setEventIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SendCefKeyEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.event != null) {
          oprot.writeFieldBegin(EVENT_FIELD_DESC);
          struct.event.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SendCefKeyEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendCefKeyEvent_argsTupleScheme getScheme() {
        return new Browser_SendCefKeyEvent_argsTupleScheme();
      }
    }

    private static class Browser_SendCefKeyEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SendCefKeyEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SendCefKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEvent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEvent()) {
          struct.event.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SendCefKeyEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.event = new CefKeyEvent();
          struct.event.read(iprot);
          struct.setEventIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SendMouseEvent_args implements org.apache.thrift.TBase<Browser_SendMouseEvent_args, Browser_SendMouseEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SendMouseEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SendMouseEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("event_type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MODIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiers", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField CLICK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("click_count", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField BUTTON_FIELD_DESC = new org.apache.thrift.protocol.TField("button", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SendMouseEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SendMouseEvent_argsTupleSchemeFactory();

    public int bid; // required
    public int event_type; // required
    public int x; // required
    public int y; // required
    public int modifiers; // required
    public int click_count; // required
    public int button; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      EVENT_TYPE((short)2, "event_type"),
      X((short)3, "x"),
      Y((short)4, "y"),
      MODIFIERS((short)5, "modifiers"),
      CLICK_COUNT((short)6, "click_count"),
      BUTTON((short)7, "button");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // EVENT_TYPE
            return EVENT_TYPE;
          case 3: // X
            return X;
          case 4: // Y
            return Y;
          case 5: // MODIFIERS
            return MODIFIERS;
          case 6: // CLICK_COUNT
            return CLICK_COUNT;
          case 7: // BUTTON
            return BUTTON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __EVENT_TYPE_ISSET_ID = 1;
    private static final int __X_ISSET_ID = 2;
    private static final int __Y_ISSET_ID = 3;
    private static final int __MODIFIERS_ISSET_ID = 4;
    private static final int __CLICK_COUNT_ISSET_ID = 5;
    private static final int __BUTTON_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("event_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODIFIERS, new org.apache.thrift.meta_data.FieldMetaData("modifiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLICK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("click_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BUTTON, new org.apache.thrift.meta_data.FieldMetaData("button", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SendMouseEvent_args.class, metaDataMap);
    }

    public Browser_SendMouseEvent_args() {
    }

    public Browser_SendMouseEvent_args(
      int bid,
      int event_type,
      int x,
      int y,
      int modifiers,
      int click_count,
      int button)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      this.x = x;
      setXIsSet(true);
      this.y = y;
      setYIsSet(true);
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      this.click_count = click_count;
      setClick_countIsSet(true);
      this.button = button;
      setButtonIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SendMouseEvent_args(Browser_SendMouseEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.event_type = other.event_type;
      this.x = other.x;
      this.y = other.y;
      this.modifiers = other.modifiers;
      this.click_count = other.click_count;
      this.button = other.button;
    }

    @Override
    public Browser_SendMouseEvent_args deepCopy() {
      return new Browser_SendMouseEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setEvent_typeIsSet(false);
      this.event_type = 0;
      setXIsSet(false);
      this.x = 0;
      setYIsSet(false);
      this.y = 0;
      setModifiersIsSet(false);
      this.modifiers = 0;
      setClick_countIsSet(false);
      this.click_count = 0;
      setButtonIsSet(false);
      this.button = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SendMouseEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getEvent_type() {
      return this.event_type;
    }

    public Browser_SendMouseEvent_args setEvent_type(int event_type) {
      this.event_type = event_type;
      setEvent_typeIsSet(true);
      return this;
    }

    public void unsetEvent_type() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    /** Returns true if field event_type is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent_type() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID);
    }

    public void setEvent_typeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENT_TYPE_ISSET_ID, value);
    }

    public int getX() {
      return this.x;
    }

    public Browser_SendMouseEvent_args setX(int x) {
      this.x = x;
      setXIsSet(true);
      return this;
    }

    public void unsetX() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
    }

    public void setXIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
    }

    public int getY() {
      return this.y;
    }

    public Browser_SendMouseEvent_args setY(int y) {
      this.y = y;
      setYIsSet(true);
      return this;
    }

    public void unsetY() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
    }

    /** Returns true if field y is set (has been assigned a value) and false otherwise */
    public boolean isSetY() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
    }

    public void setYIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
    }

    public int getModifiers() {
      return this.modifiers;
    }

    public Browser_SendMouseEvent_args setModifiers(int modifiers) {
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      return this;
    }

    public void unsetModifiers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    /** Returns true if field modifiers is set (has been assigned a value) and false otherwise */
    public boolean isSetModifiers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    public void setModifiersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIERS_ISSET_ID, value);
    }

    public int getClick_count() {
      return this.click_count;
    }

    public Browser_SendMouseEvent_args setClick_count(int click_count) {
      this.click_count = click_count;
      setClick_countIsSet(true);
      return this;
    }

    public void unsetClick_count() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLICK_COUNT_ISSET_ID);
    }

    /** Returns true if field click_count is set (has been assigned a value) and false otherwise */
    public boolean isSetClick_count() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLICK_COUNT_ISSET_ID);
    }

    public void setClick_countIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLICK_COUNT_ISSET_ID, value);
    }

    public int getButton() {
      return this.button;
    }

    public Browser_SendMouseEvent_args setButton(int button) {
      this.button = button;
      setButtonIsSet(true);
      return this;
    }

    public void unsetButton() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUTTON_ISSET_ID);
    }

    /** Returns true if field button is set (has been assigned a value) and false otherwise */
    public boolean isSetButton() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUTTON_ISSET_ID);
    }

    public void setButtonIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUTTON_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case EVENT_TYPE:
        if (value == null) {
          unsetEvent_type();
        } else {
          setEvent_type((java.lang.Integer)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((java.lang.Integer)value);
        }
        break;

      case Y:
        if (value == null) {
          unsetY();
        } else {
          setY((java.lang.Integer)value);
        }
        break;

      case MODIFIERS:
        if (value == null) {
          unsetModifiers();
        } else {
          setModifiers((java.lang.Integer)value);
        }
        break;

      case CLICK_COUNT:
        if (value == null) {
          unsetClick_count();
        } else {
          setClick_count((java.lang.Integer)value);
        }
        break;

      case BUTTON:
        if (value == null) {
          unsetButton();
        } else {
          setButton((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case EVENT_TYPE:
        return getEvent_type();

      case X:
        return getX();

      case Y:
        return getY();

      case MODIFIERS:
        return getModifiers();

      case CLICK_COUNT:
        return getClick_count();

      case BUTTON:
        return getButton();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case EVENT_TYPE:
        return isSetEvent_type();
      case X:
        return isSetX();
      case Y:
        return isSetY();
      case MODIFIERS:
        return isSetModifiers();
      case CLICK_COUNT:
        return isSetClick_count();
      case BUTTON:
        return isSetButton();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SendMouseEvent_args)
        return this.equals((Browser_SendMouseEvent_args)that);
      return false;
    }

    public boolean equals(Browser_SendMouseEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_event_type = true;
      boolean that_present_event_type = true;
      if (this_present_event_type || that_present_event_type) {
        if (!(this_present_event_type && that_present_event_type))
          return false;
        if (this.event_type != that.event_type)
          return false;
      }

      boolean this_present_x = true;
      boolean that_present_x = true;
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (this.x != that.x)
          return false;
      }

      boolean this_present_y = true;
      boolean that_present_y = true;
      if (this_present_y || that_present_y) {
        if (!(this_present_y && that_present_y))
          return false;
        if (this.y != that.y)
          return false;
      }

      boolean this_present_modifiers = true;
      boolean that_present_modifiers = true;
      if (this_present_modifiers || that_present_modifiers) {
        if (!(this_present_modifiers && that_present_modifiers))
          return false;
        if (this.modifiers != that.modifiers)
          return false;
      }

      boolean this_present_click_count = true;
      boolean that_present_click_count = true;
      if (this_present_click_count || that_present_click_count) {
        if (!(this_present_click_count && that_present_click_count))
          return false;
        if (this.click_count != that.click_count)
          return false;
      }

      boolean this_present_button = true;
      boolean that_present_button = true;
      if (this_present_button || that_present_button) {
        if (!(this_present_button && that_present_button))
          return false;
        if (this.button != that.button)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + event_type;

      hashCode = hashCode * 8191 + x;

      hashCode = hashCode * 8191 + y;

      hashCode = hashCode * 8191 + modifiers;

      hashCode = hashCode * 8191 + click_count;

      hashCode = hashCode * 8191 + button;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SendMouseEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEvent_type(), other.isSetEvent_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_type, other.event_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetX(), other.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetY(), other.isSetY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetModifiers(), other.isSetModifiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiers, other.modifiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetClick_count(), other.isSetClick_count());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClick_count()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.click_count, other.click_count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetButton(), other.isSetButton());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetButton()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.button, other.button);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SendMouseEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("event_type:");
      sb.append(this.event_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      sb.append(this.x);
      first = false;
      if (!first) sb.append(", ");
      sb.append("y:");
      sb.append(this.y);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modifiers:");
      sb.append(this.modifiers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("click_count:");
      sb.append(this.click_count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("button:");
      sb.append(this.button);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SendMouseEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseEvent_argsStandardScheme getScheme() {
        return new Browser_SendMouseEvent_argsStandardScheme();
      }
    }

    private static class Browser_SendMouseEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SendMouseEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EVENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.event_type = iprot.readI32();
                struct.setEvent_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.x = iprot.readI32();
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.y = iprot.readI32();
                struct.setYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MODIFIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modifiers = iprot.readI32();
                struct.setModifiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CLICK_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.click_count = iprot.readI32();
                struct.setClick_countIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // BUTTON
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.button = iprot.readI32();
                struct.setButtonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.event_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(X_FIELD_DESC);
        oprot.writeI32(struct.x);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(Y_FIELD_DESC);
        oprot.writeI32(struct.y);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODIFIERS_FIELD_DESC);
        oprot.writeI32(struct.modifiers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CLICK_COUNT_FIELD_DESC);
        oprot.writeI32(struct.click_count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BUTTON_FIELD_DESC);
        oprot.writeI32(struct.button);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SendMouseEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseEvent_argsTupleScheme getScheme() {
        return new Browser_SendMouseEvent_argsTupleScheme();
      }
    }

    private static class Browser_SendMouseEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SendMouseEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetEvent_type()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        if (struct.isSetY()) {
          optionals.set(3);
        }
        if (struct.isSetModifiers()) {
          optionals.set(4);
        }
        if (struct.isSetClick_count()) {
          optionals.set(5);
        }
        if (struct.isSetButton()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetEvent_type()) {
          oprot.writeI32(struct.event_type);
        }
        if (struct.isSetX()) {
          oprot.writeI32(struct.x);
        }
        if (struct.isSetY()) {
          oprot.writeI32(struct.y);
        }
        if (struct.isSetModifiers()) {
          oprot.writeI32(struct.modifiers);
        }
        if (struct.isSetClick_count()) {
          oprot.writeI32(struct.click_count);
        }
        if (struct.isSetButton()) {
          oprot.writeI32(struct.button);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.event_type = iprot.readI32();
          struct.setEvent_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = iprot.readI32();
          struct.setXIsSet(true);
        }
        if (incoming.get(3)) {
          struct.y = iprot.readI32();
          struct.setYIsSet(true);
        }
        if (incoming.get(4)) {
          struct.modifiers = iprot.readI32();
          struct.setModifiersIsSet(true);
        }
        if (incoming.get(5)) {
          struct.click_count = iprot.readI32();
          struct.setClick_countIsSet(true);
        }
        if (incoming.get(6)) {
          struct.button = iprot.readI32();
          struct.setButtonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Browser_SendMouseWheelEvent_args implements org.apache.thrift.TBase<Browser_SendMouseWheelEvent_args, Browser_SendMouseWheelEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<Browser_SendMouseWheelEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Browser_SendMouseWheelEvent_args");

    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SCROLL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scroll_type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField MODIFIERS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiers", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("delta", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField UNITS_TO_SCROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("units_to_scroll", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Browser_SendMouseWheelEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Browser_SendMouseWheelEvent_argsTupleSchemeFactory();

    public int bid; // required
    public int scroll_type; // required
    public int x; // required
    public int y; // required
    public int modifiers; // required
    public int delta; // required
    public int units_to_scroll; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BID((short)1, "bid"),
      SCROLL_TYPE((short)2, "scroll_type"),
      X((short)3, "x"),
      Y((short)4, "y"),
      MODIFIERS((short)5, "modifiers"),
      DELTA((short)6, "delta"),
      UNITS_TO_SCROLL((short)7, "units_to_scroll");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BID
            return BID;
          case 2: // SCROLL_TYPE
            return SCROLL_TYPE;
          case 3: // X
            return X;
          case 4: // Y
            return Y;
          case 5: // MODIFIERS
            return MODIFIERS;
          case 6: // DELTA
            return DELTA;
          case 7: // UNITS_TO_SCROLL
            return UNITS_TO_SCROLL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private static final int __SCROLL_TYPE_ISSET_ID = 1;
    private static final int __X_ISSET_ID = 2;
    private static final int __Y_ISSET_ID = 3;
    private static final int __MODIFIERS_ISSET_ID = 4;
    private static final int __DELTA_ISSET_ID = 5;
    private static final int __UNITS_TO_SCROLL_ISSET_ID = 6;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SCROLL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("scroll_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODIFIERS, new org.apache.thrift.meta_data.FieldMetaData("modifiers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DELTA, new org.apache.thrift.meta_data.FieldMetaData("delta", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.UNITS_TO_SCROLL, new org.apache.thrift.meta_data.FieldMetaData("units_to_scroll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Browser_SendMouseWheelEvent_args.class, metaDataMap);
    }

    public Browser_SendMouseWheelEvent_args() {
    }

    public Browser_SendMouseWheelEvent_args(
      int bid,
      int scroll_type,
      int x,
      int y,
      int modifiers,
      int delta,
      int units_to_scroll)
    {
      this();
      this.bid = bid;
      setBidIsSet(true);
      this.scroll_type = scroll_type;
      setScroll_typeIsSet(true);
      this.x = x;
      setXIsSet(true);
      this.y = y;
      setYIsSet(true);
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      this.delta = delta;
      setDeltaIsSet(true);
      this.units_to_scroll = units_to_scroll;
      setUnits_to_scrollIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Browser_SendMouseWheelEvent_args(Browser_SendMouseWheelEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.bid = other.bid;
      this.scroll_type = other.scroll_type;
      this.x = other.x;
      this.y = other.y;
      this.modifiers = other.modifiers;
      this.delta = other.delta;
      this.units_to_scroll = other.units_to_scroll;
    }

    @Override
    public Browser_SendMouseWheelEvent_args deepCopy() {
      return new Browser_SendMouseWheelEvent_args(this);
    }

    @Override
    public void clear() {
      setBidIsSet(false);
      this.bid = 0;
      setScroll_typeIsSet(false);
      this.scroll_type = 0;
      setXIsSet(false);
      this.x = 0;
      setYIsSet(false);
      this.y = 0;
      setModifiersIsSet(false);
      this.modifiers = 0;
      setDeltaIsSet(false);
      this.delta = 0;
      setUnits_to_scrollIsSet(false);
      this.units_to_scroll = 0;
    }

    public int getBid() {
      return this.bid;
    }

    public Browser_SendMouseWheelEvent_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    public int getScroll_type() {
      return this.scroll_type;
    }

    public Browser_SendMouseWheelEvent_args setScroll_type(int scroll_type) {
      this.scroll_type = scroll_type;
      setScroll_typeIsSet(true);
      return this;
    }

    public void unsetScroll_type() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCROLL_TYPE_ISSET_ID);
    }

    /** Returns true if field scroll_type is set (has been assigned a value) and false otherwise */
    public boolean isSetScroll_type() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCROLL_TYPE_ISSET_ID);
    }

    public void setScroll_typeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCROLL_TYPE_ISSET_ID, value);
    }

    public int getX() {
      return this.x;
    }

    public Browser_SendMouseWheelEvent_args setX(int x) {
      this.x = x;
      setXIsSet(true);
      return this;
    }

    public void unsetX() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
    }

    public void setXIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
    }

    public int getY() {
      return this.y;
    }

    public Browser_SendMouseWheelEvent_args setY(int y) {
      this.y = y;
      setYIsSet(true);
      return this;
    }

    public void unsetY() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
    }

    /** Returns true if field y is set (has been assigned a value) and false otherwise */
    public boolean isSetY() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
    }

    public void setYIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
    }

    public int getModifiers() {
      return this.modifiers;
    }

    public Browser_SendMouseWheelEvent_args setModifiers(int modifiers) {
      this.modifiers = modifiers;
      setModifiersIsSet(true);
      return this;
    }

    public void unsetModifiers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    /** Returns true if field modifiers is set (has been assigned a value) and false otherwise */
    public boolean isSetModifiers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFIERS_ISSET_ID);
    }

    public void setModifiersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFIERS_ISSET_ID, value);
    }

    public int getDelta() {
      return this.delta;
    }

    public Browser_SendMouseWheelEvent_args setDelta(int delta) {
      this.delta = delta;
      setDeltaIsSet(true);
      return this;
    }

    public void unsetDelta() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    /** Returns true if field delta is set (has been assigned a value) and false otherwise */
    public boolean isSetDelta() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    public void setDeltaIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELTA_ISSET_ID, value);
    }

    public int getUnits_to_scroll() {
      return this.units_to_scroll;
    }

    public Browser_SendMouseWheelEvent_args setUnits_to_scroll(int units_to_scroll) {
      this.units_to_scroll = units_to_scroll;
      setUnits_to_scrollIsSet(true);
      return this;
    }

    public void unsetUnits_to_scroll() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNITS_TO_SCROLL_ISSET_ID);
    }

    /** Returns true if field units_to_scroll is set (has been assigned a value) and false otherwise */
    public boolean isSetUnits_to_scroll() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNITS_TO_SCROLL_ISSET_ID);
    }

    public void setUnits_to_scrollIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNITS_TO_SCROLL_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case SCROLL_TYPE:
        if (value == null) {
          unsetScroll_type();
        } else {
          setScroll_type((java.lang.Integer)value);
        }
        break;

      case X:
        if (value == null) {
          unsetX();
        } else {
          setX((java.lang.Integer)value);
        }
        break;

      case Y:
        if (value == null) {
          unsetY();
        } else {
          setY((java.lang.Integer)value);
        }
        break;

      case MODIFIERS:
        if (value == null) {
          unsetModifiers();
        } else {
          setModifiers((java.lang.Integer)value);
        }
        break;

      case DELTA:
        if (value == null) {
          unsetDelta();
        } else {
          setDelta((java.lang.Integer)value);
        }
        break;

      case UNITS_TO_SCROLL:
        if (value == null) {
          unsetUnits_to_scroll();
        } else {
          setUnits_to_scroll((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BID:
        return getBid();

      case SCROLL_TYPE:
        return getScroll_type();

      case X:
        return getX();

      case Y:
        return getY();

      case MODIFIERS:
        return getModifiers();

      case DELTA:
        return getDelta();

      case UNITS_TO_SCROLL:
        return getUnits_to_scroll();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BID:
        return isSetBid();
      case SCROLL_TYPE:
        return isSetScroll_type();
      case X:
        return isSetX();
      case Y:
        return isSetY();
      case MODIFIERS:
        return isSetModifiers();
      case DELTA:
        return isSetDelta();
      case UNITS_TO_SCROLL:
        return isSetUnits_to_scroll();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Browser_SendMouseWheelEvent_args)
        return this.equals((Browser_SendMouseWheelEvent_args)that);
      return false;
    }

    public boolean equals(Browser_SendMouseWheelEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_scroll_type = true;
      boolean that_present_scroll_type = true;
      if (this_present_scroll_type || that_present_scroll_type) {
        if (!(this_present_scroll_type && that_present_scroll_type))
          return false;
        if (this.scroll_type != that.scroll_type)
          return false;
      }

      boolean this_present_x = true;
      boolean that_present_x = true;
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (this.x != that.x)
          return false;
      }

      boolean this_present_y = true;
      boolean that_present_y = true;
      if (this_present_y || that_present_y) {
        if (!(this_present_y && that_present_y))
          return false;
        if (this.y != that.y)
          return false;
      }

      boolean this_present_modifiers = true;
      boolean that_present_modifiers = true;
      if (this_present_modifiers || that_present_modifiers) {
        if (!(this_present_modifiers && that_present_modifiers))
          return false;
        if (this.modifiers != that.modifiers)
          return false;
      }

      boolean this_present_delta = true;
      boolean that_present_delta = true;
      if (this_present_delta || that_present_delta) {
        if (!(this_present_delta && that_present_delta))
          return false;
        if (this.delta != that.delta)
          return false;
      }

      boolean this_present_units_to_scroll = true;
      boolean that_present_units_to_scroll = true;
      if (this_present_units_to_scroll || that_present_units_to_scroll) {
        if (!(this_present_units_to_scroll && that_present_units_to_scroll))
          return false;
        if (this.units_to_scroll != that.units_to_scroll)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + scroll_type;

      hashCode = hashCode * 8191 + x;

      hashCode = hashCode * 8191 + y;

      hashCode = hashCode * 8191 + modifiers;

      hashCode = hashCode * 8191 + delta;

      hashCode = hashCode * 8191 + units_to_scroll;

      return hashCode;
    }

    @Override
    public int compareTo(Browser_SendMouseWheelEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetScroll_type(), other.isSetScroll_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScroll_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scroll_type, other.scroll_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetX(), other.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetY(), other.isSetY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetY()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetModifiers(), other.isSetModifiers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifiers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiers, other.modifiers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDelta(), other.isSetDelta());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelta()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta, other.delta);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnits_to_scroll(), other.isSetUnits_to_scroll());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnits_to_scroll()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units_to_scroll, other.units_to_scroll);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Browser_SendMouseWheelEvent_args(");
      boolean first = true;

      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scroll_type:");
      sb.append(this.scroll_type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      sb.append(this.x);
      first = false;
      if (!first) sb.append(", ");
      sb.append("y:");
      sb.append(this.y);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modifiers:");
      sb.append(this.modifiers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("delta:");
      sb.append(this.delta);
      first = false;
      if (!first) sb.append(", ");
      sb.append("units_to_scroll:");
      sb.append(this.units_to_scroll);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Browser_SendMouseWheelEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseWheelEvent_argsStandardScheme getScheme() {
        return new Browser_SendMouseWheelEvent_argsStandardScheme();
      }
    }

    private static class Browser_SendMouseWheelEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Browser_SendMouseWheelEvent_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCROLL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.scroll_type = iprot.readI32();
                struct.setScroll_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // X
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.x = iprot.readI32();
                struct.setXIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // Y
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.y = iprot.readI32();
                struct.setYIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MODIFIERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.modifiers = iprot.readI32();
                struct.setModifiersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DELTA
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.delta = iprot.readI32();
                struct.setDeltaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // UNITS_TO_SCROLL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.units_to_scroll = iprot.readI32();
                struct.setUnits_to_scrollIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SCROLL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.scroll_type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(X_FIELD_DESC);
        oprot.writeI32(struct.x);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(Y_FIELD_DESC);
        oprot.writeI32(struct.y);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODIFIERS_FIELD_DESC);
        oprot.writeI32(struct.modifiers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(DELTA_FIELD_DESC);
        oprot.writeI32(struct.delta);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(UNITS_TO_SCROLL_FIELD_DESC);
        oprot.writeI32(struct.units_to_scroll);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Browser_SendMouseWheelEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Browser_SendMouseWheelEvent_argsTupleScheme getScheme() {
        return new Browser_SendMouseWheelEvent_argsTupleScheme();
      }
    }

    private static class Browser_SendMouseWheelEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Browser_SendMouseWheelEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBid()) {
          optionals.set(0);
        }
        if (struct.isSetScroll_type()) {
          optionals.set(1);
        }
        if (struct.isSetX()) {
          optionals.set(2);
        }
        if (struct.isSetY()) {
          optionals.set(3);
        }
        if (struct.isSetModifiers()) {
          optionals.set(4);
        }
        if (struct.isSetDelta()) {
          optionals.set(5);
        }
        if (struct.isSetUnits_to_scroll()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetScroll_type()) {
          oprot.writeI32(struct.scroll_type);
        }
        if (struct.isSetX()) {
          oprot.writeI32(struct.x);
        }
        if (struct.isSetY()) {
          oprot.writeI32(struct.y);
        }
        if (struct.isSetModifiers()) {
          oprot.writeI32(struct.modifiers);
        }
        if (struct.isSetDelta()) {
          oprot.writeI32(struct.delta);
        }
        if (struct.isSetUnits_to_scroll()) {
          oprot.writeI32(struct.units_to_scroll);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Browser_SendMouseWheelEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.scroll_type = iprot.readI32();
          struct.setScroll_typeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.x = iprot.readI32();
          struct.setXIsSet(true);
        }
        if (incoming.get(3)) {
          struct.y = iprot.readI32();
          struct.setYIsSet(true);
        }
        if (incoming.get(4)) {
          struct.modifiers = iprot.readI32();
          struct.setModifiersIsSet(true);
        }
        if (incoming.get(5)) {
          struct.delta = iprot.readI32();
          struct.setDeltaIsSet(true);
        }
        if (incoming.get(6)) {
          struct.units_to_scroll = iprot.readI32();
          struct.setUnits_to_scrollIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Update_args implements org.apache.thrift.TBase<Request_Update_args, Request_Update_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Update_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Update_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Update_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Update_args.class, metaDataMap);
    }

    public Request_Update_args() {
    }

    public Request_Update_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Update_args(Request_Update_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public Request_Update_args deepCopy() {
      return new Request_Update_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_Update_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Update_args)
        return this.equals((Request_Update_args)that);
      return false;
    }

    public boolean equals(Request_Update_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_Update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Update_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Update_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_argsStandardScheme getScheme() {
        return new Request_Update_argsStandardScheme();
      }
    }

    private static class Request_Update_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Update_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Update_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_argsTupleScheme getScheme() {
        return new Request_Update_argsTupleScheme();
      }
    }

    private static class Request_Update_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Update_result implements org.apache.thrift.TBase<Request_Update_result, Request_Update_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Update_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Update_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Update_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Update_result.class, metaDataMap);
    }

    public Request_Update_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Update_result(Request_Update_result other) {
    }

    @Override
    public Request_Update_result deepCopy() {
      return new Request_Update_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Update_result)
        return this.equals((Request_Update_result)that);
      return false;
    }

    public boolean equals(Request_Update_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_Update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Update_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Update_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_resultStandardScheme getScheme() {
        return new Request_Update_resultStandardScheme();
      }
    }

    private static class Request_Update_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Update_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Update_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Update_resultTupleScheme getScheme() {
        return new Request_Update_resultTupleScheme();
      }
    }

    private static class Request_Update_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetPostData_args implements org.apache.thrift.TBase<Request_GetPostData_args, Request_GetPostData_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetPostData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetPostData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetPostData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetPostData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetPostData_args.class, metaDataMap);
    }

    public Request_GetPostData_args() {
    }

    public Request_GetPostData_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetPostData_args(Request_GetPostData_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public Request_GetPostData_args deepCopy() {
      return new Request_GetPostData_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_GetPostData_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetPostData_args)
        return this.equals((Request_GetPostData_args)that);
      return false;
    }

    public boolean equals(Request_GetPostData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetPostData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetPostData_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetPostData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_argsStandardScheme getScheme() {
        return new Request_GetPostData_argsStandardScheme();
      }
    }

    private static class Request_GetPostData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetPostData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetPostData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_argsTupleScheme getScheme() {
        return new Request_GetPostData_argsTupleScheme();
      }
    }

    private static class Request_GetPostData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetPostData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetPostData_result implements org.apache.thrift.TBase<Request_GetPostData_result, Request_GetPostData_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetPostData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetPostData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetPostData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetPostData_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.PostData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetPostData_result.class, metaDataMap);
    }

    public Request_GetPostData_result() {
    }

    public Request_GetPostData_result(
      com.jetbrains.cef.remote.thrift_codegen.PostData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetPostData_result(Request_GetPostData_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.PostData(other.success);
      }
    }

    @Override
    public Request_GetPostData_result deepCopy() {
      return new Request_GetPostData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.PostData getSuccess() {
      return this.success;
    }

    public Request_GetPostData_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.PostData)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetPostData_result)
        return this.equals((Request_GetPostData_result)that);
      return false;
    }

    public boolean equals(Request_GetPostData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetPostData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetPostData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetPostData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_resultStandardScheme getScheme() {
        return new Request_GetPostData_resultStandardScheme();
      }
    }

    private static class Request_GetPostData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetPostData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.PostData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetPostData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetPostData_resultTupleScheme getScheme() {
        return new Request_GetPostData_resultTupleScheme();
      }
    }

    private static class Request_GetPostData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetPostData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.PostData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetPostData_args implements org.apache.thrift.TBase<Request_SetPostData_args, Request_SetPostData_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetPostData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetPostData_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField POST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("postData", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetPostData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetPostData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      POST_DATA((short)2, "postData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // POST_DATA
            return POST_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.POST_DATA, new org.apache.thrift.meta_data.FieldMetaData("postData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.PostData.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetPostData_args.class, metaDataMap);
    }

    public Request_SetPostData_args() {
    }

    public Request_SetPostData_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      com.jetbrains.cef.remote.thrift_codegen.PostData postData)
    {
      this();
      this.request = request;
      this.postData = postData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetPostData_args(Request_SetPostData_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetPostData()) {
        this.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData(other.postData);
      }
    }

    @Override
    public Request_SetPostData_args deepCopy() {
      return new Request_SetPostData_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.postData = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_SetPostData_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.PostData getPostData() {
      return this.postData;
    }

    public Request_SetPostData_args setPostData(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData) {
      this.postData = postData;
      return this;
    }

    public void unsetPostData() {
      this.postData = null;
    }

    /** Returns true if field postData is set (has been assigned a value) and false otherwise */
    public boolean isSetPostData() {
      return this.postData != null;
    }

    public void setPostDataIsSet(boolean value) {
      if (!value) {
        this.postData = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case POST_DATA:
        if (value == null) {
          unsetPostData();
        } else {
          setPostData((com.jetbrains.cef.remote.thrift_codegen.PostData)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case POST_DATA:
        return getPostData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case POST_DATA:
        return isSetPostData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetPostData_args)
        return this.equals((Request_SetPostData_args)that);
      return false;
    }

    public boolean equals(Request_SetPostData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_postData = true && this.isSetPostData();
      boolean that_present_postData = true && that.isSetPostData();
      if (this_present_postData || that_present_postData) {
        if (!(this_present_postData && that_present_postData))
          return false;
        if (!this.postData.equals(that.postData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetPostData()) ? 131071 : 524287);
      if (isSetPostData())
        hashCode = hashCode * 8191 + postData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetPostData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPostData(), other.isSetPostData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postData, other.postData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetPostData_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("postData:");
      if (this.postData == null) {
        sb.append("null");
      } else {
        sb.append(this.postData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (postData != null) {
        postData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetPostData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_argsStandardScheme getScheme() {
        return new Request_SetPostData_argsStandardScheme();
      }
    }

    private static class Request_SetPostData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetPostData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
                struct.postData.read(iprot);
                struct.setPostDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.postData != null) {
          oprot.writeFieldBegin(POST_DATA_FIELD_DESC);
          struct.postData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetPostData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_argsTupleScheme getScheme() {
        return new Request_SetPostData_argsTupleScheme();
      }
    }

    private static class Request_SetPostData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetPostData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetPostData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetPostData()) {
          struct.postData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
          struct.postData.read(iprot);
          struct.setPostDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetPostData_result implements org.apache.thrift.TBase<Request_SetPostData_result, Request_SetPostData_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetPostData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetPostData_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetPostData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetPostData_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetPostData_result.class, metaDataMap);
    }

    public Request_SetPostData_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetPostData_result(Request_SetPostData_result other) {
    }

    @Override
    public Request_SetPostData_result deepCopy() {
      return new Request_SetPostData_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetPostData_result)
        return this.equals((Request_SetPostData_result)that);
      return false;
    }

    public boolean equals(Request_SetPostData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetPostData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetPostData_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetPostData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_resultStandardScheme getScheme() {
        return new Request_SetPostData_resultStandardScheme();
      }
    }

    private static class Request_SetPostData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetPostData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetPostData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetPostData_resultTupleScheme getScheme() {
        return new Request_SetPostData_resultTupleScheme();
      }
    }

    private static class Request_SetPostData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetPostData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetPostData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderByName_args implements org.apache.thrift.TBase<Request_GetHeaderByName_args, Request_GetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      NAME((short)2, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderByName_args.class, metaDataMap);
    }

    public Request_GetHeaderByName_args() {
    }

    public Request_GetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.lang.String name)
    {
      this();
      this.request = request;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderByName_args(Request_GetHeaderByName_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public Request_GetHeaderByName_args deepCopy() {
      return new Request_GetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.name = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_GetHeaderByName_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Request_GetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderByName_args)
        return this.equals((Request_GetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Request_GetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderByName_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_argsStandardScheme getScheme() {
        return new Request_GetHeaderByName_argsStandardScheme();
      }
    }

    private static class Request_GetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_argsTupleScheme getScheme() {
        return new Request_GetHeaderByName_argsTupleScheme();
      }
    }

    private static class Request_GetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderByName_result implements org.apache.thrift.TBase<Request_GetHeaderByName_result, Request_GetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderByName_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderByName_result.class, metaDataMap);
    }

    public Request_GetHeaderByName_result() {
    }

    public Request_GetHeaderByName_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderByName_result(Request_GetHeaderByName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public Request_GetHeaderByName_result deepCopy() {
      return new Request_GetHeaderByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public Request_GetHeaderByName_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderByName_result)
        return this.equals((Request_GetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Request_GetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_resultStandardScheme getScheme() {
        return new Request_GetHeaderByName_resultStandardScheme();
      }
    }

    private static class Request_GetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderByName_resultTupleScheme getScheme() {
        return new Request_GetHeaderByName_resultTupleScheme();
      }
    }

    private static class Request_GetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderByName_args implements org.apache.thrift.TBase<Request_SetHeaderByName_args, Request_SetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("overwrite", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String value; // required
    public boolean overwrite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      NAME((short)2, "name"),
      VALUE((short)3, "value"),
      OVERWRITE((short)4, "overwrite");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // NAME
            return NAME;
          case 3: // VALUE
            return VALUE;
          case 4: // OVERWRITE
            return OVERWRITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OVERWRITE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("overwrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderByName_args.class, metaDataMap);
    }

    public Request_SetHeaderByName_args() {
    }

    public Request_SetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.lang.String name,
      java.lang.String value,
      boolean overwrite)
    {
      this();
      this.request = request;
      this.name = name;
      this.value = value;
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderByName_args(Request_SetHeaderByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      this.overwrite = other.overwrite;
    }

    @Override
    public Request_SetHeaderByName_args deepCopy() {
      return new Request_SetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.name = null;
      this.value = null;
      setOverwriteIsSet(false);
      this.overwrite = false;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_SetHeaderByName_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Request_SetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getValue() {
      return this.value;
    }

    public Request_SetHeaderByName_args setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean isOverwrite() {
      return this.overwrite;
    }

    public Request_SetHeaderByName_args setOverwrite(boolean overwrite) {
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
      return this;
    }

    public void unsetOverwrite() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    /** Returns true if field overwrite is set (has been assigned a value) and false otherwise */
    public boolean isSetOverwrite() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    public void setOverwriteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERWRITE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.String)value);
        }
        break;

      case OVERWRITE:
        if (value == null) {
          unsetOverwrite();
        } else {
          setOverwrite((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case NAME:
        return getName();

      case VALUE:
        return getValue();

      case OVERWRITE:
        return isOverwrite();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case NAME:
        return isSetName();
      case VALUE:
        return isSetValue();
      case OVERWRITE:
        return isSetOverwrite();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderByName_args)
        return this.equals((Request_SetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Request_SetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_overwrite = true;
      boolean that_present_overwrite = true;
      if (this_present_overwrite || that_present_overwrite) {
        if (!(this_present_overwrite && that_present_overwrite))
          return false;
        if (this.overwrite != that.overwrite)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      hashCode = hashCode * 8191 + ((overwrite) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOverwrite(), other.isSetOverwrite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverwrite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overwrite, other.overwrite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderByName_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("overwrite:");
      sb.append(this.overwrite);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_argsStandardScheme getScheme() {
        return new Request_SetHeaderByName_argsStandardScheme();
      }
    }

    private static class Request_SetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OVERWRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.overwrite = iprot.readBool();
                struct.setOverwriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OVERWRITE_FIELD_DESC);
        oprot.writeBool(struct.overwrite);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_argsTupleScheme getScheme() {
        return new Request_SetHeaderByName_argsTupleScheme();
      }
    }

    private static class Request_SetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        if (struct.isSetOverwrite()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetOverwrite()) {
          oprot.writeBool(struct.overwrite);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.overwrite = iprot.readBool();
          struct.setOverwriteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderByName_result implements org.apache.thrift.TBase<Request_SetHeaderByName_result, Request_SetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderByName_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderByName_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderByName_result.class, metaDataMap);
    }

    public Request_SetHeaderByName_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderByName_result(Request_SetHeaderByName_result other) {
    }

    @Override
    public Request_SetHeaderByName_result deepCopy() {
      return new Request_SetHeaderByName_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderByName_result)
        return this.equals((Request_SetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Request_SetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderByName_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_resultStandardScheme getScheme() {
        return new Request_SetHeaderByName_resultStandardScheme();
      }
    }

    private static class Request_SetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderByName_resultTupleScheme getScheme() {
        return new Request_SetHeaderByName_resultTupleScheme();
      }
    }

    private static class Request_SetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderMap_args implements org.apache.thrift.TBase<Request_GetHeaderMap_args, Request_GetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderMap_args.class, metaDataMap);
    }

    public Request_GetHeaderMap_args() {
    }

    public Request_GetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderMap_args(Request_GetHeaderMap_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
    }

    @Override
    public Request_GetHeaderMap_args deepCopy() {
      return new Request_GetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_GetHeaderMap_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderMap_args)
        return this.equals((Request_GetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Request_GetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderMap_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_argsStandardScheme getScheme() {
        return new Request_GetHeaderMap_argsStandardScheme();
      }
    }

    private static class Request_GetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_argsTupleScheme getScheme() {
        return new Request_GetHeaderMap_argsTupleScheme();
      }
    }

    private static class Request_GetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_GetHeaderMap_result implements org.apache.thrift.TBase<Request_GetHeaderMap_result, Request_GetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_GetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_GetHeaderMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_GetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_GetHeaderMap_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_GetHeaderMap_result.class, metaDataMap);
    }

    public Request_GetHeaderMap_result() {
    }

    public Request_GetHeaderMap_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_GetHeaderMap_result(Request_GetHeaderMap_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    @Override
    public Request_GetHeaderMap_result deepCopy() {
      return new Request_GetHeaderMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public Request_GetHeaderMap_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_GetHeaderMap_result)
        return this.equals((Request_GetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Request_GetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_GetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_GetHeaderMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_GetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_resultStandardScheme getScheme() {
        return new Request_GetHeaderMap_resultStandardScheme();
      }
    }

    private static class Request_GetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_GetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map18.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key19;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val20;
                  for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                  {
                    _key19 = iprot.readString();
                    _val20 = iprot.readString();
                    struct.success.put(_key19, _val20);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter22 : struct.success.entrySet())
            {
              oprot.writeString(_iter22.getKey());
              oprot.writeString(_iter22.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_GetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_GetHeaderMap_resultTupleScheme getScheme() {
        return new Request_GetHeaderMap_resultTupleScheme();
      }
    }

    private static class Request_GetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_GetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter23 : struct.success.entrySet())
            {
              oprot.writeString(_iter23.getKey());
              oprot.writeString(_iter23.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map24.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key25;
            @org.apache.thrift.annotation.Nullable java.lang.String _val26;
            for (int _i27 = 0; _i27 < _map24.size; ++_i27)
            {
              _key25 = iprot.readString();
              _val26 = iprot.readString();
              struct.success.put(_key25, _val26);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderMap_args implements org.apache.thrift.TBase<Request_SetHeaderMap_args, Request_SetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HEADER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("headerMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      HEADER_MAP((short)2, "headerMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // HEADER_MAP
            return HEADER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HEADER_MAP, new org.apache.thrift.meta_data.FieldMetaData("headerMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderMap_args.class, metaDataMap);
    }

    public Request_SetHeaderMap_args() {
    }

    public Request_SetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.util.Map<java.lang.String,java.lang.String> headerMap)
    {
      this();
      this.request = request;
      this.headerMap = headerMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderMap_args(Request_SetHeaderMap_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetHeaderMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.headerMap);
        this.headerMap = __this__headerMap;
      }
    }

    @Override
    public Request_SetHeaderMap_args deepCopy() {
      return new Request_SetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.headerMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_SetHeaderMap_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public int getHeaderMapSize() {
      return (this.headerMap == null) ? 0 : this.headerMap.size();
    }

    public void putToHeaderMap(java.lang.String key, java.lang.String val) {
      if (this.headerMap == null) {
        this.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.headerMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getHeaderMap() {
      return this.headerMap;
    }

    public Request_SetHeaderMap_args setHeaderMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap) {
      this.headerMap = headerMap;
      return this;
    }

    public void unsetHeaderMap() {
      this.headerMap = null;
    }

    /** Returns true if field headerMap is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderMap() {
      return this.headerMap != null;
    }

    public void setHeaderMapIsSet(boolean value) {
      if (!value) {
        this.headerMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HEADER_MAP:
        if (value == null) {
          unsetHeaderMap();
        } else {
          setHeaderMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case HEADER_MAP:
        return getHeaderMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case HEADER_MAP:
        return isSetHeaderMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderMap_args)
        return this.equals((Request_SetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Request_SetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_headerMap = true && this.isSetHeaderMap();
      boolean that_present_headerMap = true && that.isSetHeaderMap();
      if (this_present_headerMap || that_present_headerMap) {
        if (!(this_present_headerMap && that_present_headerMap))
          return false;
        if (!this.headerMap.equals(that.headerMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaderMap()) ? 131071 : 524287);
      if (isSetHeaderMap())
        hashCode = hashCode * 8191 + headerMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeaderMap(), other.isSetHeaderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerMap, other.headerMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderMap_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headerMap:");
      if (this.headerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.headerMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_argsStandardScheme getScheme() {
        return new Request_SetHeaderMap_argsStandardScheme();
      }
    }

    private static class Request_SetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HEADER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
                  struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map28.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key29;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val30;
                  for (int _i31 = 0; _i31 < _map28.size; ++_i31)
                  {
                    _key29 = iprot.readString();
                    _val30 = iprot.readString();
                    struct.headerMap.put(_key29, _val30);
                  }
                  iprot.readMapEnd();
                }
                struct.setHeaderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.headerMap != null) {
          oprot.writeFieldBegin(HEADER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headerMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter32 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter32.getKey());
              oprot.writeString(_iter32.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_argsTupleScheme getScheme() {
        return new Request_SetHeaderMap_argsTupleScheme();
      }
    }

    private static class Request_SetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetHeaderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetHeaderMap()) {
          {
            oprot.writeI32(struct.headerMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter33 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter33.getKey());
              oprot.writeString(_iter33.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map34.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key35;
            @org.apache.thrift.annotation.Nullable java.lang.String _val36;
            for (int _i37 = 0; _i37 < _map34.size; ++_i37)
            {
              _key35 = iprot.readString();
              _val36 = iprot.readString();
              struct.headerMap.put(_key35, _val36);
            }
          }
          struct.setHeaderMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_SetHeaderMap_result implements org.apache.thrift.TBase<Request_SetHeaderMap_result, Request_SetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_SetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_SetHeaderMap_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_SetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_SetHeaderMap_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_SetHeaderMap_result.class, metaDataMap);
    }

    public Request_SetHeaderMap_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_SetHeaderMap_result(Request_SetHeaderMap_result other) {
    }

    @Override
    public Request_SetHeaderMap_result deepCopy() {
      return new Request_SetHeaderMap_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_SetHeaderMap_result)
        return this.equals((Request_SetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Request_SetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_SetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_SetHeaderMap_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_SetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_resultStandardScheme getScheme() {
        return new Request_SetHeaderMap_resultStandardScheme();
      }
    }

    private static class Request_SetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_SetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_SetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_SetHeaderMap_resultTupleScheme getScheme() {
        return new Request_SetHeaderMap_resultTupleScheme();
      }
    }

    private static class Request_SetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_SetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Set_args implements org.apache.thrift.TBase<Request_Set_args, Request_Set_args._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Set_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Set_args");

    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField POST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("postData", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField HEADER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("headerMap", org.apache.thrift.protocol.TType.MAP, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Set_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Set_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String url; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String method; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST((short)1, "request"),
      URL((short)2, "url"),
      METHOD((short)3, "method"),
      POST_DATA((short)4, "postData"),
      HEADER_MAP((short)5, "headerMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          case 2: // URL
            return URL;
          case 3: // METHOD
            return METHOD;
          case 4: // POST_DATA
            return POST_DATA;
          case 5: // HEADER_MAP
            return HEADER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_DATA, new org.apache.thrift.meta_data.FieldMetaData("postData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.PostData.class)));
      tmpMap.put(_Fields.HEADER_MAP, new org.apache.thrift.meta_data.FieldMetaData("headerMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Set_args.class, metaDataMap);
    }

    public Request_Set_args() {
    }

    public Request_Set_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject request,
      java.lang.String url,
      java.lang.String method,
      com.jetbrains.cef.remote.thrift_codegen.PostData postData,
      java.util.Map<java.lang.String,java.lang.String> headerMap)
    {
      this();
      this.request = request;
      this.url = url;
      this.method = method;
      this.postData = postData;
      this.headerMap = headerMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Set_args(Request_Set_args other) {
      if (other.isSetRequest()) {
        this.request = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.request);
      }
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
      if (other.isSetPostData()) {
        this.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData(other.postData);
      }
      if (other.isSetHeaderMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.headerMap);
        this.headerMap = __this__headerMap;
      }
    }

    @Override
    public Request_Set_args deepCopy() {
      return new Request_Set_args(this);
    }

    @Override
    public void clear() {
      this.request = null;
      this.url = null;
      this.method = null;
      this.postData = null;
      this.headerMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getRequest() {
      return this.request;
    }

    public Request_Set_args setRequest(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject request) {
      this.request = request;
      return this;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUrl() {
      return this.url;
    }

    public Request_Set_args setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
      this.url = url;
      return this;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMethod() {
      return this.method;
    }

    public Request_Set_args setMethod(@org.apache.thrift.annotation.Nullable java.lang.String method) {
      this.method = method;
      return this;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.PostData getPostData() {
      return this.postData;
    }

    public Request_Set_args setPostData(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.PostData postData) {
      this.postData = postData;
      return this;
    }

    public void unsetPostData() {
      this.postData = null;
    }

    /** Returns true if field postData is set (has been assigned a value) and false otherwise */
    public boolean isSetPostData() {
      return this.postData != null;
    }

    public void setPostDataIsSet(boolean value) {
      if (!value) {
        this.postData = null;
      }
    }

    public int getHeaderMapSize() {
      return (this.headerMap == null) ? 0 : this.headerMap.size();
    }

    public void putToHeaderMap(java.lang.String key, java.lang.String val) {
      if (this.headerMap == null) {
        this.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.headerMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getHeaderMap() {
      return this.headerMap;
    }

    public Request_Set_args setHeaderMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap) {
      this.headerMap = headerMap;
      return this;
    }

    public void unsetHeaderMap() {
      this.headerMap = null;
    }

    /** Returns true if field headerMap is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderMap() {
      return this.headerMap != null;
    }

    public void setHeaderMapIsSet(boolean value) {
      if (!value) {
        this.headerMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          setUrl((java.lang.String)value);
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          setMethod((java.lang.String)value);
        }
        break;

      case POST_DATA:
        if (value == null) {
          unsetPostData();
        } else {
          setPostData((com.jetbrains.cef.remote.thrift_codegen.PostData)value);
        }
        break;

      case HEADER_MAP:
        if (value == null) {
          unsetHeaderMap();
        } else {
          setHeaderMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      case URL:
        return getUrl();

      case METHOD:
        return getMethod();

      case POST_DATA:
        return getPostData();

      case HEADER_MAP:
        return getHeaderMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      case URL:
        return isSetUrl();
      case METHOD:
        return isSetMethod();
      case POST_DATA:
        return isSetPostData();
      case HEADER_MAP:
        return isSetHeaderMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Set_args)
        return this.equals((Request_Set_args)that);
      return false;
    }

    public boolean equals(Request_Set_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      boolean this_present_postData = true && this.isSetPostData();
      boolean that_present_postData = true && that.isSetPostData();
      if (this_present_postData || that_present_postData) {
        if (!(this_present_postData && that_present_postData))
          return false;
        if (!this.postData.equals(that.postData))
          return false;
      }

      boolean this_present_headerMap = true && this.isSetHeaderMap();
      boolean that_present_headerMap = true && that.isSetHeaderMap();
      if (this_present_headerMap || that_present_headerMap) {
        if (!(this_present_headerMap && that_present_headerMap))
          return false;
        if (!this.headerMap.equals(that.headerMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRequest()) ? 131071 : 524287);
      if (isSetRequest())
        hashCode = hashCode * 8191 + request.hashCode();

      hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
      if (isSetUrl())
        hashCode = hashCode * 8191 + url.hashCode();

      hashCode = hashCode * 8191 + ((isSetMethod()) ? 131071 : 524287);
      if (isSetMethod())
        hashCode = hashCode * 8191 + method.hashCode();

      hashCode = hashCode * 8191 + ((isSetPostData()) ? 131071 : 524287);
      if (isSetPostData())
        hashCode = hashCode * 8191 + postData.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaderMap()) ? 131071 : 524287);
      if (isSetHeaderMap())
        hashCode = hashCode * 8191 + headerMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Request_Set_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMethod(), other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPostData(), other.isSetPostData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postData, other.postData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeaderMap(), other.isSetHeaderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerMap, other.headerMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Set_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("postData:");
      if (this.postData == null) {
        sb.append("null");
      } else {
        sb.append(this.postData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headerMap:");
      if (this.headerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.headerMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
      if (postData != null) {
        postData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Set_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_argsStandardScheme getScheme() {
        return new Request_Set_argsStandardScheme();
      }
    }

    private static class Request_Set_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Set_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Set_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.url = iprot.readString();
                struct.setUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.method = iprot.readString();
                struct.setMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // POST_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
                struct.postData.read(iprot);
                struct.setPostDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // HEADER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                  struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map38.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key39;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val40;
                  for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                  {
                    _key39 = iprot.readString();
                    _val40 = iprot.readString();
                    struct.headerMap.put(_key39, _val40);
                  }
                  iprot.readMapEnd();
                }
                struct.setHeaderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Set_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.url != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
        if (struct.method != null) {
          oprot.writeFieldBegin(METHOD_FIELD_DESC);
          oprot.writeString(struct.method);
          oprot.writeFieldEnd();
        }
        if (struct.postData != null) {
          oprot.writeFieldBegin(POST_DATA_FIELD_DESC);
          struct.postData.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.headerMap != null) {
          oprot.writeFieldBegin(HEADER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headerMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter42 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter42.getKey());
              oprot.writeString(_iter42.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Set_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_argsTupleScheme getScheme() {
        return new Request_Set_argsTupleScheme();
      }
    }

    private static class Request_Set_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Set_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Set_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetUrl()) {
          optionals.set(1);
        }
        if (struct.isSetMethod()) {
          optionals.set(2);
        }
        if (struct.isSetPostData()) {
          optionals.set(3);
        }
        if (struct.isSetHeaderMap()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
        if (struct.isSetUrl()) {
          oprot.writeString(struct.url);
        }
        if (struct.isSetMethod()) {
          oprot.writeString(struct.method);
        }
        if (struct.isSetPostData()) {
          struct.postData.write(oprot);
        }
        if (struct.isSetHeaderMap()) {
          {
            oprot.writeI32(struct.headerMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter43 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter43.getKey());
              oprot.writeString(_iter43.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Set_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.request = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.url = iprot.readString();
          struct.setUrlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.method = iprot.readString();
          struct.setMethodIsSet(true);
        }
        if (incoming.get(3)) {
          struct.postData = new com.jetbrains.cef.remote.thrift_codegen.PostData();
          struct.postData.read(iprot);
          struct.setPostDataIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map44.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key45;
            @org.apache.thrift.annotation.Nullable java.lang.String _val46;
            for (int _i47 = 0; _i47 < _map44.size; ++_i47)
            {
              _key45 = iprot.readString();
              _val46 = iprot.readString();
              struct.headerMap.put(_key45, _val46);
            }
          }
          struct.setHeaderMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Request_Set_result implements org.apache.thrift.TBase<Request_Set_result, Request_Set_result._Fields>, java.io.Serializable, Cloneable, Comparable<Request_Set_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request_Set_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Request_Set_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Request_Set_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request_Set_result.class, metaDataMap);
    }

    public Request_Set_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Request_Set_result(Request_Set_result other) {
    }

    @Override
    public Request_Set_result deepCopy() {
      return new Request_Set_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Request_Set_result)
        return this.equals((Request_Set_result)that);
      return false;
    }

    public boolean equals(Request_Set_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Request_Set_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Request_Set_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Request_Set_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_resultStandardScheme getScheme() {
        return new Request_Set_resultStandardScheme();
      }
    }

    private static class Request_Set_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Request_Set_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Request_Set_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Request_Set_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Request_Set_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Request_Set_resultTupleScheme getScheme() {
        return new Request_Set_resultTupleScheme();
      }
    }

    private static class Request_Set_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Request_Set_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Request_Set_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Request_Set_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_Update_args implements org.apache.thrift.TBase<Response_Update_args, Response_Update_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_Update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_Update_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_Update_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_Update_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_Update_args.class, metaDataMap);
    }

    public Response_Update_args() {
    }

    public Response_Update_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response)
    {
      this();
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_Update_args(Response_Update_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
    }

    @Override
    public Response_Update_args deepCopy() {
      return new Response_Update_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_Update_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_Update_args)
        return this.equals((Response_Update_args)that);
      return false;
    }

    public boolean equals(Response_Update_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_Update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_Update_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_Update_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_argsStandardScheme getScheme() {
        return new Response_Update_argsStandardScheme();
      }
    }

    private static class Response_Update_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_Update_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_Update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_Update_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_argsTupleScheme getScheme() {
        return new Response_Update_argsTupleScheme();
      }
    }

    private static class Response_Update_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_Update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_Update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_Update_result implements org.apache.thrift.TBase<Response_Update_result, Response_Update_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_Update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_Update_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_Update_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_Update_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_Update_result.class, metaDataMap);
    }

    public Response_Update_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_Update_result(Response_Update_result other) {
    }

    @Override
    public Response_Update_result deepCopy() {
      return new Response_Update_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_Update_result)
        return this.equals((Response_Update_result)that);
      return false;
    }

    public boolean equals(Response_Update_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Response_Update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_Update_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_Update_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_resultStandardScheme getScheme() {
        return new Response_Update_resultStandardScheme();
      }
    }

    private static class Response_Update_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_Update_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_Update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_Update_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_Update_resultTupleScheme getScheme() {
        return new Response_Update_resultTupleScheme();
      }
    }

    private static class Response_Update_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_Update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_Update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderByName_args implements org.apache.thrift.TBase<Response_GetHeaderByName_args, Response_GetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response"),
      NAME((short)2, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderByName_args.class, metaDataMap);
    }

    public Response_GetHeaderByName_args() {
    }

    public Response_GetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.lang.String name)
    {
      this();
      this.response = response;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderByName_args(Response_GetHeaderByName_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    @Override
    public Response_GetHeaderByName_args deepCopy() {
      return new Response_GetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
      this.name = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_GetHeaderByName_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Response_GetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderByName_args)
        return this.equals((Response_GetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Response_GetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderByName_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_argsStandardScheme getScheme() {
        return new Response_GetHeaderByName_argsStandardScheme();
      }
    }

    private static class Response_GetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_argsTupleScheme getScheme() {
        return new Response_GetHeaderByName_argsTupleScheme();
      }
    }

    private static class Response_GetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderByName_result implements org.apache.thrift.TBase<Response_GetHeaderByName_result, Response_GetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderByName_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderByName_result.class, metaDataMap);
    }

    public Response_GetHeaderByName_result() {
    }

    public Response_GetHeaderByName_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderByName_result(Response_GetHeaderByName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public Response_GetHeaderByName_result deepCopy() {
      return new Response_GetHeaderByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public Response_GetHeaderByName_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderByName_result)
        return this.equals((Response_GetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Response_GetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_resultStandardScheme getScheme() {
        return new Response_GetHeaderByName_resultStandardScheme();
      }
    }

    private static class Response_GetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderByName_resultTupleScheme getScheme() {
        return new Response_GetHeaderByName_resultTupleScheme();
      }
    }

    private static class Response_GetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderByName_args implements org.apache.thrift.TBase<Response_SetHeaderByName_args, Response_SetHeaderByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderByName_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OVERWRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("overwrite", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderByName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String value; // required
    public boolean overwrite; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response"),
      NAME((short)2, "name"),
      VALUE((short)3, "value"),
      OVERWRITE((short)4, "overwrite");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          case 2: // NAME
            return NAME;
          case 3: // VALUE
            return VALUE;
          case 4: // OVERWRITE
            return OVERWRITE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OVERWRITE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OVERWRITE, new org.apache.thrift.meta_data.FieldMetaData("overwrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderByName_args.class, metaDataMap);
    }

    public Response_SetHeaderByName_args() {
    }

    public Response_SetHeaderByName_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.lang.String name,
      java.lang.String value,
      boolean overwrite)
    {
      this();
      this.response = response;
      this.name = name;
      this.value = value;
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderByName_args(Response_SetHeaderByName_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
      this.overwrite = other.overwrite;
    }

    @Override
    public Response_SetHeaderByName_args deepCopy() {
      return new Response_SetHeaderByName_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
      this.name = null;
      this.value = null;
      setOverwriteIsSet(false);
      this.overwrite = false;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_SetHeaderByName_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getName() {
      return this.name;
    }

    public Response_SetHeaderByName_args setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getValue() {
      return this.value;
    }

    public Response_SetHeaderByName_args setValue(@org.apache.thrift.annotation.Nullable java.lang.String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean isOverwrite() {
      return this.overwrite;
    }

    public Response_SetHeaderByName_args setOverwrite(boolean overwrite) {
      this.overwrite = overwrite;
      setOverwriteIsSet(true);
      return this;
    }

    public void unsetOverwrite() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    /** Returns true if field overwrite is set (has been assigned a value) and false otherwise */
    public boolean isSetOverwrite() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERWRITE_ISSET_ID);
    }

    public void setOverwriteIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERWRITE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((java.lang.String)value);
        }
        break;

      case OVERWRITE:
        if (value == null) {
          unsetOverwrite();
        } else {
          setOverwrite((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      case NAME:
        return getName();

      case VALUE:
        return getValue();

      case OVERWRITE:
        return isOverwrite();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      case NAME:
        return isSetName();
      case VALUE:
        return isSetValue();
      case OVERWRITE:
        return isSetOverwrite();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderByName_args)
        return this.equals((Response_SetHeaderByName_args)that);
      return false;
    }

    public boolean equals(Response_SetHeaderByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      boolean this_present_overwrite = true;
      boolean that_present_overwrite = true;
      if (this_present_overwrite || that_present_overwrite) {
        if (!(this_present_overwrite && that_present_overwrite))
          return false;
        if (this.overwrite != that.overwrite)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
      if (isSetValue())
        hashCode = hashCode * 8191 + value.hashCode();

      hashCode = hashCode * 8191 + ((overwrite) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOverwrite(), other.isSetOverwrite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverwrite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overwrite, other.overwrite);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderByName_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("overwrite:");
      sb.append(this.overwrite);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_argsStandardScheme getScheme() {
        return new Response_SetHeaderByName_argsStandardScheme();
      }
    }

    private static class Response_SetHeaderByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderByName_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OVERWRITE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.overwrite = iprot.readBool();
                struct.setOverwriteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OVERWRITE_FIELD_DESC);
        oprot.writeBool(struct.overwrite);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_argsTupleScheme getScheme() {
        return new Response_SetHeaderByName_argsTupleScheme();
      }
    }

    private static class Response_SetHeaderByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        if (struct.isSetOverwrite()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
        if (struct.isSetOverwrite()) {
          oprot.writeBool(struct.overwrite);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
        if (incoming.get(3)) {
          struct.overwrite = iprot.readBool();
          struct.setOverwriteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderByName_result implements org.apache.thrift.TBase<Response_SetHeaderByName_result, Response_SetHeaderByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderByName_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderByName_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderByName_result.class, metaDataMap);
    }

    public Response_SetHeaderByName_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderByName_result(Response_SetHeaderByName_result other) {
    }

    @Override
    public Response_SetHeaderByName_result deepCopy() {
      return new Response_SetHeaderByName_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderByName_result)
        return this.equals((Response_SetHeaderByName_result)that);
      return false;
    }

    public boolean equals(Response_SetHeaderByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderByName_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_resultStandardScheme getScheme() {
        return new Response_SetHeaderByName_resultStandardScheme();
      }
    }

    private static class Response_SetHeaderByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderByName_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderByName_resultTupleScheme getScheme() {
        return new Response_SetHeaderByName_resultTupleScheme();
      }
    }

    private static class Response_SetHeaderByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderMap_args implements org.apache.thrift.TBase<Response_GetHeaderMap_args, Response_GetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderMap_args.class, metaDataMap);
    }

    public Response_GetHeaderMap_args() {
    }

    public Response_GetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response)
    {
      this();
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderMap_args(Response_GetHeaderMap_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
    }

    @Override
    public Response_GetHeaderMap_args deepCopy() {
      return new Response_GetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_GetHeaderMap_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderMap_args)
        return this.equals((Response_GetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Response_GetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderMap_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_argsStandardScheme getScheme() {
        return new Response_GetHeaderMap_argsStandardScheme();
      }
    }

    private static class Response_GetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_argsTupleScheme getScheme() {
        return new Response_GetHeaderMap_argsTupleScheme();
      }
    }

    private static class Response_GetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_GetHeaderMap_result implements org.apache.thrift.TBase<Response_GetHeaderMap_result, Response_GetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_GetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_GetHeaderMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_GetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_GetHeaderMap_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_GetHeaderMap_result.class, metaDataMap);
    }

    public Response_GetHeaderMap_result() {
    }

    public Response_GetHeaderMap_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_GetHeaderMap_result(Response_GetHeaderMap_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    @Override
    public Response_GetHeaderMap_result deepCopy() {
      return new Response_GetHeaderMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public Response_GetHeaderMap_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_GetHeaderMap_result)
        return this.equals((Response_GetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Response_GetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_GetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_GetHeaderMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_GetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_resultStandardScheme getScheme() {
        return new Response_GetHeaderMap_resultStandardScheme();
      }
    }

    private static class Response_GetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_GetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map48.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key49;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val50;
                  for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                  {
                    _key49 = iprot.readString();
                    _val50 = iprot.readString();
                    struct.success.put(_key49, _val50);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter52 : struct.success.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              oprot.writeString(_iter52.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_GetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_GetHeaderMap_resultTupleScheme getScheme() {
        return new Response_GetHeaderMap_resultTupleScheme();
      }
    }

    private static class Response_GetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_GetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter53 : struct.success.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              oprot.writeString(_iter53.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_GetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map54.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key55;
            @org.apache.thrift.annotation.Nullable java.lang.String _val56;
            for (int _i57 = 0; _i57 < _map54.size; ++_i57)
            {
              _key55 = iprot.readString();
              _val56 = iprot.readString();
              struct.success.put(_key55, _val56);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderMap_args implements org.apache.thrift.TBase<Response_SetHeaderMap_args, Response_SetHeaderMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderMap_args");

    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HEADER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("headerMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderMap_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderMap_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESPONSE((short)1, "response"),
      HEADER_MAP((short)2, "headerMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESPONSE
            return RESPONSE;
          case 2: // HEADER_MAP
            return HEADER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HEADER_MAP, new org.apache.thrift.meta_data.FieldMetaData("headerMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderMap_args.class, metaDataMap);
    }

    public Response_SetHeaderMap_args() {
    }

    public Response_SetHeaderMap_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject response,
      java.util.Map<java.lang.String,java.lang.String> headerMap)
    {
      this();
      this.response = response;
      this.headerMap = headerMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderMap_args(Response_SetHeaderMap_args other) {
      if (other.isSetResponse()) {
        this.response = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.response);
      }
      if (other.isSetHeaderMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.headerMap);
        this.headerMap = __this__headerMap;
      }
    }

    @Override
    public Response_SetHeaderMap_args deepCopy() {
      return new Response_SetHeaderMap_args(this);
    }

    @Override
    public void clear() {
      this.response = null;
      this.headerMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getResponse() {
      return this.response;
    }

    public Response_SetHeaderMap_args setResponse(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    public int getHeaderMapSize() {
      return (this.headerMap == null) ? 0 : this.headerMap.size();
    }

    public void putToHeaderMap(java.lang.String key, java.lang.String val) {
      if (this.headerMap == null) {
        this.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.headerMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.lang.String> getHeaderMap() {
      return this.headerMap;
    }

    public Response_SetHeaderMap_args setHeaderMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> headerMap) {
      this.headerMap = headerMap;
      return this;
    }

    public void unsetHeaderMap() {
      this.headerMap = null;
    }

    /** Returns true if field headerMap is set (has been assigned a value) and false otherwise */
    public boolean isSetHeaderMap() {
      return this.headerMap != null;
    }

    public void setHeaderMapIsSet(boolean value) {
      if (!value) {
        this.headerMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HEADER_MAP:
        if (value == null) {
          unsetHeaderMap();
        } else {
          setHeaderMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RESPONSE:
        return getResponse();

      case HEADER_MAP:
        return getHeaderMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RESPONSE:
        return isSetResponse();
      case HEADER_MAP:
        return isSetHeaderMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderMap_args)
        return this.equals((Response_SetHeaderMap_args)that);
      return false;
    }

    public boolean equals(Response_SetHeaderMap_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      boolean this_present_headerMap = true && this.isSetHeaderMap();
      boolean that_present_headerMap = true && that.isSetHeaderMap();
      if (this_present_headerMap || that_present_headerMap) {
        if (!(this_present_headerMap && that_present_headerMap))
          return false;
        if (!this.headerMap.equals(that.headerMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      hashCode = hashCode * 8191 + ((isSetHeaderMap()) ? 131071 : 524287);
      if (isSetHeaderMap())
        hashCode = hashCode * 8191 + headerMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHeaderMap(), other.isSetHeaderMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeaderMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.headerMap, other.headerMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderMap_args(");
      boolean first = true;

      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("headerMap:");
      if (this.headerMap == null) {
        sb.append("null");
      } else {
        sb.append(this.headerMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (response != null) {
        response.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderMap_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_argsStandardScheme getScheme() {
        return new Response_SetHeaderMap_argsStandardScheme();
      }
    }

    private static class Response_SetHeaderMap_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderMap_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.response.read(iprot);
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HEADER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                  struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map58.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key59;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val60;
                  for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                  {
                    _key59 = iprot.readString();
                    _val60 = iprot.readString();
                    struct.headerMap.put(_key59, _val60);
                  }
                  iprot.readMapEnd();
                }
                struct.setHeaderMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          struct.response.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.headerMap != null) {
          oprot.writeFieldBegin(HEADER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.headerMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter62 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter62.getKey());
              oprot.writeString(_iter62.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderMap_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_argsTupleScheme getScheme() {
        return new Response_SetHeaderMap_argsTupleScheme();
      }
    }

    private static class Response_SetHeaderMap_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetResponse()) {
          optionals.set(0);
        }
        if (struct.isSetHeaderMap()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetResponse()) {
          struct.response.write(oprot);
        }
        if (struct.isSetHeaderMap()) {
          {
            oprot.writeI32(struct.headerMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter63 : struct.headerMap.entrySet())
            {
              oprot.writeString(_iter63.getKey());
              oprot.writeString(_iter63.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.response = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.response.read(iprot);
          struct.setResponseIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
            struct.headerMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map64.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key65;
            @org.apache.thrift.annotation.Nullable java.lang.String _val66;
            for (int _i67 = 0; _i67 < _map64.size; ++_i67)
            {
              _key65 = iprot.readString();
              _val66 = iprot.readString();
              struct.headerMap.put(_key65, _val66);
            }
          }
          struct.setHeaderMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Response_SetHeaderMap_result implements org.apache.thrift.TBase<Response_SetHeaderMap_result, Response_SetHeaderMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<Response_SetHeaderMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Response_SetHeaderMap_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Response_SetHeaderMap_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Response_SetHeaderMap_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Response_SetHeaderMap_result.class, metaDataMap);
    }

    public Response_SetHeaderMap_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Response_SetHeaderMap_result(Response_SetHeaderMap_result other) {
    }

    @Override
    public Response_SetHeaderMap_result deepCopy() {
      return new Response_SetHeaderMap_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Response_SetHeaderMap_result)
        return this.equals((Response_SetHeaderMap_result)that);
      return false;
    }

    public boolean equals(Response_SetHeaderMap_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(Response_SetHeaderMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Response_SetHeaderMap_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Response_SetHeaderMap_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_resultStandardScheme getScheme() {
        return new Response_SetHeaderMap_resultStandardScheme();
      }
    }

    private static class Response_SetHeaderMap_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Response_SetHeaderMap_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Response_SetHeaderMap_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Response_SetHeaderMap_resultTupleScheme getScheme() {
        return new Response_SetHeaderMap_resultTupleScheme();
      }
    }

    private static class Response_SetHeaderMap_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Response_SetHeaderMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Response_SetHeaderMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Callback_Dispose_args implements org.apache.thrift.TBase<Callback_Dispose_args, Callback_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<Callback_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Callback_Dispose_args");

    private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Callback_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Callback_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLBACK((short)1, "callback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLBACK
            return CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Callback_Dispose_args.class, metaDataMap);
    }

    public Callback_Dispose_args() {
    }

    public Callback_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject callback)
    {
      this();
      this.callback = callback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Callback_Dispose_args(Callback_Dispose_args other) {
      if (other.isSetCallback()) {
        this.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.callback);
      }
    }

    @Override
    public Callback_Dispose_args deepCopy() {
      return new Callback_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.callback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCallback() {
      return this.callback;
    }

    public Callback_Dispose_args setCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback) {
      this.callback = callback;
      return this;
    }

    public void unsetCallback() {
      this.callback = null;
    }

    /** Returns true if field callback is set (has been assigned a value) and false otherwise */
    public boolean isSetCallback() {
      return this.callback != null;
    }

    public void setCallbackIsSet(boolean value) {
      if (!value) {
        this.callback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          setCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLBACK:
        return getCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALLBACK:
        return isSetCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Callback_Dispose_args)
        return this.equals((Callback_Dispose_args)that);
      return false;
    }

    public boolean equals(Callback_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callback = true && this.isSetCallback();
      boolean that_present_callback = true && that.isSetCallback();
      if (this_present_callback || that_present_callback) {
        if (!(this_present_callback && that_present_callback))
          return false;
        if (!this.callback.equals(that.callback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCallback()) ? 131071 : 524287);
      if (isSetCallback())
        hashCode = hashCode * 8191 + callback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Callback_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCallback(), other.isSetCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, other.callback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Callback_Dispose_args(");
      boolean first = true;

      sb.append("callback:");
      if (this.callback == null) {
        sb.append("null");
      } else {
        sb.append(this.callback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (callback != null) {
        callback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Callback_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Dispose_argsStandardScheme getScheme() {
        return new Callback_Dispose_argsStandardScheme();
      }
    }

    private static class Callback_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Callback_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.callback.read(iprot);
                struct.setCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.callback != null) {
          oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
          struct.callback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Callback_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Dispose_argsTupleScheme getScheme() {
        return new Callback_Dispose_argsTupleScheme();
      }
    }

    private static class Callback_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Callback_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCallback()) {
          struct.callback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Callback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.callback.read(iprot);
          struct.setCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Callback_Continue_args implements org.apache.thrift.TBase<Callback_Continue_args, Callback_Continue_args._Fields>, java.io.Serializable, Cloneable, Comparable<Callback_Continue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Callback_Continue_args");

    private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Callback_Continue_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Callback_Continue_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLBACK((short)1, "callback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLBACK
            return CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Callback_Continue_args.class, metaDataMap);
    }

    public Callback_Continue_args() {
    }

    public Callback_Continue_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject callback)
    {
      this();
      this.callback = callback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Callback_Continue_args(Callback_Continue_args other) {
      if (other.isSetCallback()) {
        this.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.callback);
      }
    }

    @Override
    public Callback_Continue_args deepCopy() {
      return new Callback_Continue_args(this);
    }

    @Override
    public void clear() {
      this.callback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCallback() {
      return this.callback;
    }

    public Callback_Continue_args setCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback) {
      this.callback = callback;
      return this;
    }

    public void unsetCallback() {
      this.callback = null;
    }

    /** Returns true if field callback is set (has been assigned a value) and false otherwise */
    public boolean isSetCallback() {
      return this.callback != null;
    }

    public void setCallbackIsSet(boolean value) {
      if (!value) {
        this.callback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          setCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLBACK:
        return getCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALLBACK:
        return isSetCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Callback_Continue_args)
        return this.equals((Callback_Continue_args)that);
      return false;
    }

    public boolean equals(Callback_Continue_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callback = true && this.isSetCallback();
      boolean that_present_callback = true && that.isSetCallback();
      if (this_present_callback || that_present_callback) {
        if (!(this_present_callback && that_present_callback))
          return false;
        if (!this.callback.equals(that.callback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCallback()) ? 131071 : 524287);
      if (isSetCallback())
        hashCode = hashCode * 8191 + callback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Callback_Continue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCallback(), other.isSetCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, other.callback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Callback_Continue_args(");
      boolean first = true;

      sb.append("callback:");
      if (this.callback == null) {
        sb.append("null");
      } else {
        sb.append(this.callback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (callback != null) {
        callback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Callback_Continue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Continue_argsStandardScheme getScheme() {
        return new Callback_Continue_argsStandardScheme();
      }
    }

    private static class Callback_Continue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Callback_Continue_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.callback.read(iprot);
                struct.setCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.callback != null) {
          oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
          struct.callback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Callback_Continue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Continue_argsTupleScheme getScheme() {
        return new Callback_Continue_argsTupleScheme();
      }
    }

    private static class Callback_Continue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Callback_Continue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCallback()) {
          struct.callback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Callback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.callback.read(iprot);
          struct.setCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class Callback_Cancel_args implements org.apache.thrift.TBase<Callback_Cancel_args, Callback_Cancel_args._Fields>, java.io.Serializable, Cloneable, Comparable<Callback_Cancel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Callback_Cancel_args");

    private static final org.apache.thrift.protocol.TField CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("callback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Callback_Cancel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Callback_Cancel_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CALLBACK((short)1, "callback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CALLBACK
            return CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("callback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Callback_Cancel_args.class, metaDataMap);
    }

    public Callback_Cancel_args() {
    }

    public Callback_Cancel_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject callback)
    {
      this();
      this.callback = callback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Callback_Cancel_args(Callback_Cancel_args other) {
      if (other.isSetCallback()) {
        this.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.callback);
      }
    }

    @Override
    public Callback_Cancel_args deepCopy() {
      return new Callback_Cancel_args(this);
    }

    @Override
    public void clear() {
      this.callback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getCallback() {
      return this.callback;
    }

    public Callback_Cancel_args setCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject callback) {
      this.callback = callback;
      return this;
    }

    public void unsetCallback() {
      this.callback = null;
    }

    /** Returns true if field callback is set (has been assigned a value) and false otherwise */
    public boolean isSetCallback() {
      return this.callback != null;
    }

    public void setCallbackIsSet(boolean value) {
      if (!value) {
        this.callback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          setCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CALLBACK:
        return getCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CALLBACK:
        return isSetCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof Callback_Cancel_args)
        return this.equals((Callback_Cancel_args)that);
      return false;
    }

    public boolean equals(Callback_Cancel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_callback = true && this.isSetCallback();
      boolean that_present_callback = true && that.isSetCallback();
      if (this_present_callback || that_present_callback) {
        if (!(this_present_callback && that_present_callback))
          return false;
        if (!this.callback.equals(that.callback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCallback()) ? 131071 : 524287);
      if (isSetCallback())
        hashCode = hashCode * 8191 + callback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Callback_Cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCallback(), other.isSetCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callback, other.callback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Callback_Cancel_args(");
      boolean first = true;

      sb.append("callback:");
      if (this.callback == null) {
        sb.append("null");
      } else {
        sb.append(this.callback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (callback != null) {
        callback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Callback_Cancel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Cancel_argsStandardScheme getScheme() {
        return new Callback_Cancel_argsStandardScheme();
      }
    }

    private static class Callback_Cancel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Callback_Cancel_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.callback.read(iprot);
                struct.setCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.callback != null) {
          oprot.writeFieldBegin(CALLBACK_FIELD_DESC);
          struct.callback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Callback_Cancel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public Callback_Cancel_argsTupleScheme getScheme() {
        return new Callback_Cancel_argsTupleScheme();
      }
    }

    private static class Callback_Cancel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Callback_Cancel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCallback()) {
          struct.callback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Callback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.callback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.callback.read(iprot);
          struct.setCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AuthCallback_Dispose_args implements org.apache.thrift.TBase<AuthCallback_Dispose_args, AuthCallback_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCallback_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCallback_Dispose_args");

    private static final org.apache.thrift.protocol.TField AUTH_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("authCallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCallback_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCallback_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_CALLBACK((short)1, "authCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_CALLBACK
            return AUTH_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("authCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCallback_Dispose_args.class, metaDataMap);
    }

    public AuthCallback_Dispose_args() {
    }

    public AuthCallback_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject authCallback)
    {
      this();
      this.authCallback = authCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCallback_Dispose_args(AuthCallback_Dispose_args other) {
      if (other.isSetAuthCallback()) {
        this.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.authCallback);
      }
    }

    @Override
    public AuthCallback_Dispose_args deepCopy() {
      return new AuthCallback_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.authCallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getAuthCallback() {
      return this.authCallback;
    }

    public AuthCallback_Dispose_args setAuthCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) {
      this.authCallback = authCallback;
      return this;
    }

    public void unsetAuthCallback() {
      this.authCallback = null;
    }

    /** Returns true if field authCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthCallback() {
      return this.authCallback != null;
    }

    public void setAuthCallbackIsSet(boolean value) {
      if (!value) {
        this.authCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AUTH_CALLBACK:
        if (value == null) {
          unsetAuthCallback();
        } else {
          setAuthCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_CALLBACK:
        return getAuthCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH_CALLBACK:
        return isSetAuthCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AuthCallback_Dispose_args)
        return this.equals((AuthCallback_Dispose_args)that);
      return false;
    }

    public boolean equals(AuthCallback_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authCallback = true && this.isSetAuthCallback();
      boolean that_present_authCallback = true && that.isSetAuthCallback();
      if (this_present_authCallback || that_present_authCallback) {
        if (!(this_present_authCallback && that_present_authCallback))
          return false;
        if (!this.authCallback.equals(that.authCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthCallback()) ? 131071 : 524287);
      if (isSetAuthCallback())
        hashCode = hashCode * 8191 + authCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCallback_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetAuthCallback(), other.isSetAuthCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCallback, other.authCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCallback_Dispose_args(");
      boolean first = true;

      sb.append("authCallback:");
      if (this.authCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.authCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authCallback != null) {
        authCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCallback_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Dispose_argsStandardScheme getScheme() {
        return new AuthCallback_Dispose_argsStandardScheme();
      }
    }

    private static class AuthCallback_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCallback_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.authCallback.read(iprot);
                struct.setAuthCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authCallback != null) {
          oprot.writeFieldBegin(AUTH_CALLBACK_FIELD_DESC);
          struct.authCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCallback_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Dispose_argsTupleScheme getScheme() {
        return new AuthCallback_Dispose_argsTupleScheme();
      }
    }

    private static class AuthCallback_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCallback_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuthCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthCallback()) {
          struct.authCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.authCallback.read(iprot);
          struct.setAuthCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AuthCallback_Continue_args implements org.apache.thrift.TBase<AuthCallback_Continue_args, AuthCallback_Continue_args._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCallback_Continue_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCallback_Continue_args");

    private static final org.apache.thrift.protocol.TField AUTH_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("authCallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCallback_Continue_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCallback_Continue_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String password; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_CALLBACK((short)1, "authCallback"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_CALLBACK
            return AUTH_CALLBACK;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("authCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCallback_Continue_args.class, metaDataMap);
    }

    public AuthCallback_Continue_args() {
    }

    public AuthCallback_Continue_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject authCallback,
      java.lang.String username,
      java.lang.String password)
    {
      this();
      this.authCallback = authCallback;
      this.username = username;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCallback_Continue_args(AuthCallback_Continue_args other) {
      if (other.isSetAuthCallback()) {
        this.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.authCallback);
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    @Override
    public AuthCallback_Continue_args deepCopy() {
      return new AuthCallback_Continue_args(this);
    }

    @Override
    public void clear() {
      this.authCallback = null;
      this.username = null;
      this.password = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getAuthCallback() {
      return this.authCallback;
    }

    public AuthCallback_Continue_args setAuthCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) {
      this.authCallback = authCallback;
      return this;
    }

    public void unsetAuthCallback() {
      this.authCallback = null;
    }

    /** Returns true if field authCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthCallback() {
      return this.authCallback != null;
    }

    public void setAuthCallbackIsSet(boolean value) {
      if (!value) {
        this.authCallback = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUsername() {
      return this.username;
    }

    public AuthCallback_Continue_args setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPassword() {
      return this.password;
    }

    public AuthCallback_Continue_args setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AUTH_CALLBACK:
        if (value == null) {
          unsetAuthCallback();
        } else {
          setAuthCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_CALLBACK:
        return getAuthCallback();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH_CALLBACK:
        return isSetAuthCallback();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AuthCallback_Continue_args)
        return this.equals((AuthCallback_Continue_args)that);
      return false;
    }

    public boolean equals(AuthCallback_Continue_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authCallback = true && this.isSetAuthCallback();
      boolean that_present_authCallback = true && that.isSetAuthCallback();
      if (this_present_authCallback || that_present_authCallback) {
        if (!(this_present_authCallback && that_present_authCallback))
          return false;
        if (!this.authCallback.equals(that.authCallback))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthCallback()) ? 131071 : 524287);
      if (isSetAuthCallback())
        hashCode = hashCode * 8191 + authCallback.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCallback_Continue_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetAuthCallback(), other.isSetAuthCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCallback, other.authCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCallback_Continue_args(");
      boolean first = true;

      sb.append("authCallback:");
      if (this.authCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.authCallback);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authCallback != null) {
        authCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCallback_Continue_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Continue_argsStandardScheme getScheme() {
        return new AuthCallback_Continue_argsStandardScheme();
      }
    }

    private static class AuthCallback_Continue_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCallback_Continue_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.authCallback.read(iprot);
                struct.setAuthCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authCallback != null) {
          oprot.writeFieldBegin(AUTH_CALLBACK_FIELD_DESC);
          struct.authCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCallback_Continue_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Continue_argsTupleScheme getScheme() {
        return new AuthCallback_Continue_argsTupleScheme();
      }
    }

    private static class AuthCallback_Continue_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCallback_Continue_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuthCallback()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuthCallback()) {
          struct.authCallback.write(oprot);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Continue_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.authCallback.read(iprot);
          struct.setAuthCallbackIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class AuthCallback_Cancel_args implements org.apache.thrift.TBase<AuthCallback_Cancel_args, AuthCallback_Cancel_args._Fields>, java.io.Serializable, Cloneable, Comparable<AuthCallback_Cancel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AuthCallback_Cancel_args");

    private static final org.apache.thrift.protocol.TField AUTH_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("authCallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AuthCallback_Cancel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AuthCallback_Cancel_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AUTH_CALLBACK((short)1, "authCallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH_CALLBACK
            return AUTH_CALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("authCallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AuthCallback_Cancel_args.class, metaDataMap);
    }

    public AuthCallback_Cancel_args() {
    }

    public AuthCallback_Cancel_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject authCallback)
    {
      this();
      this.authCallback = authCallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AuthCallback_Cancel_args(AuthCallback_Cancel_args other) {
      if (other.isSetAuthCallback()) {
        this.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.authCallback);
      }
    }

    @Override
    public AuthCallback_Cancel_args deepCopy() {
      return new AuthCallback_Cancel_args(this);
    }

    @Override
    public void clear() {
      this.authCallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getAuthCallback() {
      return this.authCallback;
    }

    public AuthCallback_Cancel_args setAuthCallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject authCallback) {
      this.authCallback = authCallback;
      return this;
    }

    public void unsetAuthCallback() {
      this.authCallback = null;
    }

    /** Returns true if field authCallback is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthCallback() {
      return this.authCallback != null;
    }

    public void setAuthCallbackIsSet(boolean value) {
      if (!value) {
        this.authCallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case AUTH_CALLBACK:
        if (value == null) {
          unsetAuthCallback();
        } else {
          setAuthCallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH_CALLBACK:
        return getAuthCallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH_CALLBACK:
        return isSetAuthCallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof AuthCallback_Cancel_args)
        return this.equals((AuthCallback_Cancel_args)that);
      return false;
    }

    public boolean equals(AuthCallback_Cancel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_authCallback = true && this.isSetAuthCallback();
      boolean that_present_authCallback = true && that.isSetAuthCallback();
      if (this_present_authCallback || that_present_authCallback) {
        if (!(this_present_authCallback && that_present_authCallback))
          return false;
        if (!this.authCallback.equals(that.authCallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuthCallback()) ? 131071 : 524287);
      if (isSetAuthCallback())
        hashCode = hashCode * 8191 + authCallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AuthCallback_Cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetAuthCallback(), other.isSetAuthCallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthCallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authCallback, other.authCallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AuthCallback_Cancel_args(");
      boolean first = true;

      sb.append("authCallback:");
      if (this.authCallback == null) {
        sb.append("null");
      } else {
        sb.append(this.authCallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (authCallback != null) {
        authCallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AuthCallback_Cancel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Cancel_argsStandardScheme getScheme() {
        return new AuthCallback_Cancel_argsStandardScheme();
      }
    }

    private static class AuthCallback_Cancel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AuthCallback_Cancel_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH_CALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.authCallback.read(iprot);
                struct.setAuthCallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.authCallback != null) {
          oprot.writeFieldBegin(AUTH_CALLBACK_FIELD_DESC);
          struct.authCallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AuthCallback_Cancel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public AuthCallback_Cancel_argsTupleScheme getScheme() {
        return new AuthCallback_Cancel_argsTupleScheme();
      }
    }

    private static class AuthCallback_Cancel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AuthCallback_Cancel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuthCallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuthCallback()) {
          struct.authCallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AuthCallback_Cancel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.authCallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.authCallback.read(iprot);
          struct.setAuthCallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_Create_args implements org.apache.thrift.TBase<MessageRouter_Create_args, MessageRouter_Create_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_Create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_Create_args");

    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CANCEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cancel", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_Create_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_Create_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String query; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String cancel; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY((short)1, "query"),
      CANCEL((short)2, "cancel");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // CANCEL
            return CANCEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CANCEL, new org.apache.thrift.meta_data.FieldMetaData("cancel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_Create_args.class, metaDataMap);
    }

    public MessageRouter_Create_args() {
    }

    public MessageRouter_Create_args(
      java.lang.String query,
      java.lang.String cancel)
    {
      this();
      this.query = query;
      this.cancel = cancel;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_Create_args(MessageRouter_Create_args other) {
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      if (other.isSetCancel()) {
        this.cancel = other.cancel;
      }
    }

    @Override
    public MessageRouter_Create_args deepCopy() {
      return new MessageRouter_Create_args(this);
    }

    @Override
    public void clear() {
      this.query = null;
      this.cancel = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getQuery() {
      return this.query;
    }

    public MessageRouter_Create_args setQuery(@org.apache.thrift.annotation.Nullable java.lang.String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCancel() {
      return this.cancel;
    }

    public MessageRouter_Create_args setCancel(@org.apache.thrift.annotation.Nullable java.lang.String cancel) {
      this.cancel = cancel;
      return this;
    }

    public void unsetCancel() {
      this.cancel = null;
    }

    /** Returns true if field cancel is set (has been assigned a value) and false otherwise */
    public boolean isSetCancel() {
      return this.cancel != null;
    }

    public void setCancelIsSet(boolean value) {
      if (!value) {
        this.cancel = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((java.lang.String)value);
        }
        break;

      case CANCEL:
        if (value == null) {
          unsetCancel();
        } else {
          setCancel((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case CANCEL:
        return getCancel();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case CANCEL:
        return isSetCancel();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_Create_args)
        return this.equals((MessageRouter_Create_args)that);
      return false;
    }

    public boolean equals(MessageRouter_Create_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_cancel = true && this.isSetCancel();
      boolean that_present_cancel = true && that.isSetCancel();
      if (this_present_cancel || that_present_cancel) {
        if (!(this_present_cancel && that_present_cancel))
          return false;
        if (!this.cancel.equals(that.cancel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetCancel()) ? 131071 : 524287);
      if (isSetCancel())
        hashCode = hashCode * 8191 + cancel.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_Create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQuery(), other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCancel(), other.isSetCancel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCancel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancel, other.cancel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_Create_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cancel:");
      if (this.cancel == null) {
        sb.append("null");
      } else {
        sb.append(this.cancel);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_Create_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_argsStandardScheme getScheme() {
        return new MessageRouter_Create_argsStandardScheme();
      }
    }

    private static class MessageRouter_Create_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_Create_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CANCEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cancel = iprot.readString();
                struct.setCancelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.cancel != null) {
          oprot.writeFieldBegin(CANCEL_FIELD_DESC);
          oprot.writeString(struct.cancel);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_Create_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_argsTupleScheme getScheme() {
        return new MessageRouter_Create_argsTupleScheme();
      }
    }

    private static class MessageRouter_Create_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_Create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        if (struct.isSetCancel()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
        if (struct.isSetCancel()) {
          oprot.writeString(struct.cancel);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cancel = iprot.readString();
          struct.setCancelIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_Create_result implements org.apache.thrift.TBase<MessageRouter_Create_result, MessageRouter_Create_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_Create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_Create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_Create_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_Create_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_Create_result.class, metaDataMap);
    }

    public MessageRouter_Create_result() {
    }

    public MessageRouter_Create_result(
      com.jetbrains.cef.remote.thrift_codegen.RObject success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_Create_result(MessageRouter_Create_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.success);
      }
    }

    @Override
    public MessageRouter_Create_result deepCopy() {
      return new MessageRouter_Create_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getSuccess() {
      return this.success;
    }

    public MessageRouter_Create_result setSuccess(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_Create_result)
        return this.equals((MessageRouter_Create_result)that);
      return false;
    }

    public boolean equals(MessageRouter_Create_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_Create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_Create_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_Create_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_resultStandardScheme getScheme() {
        return new MessageRouter_Create_resultStandardScheme();
      }
    }

    private static class MessageRouter_Create_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_Create_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_Create_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Create_resultTupleScheme getScheme() {
        return new MessageRouter_Create_resultTupleScheme();
      }
    }

    private static class MessageRouter_Create_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_Create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_Dispose_args implements org.apache.thrift.TBase<MessageRouter_Dispose_args, MessageRouter_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_Dispose_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_Dispose_args.class, metaDataMap);
    }

    public MessageRouter_Dispose_args() {
    }

    public MessageRouter_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter)
    {
      this();
      this.msgRouter = msgRouter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_Dispose_args(MessageRouter_Dispose_args other) {
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
    }

    @Override
    public MessageRouter_Dispose_args deepCopy() {
      return new MessageRouter_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_Dispose_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_Dispose_args)
        return this.equals((MessageRouter_Dispose_args)that);
      return false;
    }

    public boolean equals(MessageRouter_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_Dispose_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Dispose_argsStandardScheme getScheme() {
        return new MessageRouter_Dispose_argsStandardScheme();
      }
    }

    private static class MessageRouter_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_Dispose_argsTupleScheme getScheme() {
        return new MessageRouter_Dispose_argsTupleScheme();
      }
    }

    private static class MessageRouter_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddMessageRouterToBrowser_args implements org.apache.thrift.TBase<MessageRouter_AddMessageRouterToBrowser_args, MessageRouter_AddMessageRouterToBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddMessageRouterToBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddMessageRouterToBrowser_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      BID((short)2, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddMessageRouterToBrowser_args.class, metaDataMap);
    }

    public MessageRouter_AddMessageRouterToBrowser_args() {
    }

    public MessageRouter_AddMessageRouterToBrowser_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      int bid)
    {
      this();
      this.msgRouter = msgRouter;
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddMessageRouterToBrowser_args(MessageRouter_AddMessageRouterToBrowser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      this.bid = other.bid;
    }

    @Override
    public MessageRouter_AddMessageRouterToBrowser_args deepCopy() {
      return new MessageRouter_AddMessageRouterToBrowser_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      setBidIsSet(false);
      this.bid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_AddMessageRouterToBrowser_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouter_AddMessageRouterToBrowser_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddMessageRouterToBrowser_args)
        return this.equals((MessageRouter_AddMessageRouterToBrowser_args)that);
      return false;
    }

    public boolean equals(MessageRouter_AddMessageRouterToBrowser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddMessageRouterToBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddMessageRouterToBrowser_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_argsStandardScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_argsStandardScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddMessageRouterToBrowser_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_argsTupleScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_argsTupleScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddMessageRouterToBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddMessageRouterToBrowser_result implements org.apache.thrift.TBase<MessageRouter_AddMessageRouterToBrowser_result, MessageRouter_AddMessageRouterToBrowser_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddMessageRouterToBrowser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddMessageRouterToBrowser_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddMessageRouterToBrowser_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddMessageRouterToBrowser_result.class, metaDataMap);
    }

    public MessageRouter_AddMessageRouterToBrowser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddMessageRouterToBrowser_result(MessageRouter_AddMessageRouterToBrowser_result other) {
    }

    @Override
    public MessageRouter_AddMessageRouterToBrowser_result deepCopy() {
      return new MessageRouter_AddMessageRouterToBrowser_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddMessageRouterToBrowser_result)
        return this.equals((MessageRouter_AddMessageRouterToBrowser_result)that);
      return false;
    }

    public boolean equals(MessageRouter_AddMessageRouterToBrowser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddMessageRouterToBrowser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddMessageRouterToBrowser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_resultStandardScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_resultStandardScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddMessageRouterToBrowser_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddMessageRouterToBrowser_resultTupleScheme getScheme() {
        return new MessageRouter_AddMessageRouterToBrowser_resultTupleScheme();
      }
    }

    private static class MessageRouter_AddMessageRouterToBrowser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddMessageRouterToBrowser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddMessageRouterToBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveMessageRouterFromBrowser_args implements org.apache.thrift.TBase<MessageRouter_RemoveMessageRouterFromBrowser_args, MessageRouter_RemoveMessageRouterFromBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveMessageRouterFromBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveMessageRouterFromBrowser_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public int bid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      BID((short)2, "bid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // BID
            return BID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveMessageRouterFromBrowser_args.class, metaDataMap);
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args() {
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      int bid)
    {
      this();
      this.msgRouter = msgRouter;
      this.bid = bid;
      setBidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveMessageRouterFromBrowser_args(MessageRouter_RemoveMessageRouterFromBrowser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      this.bid = other.bid;
    }

    @Override
    public MessageRouter_RemoveMessageRouterFromBrowser_args deepCopy() {
      return new MessageRouter_RemoveMessageRouterFromBrowser_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      setBidIsSet(false);
      this.bid = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case BID:
        return getBid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case BID:
        return isSetBid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveMessageRouterFromBrowser_args)
        return this.equals((MessageRouter_RemoveMessageRouterFromBrowser_args)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveMessageRouterFromBrowser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + bid;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveMessageRouterFromBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveMessageRouterFromBrowser_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_argsStandardScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_argsStandardScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveMessageRouterFromBrowser_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_argsTupleScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_argsTupleScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveMessageRouterFromBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveMessageRouterFromBrowser_result implements org.apache.thrift.TBase<MessageRouter_RemoveMessageRouterFromBrowser_result, MessageRouter_RemoveMessageRouterFromBrowser_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveMessageRouterFromBrowser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveMessageRouterFromBrowser_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveMessageRouterFromBrowser_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveMessageRouterFromBrowser_result.class, metaDataMap);
    }

    public MessageRouter_RemoveMessageRouterFromBrowser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveMessageRouterFromBrowser_result(MessageRouter_RemoveMessageRouterFromBrowser_result other) {
    }

    @Override
    public MessageRouter_RemoveMessageRouterFromBrowser_result deepCopy() {
      return new MessageRouter_RemoveMessageRouterFromBrowser_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveMessageRouterFromBrowser_result)
        return this.equals((MessageRouter_RemoveMessageRouterFromBrowser_result)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveMessageRouterFromBrowser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveMessageRouterFromBrowser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveMessageRouterFromBrowser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_resultStandardScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_resultStandardScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveMessageRouterFromBrowser_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveMessageRouterFromBrowser_resultTupleScheme getScheme() {
        return new MessageRouter_RemoveMessageRouterFromBrowser_resultTupleScheme();
      }
    }

    private static class MessageRouter_RemoveMessageRouterFromBrowser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveMessageRouterFromBrowser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveMessageRouterFromBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddHandler_args implements org.apache.thrift.TBase<MessageRouter_AddHandler_args, MessageRouter_AddHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddHandler_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FIRST_FIELD_DESC = new org.apache.thrift.protocol.TField("first", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddHandler_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required
    public boolean first; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      HANDLER((short)2, "handler"),
      FIRST((short)3, "first");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // HANDLER
            return HANDLER;
          case 3: // FIRST
            return FIRST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FIRST_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.FIRST, new org.apache.thrift.meta_data.FieldMetaData("first", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddHandler_args.class, metaDataMap);
    }

    public MessageRouter_AddHandler_args() {
    }

    public MessageRouter_AddHandler_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      com.jetbrains.cef.remote.thrift_codegen.RObject handler,
      boolean first)
    {
      this();
      this.msgRouter = msgRouter;
      this.handler = handler;
      this.first = first;
      setFirstIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddHandler_args(MessageRouter_AddHandler_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
      this.first = other.first;
    }

    @Override
    public MessageRouter_AddHandler_args deepCopy() {
      return new MessageRouter_AddHandler_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      this.handler = null;
      setFirstIsSet(false);
      this.first = false;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_AddHandler_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouter_AddHandler_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    public boolean isFirst() {
      return this.first;
    }

    public MessageRouter_AddHandler_args setFirst(boolean first) {
      this.first = first;
      setFirstIsSet(true);
      return this;
    }

    public void unsetFirst() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRST_ISSET_ID);
    }

    /** Returns true if field first is set (has been assigned a value) and false otherwise */
    public boolean isSetFirst() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRST_ISSET_ID);
    }

    public void setFirstIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRST_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case FIRST:
        if (value == null) {
          unsetFirst();
        } else {
          setFirst((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case HANDLER:
        return getHandler();

      case FIRST:
        return isFirst();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case HANDLER:
        return isSetHandler();
      case FIRST:
        return isSetFirst();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddHandler_args)
        return this.equals((MessageRouter_AddHandler_args)that);
      return false;
    }

    public boolean equals(MessageRouter_AddHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      boolean this_present_first = true;
      boolean that_present_first = true;
      if (this_present_first || that_present_first) {
        if (!(this_present_first && that_present_first))
          return false;
        if (this.first != that.first)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      hashCode = hashCode * 8191 + ((first) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFirst(), other.isSetFirst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirst()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first, other.first);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddHandler_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("first:");
      sb.append(this.first);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
      if (handler != null) {
        handler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_argsStandardScheme getScheme() {
        return new MessageRouter_AddHandler_argsStandardScheme();
      }
    }

    private static class MessageRouter_AddHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddHandler_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FIRST
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.first = iprot.readBool();
                struct.setFirstIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        oprot.writeBool(struct.first);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_argsTupleScheme getScheme() {
        return new MessageRouter_AddHandler_argsTupleScheme();
      }
    }

    private static class MessageRouter_AddHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetHandler()) {
          optionals.set(1);
        }
        if (struct.isSetFirst()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
        if (struct.isSetFirst()) {
          oprot.writeBool(struct.first);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
        if (incoming.get(2)) {
          struct.first = iprot.readBool();
          struct.setFirstIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_AddHandler_result implements org.apache.thrift.TBase<MessageRouter_AddHandler_result, MessageRouter_AddHandler_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_AddHandler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_AddHandler_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_AddHandler_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_AddHandler_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_AddHandler_result.class, metaDataMap);
    }

    public MessageRouter_AddHandler_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_AddHandler_result(MessageRouter_AddHandler_result other) {
    }

    @Override
    public MessageRouter_AddHandler_result deepCopy() {
      return new MessageRouter_AddHandler_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_AddHandler_result)
        return this.equals((MessageRouter_AddHandler_result)that);
      return false;
    }

    public boolean equals(MessageRouter_AddHandler_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_AddHandler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_AddHandler_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_AddHandler_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_resultStandardScheme getScheme() {
        return new MessageRouter_AddHandler_resultStandardScheme();
      }
    }

    private static class MessageRouter_AddHandler_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_AddHandler_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_AddHandler_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_AddHandler_resultTupleScheme getScheme() {
        return new MessageRouter_AddHandler_resultTupleScheme();
      }
    }

    private static class MessageRouter_AddHandler_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_AddHandler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_AddHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveHandler_args implements org.apache.thrift.TBase<MessageRouter_RemoveHandler_args, MessageRouter_RemoveHandler_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveHandler_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveHandler_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveHandler_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveHandler_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      HANDLER((short)2, "handler");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // HANDLER
            return HANDLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveHandler_args.class, metaDataMap);
    }

    public MessageRouter_RemoveHandler_args() {
    }

    public MessageRouter_RemoveHandler_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      com.jetbrains.cef.remote.thrift_codegen.RObject handler)
    {
      this();
      this.msgRouter = msgRouter;
      this.handler = handler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveHandler_args(MessageRouter_RemoveHandler_args other) {
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
    }

    @Override
    public MessageRouter_RemoveHandler_args deepCopy() {
      return new MessageRouter_RemoveHandler_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      this.handler = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_RemoveHandler_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouter_RemoveHandler_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case HANDLER:
        return getHandler();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case HANDLER:
        return isSetHandler();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveHandler_args)
        return this.equals((MessageRouter_RemoveHandler_args)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveHandler_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveHandler_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveHandler_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
      if (handler != null) {
        handler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveHandler_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_argsStandardScheme getScheme() {
        return new MessageRouter_RemoveHandler_argsStandardScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveHandler_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveHandler_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_argsTupleScheme getScheme() {
        return new MessageRouter_RemoveHandler_argsTupleScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveHandler_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetHandler()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_RemoveHandler_result implements org.apache.thrift.TBase<MessageRouter_RemoveHandler_result, MessageRouter_RemoveHandler_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_RemoveHandler_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_RemoveHandler_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_RemoveHandler_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_RemoveHandler_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_RemoveHandler_result.class, metaDataMap);
    }

    public MessageRouter_RemoveHandler_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_RemoveHandler_result(MessageRouter_RemoveHandler_result other) {
    }

    @Override
    public MessageRouter_RemoveHandler_result deepCopy() {
      return new MessageRouter_RemoveHandler_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_RemoveHandler_result)
        return this.equals((MessageRouter_RemoveHandler_result)that);
      return false;
    }

    public boolean equals(MessageRouter_RemoveHandler_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_RemoveHandler_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_RemoveHandler_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_RemoveHandler_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_resultStandardScheme getScheme() {
        return new MessageRouter_RemoveHandler_resultStandardScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_RemoveHandler_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_RemoveHandler_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_RemoveHandler_resultTupleScheme getScheme() {
        return new MessageRouter_RemoveHandler_resultTupleScheme();
      }
    }

    private static class MessageRouter_RemoveHandler_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_RemoveHandler_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_RemoveHandler_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_CancelPending_args implements org.apache.thrift.TBase<MessageRouter_CancelPending_args, MessageRouter_CancelPending_args._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_CancelPending_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_CancelPending_args");

    private static final org.apache.thrift.protocol.TField MSG_ROUTER_FIELD_DESC = new org.apache.thrift.protocol.TField("msgRouter", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField HANDLER_FIELD_DESC = new org.apache.thrift.protocol.TField("handler", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_CancelPending_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_CancelPending_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter; // required
    public int bid; // required
    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ROUTER((short)1, "msgRouter"),
      BID((short)2, "bid"),
      HANDLER((short)3, "handler");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ROUTER
            return MSG_ROUTER;
          case 2: // BID
            return BID;
          case 3: // HANDLER
            return HANDLER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ROUTER, new org.apache.thrift.meta_data.FieldMetaData("msgRouter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HANDLER, new org.apache.thrift.meta_data.FieldMetaData("handler", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_CancelPending_args.class, metaDataMap);
    }

    public MessageRouter_CancelPending_args() {
    }

    public MessageRouter_CancelPending_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter,
      int bid,
      com.jetbrains.cef.remote.thrift_codegen.RObject handler)
    {
      this();
      this.msgRouter = msgRouter;
      this.bid = bid;
      setBidIsSet(true);
      this.handler = handler;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_CancelPending_args(MessageRouter_CancelPending_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgRouter()) {
        this.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.msgRouter);
      }
      this.bid = other.bid;
      if (other.isSetHandler()) {
        this.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.handler);
      }
    }

    @Override
    public MessageRouter_CancelPending_args deepCopy() {
      return new MessageRouter_CancelPending_args(this);
    }

    @Override
    public void clear() {
      this.msgRouter = null;
      setBidIsSet(false);
      this.bid = 0;
      this.handler = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getMsgRouter() {
      return this.msgRouter;
    }

    public MessageRouter_CancelPending_args setMsgRouter(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject msgRouter) {
      this.msgRouter = msgRouter;
      return this;
    }

    public void unsetMsgRouter() {
      this.msgRouter = null;
    }

    /** Returns true if field msgRouter is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgRouter() {
      return this.msgRouter != null;
    }

    public void setMsgRouterIsSet(boolean value) {
      if (!value) {
        this.msgRouter = null;
      }
    }

    public int getBid() {
      return this.bid;
    }

    public MessageRouter_CancelPending_args setBid(int bid) {
      this.bid = bid;
      setBidIsSet(true);
      return this;
    }

    public void unsetBid() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
    }

    /** Returns true if field bid is set (has been assigned a value) and false otherwise */
    public boolean isSetBid() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
    }

    public void setBidIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getHandler() {
      return this.handler;
    }

    public MessageRouter_CancelPending_args setHandler(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject handler) {
      this.handler = handler;
      return this;
    }

    public void unsetHandler() {
      this.handler = null;
    }

    /** Returns true if field handler is set (has been assigned a value) and false otherwise */
    public boolean isSetHandler() {
      return this.handler != null;
    }

    public void setHandlerIsSet(boolean value) {
      if (!value) {
        this.handler = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MSG_ROUTER:
        if (value == null) {
          unsetMsgRouter();
        } else {
          setMsgRouter((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case BID:
        if (value == null) {
          unsetBid();
        } else {
          setBid((java.lang.Integer)value);
        }
        break;

      case HANDLER:
        if (value == null) {
          unsetHandler();
        } else {
          setHandler((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ROUTER:
        return getMsgRouter();

      case BID:
        return getBid();

      case HANDLER:
        return getHandler();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG_ROUTER:
        return isSetMsgRouter();
      case BID:
        return isSetBid();
      case HANDLER:
        return isSetHandler();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_CancelPending_args)
        return this.equals((MessageRouter_CancelPending_args)that);
      return false;
    }

    public boolean equals(MessageRouter_CancelPending_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msgRouter = true && this.isSetMsgRouter();
      boolean that_present_msgRouter = true && that.isSetMsgRouter();
      if (this_present_msgRouter || that_present_msgRouter) {
        if (!(this_present_msgRouter && that_present_msgRouter))
          return false;
        if (!this.msgRouter.equals(that.msgRouter))
          return false;
      }

      boolean this_present_bid = true;
      boolean that_present_bid = true;
      if (this_present_bid || that_present_bid) {
        if (!(this_present_bid && that_present_bid))
          return false;
        if (this.bid != that.bid)
          return false;
      }

      boolean this_present_handler = true && this.isSetHandler();
      boolean that_present_handler = true && that.isSetHandler();
      if (this_present_handler || that_present_handler) {
        if (!(this_present_handler && that_present_handler))
          return false;
        if (!this.handler.equals(that.handler))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsgRouter()) ? 131071 : 524287);
      if (isSetMsgRouter())
        hashCode = hashCode * 8191 + msgRouter.hashCode();

      hashCode = hashCode * 8191 + bid;

      hashCode = hashCode * 8191 + ((isSetHandler()) ? 131071 : 524287);
      if (isSetHandler())
        hashCode = hashCode * 8191 + handler.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_CancelPending_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMsgRouter(), other.isSetMsgRouter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgRouter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgRouter, other.msgRouter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBid(), other.isSetBid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHandler(), other.isSetHandler());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHandler()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handler, other.handler);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_CancelPending_args(");
      boolean first = true;

      sb.append("msgRouter:");
      if (this.msgRouter == null) {
        sb.append("null");
      } else {
        sb.append(this.msgRouter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bid:");
      sb.append(this.bid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("handler:");
      if (this.handler == null) {
        sb.append("null");
      } else {
        sb.append(this.handler);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgRouter != null) {
        msgRouter.validate();
      }
      if (handler != null) {
        handler.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_CancelPending_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_argsStandardScheme getScheme() {
        return new MessageRouter_CancelPending_argsStandardScheme();
      }
    }

    private static class MessageRouter_CancelPending_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_CancelPending_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ROUTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.msgRouter.read(iprot);
                struct.setMsgRouterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.bid = iprot.readI32();
                struct.setBidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HANDLER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.handler.read(iprot);
                struct.setHandlerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgRouter != null) {
          oprot.writeFieldBegin(MSG_ROUTER_FIELD_DESC);
          struct.msgRouter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BID_FIELD_DESC);
        oprot.writeI32(struct.bid);
        oprot.writeFieldEnd();
        if (struct.handler != null) {
          oprot.writeFieldBegin(HANDLER_FIELD_DESC);
          struct.handler.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_CancelPending_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_argsTupleScheme getScheme() {
        return new MessageRouter_CancelPending_argsTupleScheme();
      }
    }

    private static class MessageRouter_CancelPending_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_CancelPending_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsgRouter()) {
          optionals.set(0);
        }
        if (struct.isSetBid()) {
          optionals.set(1);
        }
        if (struct.isSetHandler()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMsgRouter()) {
          struct.msgRouter.write(oprot);
        }
        if (struct.isSetBid()) {
          oprot.writeI32(struct.bid);
        }
        if (struct.isSetHandler()) {
          struct.handler.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.msgRouter = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.msgRouter.read(iprot);
          struct.setMsgRouterIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bid = iprot.readI32();
          struct.setBidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.handler = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.handler.read(iprot);
          struct.setHandlerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class MessageRouter_CancelPending_result implements org.apache.thrift.TBase<MessageRouter_CancelPending_result, MessageRouter_CancelPending_result._Fields>, java.io.Serializable, Cloneable, Comparable<MessageRouter_CancelPending_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageRouter_CancelPending_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageRouter_CancelPending_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageRouter_CancelPending_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageRouter_CancelPending_result.class, metaDataMap);
    }

    public MessageRouter_CancelPending_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MessageRouter_CancelPending_result(MessageRouter_CancelPending_result other) {
    }

    @Override
    public MessageRouter_CancelPending_result deepCopy() {
      return new MessageRouter_CancelPending_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof MessageRouter_CancelPending_result)
        return this.equals((MessageRouter_CancelPending_result)that);
      return false;
    }

    public boolean equals(MessageRouter_CancelPending_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(MessageRouter_CancelPending_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageRouter_CancelPending_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MessageRouter_CancelPending_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_resultStandardScheme getScheme() {
        return new MessageRouter_CancelPending_resultStandardScheme();
      }
    }

    private static class MessageRouter_CancelPending_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageRouter_CancelPending_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MessageRouter_CancelPending_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public MessageRouter_CancelPending_resultTupleScheme getScheme() {
        return new MessageRouter_CancelPending_resultTupleScheme();
      }
    }

    private static class MessageRouter_CancelPending_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageRouter_CancelPending_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MessageRouter_CancelPending_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class QueryCallback_Dispose_args implements org.apache.thrift.TBase<QueryCallback_Dispose_args, QueryCallback_Dispose_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryCallback_Dispose_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryCallback_Dispose_args");

    private static final org.apache.thrift.protocol.TField QCALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("qcallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryCallback_Dispose_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryCallback_Dispose_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QCALLBACK((short)1, "qcallback");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QCALLBACK
            return QCALLBACK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QCALLBACK, new org.apache.thrift.meta_data.FieldMetaData("qcallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryCallback_Dispose_args.class, metaDataMap);
    }

    public QueryCallback_Dispose_args() {
    }

    public QueryCallback_Dispose_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject qcallback)
    {
      this();
      this.qcallback = qcallback;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryCallback_Dispose_args(QueryCallback_Dispose_args other) {
      if (other.isSetQcallback()) {
        this.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.qcallback);
      }
    }

    @Override
    public QueryCallback_Dispose_args deepCopy() {
      return new QueryCallback_Dispose_args(this);
    }

    @Override
    public void clear() {
      this.qcallback = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getQcallback() {
      return this.qcallback;
    }

    public QueryCallback_Dispose_args setQcallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) {
      this.qcallback = qcallback;
      return this;
    }

    public void unsetQcallback() {
      this.qcallback = null;
    }

    /** Returns true if field qcallback is set (has been assigned a value) and false otherwise */
    public boolean isSetQcallback() {
      return this.qcallback != null;
    }

    public void setQcallbackIsSet(boolean value) {
      if (!value) {
        this.qcallback = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QCALLBACK:
        if (value == null) {
          unsetQcallback();
        } else {
          setQcallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QCALLBACK:
        return getQcallback();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QCALLBACK:
        return isSetQcallback();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof QueryCallback_Dispose_args)
        return this.equals((QueryCallback_Dispose_args)that);
      return false;
    }

    public boolean equals(QueryCallback_Dispose_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qcallback = true && this.isSetQcallback();
      boolean that_present_qcallback = true && that.isSetQcallback();
      if (this_present_qcallback || that_present_qcallback) {
        if (!(this_present_qcallback && that_present_qcallback))
          return false;
        if (!this.qcallback.equals(that.qcallback))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQcallback()) ? 131071 : 524287);
      if (isSetQcallback())
        hashCode = hashCode * 8191 + qcallback.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QueryCallback_Dispose_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQcallback(), other.isSetQcallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQcallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qcallback, other.qcallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryCallback_Dispose_args(");
      boolean first = true;

      sb.append("qcallback:");
      if (this.qcallback == null) {
        sb.append("null");
      } else {
        sb.append(this.qcallback);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qcallback != null) {
        qcallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryCallback_Dispose_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Dispose_argsStandardScheme getScheme() {
        return new QueryCallback_Dispose_argsStandardScheme();
      }
    }

    private static class QueryCallback_Dispose_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryCallback_Dispose_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QCALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.qcallback.read(iprot);
                struct.setQcallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qcallback != null) {
          oprot.writeFieldBegin(QCALLBACK_FIELD_DESC);
          struct.qcallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryCallback_Dispose_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Dispose_argsTupleScheme getScheme() {
        return new QueryCallback_Dispose_argsTupleScheme();
      }
    }

    private static class QueryCallback_Dispose_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryCallback_Dispose_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQcallback()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQcallback()) {
          struct.qcallback.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Dispose_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.qcallback.read(iprot);
          struct.setQcallbackIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class QueryCallback_Success_args implements org.apache.thrift.TBase<QueryCallback_Success_args, QueryCallback_Success_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryCallback_Success_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryCallback_Success_args");

    private static final org.apache.thrift.protocol.TField QCALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("qcallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("response", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryCallback_Success_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryCallback_Success_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String response; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QCALLBACK((short)1, "qcallback"),
      RESPONSE((short)2, "response");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QCALLBACK
            return QCALLBACK;
          case 2: // RESPONSE
            return RESPONSE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QCALLBACK, new org.apache.thrift.meta_data.FieldMetaData("qcallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("response", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryCallback_Success_args.class, metaDataMap);
    }

    public QueryCallback_Success_args() {
    }

    public QueryCallback_Success_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject qcallback,
      java.lang.String response)
    {
      this();
      this.qcallback = qcallback;
      this.response = response;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryCallback_Success_args(QueryCallback_Success_args other) {
      if (other.isSetQcallback()) {
        this.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.qcallback);
      }
      if (other.isSetResponse()) {
        this.response = other.response;
      }
    }

    @Override
    public QueryCallback_Success_args deepCopy() {
      return new QueryCallback_Success_args(this);
    }

    @Override
    public void clear() {
      this.qcallback = null;
      this.response = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getQcallback() {
      return this.qcallback;
    }

    public QueryCallback_Success_args setQcallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) {
      this.qcallback = qcallback;
      return this;
    }

    public void unsetQcallback() {
      this.qcallback = null;
    }

    /** Returns true if field qcallback is set (has been assigned a value) and false otherwise */
    public boolean isSetQcallback() {
      return this.qcallback != null;
    }

    public void setQcallbackIsSet(boolean value) {
      if (!value) {
        this.qcallback = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getResponse() {
      return this.response;
    }

    public QueryCallback_Success_args setResponse(@org.apache.thrift.annotation.Nullable java.lang.String response) {
      this.response = response;
      return this;
    }

    public void unsetResponse() {
      this.response = null;
    }

    /** Returns true if field response is set (has been assigned a value) and false otherwise */
    public boolean isSetResponse() {
      return this.response != null;
    }

    public void setResponseIsSet(boolean value) {
      if (!value) {
        this.response = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QCALLBACK:
        if (value == null) {
          unsetQcallback();
        } else {
          setQcallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case RESPONSE:
        if (value == null) {
          unsetResponse();
        } else {
          setResponse((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QCALLBACK:
        return getQcallback();

      case RESPONSE:
        return getResponse();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QCALLBACK:
        return isSetQcallback();
      case RESPONSE:
        return isSetResponse();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof QueryCallback_Success_args)
        return this.equals((QueryCallback_Success_args)that);
      return false;
    }

    public boolean equals(QueryCallback_Success_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qcallback = true && this.isSetQcallback();
      boolean that_present_qcallback = true && that.isSetQcallback();
      if (this_present_qcallback || that_present_qcallback) {
        if (!(this_present_qcallback && that_present_qcallback))
          return false;
        if (!this.qcallback.equals(that.qcallback))
          return false;
      }

      boolean this_present_response = true && this.isSetResponse();
      boolean that_present_response = true && that.isSetResponse();
      if (this_present_response || that_present_response) {
        if (!(this_present_response && that_present_response))
          return false;
        if (!this.response.equals(that.response))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQcallback()) ? 131071 : 524287);
      if (isSetQcallback())
        hashCode = hashCode * 8191 + qcallback.hashCode();

      hashCode = hashCode * 8191 + ((isSetResponse()) ? 131071 : 524287);
      if (isSetResponse())
        hashCode = hashCode * 8191 + response.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QueryCallback_Success_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQcallback(), other.isSetQcallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQcallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qcallback, other.qcallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResponse(), other.isSetResponse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResponse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.response, other.response);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryCallback_Success_args(");
      boolean first = true;

      sb.append("qcallback:");
      if (this.qcallback == null) {
        sb.append("null");
      } else {
        sb.append(this.qcallback);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("response:");
      if (this.response == null) {
        sb.append("null");
      } else {
        sb.append(this.response);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qcallback != null) {
        qcallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryCallback_Success_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Success_argsStandardScheme getScheme() {
        return new QueryCallback_Success_argsStandardScheme();
      }
    }

    private static class QueryCallback_Success_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryCallback_Success_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QCALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.qcallback.read(iprot);
                struct.setQcallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESPONSE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.response = iprot.readString();
                struct.setResponseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qcallback != null) {
          oprot.writeFieldBegin(QCALLBACK_FIELD_DESC);
          struct.qcallback.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.response != null) {
          oprot.writeFieldBegin(RESPONSE_FIELD_DESC);
          oprot.writeString(struct.response);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryCallback_Success_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Success_argsTupleScheme getScheme() {
        return new QueryCallback_Success_argsTupleScheme();
      }
    }

    private static class QueryCallback_Success_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryCallback_Success_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQcallback()) {
          optionals.set(0);
        }
        if (struct.isSetResponse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQcallback()) {
          struct.qcallback.write(oprot);
        }
        if (struct.isSetResponse()) {
          oprot.writeString(struct.response);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Success_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.qcallback.read(iprot);
          struct.setQcallbackIsSet(true);
        }
        if (incoming.get(1)) {
          struct.response = iprot.readString();
          struct.setResponseIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class QueryCallback_Failure_args implements org.apache.thrift.TBase<QueryCallback_Failure_args, QueryCallback_Failure_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryCallback_Failure_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryCallback_Failure_args");

    private static final org.apache.thrift.protocol.TField QCALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("qcallback", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_code", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_message", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryCallback_Failure_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryCallback_Failure_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback; // required
    public int error_code; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String error_message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QCALLBACK((short)1, "qcallback"),
      ERROR_CODE((short)2, "error_code"),
      ERROR_MESSAGE((short)3, "error_message");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QCALLBACK
            return QCALLBACK;
          case 2: // ERROR_CODE
            return ERROR_CODE;
          case 3: // ERROR_MESSAGE
            return ERROR_MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERROR_CODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QCALLBACK, new org.apache.thrift.meta_data.FieldMetaData("qcallback", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.jetbrains.cef.remote.thrift_codegen.RObject.class)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("error_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("error_message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryCallback_Failure_args.class, metaDataMap);
    }

    public QueryCallback_Failure_args() {
    }

    public QueryCallback_Failure_args(
      com.jetbrains.cef.remote.thrift_codegen.RObject qcallback,
      int error_code,
      java.lang.String error_message)
    {
      this();
      this.qcallback = qcallback;
      this.error_code = error_code;
      setError_codeIsSet(true);
      this.error_message = error_message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryCallback_Failure_args(QueryCallback_Failure_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetQcallback()) {
        this.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject(other.qcallback);
      }
      this.error_code = other.error_code;
      if (other.isSetError_message()) {
        this.error_message = other.error_message;
      }
    }

    @Override
    public QueryCallback_Failure_args deepCopy() {
      return new QueryCallback_Failure_args(this);
    }

    @Override
    public void clear() {
      this.qcallback = null;
      setError_codeIsSet(false);
      this.error_code = 0;
      this.error_message = null;
    }

    @org.apache.thrift.annotation.Nullable
    public com.jetbrains.cef.remote.thrift_codegen.RObject getQcallback() {
      return this.qcallback;
    }

    public QueryCallback_Failure_args setQcallback(@org.apache.thrift.annotation.Nullable com.jetbrains.cef.remote.thrift_codegen.RObject qcallback) {
      this.qcallback = qcallback;
      return this;
    }

    public void unsetQcallback() {
      this.qcallback = null;
    }

    /** Returns true if field qcallback is set (has been assigned a value) and false otherwise */
    public boolean isSetQcallback() {
      return this.qcallback != null;
    }

    public void setQcallbackIsSet(boolean value) {
      if (!value) {
        this.qcallback = null;
      }
    }

    public int getError_code() {
      return this.error_code;
    }

    public QueryCallback_Failure_args setError_code(int error_code) {
      this.error_code = error_code;
      setError_codeIsSet(true);
      return this;
    }

    public void unsetError_code() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
    }

    /** Returns true if field error_code is set (has been assigned a value) and false otherwise */
    public boolean isSetError_code() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERROR_CODE_ISSET_ID);
    }

    public void setError_codeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERROR_CODE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getError_message() {
      return this.error_message;
    }

    public QueryCallback_Failure_args setError_message(@org.apache.thrift.annotation.Nullable java.lang.String error_message) {
      this.error_message = error_message;
      return this;
    }

    public void unsetError_message() {
      this.error_message = null;
    }

    /** Returns true if field error_message is set (has been assigned a value) and false otherwise */
    public boolean isSetError_message() {
      return this.error_message != null;
    }

    public void setError_messageIsSet(boolean value) {
      if (!value) {
        this.error_message = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case QCALLBACK:
        if (value == null) {
          unsetQcallback();
        } else {
          setQcallback((com.jetbrains.cef.remote.thrift_codegen.RObject)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetError_code();
        } else {
          setError_code((java.lang.Integer)value);
        }
        break;

      case ERROR_MESSAGE:
        if (value == null) {
          unsetError_message();
        } else {
          setError_message((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case QCALLBACK:
        return getQcallback();

      case ERROR_CODE:
        return getError_code();

      case ERROR_MESSAGE:
        return getError_message();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case QCALLBACK:
        return isSetQcallback();
      case ERROR_CODE:
        return isSetError_code();
      case ERROR_MESSAGE:
        return isSetError_message();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof QueryCallback_Failure_args)
        return this.equals((QueryCallback_Failure_args)that);
      return false;
    }

    public boolean equals(QueryCallback_Failure_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qcallback = true && this.isSetQcallback();
      boolean that_present_qcallback = true && that.isSetQcallback();
      if (this_present_qcallback || that_present_qcallback) {
        if (!(this_present_qcallback && that_present_qcallback))
          return false;
        if (!this.qcallback.equals(that.qcallback))
          return false;
      }

      boolean this_present_error_code = true;
      boolean that_present_error_code = true;
      if (this_present_error_code || that_present_error_code) {
        if (!(this_present_error_code && that_present_error_code))
          return false;
        if (this.error_code != that.error_code)
          return false;
      }

      boolean this_present_error_message = true && this.isSetError_message();
      boolean that_present_error_message = true && that.isSetError_message();
      if (this_present_error_message || that_present_error_message) {
        if (!(this_present_error_message && that_present_error_message))
          return false;
        if (!this.error_message.equals(that.error_message))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQcallback()) ? 131071 : 524287);
      if (isSetQcallback())
        hashCode = hashCode * 8191 + qcallback.hashCode();

      hashCode = hashCode * 8191 + error_code;

      hashCode = hashCode * 8191 + ((isSetError_message()) ? 131071 : 524287);
      if (isSetError_message())
        hashCode = hashCode * 8191 + error_message.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(QueryCallback_Failure_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetQcallback(), other.isSetQcallback());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQcallback()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qcallback, other.qcallback);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetError_code(), other.isSetError_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_code, other.error_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetError_message(), other.isSetError_message());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError_message()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_message, other.error_message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryCallback_Failure_args(");
      boolean first = true;

      sb.append("qcallback:");
      if (this.qcallback == null) {
        sb.append("null");
      } else {
        sb.append(this.qcallback);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("error_code:");
      sb.append(this.error_code);
      first = false;
      if (!first) sb.append(", ");
      sb.append("error_message:");
      if (this.error_message == null) {
        sb.append("null");
      } else {
        sb.append(this.error_message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (qcallback != null) {
        qcallback.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryCallback_Failure_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Failure_argsStandardScheme getScheme() {
        return new QueryCallback_Failure_argsStandardScheme();
      }
    }

    private static class QueryCallback_Failure_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryCallback_Failure_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QCALLBACK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
                struct.qcallback.read(iprot);
                struct.setQcallbackIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.error_code = iprot.readI32();
                struct.setError_codeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ERROR_MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.error_message = iprot.readString();
                struct.setError_messageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qcallback != null) {
          oprot.writeFieldBegin(QCALLBACK_FIELD_DESC);
          struct.qcallback.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.error_code);
        oprot.writeFieldEnd();
        if (struct.error_message != null) {
          oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.error_message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryCallback_Failure_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public QueryCallback_Failure_argsTupleScheme getScheme() {
        return new QueryCallback_Failure_argsTupleScheme();
      }
    }

    private static class QueryCallback_Failure_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryCallback_Failure_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQcallback()) {
          optionals.set(0);
        }
        if (struct.isSetError_code()) {
          optionals.set(1);
        }
        if (struct.isSetError_message()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetQcallback()) {
          struct.qcallback.write(oprot);
        }
        if (struct.isSetError_code()) {
          oprot.writeI32(struct.error_code);
        }
        if (struct.isSetError_message()) {
          oprot.writeString(struct.error_message);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryCallback_Failure_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.qcallback = new com.jetbrains.cef.remote.thrift_codegen.RObject();
          struct.qcallback.read(iprot);
          struct.setQcallbackIsSet(true);
        }
        if (incoming.get(1)) {
          struct.error_code = iprot.readI32();
          struct.setError_codeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.error_message = iprot.readString();
          struct.setError_messageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
