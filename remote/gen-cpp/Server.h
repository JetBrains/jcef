/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Server_H
#define Server_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "cef_server_types.h"

namespace thrift_codegen {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServerIf {
 public:
  virtual ~ServerIf() {}
  virtual int32_t connect(const std::string& backwardConnectionPipe) = 0;
  virtual void log(const std::string& msg) = 0;
  virtual void echo(std::string& _return, const std::string& msg) = 0;
  virtual void version(std::string& _return) = 0;
  virtual void stop() = 0;
  virtual int32_t createBrowser(const int32_t cid, const std::string& url) = 0;
  virtual void closeBrowser(const int32_t bid) = 0;
  virtual void Browser_Reload(const int32_t bid) = 0;
  virtual void Browser_ReloadIgnoreCache(const int32_t bid) = 0;
  virtual void Browser_LoadURL(const int32_t bid, const std::string& url) = 0;
  virtual void Browser_GetURL(std::string& _return, const int32_t bid) = 0;
  virtual void Browser_ExecuteJavaScript(const int32_t bid, const std::string& code, const std::string& url, const int32_t line) = 0;
  virtual void Browser_WasResized(const int32_t bid, const int32_t width, const int32_t height) = 0;
  virtual void Browser_SendKeyEvent(const int32_t bid, const int32_t event_type, const int32_t modifiers, const int16_t key_char, const int64_t scanCode, const int32_t key_code) = 0;
  virtual void Browser_SendMouseEvent(const int32_t bid, const int32_t event_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t click_count, const int32_t button) = 0;
  virtual void Browser_SendMouseWheelEvent(const int32_t bid, const int32_t scroll_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t delta, const int32_t units_to_scroll) = 0;
  virtual void Request_Update(const  ::thrift_codegen::RObject& request) = 0;
  virtual void Request_GetPostData( ::thrift_codegen::PostData& _return, const  ::thrift_codegen::RObject& request) = 0;
  virtual void Request_SetPostData(const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::PostData& postData) = 0;
  virtual void Request_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& request, const std::string& name) = 0;
  virtual void Request_SetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name, const std::string& value, const bool overwrite) = 0;
  virtual void Request_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& request) = 0;
  virtual void Request_SetHeaderMap(const  ::thrift_codegen::RObject& request, const std::map<std::string, std::string> & headerMap) = 0;
  virtual void Request_Set(const  ::thrift_codegen::RObject& request, const std::string& url, const std::string& method, const  ::thrift_codegen::PostData& postData, const std::map<std::string, std::string> & headerMap) = 0;
  virtual void Response_Update(const  ::thrift_codegen::RObject& response) = 0;
  virtual void Response_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& response, const std::string& name) = 0;
  virtual void Response_SetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name, const std::string& value, const bool overwrite) = 0;
  virtual void Response_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& response) = 0;
  virtual void Response_SetHeaderMap(const  ::thrift_codegen::RObject& response, const std::map<std::string, std::string> & headerMap) = 0;
  virtual void Callback_Dispose(const  ::thrift_codegen::RObject& callback) = 0;
  virtual void Callback_Continue(const  ::thrift_codegen::RObject& callback) = 0;
  virtual void Callback_Cancel(const  ::thrift_codegen::RObject& callback) = 0;
  virtual void AuthCallback_Dispose(const  ::thrift_codegen::RObject& authCallback) = 0;
  virtual void AuthCallback_Continue(const  ::thrift_codegen::RObject& authCallback, const std::string& username, const std::string& password) = 0;
  virtual void AuthCallback_Cancel(const  ::thrift_codegen::RObject& authCallback) = 0;
  virtual void MessageRouter_Create( ::thrift_codegen::RObject& _return, const std::string& query, const std::string& cancel) = 0;
  virtual void MessageRouter_Dispose(const  ::thrift_codegen::RObject& msgRouter) = 0;
  virtual void MessageRouter_AddMessageRouterToBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) = 0;
  virtual void MessageRouter_RemoveMessageRouterFromBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) = 0;
  virtual void MessageRouter_AddHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler, const bool first) = 0;
  virtual void MessageRouter_RemoveHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler) = 0;
  virtual void MessageRouter_CancelPending(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid, const  ::thrift_codegen::RObject& handler) = 0;
  virtual void QueryCallback_Dispose(const  ::thrift_codegen::RObject& qcallback) = 0;
  virtual void QueryCallback_Success(const  ::thrift_codegen::RObject& qcallback, const std::string& response) = 0;
  virtual void QueryCallback_Failure(const  ::thrift_codegen::RObject& qcallback, const int32_t error_code, const std::string& error_message) = 0;
};

class ServerIfFactory {
 public:
  typedef ServerIf Handler;

  virtual ~ServerIfFactory() {}

  virtual ServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServerIf* /* handler */) = 0;
  };

class ServerIfSingletonFactory : virtual public ServerIfFactory {
 public:
  ServerIfSingletonFactory(const ::std::shared_ptr<ServerIf>& iface) : iface_(iface) {}
  virtual ~ServerIfSingletonFactory() {}

  virtual ServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ServerIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ServerIf> iface_;
};

class ServerNull : virtual public ServerIf {
 public:
  virtual ~ServerNull() {}
  int32_t connect(const std::string& /* backwardConnectionPipe */) override {
    int32_t _return = 0;
    return _return;
  }
  void log(const std::string& /* msg */) override {
    return;
  }
  void echo(std::string& /* _return */, const std::string& /* msg */) override {
    return;
  }
  void version(std::string& /* _return */) override {
    return;
  }
  void stop() override {
    return;
  }
  int32_t createBrowser(const int32_t /* cid */, const std::string& /* url */) override {
    int32_t _return = 0;
    return _return;
  }
  void closeBrowser(const int32_t /* bid */) override {
    return;
  }
  void Browser_Reload(const int32_t /* bid */) override {
    return;
  }
  void Browser_ReloadIgnoreCache(const int32_t /* bid */) override {
    return;
  }
  void Browser_LoadURL(const int32_t /* bid */, const std::string& /* url */) override {
    return;
  }
  void Browser_GetURL(std::string& /* _return */, const int32_t /* bid */) override {
    return;
  }
  void Browser_ExecuteJavaScript(const int32_t /* bid */, const std::string& /* code */, const std::string& /* url */, const int32_t /* line */) override {
    return;
  }
  void Browser_WasResized(const int32_t /* bid */, const int32_t /* width */, const int32_t /* height */) override {
    return;
  }
  void Browser_SendKeyEvent(const int32_t /* bid */, const int32_t /* event_type */, const int32_t /* modifiers */, const int16_t /* key_char */, const int64_t /* scanCode */, const int32_t /* key_code */) override {
    return;
  }
  void Browser_SendMouseEvent(const int32_t /* bid */, const int32_t /* event_type */, const int32_t /* x */, const int32_t /* y */, const int32_t /* modifiers */, const int32_t /* click_count */, const int32_t /* button */) override {
    return;
  }
  void Browser_SendMouseWheelEvent(const int32_t /* bid */, const int32_t /* scroll_type */, const int32_t /* x */, const int32_t /* y */, const int32_t /* modifiers */, const int32_t /* delta */, const int32_t /* units_to_scroll */) override {
    return;
  }
  void Request_Update(const  ::thrift_codegen::RObject& /* request */) override {
    return;
  }
  void Request_GetPostData( ::thrift_codegen::PostData& /* _return */, const  ::thrift_codegen::RObject& /* request */) override {
    return;
  }
  void Request_SetPostData(const  ::thrift_codegen::RObject& /* request */, const  ::thrift_codegen::PostData& /* postData */) override {
    return;
  }
  void Request_GetHeaderByName(std::string& /* _return */, const  ::thrift_codegen::RObject& /* request */, const std::string& /* name */) override {
    return;
  }
  void Request_SetHeaderByName(const  ::thrift_codegen::RObject& /* request */, const std::string& /* name */, const std::string& /* value */, const bool /* overwrite */) override {
    return;
  }
  void Request_GetHeaderMap(std::map<std::string, std::string> & /* _return */, const  ::thrift_codegen::RObject& /* request */) override {
    return;
  }
  void Request_SetHeaderMap(const  ::thrift_codegen::RObject& /* request */, const std::map<std::string, std::string> & /* headerMap */) override {
    return;
  }
  void Request_Set(const  ::thrift_codegen::RObject& /* request */, const std::string& /* url */, const std::string& /* method */, const  ::thrift_codegen::PostData& /* postData */, const std::map<std::string, std::string> & /* headerMap */) override {
    return;
  }
  void Response_Update(const  ::thrift_codegen::RObject& /* response */) override {
    return;
  }
  void Response_GetHeaderByName(std::string& /* _return */, const  ::thrift_codegen::RObject& /* response */, const std::string& /* name */) override {
    return;
  }
  void Response_SetHeaderByName(const  ::thrift_codegen::RObject& /* response */, const std::string& /* name */, const std::string& /* value */, const bool /* overwrite */) override {
    return;
  }
  void Response_GetHeaderMap(std::map<std::string, std::string> & /* _return */, const  ::thrift_codegen::RObject& /* response */) override {
    return;
  }
  void Response_SetHeaderMap(const  ::thrift_codegen::RObject& /* response */, const std::map<std::string, std::string> & /* headerMap */) override {
    return;
  }
  void Callback_Dispose(const  ::thrift_codegen::RObject& /* callback */) override {
    return;
  }
  void Callback_Continue(const  ::thrift_codegen::RObject& /* callback */) override {
    return;
  }
  void Callback_Cancel(const  ::thrift_codegen::RObject& /* callback */) override {
    return;
  }
  void AuthCallback_Dispose(const  ::thrift_codegen::RObject& /* authCallback */) override {
    return;
  }
  void AuthCallback_Continue(const  ::thrift_codegen::RObject& /* authCallback */, const std::string& /* username */, const std::string& /* password */) override {
    return;
  }
  void AuthCallback_Cancel(const  ::thrift_codegen::RObject& /* authCallback */) override {
    return;
  }
  void MessageRouter_Create( ::thrift_codegen::RObject& /* _return */, const std::string& /* query */, const std::string& /* cancel */) override {
    return;
  }
  void MessageRouter_Dispose(const  ::thrift_codegen::RObject& /* msgRouter */) override {
    return;
  }
  void MessageRouter_AddMessageRouterToBrowser(const  ::thrift_codegen::RObject& /* msgRouter */, const int32_t /* bid */) override {
    return;
  }
  void MessageRouter_RemoveMessageRouterFromBrowser(const  ::thrift_codegen::RObject& /* msgRouter */, const int32_t /* bid */) override {
    return;
  }
  void MessageRouter_AddHandler(const  ::thrift_codegen::RObject& /* msgRouter */, const  ::thrift_codegen::RObject& /* handler */, const bool /* first */) override {
    return;
  }
  void MessageRouter_RemoveHandler(const  ::thrift_codegen::RObject& /* msgRouter */, const  ::thrift_codegen::RObject& /* handler */) override {
    return;
  }
  void MessageRouter_CancelPending(const  ::thrift_codegen::RObject& /* msgRouter */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* handler */) override {
    return;
  }
  void QueryCallback_Dispose(const  ::thrift_codegen::RObject& /* qcallback */) override {
    return;
  }
  void QueryCallback_Success(const  ::thrift_codegen::RObject& /* qcallback */, const std::string& /* response */) override {
    return;
  }
  void QueryCallback_Failure(const  ::thrift_codegen::RObject& /* qcallback */, const int32_t /* error_code */, const std::string& /* error_message */) override {
    return;
  }
};

typedef struct _Server_connect_args__isset {
  _Server_connect_args__isset() : backwardConnectionPipe(false) {}
  bool backwardConnectionPipe :1;
} _Server_connect_args__isset;

class Server_connect_args {
 public:

  Server_connect_args(const Server_connect_args&);
  Server_connect_args& operator=(const Server_connect_args&);
  Server_connect_args() noexcept
                      : backwardConnectionPipe() {
  }

  virtual ~Server_connect_args() noexcept;
  std::string backwardConnectionPipe;

  _Server_connect_args__isset __isset;

  void __set_backwardConnectionPipe(const std::string& val);

  bool operator == (const Server_connect_args & rhs) const
  {
    if (!(backwardConnectionPipe == rhs.backwardConnectionPipe))
      return false;
    return true;
  }
  bool operator != (const Server_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_connect_pargs {
 public:


  virtual ~Server_connect_pargs() noexcept;
  const std::string* backwardConnectionPipe;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_connect_result__isset {
  _Server_connect_result__isset() : success(false) {}
  bool success :1;
} _Server_connect_result__isset;

class Server_connect_result {
 public:

  Server_connect_result(const Server_connect_result&) noexcept;
  Server_connect_result& operator=(const Server_connect_result&) noexcept;
  Server_connect_result() noexcept
                        : success(0) {
  }

  virtual ~Server_connect_result() noexcept;
  int32_t success;

  _Server_connect_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Server_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_connect_presult__isset {
  _Server_connect_presult__isset() : success(false) {}
  bool success :1;
} _Server_connect_presult__isset;

class Server_connect_presult {
 public:


  virtual ~Server_connect_presult() noexcept;
  int32_t* success;

  _Server_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_log_args__isset {
  _Server_log_args__isset() : msg(false) {}
  bool msg :1;
} _Server_log_args__isset;

class Server_log_args {
 public:

  Server_log_args(const Server_log_args&);
  Server_log_args& operator=(const Server_log_args&);
  Server_log_args() noexcept
                  : msg() {
  }

  virtual ~Server_log_args() noexcept;
  std::string msg;

  _Server_log_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const Server_log_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Server_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_log_pargs {
 public:


  virtual ~Server_log_pargs() noexcept;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_echo_args__isset {
  _Server_echo_args__isset() : msg(false) {}
  bool msg :1;
} _Server_echo_args__isset;

class Server_echo_args {
 public:

  Server_echo_args(const Server_echo_args&);
  Server_echo_args& operator=(const Server_echo_args&);
  Server_echo_args() noexcept
                   : msg() {
  }

  virtual ~Server_echo_args() noexcept;
  std::string msg;

  _Server_echo_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const Server_echo_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const Server_echo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_echo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_echo_pargs {
 public:


  virtual ~Server_echo_pargs() noexcept;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_echo_result__isset {
  _Server_echo_result__isset() : success(false) {}
  bool success :1;
} _Server_echo_result__isset;

class Server_echo_result {
 public:

  Server_echo_result(const Server_echo_result&);
  Server_echo_result& operator=(const Server_echo_result&);
  Server_echo_result() noexcept
                     : success() {
  }

  virtual ~Server_echo_result() noexcept;
  std::string success;

  _Server_echo_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Server_echo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_echo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_echo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_echo_presult__isset {
  _Server_echo_presult__isset() : success(false) {}
  bool success :1;
} _Server_echo_presult__isset;

class Server_echo_presult {
 public:


  virtual ~Server_echo_presult() noexcept;
  std::string* success;

  _Server_echo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Server_version_args {
 public:

  Server_version_args(const Server_version_args&) noexcept;
  Server_version_args& operator=(const Server_version_args&) noexcept;
  Server_version_args() noexcept {
  }

  virtual ~Server_version_args() noexcept;

  bool operator == (const Server_version_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_version_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_version_pargs {
 public:


  virtual ~Server_version_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_version_result__isset {
  _Server_version_result__isset() : success(false) {}
  bool success :1;
} _Server_version_result__isset;

class Server_version_result {
 public:

  Server_version_result(const Server_version_result&);
  Server_version_result& operator=(const Server_version_result&);
  Server_version_result() noexcept
                        : success() {
  }

  virtual ~Server_version_result() noexcept;
  std::string success;

  _Server_version_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Server_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_version_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_version_presult__isset {
  _Server_version_presult__isset() : success(false) {}
  bool success :1;
} _Server_version_presult__isset;

class Server_version_presult {
 public:


  virtual ~Server_version_presult() noexcept;
  std::string* success;

  _Server_version_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Server_stop_args {
 public:

  Server_stop_args(const Server_stop_args&) noexcept;
  Server_stop_args& operator=(const Server_stop_args&) noexcept;
  Server_stop_args() noexcept {
  }

  virtual ~Server_stop_args() noexcept;

  bool operator == (const Server_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_stop_pargs {
 public:


  virtual ~Server_stop_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_createBrowser_args__isset {
  _Server_createBrowser_args__isset() : cid(false), url(false) {}
  bool cid :1;
  bool url :1;
} _Server_createBrowser_args__isset;

class Server_createBrowser_args {
 public:

  Server_createBrowser_args(const Server_createBrowser_args&);
  Server_createBrowser_args& operator=(const Server_createBrowser_args&);
  Server_createBrowser_args() noexcept
                            : cid(0),
                              url() {
  }

  virtual ~Server_createBrowser_args() noexcept;
  int32_t cid;
  std::string url;

  _Server_createBrowser_args__isset __isset;

  void __set_cid(const int32_t val);

  void __set_url(const std::string& val);

  bool operator == (const Server_createBrowser_args & rhs) const
  {
    if (!(cid == rhs.cid))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const Server_createBrowser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_createBrowser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_createBrowser_pargs {
 public:


  virtual ~Server_createBrowser_pargs() noexcept;
  const int32_t* cid;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_createBrowser_result__isset {
  _Server_createBrowser_result__isset() : success(false) {}
  bool success :1;
} _Server_createBrowser_result__isset;

class Server_createBrowser_result {
 public:

  Server_createBrowser_result(const Server_createBrowser_result&) noexcept;
  Server_createBrowser_result& operator=(const Server_createBrowser_result&) noexcept;
  Server_createBrowser_result() noexcept
                              : success(0) {
  }

  virtual ~Server_createBrowser_result() noexcept;
  int32_t success;

  _Server_createBrowser_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Server_createBrowser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_createBrowser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_createBrowser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_createBrowser_presult__isset {
  _Server_createBrowser_presult__isset() : success(false) {}
  bool success :1;
} _Server_createBrowser_presult__isset;

class Server_createBrowser_presult {
 public:


  virtual ~Server_createBrowser_presult() noexcept;
  int32_t* success;

  _Server_createBrowser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_closeBrowser_args__isset {
  _Server_closeBrowser_args__isset() : bid(false) {}
  bool bid :1;
} _Server_closeBrowser_args__isset;

class Server_closeBrowser_args {
 public:

  Server_closeBrowser_args(const Server_closeBrowser_args&) noexcept;
  Server_closeBrowser_args& operator=(const Server_closeBrowser_args&) noexcept;
  Server_closeBrowser_args() noexcept
                           : bid(0) {
  }

  virtual ~Server_closeBrowser_args() noexcept;
  int32_t bid;

  _Server_closeBrowser_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const Server_closeBrowser_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const Server_closeBrowser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_closeBrowser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_closeBrowser_pargs {
 public:


  virtual ~Server_closeBrowser_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_Reload_args__isset {
  _Server_Browser_Reload_args__isset() : bid(false) {}
  bool bid :1;
} _Server_Browser_Reload_args__isset;

class Server_Browser_Reload_args {
 public:

  Server_Browser_Reload_args(const Server_Browser_Reload_args&) noexcept;
  Server_Browser_Reload_args& operator=(const Server_Browser_Reload_args&) noexcept;
  Server_Browser_Reload_args() noexcept
                             : bid(0) {
  }

  virtual ~Server_Browser_Reload_args() noexcept;
  int32_t bid;

  _Server_Browser_Reload_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const Server_Browser_Reload_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_Reload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_Reload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_Reload_pargs {
 public:


  virtual ~Server_Browser_Reload_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_ReloadIgnoreCache_args__isset {
  _Server_Browser_ReloadIgnoreCache_args__isset() : bid(false) {}
  bool bid :1;
} _Server_Browser_ReloadIgnoreCache_args__isset;

class Server_Browser_ReloadIgnoreCache_args {
 public:

  Server_Browser_ReloadIgnoreCache_args(const Server_Browser_ReloadIgnoreCache_args&) noexcept;
  Server_Browser_ReloadIgnoreCache_args& operator=(const Server_Browser_ReloadIgnoreCache_args&) noexcept;
  Server_Browser_ReloadIgnoreCache_args() noexcept
                                        : bid(0) {
  }

  virtual ~Server_Browser_ReloadIgnoreCache_args() noexcept;
  int32_t bid;

  _Server_Browser_ReloadIgnoreCache_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const Server_Browser_ReloadIgnoreCache_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_ReloadIgnoreCache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_ReloadIgnoreCache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_ReloadIgnoreCache_pargs {
 public:


  virtual ~Server_Browser_ReloadIgnoreCache_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_LoadURL_args__isset {
  _Server_Browser_LoadURL_args__isset() : bid(false), url(false) {}
  bool bid :1;
  bool url :1;
} _Server_Browser_LoadURL_args__isset;

class Server_Browser_LoadURL_args {
 public:

  Server_Browser_LoadURL_args(const Server_Browser_LoadURL_args&);
  Server_Browser_LoadURL_args& operator=(const Server_Browser_LoadURL_args&);
  Server_Browser_LoadURL_args() noexcept
                              : bid(0),
                                url() {
  }

  virtual ~Server_Browser_LoadURL_args() noexcept;
  int32_t bid;
  std::string url;

  _Server_Browser_LoadURL_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_url(const std::string& val);

  bool operator == (const Server_Browser_LoadURL_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_LoadURL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_LoadURL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_LoadURL_pargs {
 public:


  virtual ~Server_Browser_LoadURL_pargs() noexcept;
  const int32_t* bid;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_GetURL_args__isset {
  _Server_Browser_GetURL_args__isset() : bid(false) {}
  bool bid :1;
} _Server_Browser_GetURL_args__isset;

class Server_Browser_GetURL_args {
 public:

  Server_Browser_GetURL_args(const Server_Browser_GetURL_args&) noexcept;
  Server_Browser_GetURL_args& operator=(const Server_Browser_GetURL_args&) noexcept;
  Server_Browser_GetURL_args() noexcept
                             : bid(0) {
  }

  virtual ~Server_Browser_GetURL_args() noexcept;
  int32_t bid;

  _Server_Browser_GetURL_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const Server_Browser_GetURL_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_GetURL_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_GetURL_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_GetURL_pargs {
 public:


  virtual ~Server_Browser_GetURL_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_GetURL_result__isset {
  _Server_Browser_GetURL_result__isset() : success(false) {}
  bool success :1;
} _Server_Browser_GetURL_result__isset;

class Server_Browser_GetURL_result {
 public:

  Server_Browser_GetURL_result(const Server_Browser_GetURL_result&);
  Server_Browser_GetURL_result& operator=(const Server_Browser_GetURL_result&);
  Server_Browser_GetURL_result() noexcept
                               : success() {
  }

  virtual ~Server_Browser_GetURL_result() noexcept;
  std::string success;

  _Server_Browser_GetURL_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Server_Browser_GetURL_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_GetURL_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_GetURL_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_GetURL_presult__isset {
  _Server_Browser_GetURL_presult__isset() : success(false) {}
  bool success :1;
} _Server_Browser_GetURL_presult__isset;

class Server_Browser_GetURL_presult {
 public:


  virtual ~Server_Browser_GetURL_presult() noexcept;
  std::string* success;

  _Server_Browser_GetURL_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Browser_ExecuteJavaScript_args__isset {
  _Server_Browser_ExecuteJavaScript_args__isset() : bid(false), code(false), url(false), line(false) {}
  bool bid :1;
  bool code :1;
  bool url :1;
  bool line :1;
} _Server_Browser_ExecuteJavaScript_args__isset;

class Server_Browser_ExecuteJavaScript_args {
 public:

  Server_Browser_ExecuteJavaScript_args(const Server_Browser_ExecuteJavaScript_args&);
  Server_Browser_ExecuteJavaScript_args& operator=(const Server_Browser_ExecuteJavaScript_args&);
  Server_Browser_ExecuteJavaScript_args() noexcept
                                        : bid(0),
                                          code(),
                                          url(),
                                          line(0) {
  }

  virtual ~Server_Browser_ExecuteJavaScript_args() noexcept;
  int32_t bid;
  std::string code;
  std::string url;
  int32_t line;

  _Server_Browser_ExecuteJavaScript_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_code(const std::string& val);

  void __set_url(const std::string& val);

  void __set_line(const int32_t val);

  bool operator == (const Server_Browser_ExecuteJavaScript_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(code == rhs.code))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(line == rhs.line))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_ExecuteJavaScript_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_ExecuteJavaScript_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_ExecuteJavaScript_pargs {
 public:


  virtual ~Server_Browser_ExecuteJavaScript_pargs() noexcept;
  const int32_t* bid;
  const std::string* code;
  const std::string* url;
  const int32_t* line;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_WasResized_args__isset {
  _Server_Browser_WasResized_args__isset() : bid(false), width(false), height(false) {}
  bool bid :1;
  bool width :1;
  bool height :1;
} _Server_Browser_WasResized_args__isset;

class Server_Browser_WasResized_args {
 public:

  Server_Browser_WasResized_args(const Server_Browser_WasResized_args&) noexcept;
  Server_Browser_WasResized_args& operator=(const Server_Browser_WasResized_args&) noexcept;
  Server_Browser_WasResized_args() noexcept
                                 : bid(0),
                                   width(0),
                                   height(0) {
  }

  virtual ~Server_Browser_WasResized_args() noexcept;
  int32_t bid;
  int32_t width;
  int32_t height;

  _Server_Browser_WasResized_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const Server_Browser_WasResized_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_WasResized_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_WasResized_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_WasResized_pargs {
 public:


  virtual ~Server_Browser_WasResized_pargs() noexcept;
  const int32_t* bid;
  const int32_t* width;
  const int32_t* height;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_SendKeyEvent_args__isset {
  _Server_Browser_SendKeyEvent_args__isset() : bid(false), event_type(false), modifiers(false), key_char(false), scanCode(false), key_code(false) {}
  bool bid :1;
  bool event_type :1;
  bool modifiers :1;
  bool key_char :1;
  bool scanCode :1;
  bool key_code :1;
} _Server_Browser_SendKeyEvent_args__isset;

class Server_Browser_SendKeyEvent_args {
 public:

  Server_Browser_SendKeyEvent_args(const Server_Browser_SendKeyEvent_args&) noexcept;
  Server_Browser_SendKeyEvent_args& operator=(const Server_Browser_SendKeyEvent_args&) noexcept;
  Server_Browser_SendKeyEvent_args() noexcept
                                   : bid(0),
                                     event_type(0),
                                     modifiers(0),
                                     key_char(0),
                                     scanCode(0),
                                     key_code(0) {
  }

  virtual ~Server_Browser_SendKeyEvent_args() noexcept;
  int32_t bid;
  int32_t event_type;
  int32_t modifiers;
  int16_t key_char;
  int64_t scanCode;
  int32_t key_code;

  _Server_Browser_SendKeyEvent_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_event_type(const int32_t val);

  void __set_modifiers(const int32_t val);

  void __set_key_char(const int16_t val);

  void __set_scanCode(const int64_t val);

  void __set_key_code(const int32_t val);

  bool operator == (const Server_Browser_SendKeyEvent_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(event_type == rhs.event_type))
      return false;
    if (!(modifiers == rhs.modifiers))
      return false;
    if (!(key_char == rhs.key_char))
      return false;
    if (!(scanCode == rhs.scanCode))
      return false;
    if (!(key_code == rhs.key_code))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_SendKeyEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_SendKeyEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_SendKeyEvent_pargs {
 public:


  virtual ~Server_Browser_SendKeyEvent_pargs() noexcept;
  const int32_t* bid;
  const int32_t* event_type;
  const int32_t* modifiers;
  const int16_t* key_char;
  const int64_t* scanCode;
  const int32_t* key_code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_SendMouseEvent_args__isset {
  _Server_Browser_SendMouseEvent_args__isset() : bid(false), event_type(false), x(false), y(false), modifiers(false), click_count(false), button(false) {}
  bool bid :1;
  bool event_type :1;
  bool x :1;
  bool y :1;
  bool modifiers :1;
  bool click_count :1;
  bool button :1;
} _Server_Browser_SendMouseEvent_args__isset;

class Server_Browser_SendMouseEvent_args {
 public:

  Server_Browser_SendMouseEvent_args(const Server_Browser_SendMouseEvent_args&) noexcept;
  Server_Browser_SendMouseEvent_args& operator=(const Server_Browser_SendMouseEvent_args&) noexcept;
  Server_Browser_SendMouseEvent_args() noexcept
                                     : bid(0),
                                       event_type(0),
                                       x(0),
                                       y(0),
                                       modifiers(0),
                                       click_count(0),
                                       button(0) {
  }

  virtual ~Server_Browser_SendMouseEvent_args() noexcept;
  int32_t bid;
  int32_t event_type;
  int32_t x;
  int32_t y;
  int32_t modifiers;
  int32_t click_count;
  int32_t button;

  _Server_Browser_SendMouseEvent_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_event_type(const int32_t val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_modifiers(const int32_t val);

  void __set_click_count(const int32_t val);

  void __set_button(const int32_t val);

  bool operator == (const Server_Browser_SendMouseEvent_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(event_type == rhs.event_type))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(modifiers == rhs.modifiers))
      return false;
    if (!(click_count == rhs.click_count))
      return false;
    if (!(button == rhs.button))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_SendMouseEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_SendMouseEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_SendMouseEvent_pargs {
 public:


  virtual ~Server_Browser_SendMouseEvent_pargs() noexcept;
  const int32_t* bid;
  const int32_t* event_type;
  const int32_t* x;
  const int32_t* y;
  const int32_t* modifiers;
  const int32_t* click_count;
  const int32_t* button;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Browser_SendMouseWheelEvent_args__isset {
  _Server_Browser_SendMouseWheelEvent_args__isset() : bid(false), scroll_type(false), x(false), y(false), modifiers(false), delta(false), units_to_scroll(false) {}
  bool bid :1;
  bool scroll_type :1;
  bool x :1;
  bool y :1;
  bool modifiers :1;
  bool delta :1;
  bool units_to_scroll :1;
} _Server_Browser_SendMouseWheelEvent_args__isset;

class Server_Browser_SendMouseWheelEvent_args {
 public:

  Server_Browser_SendMouseWheelEvent_args(const Server_Browser_SendMouseWheelEvent_args&) noexcept;
  Server_Browser_SendMouseWheelEvent_args& operator=(const Server_Browser_SendMouseWheelEvent_args&) noexcept;
  Server_Browser_SendMouseWheelEvent_args() noexcept
                                          : bid(0),
                                            scroll_type(0),
                                            x(0),
                                            y(0),
                                            modifiers(0),
                                            delta(0),
                                            units_to_scroll(0) {
  }

  virtual ~Server_Browser_SendMouseWheelEvent_args() noexcept;
  int32_t bid;
  int32_t scroll_type;
  int32_t x;
  int32_t y;
  int32_t modifiers;
  int32_t delta;
  int32_t units_to_scroll;

  _Server_Browser_SendMouseWheelEvent_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_scroll_type(const int32_t val);

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_modifiers(const int32_t val);

  void __set_delta(const int32_t val);

  void __set_units_to_scroll(const int32_t val);

  bool operator == (const Server_Browser_SendMouseWheelEvent_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(scroll_type == rhs.scroll_type))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(modifiers == rhs.modifiers))
      return false;
    if (!(delta == rhs.delta))
      return false;
    if (!(units_to_scroll == rhs.units_to_scroll))
      return false;
    return true;
  }
  bool operator != (const Server_Browser_SendMouseWheelEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Browser_SendMouseWheelEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Browser_SendMouseWheelEvent_pargs {
 public:


  virtual ~Server_Browser_SendMouseWheelEvent_pargs() noexcept;
  const int32_t* bid;
  const int32_t* scroll_type;
  const int32_t* x;
  const int32_t* y;
  const int32_t* modifiers;
  const int32_t* delta;
  const int32_t* units_to_scroll;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Request_Update_args__isset {
  _Server_Request_Update_args__isset() : request(false) {}
  bool request :1;
} _Server_Request_Update_args__isset;

class Server_Request_Update_args {
 public:

  Server_Request_Update_args(const Server_Request_Update_args&);
  Server_Request_Update_args& operator=(const Server_Request_Update_args&);
  Server_Request_Update_args() noexcept {
  }

  virtual ~Server_Request_Update_args() noexcept;
   ::thrift_codegen::RObject request;

  _Server_Request_Update_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Request_Update_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Server_Request_Update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_Update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_Update_pargs {
 public:


  virtual ~Server_Request_Update_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_Update_result {
 public:

  Server_Request_Update_result(const Server_Request_Update_result&) noexcept;
  Server_Request_Update_result& operator=(const Server_Request_Update_result&) noexcept;
  Server_Request_Update_result() noexcept {
  }

  virtual ~Server_Request_Update_result() noexcept;

  bool operator == (const Server_Request_Update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Request_Update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_Update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_Update_presult {
 public:


  virtual ~Server_Request_Update_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Request_GetPostData_args__isset {
  _Server_Request_GetPostData_args__isset() : request(false) {}
  bool request :1;
} _Server_Request_GetPostData_args__isset;

class Server_Request_GetPostData_args {
 public:

  Server_Request_GetPostData_args(const Server_Request_GetPostData_args&);
  Server_Request_GetPostData_args& operator=(const Server_Request_GetPostData_args&);
  Server_Request_GetPostData_args() noexcept {
  }

  virtual ~Server_Request_GetPostData_args() noexcept;
   ::thrift_codegen::RObject request;

  _Server_Request_GetPostData_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Request_GetPostData_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Server_Request_GetPostData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_GetPostData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_GetPostData_pargs {
 public:


  virtual ~Server_Request_GetPostData_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Request_GetPostData_result__isset {
  _Server_Request_GetPostData_result__isset() : success(false) {}
  bool success :1;
} _Server_Request_GetPostData_result__isset;

class Server_Request_GetPostData_result {
 public:

  Server_Request_GetPostData_result(const Server_Request_GetPostData_result&);
  Server_Request_GetPostData_result& operator=(const Server_Request_GetPostData_result&);
  Server_Request_GetPostData_result() noexcept {
  }

  virtual ~Server_Request_GetPostData_result() noexcept;
   ::thrift_codegen::PostData success;

  _Server_Request_GetPostData_result__isset __isset;

  void __set_success(const  ::thrift_codegen::PostData& val);

  bool operator == (const Server_Request_GetPostData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_Request_GetPostData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_GetPostData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Request_GetPostData_presult__isset {
  _Server_Request_GetPostData_presult__isset() : success(false) {}
  bool success :1;
} _Server_Request_GetPostData_presult__isset;

class Server_Request_GetPostData_presult {
 public:


  virtual ~Server_Request_GetPostData_presult() noexcept;
   ::thrift_codegen::PostData* success;

  _Server_Request_GetPostData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Request_SetPostData_args__isset {
  _Server_Request_SetPostData_args__isset() : request(false), postData(false) {}
  bool request :1;
  bool postData :1;
} _Server_Request_SetPostData_args__isset;

class Server_Request_SetPostData_args {
 public:

  Server_Request_SetPostData_args(const Server_Request_SetPostData_args&);
  Server_Request_SetPostData_args& operator=(const Server_Request_SetPostData_args&);
  Server_Request_SetPostData_args() noexcept {
  }

  virtual ~Server_Request_SetPostData_args() noexcept;
   ::thrift_codegen::RObject request;
   ::thrift_codegen::PostData postData;

  _Server_Request_SetPostData_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_postData(const  ::thrift_codegen::PostData& val);

  bool operator == (const Server_Request_SetPostData_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(postData == rhs.postData))
      return false;
    return true;
  }
  bool operator != (const Server_Request_SetPostData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_SetPostData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetPostData_pargs {
 public:


  virtual ~Server_Request_SetPostData_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;
  const  ::thrift_codegen::PostData* postData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetPostData_result {
 public:

  Server_Request_SetPostData_result(const Server_Request_SetPostData_result&) noexcept;
  Server_Request_SetPostData_result& operator=(const Server_Request_SetPostData_result&) noexcept;
  Server_Request_SetPostData_result() noexcept {
  }

  virtual ~Server_Request_SetPostData_result() noexcept;

  bool operator == (const Server_Request_SetPostData_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Request_SetPostData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_SetPostData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetPostData_presult {
 public:


  virtual ~Server_Request_SetPostData_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Request_GetHeaderByName_args__isset {
  _Server_Request_GetHeaderByName_args__isset() : request(false), name(false) {}
  bool request :1;
  bool name :1;
} _Server_Request_GetHeaderByName_args__isset;

class Server_Request_GetHeaderByName_args {
 public:

  Server_Request_GetHeaderByName_args(const Server_Request_GetHeaderByName_args&);
  Server_Request_GetHeaderByName_args& operator=(const Server_Request_GetHeaderByName_args&);
  Server_Request_GetHeaderByName_args() noexcept
                                      : name() {
  }

  virtual ~Server_Request_GetHeaderByName_args() noexcept;
   ::thrift_codegen::RObject request;
  std::string name;

  _Server_Request_GetHeaderByName_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_name(const std::string& val);

  bool operator == (const Server_Request_GetHeaderByName_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Server_Request_GetHeaderByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_GetHeaderByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_GetHeaderByName_pargs {
 public:


  virtual ~Server_Request_GetHeaderByName_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Request_GetHeaderByName_result__isset {
  _Server_Request_GetHeaderByName_result__isset() : success(false) {}
  bool success :1;
} _Server_Request_GetHeaderByName_result__isset;

class Server_Request_GetHeaderByName_result {
 public:

  Server_Request_GetHeaderByName_result(const Server_Request_GetHeaderByName_result&);
  Server_Request_GetHeaderByName_result& operator=(const Server_Request_GetHeaderByName_result&);
  Server_Request_GetHeaderByName_result() noexcept
                                        : success() {
  }

  virtual ~Server_Request_GetHeaderByName_result() noexcept;
  std::string success;

  _Server_Request_GetHeaderByName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Server_Request_GetHeaderByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_Request_GetHeaderByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_GetHeaderByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Request_GetHeaderByName_presult__isset {
  _Server_Request_GetHeaderByName_presult__isset() : success(false) {}
  bool success :1;
} _Server_Request_GetHeaderByName_presult__isset;

class Server_Request_GetHeaderByName_presult {
 public:


  virtual ~Server_Request_GetHeaderByName_presult() noexcept;
  std::string* success;

  _Server_Request_GetHeaderByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Request_SetHeaderByName_args__isset {
  _Server_Request_SetHeaderByName_args__isset() : request(false), name(false), value(false), overwrite(false) {}
  bool request :1;
  bool name :1;
  bool value :1;
  bool overwrite :1;
} _Server_Request_SetHeaderByName_args__isset;

class Server_Request_SetHeaderByName_args {
 public:

  Server_Request_SetHeaderByName_args(const Server_Request_SetHeaderByName_args&);
  Server_Request_SetHeaderByName_args& operator=(const Server_Request_SetHeaderByName_args&);
  Server_Request_SetHeaderByName_args() noexcept
                                      : name(),
                                        value(),
                                        overwrite(0) {
  }

  virtual ~Server_Request_SetHeaderByName_args() noexcept;
   ::thrift_codegen::RObject request;
  std::string name;
  std::string value;
  bool overwrite;

  _Server_Request_SetHeaderByName_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_name(const std::string& val);

  void __set_value(const std::string& val);

  void __set_overwrite(const bool val);

  bool operator == (const Server_Request_SetHeaderByName_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(overwrite == rhs.overwrite))
      return false;
    return true;
  }
  bool operator != (const Server_Request_SetHeaderByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_SetHeaderByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetHeaderByName_pargs {
 public:


  virtual ~Server_Request_SetHeaderByName_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;
  const std::string* name;
  const std::string* value;
  const bool* overwrite;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetHeaderByName_result {
 public:

  Server_Request_SetHeaderByName_result(const Server_Request_SetHeaderByName_result&) noexcept;
  Server_Request_SetHeaderByName_result& operator=(const Server_Request_SetHeaderByName_result&) noexcept;
  Server_Request_SetHeaderByName_result() noexcept {
  }

  virtual ~Server_Request_SetHeaderByName_result() noexcept;

  bool operator == (const Server_Request_SetHeaderByName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Request_SetHeaderByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_SetHeaderByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetHeaderByName_presult {
 public:


  virtual ~Server_Request_SetHeaderByName_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Request_GetHeaderMap_args__isset {
  _Server_Request_GetHeaderMap_args__isset() : request(false) {}
  bool request :1;
} _Server_Request_GetHeaderMap_args__isset;

class Server_Request_GetHeaderMap_args {
 public:

  Server_Request_GetHeaderMap_args(const Server_Request_GetHeaderMap_args&);
  Server_Request_GetHeaderMap_args& operator=(const Server_Request_GetHeaderMap_args&);
  Server_Request_GetHeaderMap_args() noexcept {
  }

  virtual ~Server_Request_GetHeaderMap_args() noexcept;
   ::thrift_codegen::RObject request;

  _Server_Request_GetHeaderMap_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Request_GetHeaderMap_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Server_Request_GetHeaderMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_GetHeaderMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_GetHeaderMap_pargs {
 public:


  virtual ~Server_Request_GetHeaderMap_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Request_GetHeaderMap_result__isset {
  _Server_Request_GetHeaderMap_result__isset() : success(false) {}
  bool success :1;
} _Server_Request_GetHeaderMap_result__isset;

class Server_Request_GetHeaderMap_result {
 public:

  Server_Request_GetHeaderMap_result(const Server_Request_GetHeaderMap_result&);
  Server_Request_GetHeaderMap_result& operator=(const Server_Request_GetHeaderMap_result&);
  Server_Request_GetHeaderMap_result() noexcept {
  }

  virtual ~Server_Request_GetHeaderMap_result() noexcept;
  std::map<std::string, std::string>  success;

  _Server_Request_GetHeaderMap_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const Server_Request_GetHeaderMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_Request_GetHeaderMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_GetHeaderMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Request_GetHeaderMap_presult__isset {
  _Server_Request_GetHeaderMap_presult__isset() : success(false) {}
  bool success :1;
} _Server_Request_GetHeaderMap_presult__isset;

class Server_Request_GetHeaderMap_presult {
 public:


  virtual ~Server_Request_GetHeaderMap_presult() noexcept;
  std::map<std::string, std::string> * success;

  _Server_Request_GetHeaderMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Request_SetHeaderMap_args__isset {
  _Server_Request_SetHeaderMap_args__isset() : request(false), headerMap(false) {}
  bool request :1;
  bool headerMap :1;
} _Server_Request_SetHeaderMap_args__isset;

class Server_Request_SetHeaderMap_args {
 public:

  Server_Request_SetHeaderMap_args(const Server_Request_SetHeaderMap_args&);
  Server_Request_SetHeaderMap_args& operator=(const Server_Request_SetHeaderMap_args&);
  Server_Request_SetHeaderMap_args() noexcept {
  }

  virtual ~Server_Request_SetHeaderMap_args() noexcept;
   ::thrift_codegen::RObject request;
  std::map<std::string, std::string>  headerMap;

  _Server_Request_SetHeaderMap_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_headerMap(const std::map<std::string, std::string> & val);

  bool operator == (const Server_Request_SetHeaderMap_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(headerMap == rhs.headerMap))
      return false;
    return true;
  }
  bool operator != (const Server_Request_SetHeaderMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_SetHeaderMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetHeaderMap_pargs {
 public:


  virtual ~Server_Request_SetHeaderMap_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;
  const std::map<std::string, std::string> * headerMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetHeaderMap_result {
 public:

  Server_Request_SetHeaderMap_result(const Server_Request_SetHeaderMap_result&) noexcept;
  Server_Request_SetHeaderMap_result& operator=(const Server_Request_SetHeaderMap_result&) noexcept;
  Server_Request_SetHeaderMap_result() noexcept {
  }

  virtual ~Server_Request_SetHeaderMap_result() noexcept;

  bool operator == (const Server_Request_SetHeaderMap_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Request_SetHeaderMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_SetHeaderMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_SetHeaderMap_presult {
 public:


  virtual ~Server_Request_SetHeaderMap_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Request_Set_args__isset {
  _Server_Request_Set_args__isset() : request(false), url(false), method(false), postData(false), headerMap(false) {}
  bool request :1;
  bool url :1;
  bool method :1;
  bool postData :1;
  bool headerMap :1;
} _Server_Request_Set_args__isset;

class Server_Request_Set_args {
 public:

  Server_Request_Set_args(const Server_Request_Set_args&);
  Server_Request_Set_args& operator=(const Server_Request_Set_args&);
  Server_Request_Set_args() noexcept
                          : url(),
                            method() {
  }

  virtual ~Server_Request_Set_args() noexcept;
   ::thrift_codegen::RObject request;
  std::string url;
  std::string method;
   ::thrift_codegen::PostData postData;
  std::map<std::string, std::string>  headerMap;

  _Server_Request_Set_args__isset __isset;

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_url(const std::string& val);

  void __set_method(const std::string& val);

  void __set_postData(const  ::thrift_codegen::PostData& val);

  void __set_headerMap(const std::map<std::string, std::string> & val);

  bool operator == (const Server_Request_Set_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(postData == rhs.postData))
      return false;
    if (!(headerMap == rhs.headerMap))
      return false;
    return true;
  }
  bool operator != (const Server_Request_Set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_Set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_Set_pargs {
 public:


  virtual ~Server_Request_Set_pargs() noexcept;
  const  ::thrift_codegen::RObject* request;
  const std::string* url;
  const std::string* method;
  const  ::thrift_codegen::PostData* postData;
  const std::map<std::string, std::string> * headerMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_Set_result {
 public:

  Server_Request_Set_result(const Server_Request_Set_result&) noexcept;
  Server_Request_Set_result& operator=(const Server_Request_Set_result&) noexcept;
  Server_Request_Set_result() noexcept {
  }

  virtual ~Server_Request_Set_result() noexcept;

  bool operator == (const Server_Request_Set_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Request_Set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Request_Set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Request_Set_presult {
 public:


  virtual ~Server_Request_Set_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Response_Update_args__isset {
  _Server_Response_Update_args__isset() : response(false) {}
  bool response :1;
} _Server_Response_Update_args__isset;

class Server_Response_Update_args {
 public:

  Server_Response_Update_args(const Server_Response_Update_args&);
  Server_Response_Update_args& operator=(const Server_Response_Update_args&);
  Server_Response_Update_args() noexcept {
  }

  virtual ~Server_Response_Update_args() noexcept;
   ::thrift_codegen::RObject response;

  _Server_Response_Update_args__isset __isset;

  void __set_response(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Response_Update_args & rhs) const
  {
    if (!(response == rhs.response))
      return false;
    return true;
  }
  bool operator != (const Server_Response_Update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_Update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_Update_pargs {
 public:


  virtual ~Server_Response_Update_pargs() noexcept;
  const  ::thrift_codegen::RObject* response;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_Update_result {
 public:

  Server_Response_Update_result(const Server_Response_Update_result&) noexcept;
  Server_Response_Update_result& operator=(const Server_Response_Update_result&) noexcept;
  Server_Response_Update_result() noexcept {
  }

  virtual ~Server_Response_Update_result() noexcept;

  bool operator == (const Server_Response_Update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Response_Update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_Update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_Update_presult {
 public:


  virtual ~Server_Response_Update_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Response_GetHeaderByName_args__isset {
  _Server_Response_GetHeaderByName_args__isset() : response(false), name(false) {}
  bool response :1;
  bool name :1;
} _Server_Response_GetHeaderByName_args__isset;

class Server_Response_GetHeaderByName_args {
 public:

  Server_Response_GetHeaderByName_args(const Server_Response_GetHeaderByName_args&);
  Server_Response_GetHeaderByName_args& operator=(const Server_Response_GetHeaderByName_args&);
  Server_Response_GetHeaderByName_args() noexcept
                                       : name() {
  }

  virtual ~Server_Response_GetHeaderByName_args() noexcept;
   ::thrift_codegen::RObject response;
  std::string name;

  _Server_Response_GetHeaderByName_args__isset __isset;

  void __set_response(const  ::thrift_codegen::RObject& val);

  void __set_name(const std::string& val);

  bool operator == (const Server_Response_GetHeaderByName_args & rhs) const
  {
    if (!(response == rhs.response))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Server_Response_GetHeaderByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_GetHeaderByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_GetHeaderByName_pargs {
 public:


  virtual ~Server_Response_GetHeaderByName_pargs() noexcept;
  const  ::thrift_codegen::RObject* response;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Response_GetHeaderByName_result__isset {
  _Server_Response_GetHeaderByName_result__isset() : success(false) {}
  bool success :1;
} _Server_Response_GetHeaderByName_result__isset;

class Server_Response_GetHeaderByName_result {
 public:

  Server_Response_GetHeaderByName_result(const Server_Response_GetHeaderByName_result&);
  Server_Response_GetHeaderByName_result& operator=(const Server_Response_GetHeaderByName_result&);
  Server_Response_GetHeaderByName_result() noexcept
                                         : success() {
  }

  virtual ~Server_Response_GetHeaderByName_result() noexcept;
  std::string success;

  _Server_Response_GetHeaderByName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Server_Response_GetHeaderByName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_Response_GetHeaderByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_GetHeaderByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Response_GetHeaderByName_presult__isset {
  _Server_Response_GetHeaderByName_presult__isset() : success(false) {}
  bool success :1;
} _Server_Response_GetHeaderByName_presult__isset;

class Server_Response_GetHeaderByName_presult {
 public:


  virtual ~Server_Response_GetHeaderByName_presult() noexcept;
  std::string* success;

  _Server_Response_GetHeaderByName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Response_SetHeaderByName_args__isset {
  _Server_Response_SetHeaderByName_args__isset() : response(false), name(false), value(false), overwrite(false) {}
  bool response :1;
  bool name :1;
  bool value :1;
  bool overwrite :1;
} _Server_Response_SetHeaderByName_args__isset;

class Server_Response_SetHeaderByName_args {
 public:

  Server_Response_SetHeaderByName_args(const Server_Response_SetHeaderByName_args&);
  Server_Response_SetHeaderByName_args& operator=(const Server_Response_SetHeaderByName_args&);
  Server_Response_SetHeaderByName_args() noexcept
                                       : name(),
                                         value(),
                                         overwrite(0) {
  }

  virtual ~Server_Response_SetHeaderByName_args() noexcept;
   ::thrift_codegen::RObject response;
  std::string name;
  std::string value;
  bool overwrite;

  _Server_Response_SetHeaderByName_args__isset __isset;

  void __set_response(const  ::thrift_codegen::RObject& val);

  void __set_name(const std::string& val);

  void __set_value(const std::string& val);

  void __set_overwrite(const bool val);

  bool operator == (const Server_Response_SetHeaderByName_args & rhs) const
  {
    if (!(response == rhs.response))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(overwrite == rhs.overwrite))
      return false;
    return true;
  }
  bool operator != (const Server_Response_SetHeaderByName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_SetHeaderByName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_SetHeaderByName_pargs {
 public:


  virtual ~Server_Response_SetHeaderByName_pargs() noexcept;
  const  ::thrift_codegen::RObject* response;
  const std::string* name;
  const std::string* value;
  const bool* overwrite;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_SetHeaderByName_result {
 public:

  Server_Response_SetHeaderByName_result(const Server_Response_SetHeaderByName_result&) noexcept;
  Server_Response_SetHeaderByName_result& operator=(const Server_Response_SetHeaderByName_result&) noexcept;
  Server_Response_SetHeaderByName_result() noexcept {
  }

  virtual ~Server_Response_SetHeaderByName_result() noexcept;

  bool operator == (const Server_Response_SetHeaderByName_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Response_SetHeaderByName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_SetHeaderByName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_SetHeaderByName_presult {
 public:


  virtual ~Server_Response_SetHeaderByName_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Response_GetHeaderMap_args__isset {
  _Server_Response_GetHeaderMap_args__isset() : response(false) {}
  bool response :1;
} _Server_Response_GetHeaderMap_args__isset;

class Server_Response_GetHeaderMap_args {
 public:

  Server_Response_GetHeaderMap_args(const Server_Response_GetHeaderMap_args&);
  Server_Response_GetHeaderMap_args& operator=(const Server_Response_GetHeaderMap_args&);
  Server_Response_GetHeaderMap_args() noexcept {
  }

  virtual ~Server_Response_GetHeaderMap_args() noexcept;
   ::thrift_codegen::RObject response;

  _Server_Response_GetHeaderMap_args__isset __isset;

  void __set_response(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Response_GetHeaderMap_args & rhs) const
  {
    if (!(response == rhs.response))
      return false;
    return true;
  }
  bool operator != (const Server_Response_GetHeaderMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_GetHeaderMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_GetHeaderMap_pargs {
 public:


  virtual ~Server_Response_GetHeaderMap_pargs() noexcept;
  const  ::thrift_codegen::RObject* response;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Response_GetHeaderMap_result__isset {
  _Server_Response_GetHeaderMap_result__isset() : success(false) {}
  bool success :1;
} _Server_Response_GetHeaderMap_result__isset;

class Server_Response_GetHeaderMap_result {
 public:

  Server_Response_GetHeaderMap_result(const Server_Response_GetHeaderMap_result&);
  Server_Response_GetHeaderMap_result& operator=(const Server_Response_GetHeaderMap_result&);
  Server_Response_GetHeaderMap_result() noexcept {
  }

  virtual ~Server_Response_GetHeaderMap_result() noexcept;
  std::map<std::string, std::string>  success;

  _Server_Response_GetHeaderMap_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const Server_Response_GetHeaderMap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_Response_GetHeaderMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_GetHeaderMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Response_GetHeaderMap_presult__isset {
  _Server_Response_GetHeaderMap_presult__isset() : success(false) {}
  bool success :1;
} _Server_Response_GetHeaderMap_presult__isset;

class Server_Response_GetHeaderMap_presult {
 public:


  virtual ~Server_Response_GetHeaderMap_presult() noexcept;
  std::map<std::string, std::string> * success;

  _Server_Response_GetHeaderMap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Response_SetHeaderMap_args__isset {
  _Server_Response_SetHeaderMap_args__isset() : response(false), headerMap(false) {}
  bool response :1;
  bool headerMap :1;
} _Server_Response_SetHeaderMap_args__isset;

class Server_Response_SetHeaderMap_args {
 public:

  Server_Response_SetHeaderMap_args(const Server_Response_SetHeaderMap_args&);
  Server_Response_SetHeaderMap_args& operator=(const Server_Response_SetHeaderMap_args&);
  Server_Response_SetHeaderMap_args() noexcept {
  }

  virtual ~Server_Response_SetHeaderMap_args() noexcept;
   ::thrift_codegen::RObject response;
  std::map<std::string, std::string>  headerMap;

  _Server_Response_SetHeaderMap_args__isset __isset;

  void __set_response(const  ::thrift_codegen::RObject& val);

  void __set_headerMap(const std::map<std::string, std::string> & val);

  bool operator == (const Server_Response_SetHeaderMap_args & rhs) const
  {
    if (!(response == rhs.response))
      return false;
    if (!(headerMap == rhs.headerMap))
      return false;
    return true;
  }
  bool operator != (const Server_Response_SetHeaderMap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_SetHeaderMap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_SetHeaderMap_pargs {
 public:


  virtual ~Server_Response_SetHeaderMap_pargs() noexcept;
  const  ::thrift_codegen::RObject* response;
  const std::map<std::string, std::string> * headerMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_SetHeaderMap_result {
 public:

  Server_Response_SetHeaderMap_result(const Server_Response_SetHeaderMap_result&) noexcept;
  Server_Response_SetHeaderMap_result& operator=(const Server_Response_SetHeaderMap_result&) noexcept;
  Server_Response_SetHeaderMap_result() noexcept {
  }

  virtual ~Server_Response_SetHeaderMap_result() noexcept;

  bool operator == (const Server_Response_SetHeaderMap_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_Response_SetHeaderMap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Response_SetHeaderMap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Response_SetHeaderMap_presult {
 public:


  virtual ~Server_Response_SetHeaderMap_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_Callback_Dispose_args__isset {
  _Server_Callback_Dispose_args__isset() : callback(false) {}
  bool callback :1;
} _Server_Callback_Dispose_args__isset;

class Server_Callback_Dispose_args {
 public:

  Server_Callback_Dispose_args(const Server_Callback_Dispose_args&);
  Server_Callback_Dispose_args& operator=(const Server_Callback_Dispose_args&);
  Server_Callback_Dispose_args() noexcept {
  }

  virtual ~Server_Callback_Dispose_args() noexcept;
   ::thrift_codegen::RObject callback;

  _Server_Callback_Dispose_args__isset __isset;

  void __set_callback(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Callback_Dispose_args & rhs) const
  {
    if (!(callback == rhs.callback))
      return false;
    return true;
  }
  bool operator != (const Server_Callback_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Callback_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Callback_Dispose_pargs {
 public:


  virtual ~Server_Callback_Dispose_pargs() noexcept;
  const  ::thrift_codegen::RObject* callback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Callback_Continue_args__isset {
  _Server_Callback_Continue_args__isset() : callback(false) {}
  bool callback :1;
} _Server_Callback_Continue_args__isset;

class Server_Callback_Continue_args {
 public:

  Server_Callback_Continue_args(const Server_Callback_Continue_args&);
  Server_Callback_Continue_args& operator=(const Server_Callback_Continue_args&);
  Server_Callback_Continue_args() noexcept {
  }

  virtual ~Server_Callback_Continue_args() noexcept;
   ::thrift_codegen::RObject callback;

  _Server_Callback_Continue_args__isset __isset;

  void __set_callback(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Callback_Continue_args & rhs) const
  {
    if (!(callback == rhs.callback))
      return false;
    return true;
  }
  bool operator != (const Server_Callback_Continue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Callback_Continue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Callback_Continue_pargs {
 public:


  virtual ~Server_Callback_Continue_pargs() noexcept;
  const  ::thrift_codegen::RObject* callback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_Callback_Cancel_args__isset {
  _Server_Callback_Cancel_args__isset() : callback(false) {}
  bool callback :1;
} _Server_Callback_Cancel_args__isset;

class Server_Callback_Cancel_args {
 public:

  Server_Callback_Cancel_args(const Server_Callback_Cancel_args&);
  Server_Callback_Cancel_args& operator=(const Server_Callback_Cancel_args&);
  Server_Callback_Cancel_args() noexcept {
  }

  virtual ~Server_Callback_Cancel_args() noexcept;
   ::thrift_codegen::RObject callback;

  _Server_Callback_Cancel_args__isset __isset;

  void __set_callback(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_Callback_Cancel_args & rhs) const
  {
    if (!(callback == rhs.callback))
      return false;
    return true;
  }
  bool operator != (const Server_Callback_Cancel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_Callback_Cancel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_Callback_Cancel_pargs {
 public:


  virtual ~Server_Callback_Cancel_pargs() noexcept;
  const  ::thrift_codegen::RObject* callback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_AuthCallback_Dispose_args__isset {
  _Server_AuthCallback_Dispose_args__isset() : authCallback(false) {}
  bool authCallback :1;
} _Server_AuthCallback_Dispose_args__isset;

class Server_AuthCallback_Dispose_args {
 public:

  Server_AuthCallback_Dispose_args(const Server_AuthCallback_Dispose_args&);
  Server_AuthCallback_Dispose_args& operator=(const Server_AuthCallback_Dispose_args&);
  Server_AuthCallback_Dispose_args() noexcept {
  }

  virtual ~Server_AuthCallback_Dispose_args() noexcept;
   ::thrift_codegen::RObject authCallback;

  _Server_AuthCallback_Dispose_args__isset __isset;

  void __set_authCallback(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_AuthCallback_Dispose_args & rhs) const
  {
    if (!(authCallback == rhs.authCallback))
      return false;
    return true;
  }
  bool operator != (const Server_AuthCallback_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_AuthCallback_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_AuthCallback_Dispose_pargs {
 public:


  virtual ~Server_AuthCallback_Dispose_pargs() noexcept;
  const  ::thrift_codegen::RObject* authCallback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_AuthCallback_Continue_args__isset {
  _Server_AuthCallback_Continue_args__isset() : authCallback(false), username(false), password(false) {}
  bool authCallback :1;
  bool username :1;
  bool password :1;
} _Server_AuthCallback_Continue_args__isset;

class Server_AuthCallback_Continue_args {
 public:

  Server_AuthCallback_Continue_args(const Server_AuthCallback_Continue_args&);
  Server_AuthCallback_Continue_args& operator=(const Server_AuthCallback_Continue_args&);
  Server_AuthCallback_Continue_args() noexcept
                                    : username(),
                                      password() {
  }

  virtual ~Server_AuthCallback_Continue_args() noexcept;
   ::thrift_codegen::RObject authCallback;
  std::string username;
  std::string password;

  _Server_AuthCallback_Continue_args__isset __isset;

  void __set_authCallback(const  ::thrift_codegen::RObject& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const Server_AuthCallback_Continue_args & rhs) const
  {
    if (!(authCallback == rhs.authCallback))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const Server_AuthCallback_Continue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_AuthCallback_Continue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_AuthCallback_Continue_pargs {
 public:


  virtual ~Server_AuthCallback_Continue_pargs() noexcept;
  const  ::thrift_codegen::RObject* authCallback;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_AuthCallback_Cancel_args__isset {
  _Server_AuthCallback_Cancel_args__isset() : authCallback(false) {}
  bool authCallback :1;
} _Server_AuthCallback_Cancel_args__isset;

class Server_AuthCallback_Cancel_args {
 public:

  Server_AuthCallback_Cancel_args(const Server_AuthCallback_Cancel_args&);
  Server_AuthCallback_Cancel_args& operator=(const Server_AuthCallback_Cancel_args&);
  Server_AuthCallback_Cancel_args() noexcept {
  }

  virtual ~Server_AuthCallback_Cancel_args() noexcept;
   ::thrift_codegen::RObject authCallback;

  _Server_AuthCallback_Cancel_args__isset __isset;

  void __set_authCallback(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_AuthCallback_Cancel_args & rhs) const
  {
    if (!(authCallback == rhs.authCallback))
      return false;
    return true;
  }
  bool operator != (const Server_AuthCallback_Cancel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_AuthCallback_Cancel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_AuthCallback_Cancel_pargs {
 public:


  virtual ~Server_AuthCallback_Cancel_pargs() noexcept;
  const  ::thrift_codegen::RObject* authCallback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_MessageRouter_Create_args__isset {
  _Server_MessageRouter_Create_args__isset() : query(false), cancel(false) {}
  bool query :1;
  bool cancel :1;
} _Server_MessageRouter_Create_args__isset;

class Server_MessageRouter_Create_args {
 public:

  Server_MessageRouter_Create_args(const Server_MessageRouter_Create_args&);
  Server_MessageRouter_Create_args& operator=(const Server_MessageRouter_Create_args&);
  Server_MessageRouter_Create_args() noexcept
                                   : query(),
                                     cancel() {
  }

  virtual ~Server_MessageRouter_Create_args() noexcept;
  std::string query;
  std::string cancel;

  _Server_MessageRouter_Create_args__isset __isset;

  void __set_query(const std::string& val);

  void __set_cancel(const std::string& val);

  bool operator == (const Server_MessageRouter_Create_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    if (!(cancel == rhs.cancel))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_Create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_Create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_Create_pargs {
 public:


  virtual ~Server_MessageRouter_Create_pargs() noexcept;
  const std::string* query;
  const std::string* cancel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_MessageRouter_Create_result__isset {
  _Server_MessageRouter_Create_result__isset() : success(false) {}
  bool success :1;
} _Server_MessageRouter_Create_result__isset;

class Server_MessageRouter_Create_result {
 public:

  Server_MessageRouter_Create_result(const Server_MessageRouter_Create_result&);
  Server_MessageRouter_Create_result& operator=(const Server_MessageRouter_Create_result&);
  Server_MessageRouter_Create_result() noexcept {
  }

  virtual ~Server_MessageRouter_Create_result() noexcept;
   ::thrift_codegen::RObject success;

  _Server_MessageRouter_Create_result__isset __isset;

  void __set_success(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_MessageRouter_Create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_Create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_Create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_MessageRouter_Create_presult__isset {
  _Server_MessageRouter_Create_presult__isset() : success(false) {}
  bool success :1;
} _Server_MessageRouter_Create_presult__isset;

class Server_MessageRouter_Create_presult {
 public:


  virtual ~Server_MessageRouter_Create_presult() noexcept;
   ::thrift_codegen::RObject* success;

  _Server_MessageRouter_Create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_MessageRouter_Dispose_args__isset {
  _Server_MessageRouter_Dispose_args__isset() : msgRouter(false) {}
  bool msgRouter :1;
} _Server_MessageRouter_Dispose_args__isset;

class Server_MessageRouter_Dispose_args {
 public:

  Server_MessageRouter_Dispose_args(const Server_MessageRouter_Dispose_args&);
  Server_MessageRouter_Dispose_args& operator=(const Server_MessageRouter_Dispose_args&);
  Server_MessageRouter_Dispose_args() noexcept {
  }

  virtual ~Server_MessageRouter_Dispose_args() noexcept;
   ::thrift_codegen::RObject msgRouter;

  _Server_MessageRouter_Dispose_args__isset __isset;

  void __set_msgRouter(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_MessageRouter_Dispose_args & rhs) const
  {
    if (!(msgRouter == rhs.msgRouter))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_Dispose_pargs {
 public:


  virtual ~Server_MessageRouter_Dispose_pargs() noexcept;
  const  ::thrift_codegen::RObject* msgRouter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_MessageRouter_AddMessageRouterToBrowser_args__isset {
  _Server_MessageRouter_AddMessageRouterToBrowser_args__isset() : msgRouter(false), bid(false) {}
  bool msgRouter :1;
  bool bid :1;
} _Server_MessageRouter_AddMessageRouterToBrowser_args__isset;

class Server_MessageRouter_AddMessageRouterToBrowser_args {
 public:

  Server_MessageRouter_AddMessageRouterToBrowser_args(const Server_MessageRouter_AddMessageRouterToBrowser_args&);
  Server_MessageRouter_AddMessageRouterToBrowser_args& operator=(const Server_MessageRouter_AddMessageRouterToBrowser_args&);
  Server_MessageRouter_AddMessageRouterToBrowser_args() noexcept
                                                      : bid(0) {
  }

  virtual ~Server_MessageRouter_AddMessageRouterToBrowser_args() noexcept;
   ::thrift_codegen::RObject msgRouter;
  int32_t bid;

  _Server_MessageRouter_AddMessageRouterToBrowser_args__isset __isset;

  void __set_msgRouter(const  ::thrift_codegen::RObject& val);

  void __set_bid(const int32_t val);

  bool operator == (const Server_MessageRouter_AddMessageRouterToBrowser_args & rhs) const
  {
    if (!(msgRouter == rhs.msgRouter))
      return false;
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_AddMessageRouterToBrowser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_AddMessageRouterToBrowser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_AddMessageRouterToBrowser_pargs {
 public:


  virtual ~Server_MessageRouter_AddMessageRouterToBrowser_pargs() noexcept;
  const  ::thrift_codegen::RObject* msgRouter;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_AddMessageRouterToBrowser_result {
 public:

  Server_MessageRouter_AddMessageRouterToBrowser_result(const Server_MessageRouter_AddMessageRouterToBrowser_result&) noexcept;
  Server_MessageRouter_AddMessageRouterToBrowser_result& operator=(const Server_MessageRouter_AddMessageRouterToBrowser_result&) noexcept;
  Server_MessageRouter_AddMessageRouterToBrowser_result() noexcept {
  }

  virtual ~Server_MessageRouter_AddMessageRouterToBrowser_result() noexcept;

  bool operator == (const Server_MessageRouter_AddMessageRouterToBrowser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_MessageRouter_AddMessageRouterToBrowser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_AddMessageRouterToBrowser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_AddMessageRouterToBrowser_presult {
 public:


  virtual ~Server_MessageRouter_AddMessageRouterToBrowser_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_MessageRouter_RemoveMessageRouterFromBrowser_args__isset {
  _Server_MessageRouter_RemoveMessageRouterFromBrowser_args__isset() : msgRouter(false), bid(false) {}
  bool msgRouter :1;
  bool bid :1;
} _Server_MessageRouter_RemoveMessageRouterFromBrowser_args__isset;

class Server_MessageRouter_RemoveMessageRouterFromBrowser_args {
 public:

  Server_MessageRouter_RemoveMessageRouterFromBrowser_args(const Server_MessageRouter_RemoveMessageRouterFromBrowser_args&);
  Server_MessageRouter_RemoveMessageRouterFromBrowser_args& operator=(const Server_MessageRouter_RemoveMessageRouterFromBrowser_args&);
  Server_MessageRouter_RemoveMessageRouterFromBrowser_args() noexcept
                                                           : bid(0) {
  }

  virtual ~Server_MessageRouter_RemoveMessageRouterFromBrowser_args() noexcept;
   ::thrift_codegen::RObject msgRouter;
  int32_t bid;

  _Server_MessageRouter_RemoveMessageRouterFromBrowser_args__isset __isset;

  void __set_msgRouter(const  ::thrift_codegen::RObject& val);

  void __set_bid(const int32_t val);

  bool operator == (const Server_MessageRouter_RemoveMessageRouterFromBrowser_args & rhs) const
  {
    if (!(msgRouter == rhs.msgRouter))
      return false;
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_RemoveMessageRouterFromBrowser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_RemoveMessageRouterFromBrowser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_RemoveMessageRouterFromBrowser_pargs {
 public:


  virtual ~Server_MessageRouter_RemoveMessageRouterFromBrowser_pargs() noexcept;
  const  ::thrift_codegen::RObject* msgRouter;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_RemoveMessageRouterFromBrowser_result {
 public:

  Server_MessageRouter_RemoveMessageRouterFromBrowser_result(const Server_MessageRouter_RemoveMessageRouterFromBrowser_result&) noexcept;
  Server_MessageRouter_RemoveMessageRouterFromBrowser_result& operator=(const Server_MessageRouter_RemoveMessageRouterFromBrowser_result&) noexcept;
  Server_MessageRouter_RemoveMessageRouterFromBrowser_result() noexcept {
  }

  virtual ~Server_MessageRouter_RemoveMessageRouterFromBrowser_result() noexcept;

  bool operator == (const Server_MessageRouter_RemoveMessageRouterFromBrowser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_MessageRouter_RemoveMessageRouterFromBrowser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_RemoveMessageRouterFromBrowser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_RemoveMessageRouterFromBrowser_presult {
 public:


  virtual ~Server_MessageRouter_RemoveMessageRouterFromBrowser_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_MessageRouter_AddHandler_args__isset {
  _Server_MessageRouter_AddHandler_args__isset() : msgRouter(false), handler(false), first(false) {}
  bool msgRouter :1;
  bool handler :1;
  bool first :1;
} _Server_MessageRouter_AddHandler_args__isset;

class Server_MessageRouter_AddHandler_args {
 public:

  Server_MessageRouter_AddHandler_args(const Server_MessageRouter_AddHandler_args&);
  Server_MessageRouter_AddHandler_args& operator=(const Server_MessageRouter_AddHandler_args&);
  Server_MessageRouter_AddHandler_args() noexcept
                                       : first(0) {
  }

  virtual ~Server_MessageRouter_AddHandler_args() noexcept;
   ::thrift_codegen::RObject msgRouter;
   ::thrift_codegen::RObject handler;
  bool first;

  _Server_MessageRouter_AddHandler_args__isset __isset;

  void __set_msgRouter(const  ::thrift_codegen::RObject& val);

  void __set_handler(const  ::thrift_codegen::RObject& val);

  void __set_first(const bool val);

  bool operator == (const Server_MessageRouter_AddHandler_args & rhs) const
  {
    if (!(msgRouter == rhs.msgRouter))
      return false;
    if (!(handler == rhs.handler))
      return false;
    if (!(first == rhs.first))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_AddHandler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_AddHandler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_AddHandler_pargs {
 public:


  virtual ~Server_MessageRouter_AddHandler_pargs() noexcept;
  const  ::thrift_codegen::RObject* msgRouter;
  const  ::thrift_codegen::RObject* handler;
  const bool* first;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_AddHandler_result {
 public:

  Server_MessageRouter_AddHandler_result(const Server_MessageRouter_AddHandler_result&) noexcept;
  Server_MessageRouter_AddHandler_result& operator=(const Server_MessageRouter_AddHandler_result&) noexcept;
  Server_MessageRouter_AddHandler_result() noexcept {
  }

  virtual ~Server_MessageRouter_AddHandler_result() noexcept;

  bool operator == (const Server_MessageRouter_AddHandler_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_MessageRouter_AddHandler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_AddHandler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_AddHandler_presult {
 public:


  virtual ~Server_MessageRouter_AddHandler_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_MessageRouter_RemoveHandler_args__isset {
  _Server_MessageRouter_RemoveHandler_args__isset() : msgRouter(false), handler(false) {}
  bool msgRouter :1;
  bool handler :1;
} _Server_MessageRouter_RemoveHandler_args__isset;

class Server_MessageRouter_RemoveHandler_args {
 public:

  Server_MessageRouter_RemoveHandler_args(const Server_MessageRouter_RemoveHandler_args&);
  Server_MessageRouter_RemoveHandler_args& operator=(const Server_MessageRouter_RemoveHandler_args&);
  Server_MessageRouter_RemoveHandler_args() noexcept {
  }

  virtual ~Server_MessageRouter_RemoveHandler_args() noexcept;
   ::thrift_codegen::RObject msgRouter;
   ::thrift_codegen::RObject handler;

  _Server_MessageRouter_RemoveHandler_args__isset __isset;

  void __set_msgRouter(const  ::thrift_codegen::RObject& val);

  void __set_handler(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_MessageRouter_RemoveHandler_args & rhs) const
  {
    if (!(msgRouter == rhs.msgRouter))
      return false;
    if (!(handler == rhs.handler))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_RemoveHandler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_RemoveHandler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_RemoveHandler_pargs {
 public:


  virtual ~Server_MessageRouter_RemoveHandler_pargs() noexcept;
  const  ::thrift_codegen::RObject* msgRouter;
  const  ::thrift_codegen::RObject* handler;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_RemoveHandler_result {
 public:

  Server_MessageRouter_RemoveHandler_result(const Server_MessageRouter_RemoveHandler_result&) noexcept;
  Server_MessageRouter_RemoveHandler_result& operator=(const Server_MessageRouter_RemoveHandler_result&) noexcept;
  Server_MessageRouter_RemoveHandler_result() noexcept {
  }

  virtual ~Server_MessageRouter_RemoveHandler_result() noexcept;

  bool operator == (const Server_MessageRouter_RemoveHandler_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_MessageRouter_RemoveHandler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_RemoveHandler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_RemoveHandler_presult {
 public:


  virtual ~Server_MessageRouter_RemoveHandler_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_MessageRouter_CancelPending_args__isset {
  _Server_MessageRouter_CancelPending_args__isset() : msgRouter(false), bid(false), handler(false) {}
  bool msgRouter :1;
  bool bid :1;
  bool handler :1;
} _Server_MessageRouter_CancelPending_args__isset;

class Server_MessageRouter_CancelPending_args {
 public:

  Server_MessageRouter_CancelPending_args(const Server_MessageRouter_CancelPending_args&);
  Server_MessageRouter_CancelPending_args& operator=(const Server_MessageRouter_CancelPending_args&);
  Server_MessageRouter_CancelPending_args() noexcept
                                          : bid(0) {
  }

  virtual ~Server_MessageRouter_CancelPending_args() noexcept;
   ::thrift_codegen::RObject msgRouter;
  int32_t bid;
   ::thrift_codegen::RObject handler;

  _Server_MessageRouter_CancelPending_args__isset __isset;

  void __set_msgRouter(const  ::thrift_codegen::RObject& val);

  void __set_bid(const int32_t val);

  void __set_handler(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_MessageRouter_CancelPending_args & rhs) const
  {
    if (!(msgRouter == rhs.msgRouter))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(handler == rhs.handler))
      return false;
    return true;
  }
  bool operator != (const Server_MessageRouter_CancelPending_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_CancelPending_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_CancelPending_pargs {
 public:


  virtual ~Server_MessageRouter_CancelPending_pargs() noexcept;
  const  ::thrift_codegen::RObject* msgRouter;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* handler;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_CancelPending_result {
 public:

  Server_MessageRouter_CancelPending_result(const Server_MessageRouter_CancelPending_result&) noexcept;
  Server_MessageRouter_CancelPending_result& operator=(const Server_MessageRouter_CancelPending_result&) noexcept;
  Server_MessageRouter_CancelPending_result() noexcept {
  }

  virtual ~Server_MessageRouter_CancelPending_result() noexcept;

  bool operator == (const Server_MessageRouter_CancelPending_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Server_MessageRouter_CancelPending_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_MessageRouter_CancelPending_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_MessageRouter_CancelPending_presult {
 public:


  virtual ~Server_MessageRouter_CancelPending_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Server_QueryCallback_Dispose_args__isset {
  _Server_QueryCallback_Dispose_args__isset() : qcallback(false) {}
  bool qcallback :1;
} _Server_QueryCallback_Dispose_args__isset;

class Server_QueryCallback_Dispose_args {
 public:

  Server_QueryCallback_Dispose_args(const Server_QueryCallback_Dispose_args&);
  Server_QueryCallback_Dispose_args& operator=(const Server_QueryCallback_Dispose_args&);
  Server_QueryCallback_Dispose_args() noexcept {
  }

  virtual ~Server_QueryCallback_Dispose_args() noexcept;
   ::thrift_codegen::RObject qcallback;

  _Server_QueryCallback_Dispose_args__isset __isset;

  void __set_qcallback(const  ::thrift_codegen::RObject& val);

  bool operator == (const Server_QueryCallback_Dispose_args & rhs) const
  {
    if (!(qcallback == rhs.qcallback))
      return false;
    return true;
  }
  bool operator != (const Server_QueryCallback_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_QueryCallback_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_QueryCallback_Dispose_pargs {
 public:


  virtual ~Server_QueryCallback_Dispose_pargs() noexcept;
  const  ::thrift_codegen::RObject* qcallback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_QueryCallback_Success_args__isset {
  _Server_QueryCallback_Success_args__isset() : qcallback(false), response(false) {}
  bool qcallback :1;
  bool response :1;
} _Server_QueryCallback_Success_args__isset;

class Server_QueryCallback_Success_args {
 public:

  Server_QueryCallback_Success_args(const Server_QueryCallback_Success_args&);
  Server_QueryCallback_Success_args& operator=(const Server_QueryCallback_Success_args&);
  Server_QueryCallback_Success_args() noexcept
                                    : response() {
  }

  virtual ~Server_QueryCallback_Success_args() noexcept;
   ::thrift_codegen::RObject qcallback;
  std::string response;

  _Server_QueryCallback_Success_args__isset __isset;

  void __set_qcallback(const  ::thrift_codegen::RObject& val);

  void __set_response(const std::string& val);

  bool operator == (const Server_QueryCallback_Success_args & rhs) const
  {
    if (!(qcallback == rhs.qcallback))
      return false;
    if (!(response == rhs.response))
      return false;
    return true;
  }
  bool operator != (const Server_QueryCallback_Success_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_QueryCallback_Success_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_QueryCallback_Success_pargs {
 public:


  virtual ~Server_QueryCallback_Success_pargs() noexcept;
  const  ::thrift_codegen::RObject* qcallback;
  const std::string* response;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Server_QueryCallback_Failure_args__isset {
  _Server_QueryCallback_Failure_args__isset() : qcallback(false), error_code(false), error_message(false) {}
  bool qcallback :1;
  bool error_code :1;
  bool error_message :1;
} _Server_QueryCallback_Failure_args__isset;

class Server_QueryCallback_Failure_args {
 public:

  Server_QueryCallback_Failure_args(const Server_QueryCallback_Failure_args&);
  Server_QueryCallback_Failure_args& operator=(const Server_QueryCallback_Failure_args&);
  Server_QueryCallback_Failure_args() noexcept
                                    : error_code(0),
                                      error_message() {
  }

  virtual ~Server_QueryCallback_Failure_args() noexcept;
   ::thrift_codegen::RObject qcallback;
  int32_t error_code;
  std::string error_message;

  _Server_QueryCallback_Failure_args__isset __isset;

  void __set_qcallback(const  ::thrift_codegen::RObject& val);

  void __set_error_code(const int32_t val);

  void __set_error_message(const std::string& val);

  bool operator == (const Server_QueryCallback_Failure_args & rhs) const
  {
    if (!(qcallback == rhs.qcallback))
      return false;
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_message == rhs.error_message))
      return false;
    return true;
  }
  bool operator != (const Server_QueryCallback_Failure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Server_QueryCallback_Failure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Server_QueryCallback_Failure_pargs {
 public:


  virtual ~Server_QueryCallback_Failure_pargs() noexcept;
  const  ::thrift_codegen::RObject* qcallback;
  const int32_t* error_code;
  const std::string* error_message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ServerClient : virtual public ServerIf {
 public:
  ServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t connect(const std::string& backwardConnectionPipe) override;
  void send_connect(const std::string& backwardConnectionPipe);
  int32_t recv_connect();
  void log(const std::string& msg) override;
  void send_log(const std::string& msg);
  void echo(std::string& _return, const std::string& msg) override;
  void send_echo(const std::string& msg);
  void recv_echo(std::string& _return);
  void version(std::string& _return) override;
  void send_version();
  void recv_version(std::string& _return);
  void stop() override;
  void send_stop();
  int32_t createBrowser(const int32_t cid, const std::string& url) override;
  void send_createBrowser(const int32_t cid, const std::string& url);
  int32_t recv_createBrowser();
  void closeBrowser(const int32_t bid) override;
  void send_closeBrowser(const int32_t bid);
  void Browser_Reload(const int32_t bid) override;
  void send_Browser_Reload(const int32_t bid);
  void Browser_ReloadIgnoreCache(const int32_t bid) override;
  void send_Browser_ReloadIgnoreCache(const int32_t bid);
  void Browser_LoadURL(const int32_t bid, const std::string& url) override;
  void send_Browser_LoadURL(const int32_t bid, const std::string& url);
  void Browser_GetURL(std::string& _return, const int32_t bid) override;
  void send_Browser_GetURL(const int32_t bid);
  void recv_Browser_GetURL(std::string& _return);
  void Browser_ExecuteJavaScript(const int32_t bid, const std::string& code, const std::string& url, const int32_t line) override;
  void send_Browser_ExecuteJavaScript(const int32_t bid, const std::string& code, const std::string& url, const int32_t line);
  void Browser_WasResized(const int32_t bid, const int32_t width, const int32_t height) override;
  void send_Browser_WasResized(const int32_t bid, const int32_t width, const int32_t height);
  void Browser_SendKeyEvent(const int32_t bid, const int32_t event_type, const int32_t modifiers, const int16_t key_char, const int64_t scanCode, const int32_t key_code) override;
  void send_Browser_SendKeyEvent(const int32_t bid, const int32_t event_type, const int32_t modifiers, const int16_t key_char, const int64_t scanCode, const int32_t key_code);
  void Browser_SendMouseEvent(const int32_t bid, const int32_t event_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t click_count, const int32_t button) override;
  void send_Browser_SendMouseEvent(const int32_t bid, const int32_t event_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t click_count, const int32_t button);
  void Browser_SendMouseWheelEvent(const int32_t bid, const int32_t scroll_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t delta, const int32_t units_to_scroll) override;
  void send_Browser_SendMouseWheelEvent(const int32_t bid, const int32_t scroll_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t delta, const int32_t units_to_scroll);
  void Request_Update(const  ::thrift_codegen::RObject& request) override;
  void send_Request_Update(const  ::thrift_codegen::RObject& request);
  void recv_Request_Update();
  void Request_GetPostData( ::thrift_codegen::PostData& _return, const  ::thrift_codegen::RObject& request) override;
  void send_Request_GetPostData(const  ::thrift_codegen::RObject& request);
  void recv_Request_GetPostData( ::thrift_codegen::PostData& _return);
  void Request_SetPostData(const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::PostData& postData) override;
  void send_Request_SetPostData(const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::PostData& postData);
  void recv_Request_SetPostData();
  void Request_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& request, const std::string& name) override;
  void send_Request_GetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name);
  void recv_Request_GetHeaderByName(std::string& _return);
  void Request_SetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name, const std::string& value, const bool overwrite) override;
  void send_Request_SetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name, const std::string& value, const bool overwrite);
  void recv_Request_SetHeaderByName();
  void Request_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& request) override;
  void send_Request_GetHeaderMap(const  ::thrift_codegen::RObject& request);
  void recv_Request_GetHeaderMap(std::map<std::string, std::string> & _return);
  void Request_SetHeaderMap(const  ::thrift_codegen::RObject& request, const std::map<std::string, std::string> & headerMap) override;
  void send_Request_SetHeaderMap(const  ::thrift_codegen::RObject& request, const std::map<std::string, std::string> & headerMap);
  void recv_Request_SetHeaderMap();
  void Request_Set(const  ::thrift_codegen::RObject& request, const std::string& url, const std::string& method, const  ::thrift_codegen::PostData& postData, const std::map<std::string, std::string> & headerMap) override;
  void send_Request_Set(const  ::thrift_codegen::RObject& request, const std::string& url, const std::string& method, const  ::thrift_codegen::PostData& postData, const std::map<std::string, std::string> & headerMap);
  void recv_Request_Set();
  void Response_Update(const  ::thrift_codegen::RObject& response) override;
  void send_Response_Update(const  ::thrift_codegen::RObject& response);
  void recv_Response_Update();
  void Response_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& response, const std::string& name) override;
  void send_Response_GetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name);
  void recv_Response_GetHeaderByName(std::string& _return);
  void Response_SetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name, const std::string& value, const bool overwrite) override;
  void send_Response_SetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name, const std::string& value, const bool overwrite);
  void recv_Response_SetHeaderByName();
  void Response_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& response) override;
  void send_Response_GetHeaderMap(const  ::thrift_codegen::RObject& response);
  void recv_Response_GetHeaderMap(std::map<std::string, std::string> & _return);
  void Response_SetHeaderMap(const  ::thrift_codegen::RObject& response, const std::map<std::string, std::string> & headerMap) override;
  void send_Response_SetHeaderMap(const  ::thrift_codegen::RObject& response, const std::map<std::string, std::string> & headerMap);
  void recv_Response_SetHeaderMap();
  void Callback_Dispose(const  ::thrift_codegen::RObject& callback) override;
  void send_Callback_Dispose(const  ::thrift_codegen::RObject& callback);
  void Callback_Continue(const  ::thrift_codegen::RObject& callback) override;
  void send_Callback_Continue(const  ::thrift_codegen::RObject& callback);
  void Callback_Cancel(const  ::thrift_codegen::RObject& callback) override;
  void send_Callback_Cancel(const  ::thrift_codegen::RObject& callback);
  void AuthCallback_Dispose(const  ::thrift_codegen::RObject& authCallback) override;
  void send_AuthCallback_Dispose(const  ::thrift_codegen::RObject& authCallback);
  void AuthCallback_Continue(const  ::thrift_codegen::RObject& authCallback, const std::string& username, const std::string& password) override;
  void send_AuthCallback_Continue(const  ::thrift_codegen::RObject& authCallback, const std::string& username, const std::string& password);
  void AuthCallback_Cancel(const  ::thrift_codegen::RObject& authCallback) override;
  void send_AuthCallback_Cancel(const  ::thrift_codegen::RObject& authCallback);
  void MessageRouter_Create( ::thrift_codegen::RObject& _return, const std::string& query, const std::string& cancel) override;
  void send_MessageRouter_Create(const std::string& query, const std::string& cancel);
  void recv_MessageRouter_Create( ::thrift_codegen::RObject& _return);
  void MessageRouter_Dispose(const  ::thrift_codegen::RObject& msgRouter) override;
  void send_MessageRouter_Dispose(const  ::thrift_codegen::RObject& msgRouter);
  void MessageRouter_AddMessageRouterToBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) override;
  void send_MessageRouter_AddMessageRouterToBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid);
  void recv_MessageRouter_AddMessageRouterToBrowser();
  void MessageRouter_RemoveMessageRouterFromBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) override;
  void send_MessageRouter_RemoveMessageRouterFromBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid);
  void recv_MessageRouter_RemoveMessageRouterFromBrowser();
  void MessageRouter_AddHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler, const bool first) override;
  void send_MessageRouter_AddHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler, const bool first);
  void recv_MessageRouter_AddHandler();
  void MessageRouter_RemoveHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler) override;
  void send_MessageRouter_RemoveHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler);
  void recv_MessageRouter_RemoveHandler();
  void MessageRouter_CancelPending(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid, const  ::thrift_codegen::RObject& handler) override;
  void send_MessageRouter_CancelPending(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid, const  ::thrift_codegen::RObject& handler);
  void recv_MessageRouter_CancelPending();
  void QueryCallback_Dispose(const  ::thrift_codegen::RObject& qcallback) override;
  void send_QueryCallback_Dispose(const  ::thrift_codegen::RObject& qcallback);
  void QueryCallback_Success(const  ::thrift_codegen::RObject& qcallback, const std::string& response) override;
  void send_QueryCallback_Success(const  ::thrift_codegen::RObject& qcallback, const std::string& response);
  void QueryCallback_Failure(const  ::thrift_codegen::RObject& qcallback, const int32_t error_code, const std::string& error_message) override;
  void send_QueryCallback_Failure(const  ::thrift_codegen::RObject& qcallback, const int32_t error_code, const std::string& error_message);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_echo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createBrowser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeBrowser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_Reload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_ReloadIgnoreCache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_LoadURL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_GetURL(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_ExecuteJavaScript(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_WasResized(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_SendKeyEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_SendMouseEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Browser_SendMouseWheelEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_Update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_GetPostData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_SetPostData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_GetHeaderByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_SetHeaderByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_GetHeaderMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_SetHeaderMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Request_Set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Response_Update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Response_GetHeaderByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Response_SetHeaderByName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Response_GetHeaderMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Response_SetHeaderMap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Callback_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Callback_Continue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Callback_Cancel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AuthCallback_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AuthCallback_Continue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AuthCallback_Cancel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouter_Create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouter_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouter_AddMessageRouterToBrowser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouter_RemoveMessageRouterFromBrowser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouter_AddHandler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouter_RemoveHandler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouter_CancelPending(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryCallback_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryCallback_Success(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryCallback_Failure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServerProcessor(::std::shared_ptr<ServerIf> iface) :
    iface_(iface) {
    processMap_["connect"] = &ServerProcessor::process_connect;
    processMap_["log"] = &ServerProcessor::process_log;
    processMap_["echo"] = &ServerProcessor::process_echo;
    processMap_["version"] = &ServerProcessor::process_version;
    processMap_["stop"] = &ServerProcessor::process_stop;
    processMap_["createBrowser"] = &ServerProcessor::process_createBrowser;
    processMap_["closeBrowser"] = &ServerProcessor::process_closeBrowser;
    processMap_["Browser_Reload"] = &ServerProcessor::process_Browser_Reload;
    processMap_["Browser_ReloadIgnoreCache"] = &ServerProcessor::process_Browser_ReloadIgnoreCache;
    processMap_["Browser_LoadURL"] = &ServerProcessor::process_Browser_LoadURL;
    processMap_["Browser_GetURL"] = &ServerProcessor::process_Browser_GetURL;
    processMap_["Browser_ExecuteJavaScript"] = &ServerProcessor::process_Browser_ExecuteJavaScript;
    processMap_["Browser_WasResized"] = &ServerProcessor::process_Browser_WasResized;
    processMap_["Browser_SendKeyEvent"] = &ServerProcessor::process_Browser_SendKeyEvent;
    processMap_["Browser_SendMouseEvent"] = &ServerProcessor::process_Browser_SendMouseEvent;
    processMap_["Browser_SendMouseWheelEvent"] = &ServerProcessor::process_Browser_SendMouseWheelEvent;
    processMap_["Request_Update"] = &ServerProcessor::process_Request_Update;
    processMap_["Request_GetPostData"] = &ServerProcessor::process_Request_GetPostData;
    processMap_["Request_SetPostData"] = &ServerProcessor::process_Request_SetPostData;
    processMap_["Request_GetHeaderByName"] = &ServerProcessor::process_Request_GetHeaderByName;
    processMap_["Request_SetHeaderByName"] = &ServerProcessor::process_Request_SetHeaderByName;
    processMap_["Request_GetHeaderMap"] = &ServerProcessor::process_Request_GetHeaderMap;
    processMap_["Request_SetHeaderMap"] = &ServerProcessor::process_Request_SetHeaderMap;
    processMap_["Request_Set"] = &ServerProcessor::process_Request_Set;
    processMap_["Response_Update"] = &ServerProcessor::process_Response_Update;
    processMap_["Response_GetHeaderByName"] = &ServerProcessor::process_Response_GetHeaderByName;
    processMap_["Response_SetHeaderByName"] = &ServerProcessor::process_Response_SetHeaderByName;
    processMap_["Response_GetHeaderMap"] = &ServerProcessor::process_Response_GetHeaderMap;
    processMap_["Response_SetHeaderMap"] = &ServerProcessor::process_Response_SetHeaderMap;
    processMap_["Callback_Dispose"] = &ServerProcessor::process_Callback_Dispose;
    processMap_["Callback_Continue"] = &ServerProcessor::process_Callback_Continue;
    processMap_["Callback_Cancel"] = &ServerProcessor::process_Callback_Cancel;
    processMap_["AuthCallback_Dispose"] = &ServerProcessor::process_AuthCallback_Dispose;
    processMap_["AuthCallback_Continue"] = &ServerProcessor::process_AuthCallback_Continue;
    processMap_["AuthCallback_Cancel"] = &ServerProcessor::process_AuthCallback_Cancel;
    processMap_["MessageRouter_Create"] = &ServerProcessor::process_MessageRouter_Create;
    processMap_["MessageRouter_Dispose"] = &ServerProcessor::process_MessageRouter_Dispose;
    processMap_["MessageRouter_AddMessageRouterToBrowser"] = &ServerProcessor::process_MessageRouter_AddMessageRouterToBrowser;
    processMap_["MessageRouter_RemoveMessageRouterFromBrowser"] = &ServerProcessor::process_MessageRouter_RemoveMessageRouterFromBrowser;
    processMap_["MessageRouter_AddHandler"] = &ServerProcessor::process_MessageRouter_AddHandler;
    processMap_["MessageRouter_RemoveHandler"] = &ServerProcessor::process_MessageRouter_RemoveHandler;
    processMap_["MessageRouter_CancelPending"] = &ServerProcessor::process_MessageRouter_CancelPending;
    processMap_["QueryCallback_Dispose"] = &ServerProcessor::process_QueryCallback_Dispose;
    processMap_["QueryCallback_Success"] = &ServerProcessor::process_QueryCallback_Success;
    processMap_["QueryCallback_Failure"] = &ServerProcessor::process_QueryCallback_Failure;
  }

  virtual ~ServerProcessor() {}
};

class ServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServerProcessorFactory(const ::std::shared_ptr< ServerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ServerIfFactory > handlerFactory_;
};

class ServerMultiface : virtual public ServerIf {
 public:
  ServerMultiface(std::vector<std::shared_ptr<ServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<ServerIf> > ifaces_;
  ServerMultiface() {}
  void add(::std::shared_ptr<ServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t connect(const std::string& backwardConnectionPipe) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect(backwardConnectionPipe);
    }
    return ifaces_[i]->connect(backwardConnectionPipe);
  }

  void log(const std::string& msg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->log(msg);
    }
    ifaces_[i]->log(msg);
  }

  void echo(std::string& _return, const std::string& msg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->echo(_return, msg);
    }
    ifaces_[i]->echo(_return, msg);
    return;
  }

  void version(std::string& _return) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->version(_return);
    }
    ifaces_[i]->version(_return);
    return;
  }

  void stop() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop();
    }
    ifaces_[i]->stop();
  }

  int32_t createBrowser(const int32_t cid, const std::string& url) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createBrowser(cid, url);
    }
    return ifaces_[i]->createBrowser(cid, url);
  }

  void closeBrowser(const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeBrowser(bid);
    }
    ifaces_[i]->closeBrowser(bid);
  }

  void Browser_Reload(const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_Reload(bid);
    }
    ifaces_[i]->Browser_Reload(bid);
  }

  void Browser_ReloadIgnoreCache(const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_ReloadIgnoreCache(bid);
    }
    ifaces_[i]->Browser_ReloadIgnoreCache(bid);
  }

  void Browser_LoadURL(const int32_t bid, const std::string& url) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_LoadURL(bid, url);
    }
    ifaces_[i]->Browser_LoadURL(bid, url);
  }

  void Browser_GetURL(std::string& _return, const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_GetURL(_return, bid);
    }
    ifaces_[i]->Browser_GetURL(_return, bid);
    return;
  }

  void Browser_ExecuteJavaScript(const int32_t bid, const std::string& code, const std::string& url, const int32_t line) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_ExecuteJavaScript(bid, code, url, line);
    }
    ifaces_[i]->Browser_ExecuteJavaScript(bid, code, url, line);
  }

  void Browser_WasResized(const int32_t bid, const int32_t width, const int32_t height) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_WasResized(bid, width, height);
    }
    ifaces_[i]->Browser_WasResized(bid, width, height);
  }

  void Browser_SendKeyEvent(const int32_t bid, const int32_t event_type, const int32_t modifiers, const int16_t key_char, const int64_t scanCode, const int32_t key_code) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_SendKeyEvent(bid, event_type, modifiers, key_char, scanCode, key_code);
    }
    ifaces_[i]->Browser_SendKeyEvent(bid, event_type, modifiers, key_char, scanCode, key_code);
  }

  void Browser_SendMouseEvent(const int32_t bid, const int32_t event_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t click_count, const int32_t button) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_SendMouseEvent(bid, event_type, x, y, modifiers, click_count, button);
    }
    ifaces_[i]->Browser_SendMouseEvent(bid, event_type, x, y, modifiers, click_count, button);
  }

  void Browser_SendMouseWheelEvent(const int32_t bid, const int32_t scroll_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t delta, const int32_t units_to_scroll) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Browser_SendMouseWheelEvent(bid, scroll_type, x, y, modifiers, delta, units_to_scroll);
    }
    ifaces_[i]->Browser_SendMouseWheelEvent(bid, scroll_type, x, y, modifiers, delta, units_to_scroll);
  }

  void Request_Update(const  ::thrift_codegen::RObject& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_Update(request);
    }
    ifaces_[i]->Request_Update(request);
  }

  void Request_GetPostData( ::thrift_codegen::PostData& _return, const  ::thrift_codegen::RObject& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_GetPostData(_return, request);
    }
    ifaces_[i]->Request_GetPostData(_return, request);
    return;
  }

  void Request_SetPostData(const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::PostData& postData) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_SetPostData(request, postData);
    }
    ifaces_[i]->Request_SetPostData(request, postData);
  }

  void Request_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& request, const std::string& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_GetHeaderByName(_return, request, name);
    }
    ifaces_[i]->Request_GetHeaderByName(_return, request, name);
    return;
  }

  void Request_SetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name, const std::string& value, const bool overwrite) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_SetHeaderByName(request, name, value, overwrite);
    }
    ifaces_[i]->Request_SetHeaderByName(request, name, value, overwrite);
  }

  void Request_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_GetHeaderMap(_return, request);
    }
    ifaces_[i]->Request_GetHeaderMap(_return, request);
    return;
  }

  void Request_SetHeaderMap(const  ::thrift_codegen::RObject& request, const std::map<std::string, std::string> & headerMap) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_SetHeaderMap(request, headerMap);
    }
    ifaces_[i]->Request_SetHeaderMap(request, headerMap);
  }

  void Request_Set(const  ::thrift_codegen::RObject& request, const std::string& url, const std::string& method, const  ::thrift_codegen::PostData& postData, const std::map<std::string, std::string> & headerMap) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Request_Set(request, url, method, postData, headerMap);
    }
    ifaces_[i]->Request_Set(request, url, method, postData, headerMap);
  }

  void Response_Update(const  ::thrift_codegen::RObject& response) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Response_Update(response);
    }
    ifaces_[i]->Response_Update(response);
  }

  void Response_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& response, const std::string& name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Response_GetHeaderByName(_return, response, name);
    }
    ifaces_[i]->Response_GetHeaderByName(_return, response, name);
    return;
  }

  void Response_SetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name, const std::string& value, const bool overwrite) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Response_SetHeaderByName(response, name, value, overwrite);
    }
    ifaces_[i]->Response_SetHeaderByName(response, name, value, overwrite);
  }

  void Response_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& response) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Response_GetHeaderMap(_return, response);
    }
    ifaces_[i]->Response_GetHeaderMap(_return, response);
    return;
  }

  void Response_SetHeaderMap(const  ::thrift_codegen::RObject& response, const std::map<std::string, std::string> & headerMap) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Response_SetHeaderMap(response, headerMap);
    }
    ifaces_[i]->Response_SetHeaderMap(response, headerMap);
  }

  void Callback_Dispose(const  ::thrift_codegen::RObject& callback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Callback_Dispose(callback);
    }
    ifaces_[i]->Callback_Dispose(callback);
  }

  void Callback_Continue(const  ::thrift_codegen::RObject& callback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Callback_Continue(callback);
    }
    ifaces_[i]->Callback_Continue(callback);
  }

  void Callback_Cancel(const  ::thrift_codegen::RObject& callback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Callback_Cancel(callback);
    }
    ifaces_[i]->Callback_Cancel(callback);
  }

  void AuthCallback_Dispose(const  ::thrift_codegen::RObject& authCallback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AuthCallback_Dispose(authCallback);
    }
    ifaces_[i]->AuthCallback_Dispose(authCallback);
  }

  void AuthCallback_Continue(const  ::thrift_codegen::RObject& authCallback, const std::string& username, const std::string& password) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AuthCallback_Continue(authCallback, username, password);
    }
    ifaces_[i]->AuthCallback_Continue(authCallback, username, password);
  }

  void AuthCallback_Cancel(const  ::thrift_codegen::RObject& authCallback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AuthCallback_Cancel(authCallback);
    }
    ifaces_[i]->AuthCallback_Cancel(authCallback);
  }

  void MessageRouter_Create( ::thrift_codegen::RObject& _return, const std::string& query, const std::string& cancel) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouter_Create(_return, query, cancel);
    }
    ifaces_[i]->MessageRouter_Create(_return, query, cancel);
    return;
  }

  void MessageRouter_Dispose(const  ::thrift_codegen::RObject& msgRouter) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouter_Dispose(msgRouter);
    }
    ifaces_[i]->MessageRouter_Dispose(msgRouter);
  }

  void MessageRouter_AddMessageRouterToBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouter_AddMessageRouterToBrowser(msgRouter, bid);
    }
    ifaces_[i]->MessageRouter_AddMessageRouterToBrowser(msgRouter, bid);
  }

  void MessageRouter_RemoveMessageRouterFromBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouter_RemoveMessageRouterFromBrowser(msgRouter, bid);
    }
    ifaces_[i]->MessageRouter_RemoveMessageRouterFromBrowser(msgRouter, bid);
  }

  void MessageRouter_AddHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler, const bool first) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouter_AddHandler(msgRouter, handler, first);
    }
    ifaces_[i]->MessageRouter_AddHandler(msgRouter, handler, first);
  }

  void MessageRouter_RemoveHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouter_RemoveHandler(msgRouter, handler);
    }
    ifaces_[i]->MessageRouter_RemoveHandler(msgRouter, handler);
  }

  void MessageRouter_CancelPending(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid, const  ::thrift_codegen::RObject& handler) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouter_CancelPending(msgRouter, bid, handler);
    }
    ifaces_[i]->MessageRouter_CancelPending(msgRouter, bid, handler);
  }

  void QueryCallback_Dispose(const  ::thrift_codegen::RObject& qcallback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryCallback_Dispose(qcallback);
    }
    ifaces_[i]->QueryCallback_Dispose(qcallback);
  }

  void QueryCallback_Success(const  ::thrift_codegen::RObject& qcallback, const std::string& response) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryCallback_Success(qcallback, response);
    }
    ifaces_[i]->QueryCallback_Success(qcallback, response);
  }

  void QueryCallback_Failure(const  ::thrift_codegen::RObject& qcallback, const int32_t error_code, const std::string& error_message) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryCallback_Failure(qcallback, error_code, error_message);
    }
    ifaces_[i]->QueryCallback_Failure(qcallback, error_code, error_message);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServerConcurrentClient : virtual public ServerIf {
 public:
  ServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t connect(const std::string& backwardConnectionPipe) override;
  int32_t send_connect(const std::string& backwardConnectionPipe);
  int32_t recv_connect(const int32_t seqid);
  void log(const std::string& msg) override;
  void send_log(const std::string& msg);
  void echo(std::string& _return, const std::string& msg) override;
  int32_t send_echo(const std::string& msg);
  void recv_echo(std::string& _return, const int32_t seqid);
  void version(std::string& _return) override;
  int32_t send_version();
  void recv_version(std::string& _return, const int32_t seqid);
  void stop() override;
  void send_stop();
  int32_t createBrowser(const int32_t cid, const std::string& url) override;
  int32_t send_createBrowser(const int32_t cid, const std::string& url);
  int32_t recv_createBrowser(const int32_t seqid);
  void closeBrowser(const int32_t bid) override;
  void send_closeBrowser(const int32_t bid);
  void Browser_Reload(const int32_t bid) override;
  void send_Browser_Reload(const int32_t bid);
  void Browser_ReloadIgnoreCache(const int32_t bid) override;
  void send_Browser_ReloadIgnoreCache(const int32_t bid);
  void Browser_LoadURL(const int32_t bid, const std::string& url) override;
  void send_Browser_LoadURL(const int32_t bid, const std::string& url);
  void Browser_GetURL(std::string& _return, const int32_t bid) override;
  int32_t send_Browser_GetURL(const int32_t bid);
  void recv_Browser_GetURL(std::string& _return, const int32_t seqid);
  void Browser_ExecuteJavaScript(const int32_t bid, const std::string& code, const std::string& url, const int32_t line) override;
  void send_Browser_ExecuteJavaScript(const int32_t bid, const std::string& code, const std::string& url, const int32_t line);
  void Browser_WasResized(const int32_t bid, const int32_t width, const int32_t height) override;
  void send_Browser_WasResized(const int32_t bid, const int32_t width, const int32_t height);
  void Browser_SendKeyEvent(const int32_t bid, const int32_t event_type, const int32_t modifiers, const int16_t key_char, const int64_t scanCode, const int32_t key_code) override;
  void send_Browser_SendKeyEvent(const int32_t bid, const int32_t event_type, const int32_t modifiers, const int16_t key_char, const int64_t scanCode, const int32_t key_code);
  void Browser_SendMouseEvent(const int32_t bid, const int32_t event_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t click_count, const int32_t button) override;
  void send_Browser_SendMouseEvent(const int32_t bid, const int32_t event_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t click_count, const int32_t button);
  void Browser_SendMouseWheelEvent(const int32_t bid, const int32_t scroll_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t delta, const int32_t units_to_scroll) override;
  void send_Browser_SendMouseWheelEvent(const int32_t bid, const int32_t scroll_type, const int32_t x, const int32_t y, const int32_t modifiers, const int32_t delta, const int32_t units_to_scroll);
  void Request_Update(const  ::thrift_codegen::RObject& request) override;
  int32_t send_Request_Update(const  ::thrift_codegen::RObject& request);
  void recv_Request_Update(const int32_t seqid);
  void Request_GetPostData( ::thrift_codegen::PostData& _return, const  ::thrift_codegen::RObject& request) override;
  int32_t send_Request_GetPostData(const  ::thrift_codegen::RObject& request);
  void recv_Request_GetPostData( ::thrift_codegen::PostData& _return, const int32_t seqid);
  void Request_SetPostData(const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::PostData& postData) override;
  int32_t send_Request_SetPostData(const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::PostData& postData);
  void recv_Request_SetPostData(const int32_t seqid);
  void Request_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& request, const std::string& name) override;
  int32_t send_Request_GetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name);
  void recv_Request_GetHeaderByName(std::string& _return, const int32_t seqid);
  void Request_SetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name, const std::string& value, const bool overwrite) override;
  int32_t send_Request_SetHeaderByName(const  ::thrift_codegen::RObject& request, const std::string& name, const std::string& value, const bool overwrite);
  void recv_Request_SetHeaderByName(const int32_t seqid);
  void Request_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& request) override;
  int32_t send_Request_GetHeaderMap(const  ::thrift_codegen::RObject& request);
  void recv_Request_GetHeaderMap(std::map<std::string, std::string> & _return, const int32_t seqid);
  void Request_SetHeaderMap(const  ::thrift_codegen::RObject& request, const std::map<std::string, std::string> & headerMap) override;
  int32_t send_Request_SetHeaderMap(const  ::thrift_codegen::RObject& request, const std::map<std::string, std::string> & headerMap);
  void recv_Request_SetHeaderMap(const int32_t seqid);
  void Request_Set(const  ::thrift_codegen::RObject& request, const std::string& url, const std::string& method, const  ::thrift_codegen::PostData& postData, const std::map<std::string, std::string> & headerMap) override;
  int32_t send_Request_Set(const  ::thrift_codegen::RObject& request, const std::string& url, const std::string& method, const  ::thrift_codegen::PostData& postData, const std::map<std::string, std::string> & headerMap);
  void recv_Request_Set(const int32_t seqid);
  void Response_Update(const  ::thrift_codegen::RObject& response) override;
  int32_t send_Response_Update(const  ::thrift_codegen::RObject& response);
  void recv_Response_Update(const int32_t seqid);
  void Response_GetHeaderByName(std::string& _return, const  ::thrift_codegen::RObject& response, const std::string& name) override;
  int32_t send_Response_GetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name);
  void recv_Response_GetHeaderByName(std::string& _return, const int32_t seqid);
  void Response_SetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name, const std::string& value, const bool overwrite) override;
  int32_t send_Response_SetHeaderByName(const  ::thrift_codegen::RObject& response, const std::string& name, const std::string& value, const bool overwrite);
  void recv_Response_SetHeaderByName(const int32_t seqid);
  void Response_GetHeaderMap(std::map<std::string, std::string> & _return, const  ::thrift_codegen::RObject& response) override;
  int32_t send_Response_GetHeaderMap(const  ::thrift_codegen::RObject& response);
  void recv_Response_GetHeaderMap(std::map<std::string, std::string> & _return, const int32_t seqid);
  void Response_SetHeaderMap(const  ::thrift_codegen::RObject& response, const std::map<std::string, std::string> & headerMap) override;
  int32_t send_Response_SetHeaderMap(const  ::thrift_codegen::RObject& response, const std::map<std::string, std::string> & headerMap);
  void recv_Response_SetHeaderMap(const int32_t seqid);
  void Callback_Dispose(const  ::thrift_codegen::RObject& callback) override;
  void send_Callback_Dispose(const  ::thrift_codegen::RObject& callback);
  void Callback_Continue(const  ::thrift_codegen::RObject& callback) override;
  void send_Callback_Continue(const  ::thrift_codegen::RObject& callback);
  void Callback_Cancel(const  ::thrift_codegen::RObject& callback) override;
  void send_Callback_Cancel(const  ::thrift_codegen::RObject& callback);
  void AuthCallback_Dispose(const  ::thrift_codegen::RObject& authCallback) override;
  void send_AuthCallback_Dispose(const  ::thrift_codegen::RObject& authCallback);
  void AuthCallback_Continue(const  ::thrift_codegen::RObject& authCallback, const std::string& username, const std::string& password) override;
  void send_AuthCallback_Continue(const  ::thrift_codegen::RObject& authCallback, const std::string& username, const std::string& password);
  void AuthCallback_Cancel(const  ::thrift_codegen::RObject& authCallback) override;
  void send_AuthCallback_Cancel(const  ::thrift_codegen::RObject& authCallback);
  void MessageRouter_Create( ::thrift_codegen::RObject& _return, const std::string& query, const std::string& cancel) override;
  int32_t send_MessageRouter_Create(const std::string& query, const std::string& cancel);
  void recv_MessageRouter_Create( ::thrift_codegen::RObject& _return, const int32_t seqid);
  void MessageRouter_Dispose(const  ::thrift_codegen::RObject& msgRouter) override;
  void send_MessageRouter_Dispose(const  ::thrift_codegen::RObject& msgRouter);
  void MessageRouter_AddMessageRouterToBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) override;
  int32_t send_MessageRouter_AddMessageRouterToBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid);
  void recv_MessageRouter_AddMessageRouterToBrowser(const int32_t seqid);
  void MessageRouter_RemoveMessageRouterFromBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid) override;
  int32_t send_MessageRouter_RemoveMessageRouterFromBrowser(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid);
  void recv_MessageRouter_RemoveMessageRouterFromBrowser(const int32_t seqid);
  void MessageRouter_AddHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler, const bool first) override;
  int32_t send_MessageRouter_AddHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler, const bool first);
  void recv_MessageRouter_AddHandler(const int32_t seqid);
  void MessageRouter_RemoveHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler) override;
  int32_t send_MessageRouter_RemoveHandler(const  ::thrift_codegen::RObject& msgRouter, const  ::thrift_codegen::RObject& handler);
  void recv_MessageRouter_RemoveHandler(const int32_t seqid);
  void MessageRouter_CancelPending(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid, const  ::thrift_codegen::RObject& handler) override;
  int32_t send_MessageRouter_CancelPending(const  ::thrift_codegen::RObject& msgRouter, const int32_t bid, const  ::thrift_codegen::RObject& handler);
  void recv_MessageRouter_CancelPending(const int32_t seqid);
  void QueryCallback_Dispose(const  ::thrift_codegen::RObject& qcallback) override;
  void send_QueryCallback_Dispose(const  ::thrift_codegen::RObject& qcallback);
  void QueryCallback_Success(const  ::thrift_codegen::RObject& qcallback, const std::string& response) override;
  void send_QueryCallback_Success(const  ::thrift_codegen::RObject& qcallback, const std::string& response);
  void QueryCallback_Failure(const  ::thrift_codegen::RObject& qcallback, const int32_t error_code, const std::string& error_message) override;
  void send_QueryCallback_Failure(const  ::thrift_codegen::RObject& qcallback, const int32_t error_code, const std::string& error_message);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
