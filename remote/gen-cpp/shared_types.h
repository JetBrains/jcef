/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef shared_TYPES_H
#define shared_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace thrift_codegen {

class RObject;

class PostDataElement;

class PostData;

class KeyEvent;

typedef struct _RObject__isset {
  _RObject__isset() : isPersistent(false), isDisableDefaultHandling(false), objInfo(false) {}
  bool isPersistent :1;
  bool isDisableDefaultHandling :1;
  bool objInfo :1;
} _RObject__isset;

class RObject : public virtual ::apache::thrift::TBase {
 public:

  RObject(const RObject&);
  RObject& operator=(const RObject&);
  RObject() noexcept
          : objId(0),
            isPersistent(0),
            isDisableDefaultHandling(0) {
  }

  virtual ~RObject() noexcept;
  int32_t objId;
  bool isPersistent;
  bool isDisableDefaultHandling;
  std::map<std::string, std::string>  objInfo;

  _RObject__isset __isset;

  void __set_objId(const int32_t val);

  void __set_isPersistent(const bool val);

  void __set_isDisableDefaultHandling(const bool val);

  void __set_objInfo(const std::map<std::string, std::string> & val);

  bool operator == (const RObject & rhs) const
  {
    if (!(objId == rhs.objId))
      return false;
    if (__isset.isPersistent != rhs.__isset.isPersistent)
      return false;
    else if (__isset.isPersistent && !(isPersistent == rhs.isPersistent))
      return false;
    if (__isset.isDisableDefaultHandling != rhs.__isset.isDisableDefaultHandling)
      return false;
    else if (__isset.isDisableDefaultHandling && !(isDisableDefaultHandling == rhs.isDisableDefaultHandling))
      return false;
    if (__isset.objInfo != rhs.__isset.objInfo)
      return false;
    else if (__isset.objInfo && !(objInfo == rhs.objInfo))
      return false;
    return true;
  }
  bool operator != (const RObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(RObject &a, RObject &b);

std::ostream& operator<<(std::ostream& out, const RObject& obj);

typedef struct _PostDataElement__isset {
  _PostDataElement__isset() : file(false), bytes(false) {}
  bool file :1;
  bool bytes :1;
} _PostDataElement__isset;

class PostDataElement : public virtual ::apache::thrift::TBase {
 public:

  PostDataElement(const PostDataElement&);
  PostDataElement& operator=(const PostDataElement&);
  PostDataElement() noexcept
                  : isReadOnly(0),
                    file(),
                    bytes() {
  }

  virtual ~PostDataElement() noexcept;
  bool isReadOnly;
  std::string file;
  std::string bytes;

  _PostDataElement__isset __isset;

  void __set_isReadOnly(const bool val);

  void __set_file(const std::string& val);

  void __set_bytes(const std::string& val);

  bool operator == (const PostDataElement & rhs) const
  {
    if (!(isReadOnly == rhs.isReadOnly))
      return false;
    if (__isset.file != rhs.__isset.file)
      return false;
    else if (__isset.file && !(file == rhs.file))
      return false;
    if (__isset.bytes != rhs.__isset.bytes)
      return false;
    else if (__isset.bytes && !(bytes == rhs.bytes))
      return false;
    return true;
  }
  bool operator != (const PostDataElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostDataElement & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PostDataElement &a, PostDataElement &b);

std::ostream& operator<<(std::ostream& out, const PostDataElement& obj);

typedef struct _PostData__isset {
  _PostData__isset() : elements(false) {}
  bool elements :1;
} _PostData__isset;

class PostData : public virtual ::apache::thrift::TBase {
 public:

  PostData(const PostData&);
  PostData& operator=(const PostData&);
  PostData() noexcept
           : isReadOnly(0),
             hasExcludedElements(0) {
  }

  virtual ~PostData() noexcept;
  bool isReadOnly;
  bool hasExcludedElements;
  std::vector<PostDataElement>  elements;

  _PostData__isset __isset;

  void __set_isReadOnly(const bool val);

  void __set_hasExcludedElements(const bool val);

  void __set_elements(const std::vector<PostDataElement> & val);

  bool operator == (const PostData & rhs) const
  {
    if (!(isReadOnly == rhs.isReadOnly))
      return false;
    if (!(hasExcludedElements == rhs.hasExcludedElements))
      return false;
    if (__isset.elements != rhs.__isset.elements)
      return false;
    else if (__isset.elements && !(elements == rhs.elements))
      return false;
    return true;
  }
  bool operator != (const PostData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PostData &a, PostData &b);

std::ostream& operator<<(std::ostream& out, const PostData& obj);


class KeyEvent : public virtual ::apache::thrift::TBase {
 public:

  KeyEvent(const KeyEvent&);
  KeyEvent& operator=(const KeyEvent&);
  KeyEvent() noexcept
           : type(),
             modifiers(0),
             windows_key_code(0),
             native_key_code(0),
             is_system_key(0),
             character(0),
             unmodified_character(0),
             focus_on_editable_field(0) {
  }

  virtual ~KeyEvent() noexcept;
  std::string type;
  int32_t modifiers;
  int32_t windows_key_code;
  int32_t native_key_code;
  bool is_system_key;
  int16_t character;
  int16_t unmodified_character;
  bool focus_on_editable_field;

  void __set_type(const std::string& val);

  void __set_modifiers(const int32_t val);

  void __set_windows_key_code(const int32_t val);

  void __set_native_key_code(const int32_t val);

  void __set_is_system_key(const bool val);

  void __set_character(const int16_t val);

  void __set_unmodified_character(const int16_t val);

  void __set_focus_on_editable_field(const bool val);

  bool operator == (const KeyEvent & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(modifiers == rhs.modifiers))
      return false;
    if (!(windows_key_code == rhs.windows_key_code))
      return false;
    if (!(native_key_code == rhs.native_key_code))
      return false;
    if (!(is_system_key == rhs.is_system_key))
      return false;
    if (!(character == rhs.character))
      return false;
    if (!(unmodified_character == rhs.unmodified_character))
      return false;
    if (!(focus_on_editable_field == rhs.focus_on_editable_field))
      return false;
    return true;
  }
  bool operator != (const KeyEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyEvent &a, KeyEvent &b);

std::ostream& operator<<(std::ostream& out, const KeyEvent& obj);

} // namespace

#endif
