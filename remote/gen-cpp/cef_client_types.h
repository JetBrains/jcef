/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cef_client_TYPES_H
#define cef_client_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "shared_types.h"


namespace thrift_codegen {

class Point;

class Rect;

class ScreenInfo;


class Point : public virtual ::apache::thrift::TBase {
 public:

  Point(const Point&) noexcept;
  Point& operator=(const Point&) noexcept;
  Point() noexcept
        : x(0),
          y(0) {
  }

  virtual ~Point() noexcept;
  int32_t x;
  int32_t y;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  bool operator == (const Point & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const Point &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Point &a, Point &b);

std::ostream& operator<<(std::ostream& out, const Point& obj);


class Rect : public virtual ::apache::thrift::TBase {
 public:

  Rect(const Rect&) noexcept;
  Rect& operator=(const Rect&) noexcept;
  Rect() noexcept
       : x(0),
         y(0),
         w(0),
         h(0) {
  }

  virtual ~Rect() noexcept;
  int32_t x;
  int32_t y;
  int32_t w;
  int32_t h;

  void __set_x(const int32_t val);

  void __set_y(const int32_t val);

  void __set_w(const int32_t val);

  void __set_h(const int32_t val);

  bool operator == (const Rect & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    return true;
  }
  bool operator != (const Rect &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rect & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rect &a, Rect &b);

std::ostream& operator<<(std::ostream& out, const Rect& obj);


class ScreenInfo : public virtual ::apache::thrift::TBase {
 public:

  ScreenInfo(const ScreenInfo&) noexcept;
  ScreenInfo& operator=(const ScreenInfo&) noexcept;
  ScreenInfo() noexcept
             : device_scale_factor(0),
               depth(0),
               depth_per_component(0),
               is_monochrome(0) {
  }

  virtual ~ScreenInfo() noexcept;
  double device_scale_factor;
  int32_t depth;
  int32_t depth_per_component;
  bool is_monochrome;
  Rect rect;
  Rect available_rect;

  void __set_device_scale_factor(const double val);

  void __set_depth(const int32_t val);

  void __set_depth_per_component(const int32_t val);

  void __set_is_monochrome(const bool val);

  void __set_rect(const Rect& val);

  void __set_available_rect(const Rect& val);

  bool operator == (const ScreenInfo & rhs) const
  {
    if (!(device_scale_factor == rhs.device_scale_factor))
      return false;
    if (!(depth == rhs.depth))
      return false;
    if (!(depth_per_component == rhs.depth_per_component))
      return false;
    if (!(is_monochrome == rhs.is_monochrome))
      return false;
    if (!(rect == rhs.rect))
      return false;
    if (!(available_rect == rhs.available_rect))
      return false;
    return true;
  }
  bool operator != (const ScreenInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ScreenInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(ScreenInfo &a, ScreenInfo &b);

std::ostream& operator<<(std::ostream& out, const ScreenInfo& obj);

} // namespace

#endif
