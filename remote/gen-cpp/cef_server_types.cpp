/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cef_server_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace thrift_codegen {


CefKeyEvent::~CefKeyEvent() noexcept {
}


void CefKeyEvent::__set_type(const int32_t val) {
  this->type = val;
}

void CefKeyEvent::__set_modifiers(const int32_t val) {
  this->modifiers = val;
}

void CefKeyEvent::__set_windows_key_code(const int32_t val) {
  this->windows_key_code = val;
}

void CefKeyEvent::__set_native_key_code(const int32_t val) {
  this->native_key_code = val;
}

void CefKeyEvent::__set_character(const int16_t val) {
  this->character = val;
}

void CefKeyEvent::__set_unmodified_character(const int16_t val) {
  this->unmodified_character = val;
}

void CefKeyEvent::__set_is_system_key(const bool val) {
  this->is_system_key = val;
}
std::ostream& operator<<(std::ostream& out, const CefKeyEvent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CefKeyEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_modifiers = false;
  bool isset_windows_key_code = false;
  bool isset_native_key_code = false;
  bool isset_character = false;
  bool isset_unmodified_character = false;
  bool isset_is_system_key = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->modifiers);
          isset_modifiers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->windows_key_code);
          isset_windows_key_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->native_key_code);
          isset_native_key_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->character);
          isset_character = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->unmodified_character);
          isset_unmodified_character = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_system_key);
          isset_is_system_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_modifiers)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_windows_key_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_native_key_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_character)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_unmodified_character)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_is_system_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CefKeyEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CefKeyEvent");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifiers", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->modifiers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("windows_key_code", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->windows_key_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("native_key_code", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->native_key_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("character", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->character);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unmodified_character", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->unmodified_character);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_system_key", ::apache::thrift::protocol::T_BOOL, 7);
  xfer += oprot->writeBool(this->is_system_key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CefKeyEvent &a, CefKeyEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.modifiers, b.modifiers);
  swap(a.windows_key_code, b.windows_key_code);
  swap(a.native_key_code, b.native_key_code);
  swap(a.character, b.character);
  swap(a.unmodified_character, b.unmodified_character);
  swap(a.is_system_key, b.is_system_key);
}

CefKeyEvent::CefKeyEvent(const CefKeyEvent& other0) noexcept {
  type = other0.type;
  modifiers = other0.modifiers;
  windows_key_code = other0.windows_key_code;
  native_key_code = other0.native_key_code;
  character = other0.character;
  unmodified_character = other0.unmodified_character;
  is_system_key = other0.is_system_key;
}
CefKeyEvent& CefKeyEvent::operator=(const CefKeyEvent& other1) noexcept {
  type = other1.type;
  modifiers = other1.modifiers;
  windows_key_code = other1.windows_key_code;
  native_key_code = other1.native_key_code;
  character = other1.character;
  unmodified_character = other1.unmodified_character;
  is_system_key = other1.is_system_key;
  return *this;
}
void CefKeyEvent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CefKeyEvent(";
  out << "type=" << to_string(type);
  out << ", " << "modifiers=" << to_string(modifiers);
  out << ", " << "windows_key_code=" << to_string(windows_key_code);
  out << ", " << "native_key_code=" << to_string(native_key_code);
  out << ", " << "character=" << to_string(character);
  out << ", " << "unmodified_character=" << to_string(unmodified_character);
  out << ", " << "is_system_key=" << to_string(is_system_key);
  out << ")";
}

} // namespace
