/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientHandlers_H
#define ClientHandlers_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "cef_client_types.h"

namespace thrift_codegen {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ClientHandlersIf {
 public:
  virtual ~ClientHandlersIf() {}
  virtual int32_t connect() = 0;
  virtual void log(const std::string& msg) = 0;
  virtual void AppHandler_OnContextInitialized() = 0;
  virtual void RenderHandler_GetViewRect(Rect& _return, const int32_t bid) = 0;
  virtual void RenderHandler_GetScreenInfo(ScreenInfo& _return, const int32_t bid) = 0;
  virtual void RenderHandler_GetScreenPoint(Point& _return, const int32_t bid, const int32_t viewX, const int32_t viewY) = 0;
  virtual void RenderHandler_OnPaint(const int32_t bid, const bool popup, const int32_t dirtyRectsCount, const std::string& sharedMemName, const int64_t sharedMemHandle, const int32_t width, const int32_t height) = 0;
  virtual bool LifeSpanHandler_OnBeforePopup(const int32_t bid, const std::string& url, const std::string& frameName, const bool gesture) = 0;
  virtual void LifeSpanHandler_OnAfterCreated(const int32_t bid) = 0;
  virtual bool LifeSpanHandler_DoClose(const int32_t bid) = 0;
  virtual void LifeSpanHandler_OnBeforeClose(const int32_t bid) = 0;
  virtual void LoadHandler_OnLoadingStateChange(const int32_t bid, const bool isLoading, const bool canGoBack, const bool canGoForward) = 0;
  virtual void LoadHandler_OnLoadStart(const int32_t bid, const int32_t transition_type) = 0;
  virtual void LoadHandler_OnLoadEnd(const int32_t bid, const int32_t httpStatusCode) = 0;
  virtual void LoadHandler_OnLoadError(const int32_t bid, const int32_t errorCode, const std::string& errorText, const std::string& failedUrl) = 0;
  virtual void DisplayHandler_OnAddressChange(const int32_t bid, const std::string& url) = 0;
  virtual void DisplayHandler_OnTitleChange(const int32_t bid, const std::string& title) = 0;
  virtual bool DisplayHandler_OnTooltip(const int32_t bid, const std::string& text) = 0;
  virtual void DisplayHandler_OnStatusMessage(const int32_t bid, const std::string& value) = 0;
  virtual bool DisplayHandler_OnConsoleMessage(const int32_t bid, const int32_t level, const std::string& message, const std::string& source, const int32_t line) = 0;
  virtual bool KeyboardHandler_OnPreKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) = 0;
  virtual bool KeyboardHandler_OnKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) = 0;
  virtual void FocusHandler_OnTakeFocus(const int32_t bid, const bool next) = 0;
  virtual bool FocusHandler_OnSetFocus(const int32_t bid, const std::string& source) = 0;
  virtual void FocusHandler_OnGotFocus(const int32_t bid) = 0;
  virtual bool RequestHandler_OnBeforeBrowse(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool user_gesture, const bool is_redirect) = 0;
  virtual bool RequestHandler_OnOpenURLFromTab(const int32_t bid, const std::string& target_url, const bool user_gesture) = 0;
  virtual bool RequestHandler_GetAuthCredentials(const int32_t bid, const std::string& origin_url, const bool isProxy, const std::string& host, const int32_t port, const std::string& realm, const std::string& scheme, const  ::thrift_codegen::RObject& authCallback) = 0;
  virtual bool RequestHandler_OnCertificateError(const int32_t bid, const std::string& cert_error, const std::string& request_url, const  ::thrift_codegen::RObject& sslInfo, const  ::thrift_codegen::RObject& callback) = 0;
  virtual void RequestHandler_OnRenderProcessTerminated(const int32_t bid, const std::string& status) = 0;
  virtual void RequestHandler_GetResourceRequestHandler( ::thrift_codegen::RObject& _return, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool isNavigation, const bool isDownload, const std::string& requestInitiator) = 0;
  virtual void ResourceRequestHandler_Dispose(const int32_t rrHandler) = 0;
  virtual void ResourceRequestHandler_GetCookieAccessFilter( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) = 0;
  virtual void CookieAccessFilter_Dispose(const int32_t filter) = 0;
  virtual bool CookieAccessFilter_CanSendCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const std::vector<std::string> & cookie) = 0;
  virtual bool CookieAccessFilter_CanSaveCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::vector<std::string> & cookie) = 0;
  virtual bool ResourceRequestHandler_OnBeforeResourceLoad(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) = 0;
  virtual void ResourceRequestHandler_GetResourceHandler( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) = 0;
  virtual void ResourceHandler_Dispose(const int32_t resourceHandler) = 0;
  virtual void ResourceRequestHandler_OnResourceRedirect(std::string& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& new_url) = 0;
  virtual bool ResourceRequestHandler_OnResourceResponse(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response) = 0;
  virtual void ResourceRequestHandler_OnResourceLoadComplete(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& status, const int64_t receivedContentLength) = 0;
  virtual bool ResourceRequestHandler_OnProtocolExecution(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool allowOsExecution) = 0;
  virtual bool MessageRouterHandler_onQuery(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId, const std::string& request, const bool persistent, const  ::thrift_codegen::RObject& queryCallback) = 0;
  virtual void MessageRouterHandler_onQueryCanceled(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId) = 0;
};

class ClientHandlersIfFactory {
 public:
  typedef ClientHandlersIf Handler;

  virtual ~ClientHandlersIfFactory() {}

  virtual ClientHandlersIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientHandlersIf* /* handler */) = 0;
  };

class ClientHandlersIfSingletonFactory : virtual public ClientHandlersIfFactory {
 public:
  ClientHandlersIfSingletonFactory(const ::std::shared_ptr<ClientHandlersIf>& iface) : iface_(iface) {}
  virtual ~ClientHandlersIfSingletonFactory() {}

  virtual ClientHandlersIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ClientHandlersIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ClientHandlersIf> iface_;
};

class ClientHandlersNull : virtual public ClientHandlersIf {
 public:
  virtual ~ClientHandlersNull() {}
  int32_t connect() override {
    int32_t _return = 0;
    return _return;
  }
  void log(const std::string& /* msg */) override {
    return;
  }
  void AppHandler_OnContextInitialized() override {
    return;
  }
  void RenderHandler_GetViewRect(Rect& /* _return */, const int32_t /* bid */) override {
    return;
  }
  void RenderHandler_GetScreenInfo(ScreenInfo& /* _return */, const int32_t /* bid */) override {
    return;
  }
  void RenderHandler_GetScreenPoint(Point& /* _return */, const int32_t /* bid */, const int32_t /* viewX */, const int32_t /* viewY */) override {
    return;
  }
  void RenderHandler_OnPaint(const int32_t /* bid */, const bool /* popup */, const int32_t /* dirtyRectsCount */, const std::string& /* sharedMemName */, const int64_t /* sharedMemHandle */, const int32_t /* width */, const int32_t /* height */) override {
    return;
  }
  bool LifeSpanHandler_OnBeforePopup(const int32_t /* bid */, const std::string& /* url */, const std::string& /* frameName */, const bool /* gesture */) override {
    bool _return = false;
    return _return;
  }
  void LifeSpanHandler_OnAfterCreated(const int32_t /* bid */) override {
    return;
  }
  bool LifeSpanHandler_DoClose(const int32_t /* bid */) override {
    bool _return = false;
    return _return;
  }
  void LifeSpanHandler_OnBeforeClose(const int32_t /* bid */) override {
    return;
  }
  void LoadHandler_OnLoadingStateChange(const int32_t /* bid */, const bool /* isLoading */, const bool /* canGoBack */, const bool /* canGoForward */) override {
    return;
  }
  void LoadHandler_OnLoadStart(const int32_t /* bid */, const int32_t /* transition_type */) override {
    return;
  }
  void LoadHandler_OnLoadEnd(const int32_t /* bid */, const int32_t /* httpStatusCode */) override {
    return;
  }
  void LoadHandler_OnLoadError(const int32_t /* bid */, const int32_t /* errorCode */, const std::string& /* errorText */, const std::string& /* failedUrl */) override {
    return;
  }
  void DisplayHandler_OnAddressChange(const int32_t /* bid */, const std::string& /* url */) override {
    return;
  }
  void DisplayHandler_OnTitleChange(const int32_t /* bid */, const std::string& /* title */) override {
    return;
  }
  bool DisplayHandler_OnTooltip(const int32_t /* bid */, const std::string& /* text */) override {
    bool _return = false;
    return _return;
  }
  void DisplayHandler_OnStatusMessage(const int32_t /* bid */, const std::string& /* value */) override {
    return;
  }
  bool DisplayHandler_OnConsoleMessage(const int32_t /* bid */, const int32_t /* level */, const std::string& /* message */, const std::string& /* source */, const int32_t /* line */) override {
    bool _return = false;
    return _return;
  }
  bool KeyboardHandler_OnPreKeyEvent(const int32_t /* bid */, const  ::thrift_codegen::KeyEvent& /* event */) override {
    bool _return = false;
    return _return;
  }
  bool KeyboardHandler_OnKeyEvent(const int32_t /* bid */, const  ::thrift_codegen::KeyEvent& /* event */) override {
    bool _return = false;
    return _return;
  }
  void FocusHandler_OnTakeFocus(const int32_t /* bid */, const bool /* next */) override {
    return;
  }
  bool FocusHandler_OnSetFocus(const int32_t /* bid */, const std::string& /* source */) override {
    bool _return = false;
    return _return;
  }
  void FocusHandler_OnGotFocus(const int32_t /* bid */) override {
    return;
  }
  bool RequestHandler_OnBeforeBrowse(const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const bool /* user_gesture */, const bool /* is_redirect */) override {
    bool _return = false;
    return _return;
  }
  bool RequestHandler_OnOpenURLFromTab(const int32_t /* bid */, const std::string& /* target_url */, const bool /* user_gesture */) override {
    bool _return = false;
    return _return;
  }
  bool RequestHandler_GetAuthCredentials(const int32_t /* bid */, const std::string& /* origin_url */, const bool /* isProxy */, const std::string& /* host */, const int32_t /* port */, const std::string& /* realm */, const std::string& /* scheme */, const  ::thrift_codegen::RObject& /* authCallback */) override {
    bool _return = false;
    return _return;
  }
  bool RequestHandler_OnCertificateError(const int32_t /* bid */, const std::string& /* cert_error */, const std::string& /* request_url */, const  ::thrift_codegen::RObject& /* sslInfo */, const  ::thrift_codegen::RObject& /* callback */) override {
    bool _return = false;
    return _return;
  }
  void RequestHandler_OnRenderProcessTerminated(const int32_t /* bid */, const std::string& /* status */) override {
    return;
  }
  void RequestHandler_GetResourceRequestHandler( ::thrift_codegen::RObject& /* _return */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const bool /* isNavigation */, const bool /* isDownload */, const std::string& /* requestInitiator */) override {
    return;
  }
  void ResourceRequestHandler_Dispose(const int32_t /* rrHandler */) override {
    return;
  }
  void ResourceRequestHandler_GetCookieAccessFilter( ::thrift_codegen::RObject& /* _return */, const int32_t /* rrHandler */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */) override {
    return;
  }
  void CookieAccessFilter_Dispose(const int32_t /* filter */) override {
    return;
  }
  bool CookieAccessFilter_CanSendCookie(const int32_t /* filter */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const std::vector<std::string> & /* cookie */) override {
    bool _return = false;
    return _return;
  }
  bool CookieAccessFilter_CanSaveCookie(const int32_t /* filter */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const  ::thrift_codegen::RObject& /* response */, const std::vector<std::string> & /* cookie */) override {
    bool _return = false;
    return _return;
  }
  bool ResourceRequestHandler_OnBeforeResourceLoad(const int32_t /* rrHandler */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */) override {
    bool _return = false;
    return _return;
  }
  void ResourceRequestHandler_GetResourceHandler( ::thrift_codegen::RObject& /* _return */, const int32_t /* rrHandler */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */) override {
    return;
  }
  void ResourceHandler_Dispose(const int32_t /* resourceHandler */) override {
    return;
  }
  void ResourceRequestHandler_OnResourceRedirect(std::string& /* _return */, const int32_t /* rrHandler */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const  ::thrift_codegen::RObject& /* response */, const std::string& /* new_url */) override {
    return;
  }
  bool ResourceRequestHandler_OnResourceResponse(const int32_t /* rrHandler */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const  ::thrift_codegen::RObject& /* response */) override {
    bool _return = false;
    return _return;
  }
  void ResourceRequestHandler_OnResourceLoadComplete(const int32_t /* rrHandler */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const  ::thrift_codegen::RObject& /* response */, const std::string& /* status */, const int64_t /* receivedContentLength */) override {
    return;
  }
  bool ResourceRequestHandler_OnProtocolExecution(const int32_t /* rrHandler */, const int32_t /* bid */, const  ::thrift_codegen::RObject& /* request */, const bool /* allowOsExecution */) override {
    bool _return = false;
    return _return;
  }
  bool MessageRouterHandler_onQuery(const  ::thrift_codegen::RObject& /* handler */, const int32_t /* bid */, const int64_t /* queryId */, const std::string& /* request */, const bool /* persistent */, const  ::thrift_codegen::RObject& /* queryCallback */) override {
    bool _return = false;
    return _return;
  }
  void MessageRouterHandler_onQueryCanceled(const  ::thrift_codegen::RObject& /* handler */, const int32_t /* bid */, const int64_t /* queryId */) override {
    return;
  }
};


class ClientHandlers_connect_args {
 public:

  ClientHandlers_connect_args(const ClientHandlers_connect_args&) noexcept;
  ClientHandlers_connect_args& operator=(const ClientHandlers_connect_args&) noexcept;
  ClientHandlers_connect_args() noexcept {
  }

  virtual ~ClientHandlers_connect_args() noexcept;

  bool operator == (const ClientHandlers_connect_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientHandlers_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_connect_pargs {
 public:


  virtual ~ClientHandlers_connect_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_connect_result__isset {
  _ClientHandlers_connect_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_connect_result__isset;

class ClientHandlers_connect_result {
 public:

  ClientHandlers_connect_result(const ClientHandlers_connect_result&) noexcept;
  ClientHandlers_connect_result& operator=(const ClientHandlers_connect_result&) noexcept;
  ClientHandlers_connect_result() noexcept
                                : success(0) {
  }

  virtual ~ClientHandlers_connect_result() noexcept;
  int32_t success;

  _ClientHandlers_connect_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const ClientHandlers_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_connect_presult__isset {
  _ClientHandlers_connect_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_connect_presult__isset;

class ClientHandlers_connect_presult {
 public:


  virtual ~ClientHandlers_connect_presult() noexcept;
  int32_t* success;

  _ClientHandlers_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_log_args__isset {
  _ClientHandlers_log_args__isset() : msg(false) {}
  bool msg :1;
} _ClientHandlers_log_args__isset;

class ClientHandlers_log_args {
 public:

  ClientHandlers_log_args(const ClientHandlers_log_args&);
  ClientHandlers_log_args& operator=(const ClientHandlers_log_args&);
  ClientHandlers_log_args() noexcept
                          : msg() {
  }

  virtual ~ClientHandlers_log_args() noexcept;
  std::string msg;

  _ClientHandlers_log_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const ClientHandlers_log_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_log_pargs {
 public:


  virtual ~ClientHandlers_log_pargs() noexcept;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_AppHandler_OnContextInitialized_args {
 public:

  ClientHandlers_AppHandler_OnContextInitialized_args(const ClientHandlers_AppHandler_OnContextInitialized_args&) noexcept;
  ClientHandlers_AppHandler_OnContextInitialized_args& operator=(const ClientHandlers_AppHandler_OnContextInitialized_args&) noexcept;
  ClientHandlers_AppHandler_OnContextInitialized_args() noexcept {
  }

  virtual ~ClientHandlers_AppHandler_OnContextInitialized_args() noexcept;

  bool operator == (const ClientHandlers_AppHandler_OnContextInitialized_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientHandlers_AppHandler_OnContextInitialized_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_AppHandler_OnContextInitialized_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_AppHandler_OnContextInitialized_pargs {
 public:


  virtual ~ClientHandlers_AppHandler_OnContextInitialized_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RenderHandler_GetViewRect_args__isset {
  _ClientHandlers_RenderHandler_GetViewRect_args__isset() : bid(false) {}
  bool bid :1;
} _ClientHandlers_RenderHandler_GetViewRect_args__isset;

class ClientHandlers_RenderHandler_GetViewRect_args {
 public:

  ClientHandlers_RenderHandler_GetViewRect_args(const ClientHandlers_RenderHandler_GetViewRect_args&) noexcept;
  ClientHandlers_RenderHandler_GetViewRect_args& operator=(const ClientHandlers_RenderHandler_GetViewRect_args&) noexcept;
  ClientHandlers_RenderHandler_GetViewRect_args() noexcept
                                                : bid(0) {
  }

  virtual ~ClientHandlers_RenderHandler_GetViewRect_args() noexcept;
  int32_t bid;

  _ClientHandlers_RenderHandler_GetViewRect_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const ClientHandlers_RenderHandler_GetViewRect_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_GetViewRect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_GetViewRect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RenderHandler_GetViewRect_pargs {
 public:


  virtual ~ClientHandlers_RenderHandler_GetViewRect_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RenderHandler_GetViewRect_result__isset {
  _ClientHandlers_RenderHandler_GetViewRect_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RenderHandler_GetViewRect_result__isset;

class ClientHandlers_RenderHandler_GetViewRect_result {
 public:

  ClientHandlers_RenderHandler_GetViewRect_result(const ClientHandlers_RenderHandler_GetViewRect_result&) noexcept;
  ClientHandlers_RenderHandler_GetViewRect_result& operator=(const ClientHandlers_RenderHandler_GetViewRect_result&) noexcept;
  ClientHandlers_RenderHandler_GetViewRect_result() noexcept {
  }

  virtual ~ClientHandlers_RenderHandler_GetViewRect_result() noexcept;
  Rect success;

  _ClientHandlers_RenderHandler_GetViewRect_result__isset __isset;

  void __set_success(const Rect& val);

  bool operator == (const ClientHandlers_RenderHandler_GetViewRect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_GetViewRect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_GetViewRect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RenderHandler_GetViewRect_presult__isset {
  _ClientHandlers_RenderHandler_GetViewRect_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RenderHandler_GetViewRect_presult__isset;

class ClientHandlers_RenderHandler_GetViewRect_presult {
 public:


  virtual ~ClientHandlers_RenderHandler_GetViewRect_presult() noexcept;
  Rect* success;

  _ClientHandlers_RenderHandler_GetViewRect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_RenderHandler_GetScreenInfo_args__isset {
  _ClientHandlers_RenderHandler_GetScreenInfo_args__isset() : bid(false) {}
  bool bid :1;
} _ClientHandlers_RenderHandler_GetScreenInfo_args__isset;

class ClientHandlers_RenderHandler_GetScreenInfo_args {
 public:

  ClientHandlers_RenderHandler_GetScreenInfo_args(const ClientHandlers_RenderHandler_GetScreenInfo_args&) noexcept;
  ClientHandlers_RenderHandler_GetScreenInfo_args& operator=(const ClientHandlers_RenderHandler_GetScreenInfo_args&) noexcept;
  ClientHandlers_RenderHandler_GetScreenInfo_args() noexcept
                                                  : bid(0) {
  }

  virtual ~ClientHandlers_RenderHandler_GetScreenInfo_args() noexcept;
  int32_t bid;

  _ClientHandlers_RenderHandler_GetScreenInfo_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const ClientHandlers_RenderHandler_GetScreenInfo_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_GetScreenInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_GetScreenInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RenderHandler_GetScreenInfo_pargs {
 public:


  virtual ~ClientHandlers_RenderHandler_GetScreenInfo_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RenderHandler_GetScreenInfo_result__isset {
  _ClientHandlers_RenderHandler_GetScreenInfo_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RenderHandler_GetScreenInfo_result__isset;

class ClientHandlers_RenderHandler_GetScreenInfo_result {
 public:

  ClientHandlers_RenderHandler_GetScreenInfo_result(const ClientHandlers_RenderHandler_GetScreenInfo_result&) noexcept;
  ClientHandlers_RenderHandler_GetScreenInfo_result& operator=(const ClientHandlers_RenderHandler_GetScreenInfo_result&) noexcept;
  ClientHandlers_RenderHandler_GetScreenInfo_result() noexcept {
  }

  virtual ~ClientHandlers_RenderHandler_GetScreenInfo_result() noexcept;
  ScreenInfo success;

  _ClientHandlers_RenderHandler_GetScreenInfo_result__isset __isset;

  void __set_success(const ScreenInfo& val);

  bool operator == (const ClientHandlers_RenderHandler_GetScreenInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_GetScreenInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_GetScreenInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RenderHandler_GetScreenInfo_presult__isset {
  _ClientHandlers_RenderHandler_GetScreenInfo_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RenderHandler_GetScreenInfo_presult__isset;

class ClientHandlers_RenderHandler_GetScreenInfo_presult {
 public:


  virtual ~ClientHandlers_RenderHandler_GetScreenInfo_presult() noexcept;
  ScreenInfo* success;

  _ClientHandlers_RenderHandler_GetScreenInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_RenderHandler_GetScreenPoint_args__isset {
  _ClientHandlers_RenderHandler_GetScreenPoint_args__isset() : bid(false), viewX(false), viewY(false) {}
  bool bid :1;
  bool viewX :1;
  bool viewY :1;
} _ClientHandlers_RenderHandler_GetScreenPoint_args__isset;

class ClientHandlers_RenderHandler_GetScreenPoint_args {
 public:

  ClientHandlers_RenderHandler_GetScreenPoint_args(const ClientHandlers_RenderHandler_GetScreenPoint_args&) noexcept;
  ClientHandlers_RenderHandler_GetScreenPoint_args& operator=(const ClientHandlers_RenderHandler_GetScreenPoint_args&) noexcept;
  ClientHandlers_RenderHandler_GetScreenPoint_args() noexcept
                                                   : bid(0),
                                                     viewX(0),
                                                     viewY(0) {
  }

  virtual ~ClientHandlers_RenderHandler_GetScreenPoint_args() noexcept;
  int32_t bid;
  int32_t viewX;
  int32_t viewY;

  _ClientHandlers_RenderHandler_GetScreenPoint_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_viewX(const int32_t val);

  void __set_viewY(const int32_t val);

  bool operator == (const ClientHandlers_RenderHandler_GetScreenPoint_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(viewX == rhs.viewX))
      return false;
    if (!(viewY == rhs.viewY))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_GetScreenPoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_GetScreenPoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RenderHandler_GetScreenPoint_pargs {
 public:


  virtual ~ClientHandlers_RenderHandler_GetScreenPoint_pargs() noexcept;
  const int32_t* bid;
  const int32_t* viewX;
  const int32_t* viewY;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RenderHandler_GetScreenPoint_result__isset {
  _ClientHandlers_RenderHandler_GetScreenPoint_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RenderHandler_GetScreenPoint_result__isset;

class ClientHandlers_RenderHandler_GetScreenPoint_result {
 public:

  ClientHandlers_RenderHandler_GetScreenPoint_result(const ClientHandlers_RenderHandler_GetScreenPoint_result&) noexcept;
  ClientHandlers_RenderHandler_GetScreenPoint_result& operator=(const ClientHandlers_RenderHandler_GetScreenPoint_result&) noexcept;
  ClientHandlers_RenderHandler_GetScreenPoint_result() noexcept {
  }

  virtual ~ClientHandlers_RenderHandler_GetScreenPoint_result() noexcept;
  Point success;

  _ClientHandlers_RenderHandler_GetScreenPoint_result__isset __isset;

  void __set_success(const Point& val);

  bool operator == (const ClientHandlers_RenderHandler_GetScreenPoint_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_GetScreenPoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_GetScreenPoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RenderHandler_GetScreenPoint_presult__isset {
  _ClientHandlers_RenderHandler_GetScreenPoint_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RenderHandler_GetScreenPoint_presult__isset;

class ClientHandlers_RenderHandler_GetScreenPoint_presult {
 public:


  virtual ~ClientHandlers_RenderHandler_GetScreenPoint_presult() noexcept;
  Point* success;

  _ClientHandlers_RenderHandler_GetScreenPoint_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_RenderHandler_OnPaint_args__isset {
  _ClientHandlers_RenderHandler_OnPaint_args__isset() : bid(false), popup(false), dirtyRectsCount(false), sharedMemName(false), sharedMemHandle(false), width(false), height(false) {}
  bool bid :1;
  bool popup :1;
  bool dirtyRectsCount :1;
  bool sharedMemName :1;
  bool sharedMemHandle :1;
  bool width :1;
  bool height :1;
} _ClientHandlers_RenderHandler_OnPaint_args__isset;

class ClientHandlers_RenderHandler_OnPaint_args {
 public:

  ClientHandlers_RenderHandler_OnPaint_args(const ClientHandlers_RenderHandler_OnPaint_args&);
  ClientHandlers_RenderHandler_OnPaint_args& operator=(const ClientHandlers_RenderHandler_OnPaint_args&);
  ClientHandlers_RenderHandler_OnPaint_args() noexcept
                                            : bid(0),
                                              popup(0),
                                              dirtyRectsCount(0),
                                              sharedMemName(),
                                              sharedMemHandle(0),
                                              width(0),
                                              height(0) {
  }

  virtual ~ClientHandlers_RenderHandler_OnPaint_args() noexcept;
  int32_t bid;
  bool popup;
  int32_t dirtyRectsCount;
  std::string sharedMemName;
  int64_t sharedMemHandle;
  int32_t width;
  int32_t height;

  _ClientHandlers_RenderHandler_OnPaint_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_popup(const bool val);

  void __set_dirtyRectsCount(const int32_t val);

  void __set_sharedMemName(const std::string& val);

  void __set_sharedMemHandle(const int64_t val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const ClientHandlers_RenderHandler_OnPaint_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(popup == rhs.popup))
      return false;
    if (!(dirtyRectsCount == rhs.dirtyRectsCount))
      return false;
    if (!(sharedMemName == rhs.sharedMemName))
      return false;
    if (!(sharedMemHandle == rhs.sharedMemHandle))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_OnPaint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_OnPaint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RenderHandler_OnPaint_pargs {
 public:


  virtual ~ClientHandlers_RenderHandler_OnPaint_pargs() noexcept;
  const int32_t* bid;
  const bool* popup;
  const int32_t* dirtyRectsCount;
  const std::string* sharedMemName;
  const int64_t* sharedMemHandle;
  const int32_t* width;
  const int32_t* height;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RenderHandler_OnPaint_result {
 public:

  ClientHandlers_RenderHandler_OnPaint_result(const ClientHandlers_RenderHandler_OnPaint_result&) noexcept;
  ClientHandlers_RenderHandler_OnPaint_result& operator=(const ClientHandlers_RenderHandler_OnPaint_result&) noexcept;
  ClientHandlers_RenderHandler_OnPaint_result() noexcept {
  }

  virtual ~ClientHandlers_RenderHandler_OnPaint_result() noexcept;

  bool operator == (const ClientHandlers_RenderHandler_OnPaint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientHandlers_RenderHandler_OnPaint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RenderHandler_OnPaint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RenderHandler_OnPaint_presult {
 public:


  virtual ~ClientHandlers_RenderHandler_OnPaint_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_LifeSpanHandler_OnBeforePopup_args__isset {
  _ClientHandlers_LifeSpanHandler_OnBeforePopup_args__isset() : bid(false), url(false), frameName(false), gesture(false) {}
  bool bid :1;
  bool url :1;
  bool frameName :1;
  bool gesture :1;
} _ClientHandlers_LifeSpanHandler_OnBeforePopup_args__isset;

class ClientHandlers_LifeSpanHandler_OnBeforePopup_args {
 public:

  ClientHandlers_LifeSpanHandler_OnBeforePopup_args(const ClientHandlers_LifeSpanHandler_OnBeforePopup_args&);
  ClientHandlers_LifeSpanHandler_OnBeforePopup_args& operator=(const ClientHandlers_LifeSpanHandler_OnBeforePopup_args&);
  ClientHandlers_LifeSpanHandler_OnBeforePopup_args() noexcept
                                                    : bid(0),
                                                      url(),
                                                      frameName(),
                                                      gesture(0) {
  }

  virtual ~ClientHandlers_LifeSpanHandler_OnBeforePopup_args() noexcept;
  int32_t bid;
  std::string url;
  std::string frameName;
  bool gesture;

  _ClientHandlers_LifeSpanHandler_OnBeforePopup_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_url(const std::string& val);

  void __set_frameName(const std::string& val);

  void __set_gesture(const bool val);

  bool operator == (const ClientHandlers_LifeSpanHandler_OnBeforePopup_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(frameName == rhs.frameName))
      return false;
    if (!(gesture == rhs.gesture))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LifeSpanHandler_OnBeforePopup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LifeSpanHandler_OnBeforePopup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LifeSpanHandler_OnBeforePopup_pargs {
 public:


  virtual ~ClientHandlers_LifeSpanHandler_OnBeforePopup_pargs() noexcept;
  const int32_t* bid;
  const std::string* url;
  const std::string* frameName;
  const bool* gesture;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LifeSpanHandler_OnBeforePopup_result__isset {
  _ClientHandlers_LifeSpanHandler_OnBeforePopup_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_LifeSpanHandler_OnBeforePopup_result__isset;

class ClientHandlers_LifeSpanHandler_OnBeforePopup_result {
 public:

  ClientHandlers_LifeSpanHandler_OnBeforePopup_result(const ClientHandlers_LifeSpanHandler_OnBeforePopup_result&) noexcept;
  ClientHandlers_LifeSpanHandler_OnBeforePopup_result& operator=(const ClientHandlers_LifeSpanHandler_OnBeforePopup_result&) noexcept;
  ClientHandlers_LifeSpanHandler_OnBeforePopup_result() noexcept
                                                      : success(0) {
  }

  virtual ~ClientHandlers_LifeSpanHandler_OnBeforePopup_result() noexcept;
  bool success;

  _ClientHandlers_LifeSpanHandler_OnBeforePopup_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_LifeSpanHandler_OnBeforePopup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LifeSpanHandler_OnBeforePopup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LifeSpanHandler_OnBeforePopup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LifeSpanHandler_OnBeforePopup_presult__isset {
  _ClientHandlers_LifeSpanHandler_OnBeforePopup_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_LifeSpanHandler_OnBeforePopup_presult__isset;

class ClientHandlers_LifeSpanHandler_OnBeforePopup_presult {
 public:


  virtual ~ClientHandlers_LifeSpanHandler_OnBeforePopup_presult() noexcept;
  bool* success;

  _ClientHandlers_LifeSpanHandler_OnBeforePopup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_LifeSpanHandler_OnAfterCreated_args__isset {
  _ClientHandlers_LifeSpanHandler_OnAfterCreated_args__isset() : bid(false) {}
  bool bid :1;
} _ClientHandlers_LifeSpanHandler_OnAfterCreated_args__isset;

class ClientHandlers_LifeSpanHandler_OnAfterCreated_args {
 public:

  ClientHandlers_LifeSpanHandler_OnAfterCreated_args(const ClientHandlers_LifeSpanHandler_OnAfterCreated_args&) noexcept;
  ClientHandlers_LifeSpanHandler_OnAfterCreated_args& operator=(const ClientHandlers_LifeSpanHandler_OnAfterCreated_args&) noexcept;
  ClientHandlers_LifeSpanHandler_OnAfterCreated_args() noexcept
                                                     : bid(0) {
  }

  virtual ~ClientHandlers_LifeSpanHandler_OnAfterCreated_args() noexcept;
  int32_t bid;

  _ClientHandlers_LifeSpanHandler_OnAfterCreated_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const ClientHandlers_LifeSpanHandler_OnAfterCreated_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LifeSpanHandler_OnAfterCreated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LifeSpanHandler_OnAfterCreated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LifeSpanHandler_OnAfterCreated_pargs {
 public:


  virtual ~ClientHandlers_LifeSpanHandler_OnAfterCreated_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LifeSpanHandler_DoClose_args__isset {
  _ClientHandlers_LifeSpanHandler_DoClose_args__isset() : bid(false) {}
  bool bid :1;
} _ClientHandlers_LifeSpanHandler_DoClose_args__isset;

class ClientHandlers_LifeSpanHandler_DoClose_args {
 public:

  ClientHandlers_LifeSpanHandler_DoClose_args(const ClientHandlers_LifeSpanHandler_DoClose_args&) noexcept;
  ClientHandlers_LifeSpanHandler_DoClose_args& operator=(const ClientHandlers_LifeSpanHandler_DoClose_args&) noexcept;
  ClientHandlers_LifeSpanHandler_DoClose_args() noexcept
                                              : bid(0) {
  }

  virtual ~ClientHandlers_LifeSpanHandler_DoClose_args() noexcept;
  int32_t bid;

  _ClientHandlers_LifeSpanHandler_DoClose_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const ClientHandlers_LifeSpanHandler_DoClose_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LifeSpanHandler_DoClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LifeSpanHandler_DoClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LifeSpanHandler_DoClose_pargs {
 public:


  virtual ~ClientHandlers_LifeSpanHandler_DoClose_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LifeSpanHandler_DoClose_result__isset {
  _ClientHandlers_LifeSpanHandler_DoClose_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_LifeSpanHandler_DoClose_result__isset;

class ClientHandlers_LifeSpanHandler_DoClose_result {
 public:

  ClientHandlers_LifeSpanHandler_DoClose_result(const ClientHandlers_LifeSpanHandler_DoClose_result&) noexcept;
  ClientHandlers_LifeSpanHandler_DoClose_result& operator=(const ClientHandlers_LifeSpanHandler_DoClose_result&) noexcept;
  ClientHandlers_LifeSpanHandler_DoClose_result() noexcept
                                                : success(0) {
  }

  virtual ~ClientHandlers_LifeSpanHandler_DoClose_result() noexcept;
  bool success;

  _ClientHandlers_LifeSpanHandler_DoClose_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_LifeSpanHandler_DoClose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LifeSpanHandler_DoClose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LifeSpanHandler_DoClose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LifeSpanHandler_DoClose_presult__isset {
  _ClientHandlers_LifeSpanHandler_DoClose_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_LifeSpanHandler_DoClose_presult__isset;

class ClientHandlers_LifeSpanHandler_DoClose_presult {
 public:


  virtual ~ClientHandlers_LifeSpanHandler_DoClose_presult() noexcept;
  bool* success;

  _ClientHandlers_LifeSpanHandler_DoClose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_LifeSpanHandler_OnBeforeClose_args__isset {
  _ClientHandlers_LifeSpanHandler_OnBeforeClose_args__isset() : bid(false) {}
  bool bid :1;
} _ClientHandlers_LifeSpanHandler_OnBeforeClose_args__isset;

class ClientHandlers_LifeSpanHandler_OnBeforeClose_args {
 public:

  ClientHandlers_LifeSpanHandler_OnBeforeClose_args(const ClientHandlers_LifeSpanHandler_OnBeforeClose_args&) noexcept;
  ClientHandlers_LifeSpanHandler_OnBeforeClose_args& operator=(const ClientHandlers_LifeSpanHandler_OnBeforeClose_args&) noexcept;
  ClientHandlers_LifeSpanHandler_OnBeforeClose_args() noexcept
                                                    : bid(0) {
  }

  virtual ~ClientHandlers_LifeSpanHandler_OnBeforeClose_args() noexcept;
  int32_t bid;

  _ClientHandlers_LifeSpanHandler_OnBeforeClose_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const ClientHandlers_LifeSpanHandler_OnBeforeClose_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LifeSpanHandler_OnBeforeClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LifeSpanHandler_OnBeforeClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LifeSpanHandler_OnBeforeClose_pargs {
 public:


  virtual ~ClientHandlers_LifeSpanHandler_OnBeforeClose_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LoadHandler_OnLoadingStateChange_args__isset {
  _ClientHandlers_LoadHandler_OnLoadingStateChange_args__isset() : bid(false), isLoading(false), canGoBack(false), canGoForward(false) {}
  bool bid :1;
  bool isLoading :1;
  bool canGoBack :1;
  bool canGoForward :1;
} _ClientHandlers_LoadHandler_OnLoadingStateChange_args__isset;

class ClientHandlers_LoadHandler_OnLoadingStateChange_args {
 public:

  ClientHandlers_LoadHandler_OnLoadingStateChange_args(const ClientHandlers_LoadHandler_OnLoadingStateChange_args&) noexcept;
  ClientHandlers_LoadHandler_OnLoadingStateChange_args& operator=(const ClientHandlers_LoadHandler_OnLoadingStateChange_args&) noexcept;
  ClientHandlers_LoadHandler_OnLoadingStateChange_args() noexcept
                                                       : bid(0),
                                                         isLoading(0),
                                                         canGoBack(0),
                                                         canGoForward(0) {
  }

  virtual ~ClientHandlers_LoadHandler_OnLoadingStateChange_args() noexcept;
  int32_t bid;
  bool isLoading;
  bool canGoBack;
  bool canGoForward;

  _ClientHandlers_LoadHandler_OnLoadingStateChange_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_isLoading(const bool val);

  void __set_canGoBack(const bool val);

  void __set_canGoForward(const bool val);

  bool operator == (const ClientHandlers_LoadHandler_OnLoadingStateChange_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(isLoading == rhs.isLoading))
      return false;
    if (!(canGoBack == rhs.canGoBack))
      return false;
    if (!(canGoForward == rhs.canGoForward))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LoadHandler_OnLoadingStateChange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LoadHandler_OnLoadingStateChange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LoadHandler_OnLoadingStateChange_pargs {
 public:


  virtual ~ClientHandlers_LoadHandler_OnLoadingStateChange_pargs() noexcept;
  const int32_t* bid;
  const bool* isLoading;
  const bool* canGoBack;
  const bool* canGoForward;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LoadHandler_OnLoadStart_args__isset {
  _ClientHandlers_LoadHandler_OnLoadStart_args__isset() : bid(false), transition_type(false) {}
  bool bid :1;
  bool transition_type :1;
} _ClientHandlers_LoadHandler_OnLoadStart_args__isset;

class ClientHandlers_LoadHandler_OnLoadStart_args {
 public:

  ClientHandlers_LoadHandler_OnLoadStart_args(const ClientHandlers_LoadHandler_OnLoadStart_args&) noexcept;
  ClientHandlers_LoadHandler_OnLoadStart_args& operator=(const ClientHandlers_LoadHandler_OnLoadStart_args&) noexcept;
  ClientHandlers_LoadHandler_OnLoadStart_args() noexcept
                                              : bid(0),
                                                transition_type(0) {
  }

  virtual ~ClientHandlers_LoadHandler_OnLoadStart_args() noexcept;
  int32_t bid;
  int32_t transition_type;

  _ClientHandlers_LoadHandler_OnLoadStart_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_transition_type(const int32_t val);

  bool operator == (const ClientHandlers_LoadHandler_OnLoadStart_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(transition_type == rhs.transition_type))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LoadHandler_OnLoadStart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LoadHandler_OnLoadStart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LoadHandler_OnLoadStart_pargs {
 public:


  virtual ~ClientHandlers_LoadHandler_OnLoadStart_pargs() noexcept;
  const int32_t* bid;
  const int32_t* transition_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LoadHandler_OnLoadEnd_args__isset {
  _ClientHandlers_LoadHandler_OnLoadEnd_args__isset() : bid(false), httpStatusCode(false) {}
  bool bid :1;
  bool httpStatusCode :1;
} _ClientHandlers_LoadHandler_OnLoadEnd_args__isset;

class ClientHandlers_LoadHandler_OnLoadEnd_args {
 public:

  ClientHandlers_LoadHandler_OnLoadEnd_args(const ClientHandlers_LoadHandler_OnLoadEnd_args&) noexcept;
  ClientHandlers_LoadHandler_OnLoadEnd_args& operator=(const ClientHandlers_LoadHandler_OnLoadEnd_args&) noexcept;
  ClientHandlers_LoadHandler_OnLoadEnd_args() noexcept
                                            : bid(0),
                                              httpStatusCode(0) {
  }

  virtual ~ClientHandlers_LoadHandler_OnLoadEnd_args() noexcept;
  int32_t bid;
  int32_t httpStatusCode;

  _ClientHandlers_LoadHandler_OnLoadEnd_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_httpStatusCode(const int32_t val);

  bool operator == (const ClientHandlers_LoadHandler_OnLoadEnd_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(httpStatusCode == rhs.httpStatusCode))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LoadHandler_OnLoadEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LoadHandler_OnLoadEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LoadHandler_OnLoadEnd_pargs {
 public:


  virtual ~ClientHandlers_LoadHandler_OnLoadEnd_pargs() noexcept;
  const int32_t* bid;
  const int32_t* httpStatusCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_LoadHandler_OnLoadError_args__isset {
  _ClientHandlers_LoadHandler_OnLoadError_args__isset() : bid(false), errorCode(false), errorText(false), failedUrl(false) {}
  bool bid :1;
  bool errorCode :1;
  bool errorText :1;
  bool failedUrl :1;
} _ClientHandlers_LoadHandler_OnLoadError_args__isset;

class ClientHandlers_LoadHandler_OnLoadError_args {
 public:

  ClientHandlers_LoadHandler_OnLoadError_args(const ClientHandlers_LoadHandler_OnLoadError_args&);
  ClientHandlers_LoadHandler_OnLoadError_args& operator=(const ClientHandlers_LoadHandler_OnLoadError_args&);
  ClientHandlers_LoadHandler_OnLoadError_args() noexcept
                                              : bid(0),
                                                errorCode(0),
                                                errorText(),
                                                failedUrl() {
  }

  virtual ~ClientHandlers_LoadHandler_OnLoadError_args() noexcept;
  int32_t bid;
  int32_t errorCode;
  std::string errorText;
  std::string failedUrl;

  _ClientHandlers_LoadHandler_OnLoadError_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_errorCode(const int32_t val);

  void __set_errorText(const std::string& val);

  void __set_failedUrl(const std::string& val);

  bool operator == (const ClientHandlers_LoadHandler_OnLoadError_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorText == rhs.errorText))
      return false;
    if (!(failedUrl == rhs.failedUrl))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_LoadHandler_OnLoadError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_LoadHandler_OnLoadError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_LoadHandler_OnLoadError_pargs {
 public:


  virtual ~ClientHandlers_LoadHandler_OnLoadError_pargs() noexcept;
  const int32_t* bid;
  const int32_t* errorCode;
  const std::string* errorText;
  const std::string* failedUrl;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnAddressChange_args__isset {
  _ClientHandlers_DisplayHandler_OnAddressChange_args__isset() : bid(false), url(false) {}
  bool bid :1;
  bool url :1;
} _ClientHandlers_DisplayHandler_OnAddressChange_args__isset;

class ClientHandlers_DisplayHandler_OnAddressChange_args {
 public:

  ClientHandlers_DisplayHandler_OnAddressChange_args(const ClientHandlers_DisplayHandler_OnAddressChange_args&);
  ClientHandlers_DisplayHandler_OnAddressChange_args& operator=(const ClientHandlers_DisplayHandler_OnAddressChange_args&);
  ClientHandlers_DisplayHandler_OnAddressChange_args() noexcept
                                                     : bid(0),
                                                       url() {
  }

  virtual ~ClientHandlers_DisplayHandler_OnAddressChange_args() noexcept;
  int32_t bid;
  std::string url;

  _ClientHandlers_DisplayHandler_OnAddressChange_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_url(const std::string& val);

  bool operator == (const ClientHandlers_DisplayHandler_OnAddressChange_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_DisplayHandler_OnAddressChange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_DisplayHandler_OnAddressChange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_DisplayHandler_OnAddressChange_pargs {
 public:


  virtual ~ClientHandlers_DisplayHandler_OnAddressChange_pargs() noexcept;
  const int32_t* bid;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnTitleChange_args__isset {
  _ClientHandlers_DisplayHandler_OnTitleChange_args__isset() : bid(false), title(false) {}
  bool bid :1;
  bool title :1;
} _ClientHandlers_DisplayHandler_OnTitleChange_args__isset;

class ClientHandlers_DisplayHandler_OnTitleChange_args {
 public:

  ClientHandlers_DisplayHandler_OnTitleChange_args(const ClientHandlers_DisplayHandler_OnTitleChange_args&);
  ClientHandlers_DisplayHandler_OnTitleChange_args& operator=(const ClientHandlers_DisplayHandler_OnTitleChange_args&);
  ClientHandlers_DisplayHandler_OnTitleChange_args() noexcept
                                                   : bid(0),
                                                     title() {
  }

  virtual ~ClientHandlers_DisplayHandler_OnTitleChange_args() noexcept;
  int32_t bid;
  std::string title;

  _ClientHandlers_DisplayHandler_OnTitleChange_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_title(const std::string& val);

  bool operator == (const ClientHandlers_DisplayHandler_OnTitleChange_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(title == rhs.title))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_DisplayHandler_OnTitleChange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_DisplayHandler_OnTitleChange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_DisplayHandler_OnTitleChange_pargs {
 public:


  virtual ~ClientHandlers_DisplayHandler_OnTitleChange_pargs() noexcept;
  const int32_t* bid;
  const std::string* title;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnTooltip_args__isset {
  _ClientHandlers_DisplayHandler_OnTooltip_args__isset() : bid(false), text(false) {}
  bool bid :1;
  bool text :1;
} _ClientHandlers_DisplayHandler_OnTooltip_args__isset;

class ClientHandlers_DisplayHandler_OnTooltip_args {
 public:

  ClientHandlers_DisplayHandler_OnTooltip_args(const ClientHandlers_DisplayHandler_OnTooltip_args&);
  ClientHandlers_DisplayHandler_OnTooltip_args& operator=(const ClientHandlers_DisplayHandler_OnTooltip_args&);
  ClientHandlers_DisplayHandler_OnTooltip_args() noexcept
                                               : bid(0),
                                                 text() {
  }

  virtual ~ClientHandlers_DisplayHandler_OnTooltip_args() noexcept;
  int32_t bid;
  std::string text;

  _ClientHandlers_DisplayHandler_OnTooltip_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_text(const std::string& val);

  bool operator == (const ClientHandlers_DisplayHandler_OnTooltip_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_DisplayHandler_OnTooltip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_DisplayHandler_OnTooltip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_DisplayHandler_OnTooltip_pargs {
 public:


  virtual ~ClientHandlers_DisplayHandler_OnTooltip_pargs() noexcept;
  const int32_t* bid;
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnTooltip_result__isset {
  _ClientHandlers_DisplayHandler_OnTooltip_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_DisplayHandler_OnTooltip_result__isset;

class ClientHandlers_DisplayHandler_OnTooltip_result {
 public:

  ClientHandlers_DisplayHandler_OnTooltip_result(const ClientHandlers_DisplayHandler_OnTooltip_result&) noexcept;
  ClientHandlers_DisplayHandler_OnTooltip_result& operator=(const ClientHandlers_DisplayHandler_OnTooltip_result&) noexcept;
  ClientHandlers_DisplayHandler_OnTooltip_result() noexcept
                                                 : success(0) {
  }

  virtual ~ClientHandlers_DisplayHandler_OnTooltip_result() noexcept;
  bool success;

  _ClientHandlers_DisplayHandler_OnTooltip_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_DisplayHandler_OnTooltip_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_DisplayHandler_OnTooltip_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_DisplayHandler_OnTooltip_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnTooltip_presult__isset {
  _ClientHandlers_DisplayHandler_OnTooltip_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_DisplayHandler_OnTooltip_presult__isset;

class ClientHandlers_DisplayHandler_OnTooltip_presult {
 public:


  virtual ~ClientHandlers_DisplayHandler_OnTooltip_presult() noexcept;
  bool* success;

  _ClientHandlers_DisplayHandler_OnTooltip_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_DisplayHandler_OnStatusMessage_args__isset {
  _ClientHandlers_DisplayHandler_OnStatusMessage_args__isset() : bid(false), value(false) {}
  bool bid :1;
  bool value :1;
} _ClientHandlers_DisplayHandler_OnStatusMessage_args__isset;

class ClientHandlers_DisplayHandler_OnStatusMessage_args {
 public:

  ClientHandlers_DisplayHandler_OnStatusMessage_args(const ClientHandlers_DisplayHandler_OnStatusMessage_args&);
  ClientHandlers_DisplayHandler_OnStatusMessage_args& operator=(const ClientHandlers_DisplayHandler_OnStatusMessage_args&);
  ClientHandlers_DisplayHandler_OnStatusMessage_args() noexcept
                                                     : bid(0),
                                                       value() {
  }

  virtual ~ClientHandlers_DisplayHandler_OnStatusMessage_args() noexcept;
  int32_t bid;
  std::string value;

  _ClientHandlers_DisplayHandler_OnStatusMessage_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_value(const std::string& val);

  bool operator == (const ClientHandlers_DisplayHandler_OnStatusMessage_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_DisplayHandler_OnStatusMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_DisplayHandler_OnStatusMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_DisplayHandler_OnStatusMessage_pargs {
 public:


  virtual ~ClientHandlers_DisplayHandler_OnStatusMessage_pargs() noexcept;
  const int32_t* bid;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnConsoleMessage_args__isset {
  _ClientHandlers_DisplayHandler_OnConsoleMessage_args__isset() : bid(false), level(false), message(false), source(false), line(false) {}
  bool bid :1;
  bool level :1;
  bool message :1;
  bool source :1;
  bool line :1;
} _ClientHandlers_DisplayHandler_OnConsoleMessage_args__isset;

class ClientHandlers_DisplayHandler_OnConsoleMessage_args {
 public:

  ClientHandlers_DisplayHandler_OnConsoleMessage_args(const ClientHandlers_DisplayHandler_OnConsoleMessage_args&);
  ClientHandlers_DisplayHandler_OnConsoleMessage_args& operator=(const ClientHandlers_DisplayHandler_OnConsoleMessage_args&);
  ClientHandlers_DisplayHandler_OnConsoleMessage_args() noexcept
                                                      : bid(0),
                                                        level(0),
                                                        message(),
                                                        source(),
                                                        line(0) {
  }

  virtual ~ClientHandlers_DisplayHandler_OnConsoleMessage_args() noexcept;
  int32_t bid;
  int32_t level;
  std::string message;
  std::string source;
  int32_t line;

  _ClientHandlers_DisplayHandler_OnConsoleMessage_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_level(const int32_t val);

  void __set_message(const std::string& val);

  void __set_source(const std::string& val);

  void __set_line(const int32_t val);

  bool operator == (const ClientHandlers_DisplayHandler_OnConsoleMessage_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(message == rhs.message))
      return false;
    if (!(source == rhs.source))
      return false;
    if (!(line == rhs.line))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_DisplayHandler_OnConsoleMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_DisplayHandler_OnConsoleMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_DisplayHandler_OnConsoleMessage_pargs {
 public:


  virtual ~ClientHandlers_DisplayHandler_OnConsoleMessage_pargs() noexcept;
  const int32_t* bid;
  const int32_t* level;
  const std::string* message;
  const std::string* source;
  const int32_t* line;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnConsoleMessage_result__isset {
  _ClientHandlers_DisplayHandler_OnConsoleMessage_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_DisplayHandler_OnConsoleMessage_result__isset;

class ClientHandlers_DisplayHandler_OnConsoleMessage_result {
 public:

  ClientHandlers_DisplayHandler_OnConsoleMessage_result(const ClientHandlers_DisplayHandler_OnConsoleMessage_result&) noexcept;
  ClientHandlers_DisplayHandler_OnConsoleMessage_result& operator=(const ClientHandlers_DisplayHandler_OnConsoleMessage_result&) noexcept;
  ClientHandlers_DisplayHandler_OnConsoleMessage_result() noexcept
                                                        : success(0) {
  }

  virtual ~ClientHandlers_DisplayHandler_OnConsoleMessage_result() noexcept;
  bool success;

  _ClientHandlers_DisplayHandler_OnConsoleMessage_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_DisplayHandler_OnConsoleMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_DisplayHandler_OnConsoleMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_DisplayHandler_OnConsoleMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_DisplayHandler_OnConsoleMessage_presult__isset {
  _ClientHandlers_DisplayHandler_OnConsoleMessage_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_DisplayHandler_OnConsoleMessage_presult__isset;

class ClientHandlers_DisplayHandler_OnConsoleMessage_presult {
 public:


  virtual ~ClientHandlers_DisplayHandler_OnConsoleMessage_presult() noexcept;
  bool* success;

  _ClientHandlers_DisplayHandler_OnConsoleMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_KeyboardHandler_OnPreKeyEvent_args__isset {
  _ClientHandlers_KeyboardHandler_OnPreKeyEvent_args__isset() : bid(false), event(false) {}
  bool bid :1;
  bool event :1;
} _ClientHandlers_KeyboardHandler_OnPreKeyEvent_args__isset;

class ClientHandlers_KeyboardHandler_OnPreKeyEvent_args {
 public:

  ClientHandlers_KeyboardHandler_OnPreKeyEvent_args(const ClientHandlers_KeyboardHandler_OnPreKeyEvent_args&);
  ClientHandlers_KeyboardHandler_OnPreKeyEvent_args& operator=(const ClientHandlers_KeyboardHandler_OnPreKeyEvent_args&);
  ClientHandlers_KeyboardHandler_OnPreKeyEvent_args() noexcept
                                                    : bid(0) {
  }

  virtual ~ClientHandlers_KeyboardHandler_OnPreKeyEvent_args() noexcept;
  int32_t bid;
   ::thrift_codegen::KeyEvent event;

  _ClientHandlers_KeyboardHandler_OnPreKeyEvent_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_event(const  ::thrift_codegen::KeyEvent& val);

  bool operator == (const ClientHandlers_KeyboardHandler_OnPreKeyEvent_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(event == rhs.event))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_KeyboardHandler_OnPreKeyEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_KeyboardHandler_OnPreKeyEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_KeyboardHandler_OnPreKeyEvent_pargs {
 public:


  virtual ~ClientHandlers_KeyboardHandler_OnPreKeyEvent_pargs() noexcept;
  const int32_t* bid;
  const  ::thrift_codegen::KeyEvent* event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_KeyboardHandler_OnPreKeyEvent_result__isset {
  _ClientHandlers_KeyboardHandler_OnPreKeyEvent_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_KeyboardHandler_OnPreKeyEvent_result__isset;

class ClientHandlers_KeyboardHandler_OnPreKeyEvent_result {
 public:

  ClientHandlers_KeyboardHandler_OnPreKeyEvent_result(const ClientHandlers_KeyboardHandler_OnPreKeyEvent_result&) noexcept;
  ClientHandlers_KeyboardHandler_OnPreKeyEvent_result& operator=(const ClientHandlers_KeyboardHandler_OnPreKeyEvent_result&) noexcept;
  ClientHandlers_KeyboardHandler_OnPreKeyEvent_result() noexcept
                                                      : success(0) {
  }

  virtual ~ClientHandlers_KeyboardHandler_OnPreKeyEvent_result() noexcept;
  bool success;

  _ClientHandlers_KeyboardHandler_OnPreKeyEvent_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_KeyboardHandler_OnPreKeyEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_KeyboardHandler_OnPreKeyEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_KeyboardHandler_OnPreKeyEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_KeyboardHandler_OnPreKeyEvent_presult__isset {
  _ClientHandlers_KeyboardHandler_OnPreKeyEvent_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_KeyboardHandler_OnPreKeyEvent_presult__isset;

class ClientHandlers_KeyboardHandler_OnPreKeyEvent_presult {
 public:


  virtual ~ClientHandlers_KeyboardHandler_OnPreKeyEvent_presult() noexcept;
  bool* success;

  _ClientHandlers_KeyboardHandler_OnPreKeyEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_KeyboardHandler_OnKeyEvent_args__isset {
  _ClientHandlers_KeyboardHandler_OnKeyEvent_args__isset() : bid(false), event(false) {}
  bool bid :1;
  bool event :1;
} _ClientHandlers_KeyboardHandler_OnKeyEvent_args__isset;

class ClientHandlers_KeyboardHandler_OnKeyEvent_args {
 public:

  ClientHandlers_KeyboardHandler_OnKeyEvent_args(const ClientHandlers_KeyboardHandler_OnKeyEvent_args&);
  ClientHandlers_KeyboardHandler_OnKeyEvent_args& operator=(const ClientHandlers_KeyboardHandler_OnKeyEvent_args&);
  ClientHandlers_KeyboardHandler_OnKeyEvent_args() noexcept
                                                 : bid(0) {
  }

  virtual ~ClientHandlers_KeyboardHandler_OnKeyEvent_args() noexcept;
  int32_t bid;
   ::thrift_codegen::KeyEvent event;

  _ClientHandlers_KeyboardHandler_OnKeyEvent_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_event(const  ::thrift_codegen::KeyEvent& val);

  bool operator == (const ClientHandlers_KeyboardHandler_OnKeyEvent_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(event == rhs.event))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_KeyboardHandler_OnKeyEvent_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_KeyboardHandler_OnKeyEvent_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_KeyboardHandler_OnKeyEvent_pargs {
 public:


  virtual ~ClientHandlers_KeyboardHandler_OnKeyEvent_pargs() noexcept;
  const int32_t* bid;
  const  ::thrift_codegen::KeyEvent* event;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_KeyboardHandler_OnKeyEvent_result__isset {
  _ClientHandlers_KeyboardHandler_OnKeyEvent_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_KeyboardHandler_OnKeyEvent_result__isset;

class ClientHandlers_KeyboardHandler_OnKeyEvent_result {
 public:

  ClientHandlers_KeyboardHandler_OnKeyEvent_result(const ClientHandlers_KeyboardHandler_OnKeyEvent_result&) noexcept;
  ClientHandlers_KeyboardHandler_OnKeyEvent_result& operator=(const ClientHandlers_KeyboardHandler_OnKeyEvent_result&) noexcept;
  ClientHandlers_KeyboardHandler_OnKeyEvent_result() noexcept
                                                   : success(0) {
  }

  virtual ~ClientHandlers_KeyboardHandler_OnKeyEvent_result() noexcept;
  bool success;

  _ClientHandlers_KeyboardHandler_OnKeyEvent_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_KeyboardHandler_OnKeyEvent_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_KeyboardHandler_OnKeyEvent_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_KeyboardHandler_OnKeyEvent_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_KeyboardHandler_OnKeyEvent_presult__isset {
  _ClientHandlers_KeyboardHandler_OnKeyEvent_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_KeyboardHandler_OnKeyEvent_presult__isset;

class ClientHandlers_KeyboardHandler_OnKeyEvent_presult {
 public:


  virtual ~ClientHandlers_KeyboardHandler_OnKeyEvent_presult() noexcept;
  bool* success;

  _ClientHandlers_KeyboardHandler_OnKeyEvent_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_FocusHandler_OnTakeFocus_args__isset {
  _ClientHandlers_FocusHandler_OnTakeFocus_args__isset() : bid(false), next(false) {}
  bool bid :1;
  bool next :1;
} _ClientHandlers_FocusHandler_OnTakeFocus_args__isset;

class ClientHandlers_FocusHandler_OnTakeFocus_args {
 public:

  ClientHandlers_FocusHandler_OnTakeFocus_args(const ClientHandlers_FocusHandler_OnTakeFocus_args&) noexcept;
  ClientHandlers_FocusHandler_OnTakeFocus_args& operator=(const ClientHandlers_FocusHandler_OnTakeFocus_args&) noexcept;
  ClientHandlers_FocusHandler_OnTakeFocus_args() noexcept
                                               : bid(0),
                                                 next(0) {
  }

  virtual ~ClientHandlers_FocusHandler_OnTakeFocus_args() noexcept;
  int32_t bid;
  bool next;

  _ClientHandlers_FocusHandler_OnTakeFocus_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_next(const bool val);

  bool operator == (const ClientHandlers_FocusHandler_OnTakeFocus_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(next == rhs.next))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_FocusHandler_OnTakeFocus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_FocusHandler_OnTakeFocus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_FocusHandler_OnTakeFocus_pargs {
 public:


  virtual ~ClientHandlers_FocusHandler_OnTakeFocus_pargs() noexcept;
  const int32_t* bid;
  const bool* next;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_FocusHandler_OnSetFocus_args__isset {
  _ClientHandlers_FocusHandler_OnSetFocus_args__isset() : bid(false), source(false) {}
  bool bid :1;
  bool source :1;
} _ClientHandlers_FocusHandler_OnSetFocus_args__isset;

class ClientHandlers_FocusHandler_OnSetFocus_args {
 public:

  ClientHandlers_FocusHandler_OnSetFocus_args(const ClientHandlers_FocusHandler_OnSetFocus_args&);
  ClientHandlers_FocusHandler_OnSetFocus_args& operator=(const ClientHandlers_FocusHandler_OnSetFocus_args&);
  ClientHandlers_FocusHandler_OnSetFocus_args() noexcept
                                              : bid(0),
                                                source() {
  }

  virtual ~ClientHandlers_FocusHandler_OnSetFocus_args() noexcept;
  int32_t bid;
  std::string source;

  _ClientHandlers_FocusHandler_OnSetFocus_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_source(const std::string& val);

  bool operator == (const ClientHandlers_FocusHandler_OnSetFocus_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(source == rhs.source))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_FocusHandler_OnSetFocus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_FocusHandler_OnSetFocus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_FocusHandler_OnSetFocus_pargs {
 public:


  virtual ~ClientHandlers_FocusHandler_OnSetFocus_pargs() noexcept;
  const int32_t* bid;
  const std::string* source;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_FocusHandler_OnSetFocus_result__isset {
  _ClientHandlers_FocusHandler_OnSetFocus_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_FocusHandler_OnSetFocus_result__isset;

class ClientHandlers_FocusHandler_OnSetFocus_result {
 public:

  ClientHandlers_FocusHandler_OnSetFocus_result(const ClientHandlers_FocusHandler_OnSetFocus_result&) noexcept;
  ClientHandlers_FocusHandler_OnSetFocus_result& operator=(const ClientHandlers_FocusHandler_OnSetFocus_result&) noexcept;
  ClientHandlers_FocusHandler_OnSetFocus_result() noexcept
                                                : success(0) {
  }

  virtual ~ClientHandlers_FocusHandler_OnSetFocus_result() noexcept;
  bool success;

  _ClientHandlers_FocusHandler_OnSetFocus_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_FocusHandler_OnSetFocus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_FocusHandler_OnSetFocus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_FocusHandler_OnSetFocus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_FocusHandler_OnSetFocus_presult__isset {
  _ClientHandlers_FocusHandler_OnSetFocus_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_FocusHandler_OnSetFocus_presult__isset;

class ClientHandlers_FocusHandler_OnSetFocus_presult {
 public:


  virtual ~ClientHandlers_FocusHandler_OnSetFocus_presult() noexcept;
  bool* success;

  _ClientHandlers_FocusHandler_OnSetFocus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_FocusHandler_OnGotFocus_args__isset {
  _ClientHandlers_FocusHandler_OnGotFocus_args__isset() : bid(false) {}
  bool bid :1;
} _ClientHandlers_FocusHandler_OnGotFocus_args__isset;

class ClientHandlers_FocusHandler_OnGotFocus_args {
 public:

  ClientHandlers_FocusHandler_OnGotFocus_args(const ClientHandlers_FocusHandler_OnGotFocus_args&) noexcept;
  ClientHandlers_FocusHandler_OnGotFocus_args& operator=(const ClientHandlers_FocusHandler_OnGotFocus_args&) noexcept;
  ClientHandlers_FocusHandler_OnGotFocus_args() noexcept
                                              : bid(0) {
  }

  virtual ~ClientHandlers_FocusHandler_OnGotFocus_args() noexcept;
  int32_t bid;

  _ClientHandlers_FocusHandler_OnGotFocus_args__isset __isset;

  void __set_bid(const int32_t val);

  bool operator == (const ClientHandlers_FocusHandler_OnGotFocus_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_FocusHandler_OnGotFocus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_FocusHandler_OnGotFocus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_FocusHandler_OnGotFocus_pargs {
 public:


  virtual ~ClientHandlers_FocusHandler_OnGotFocus_pargs() noexcept;
  const int32_t* bid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_OnBeforeBrowse_args__isset {
  _ClientHandlers_RequestHandler_OnBeforeBrowse_args__isset() : bid(false), request(false), user_gesture(false), is_redirect(false) {}
  bool bid :1;
  bool request :1;
  bool user_gesture :1;
  bool is_redirect :1;
} _ClientHandlers_RequestHandler_OnBeforeBrowse_args__isset;

class ClientHandlers_RequestHandler_OnBeforeBrowse_args {
 public:

  ClientHandlers_RequestHandler_OnBeforeBrowse_args(const ClientHandlers_RequestHandler_OnBeforeBrowse_args&);
  ClientHandlers_RequestHandler_OnBeforeBrowse_args& operator=(const ClientHandlers_RequestHandler_OnBeforeBrowse_args&);
  ClientHandlers_RequestHandler_OnBeforeBrowse_args() noexcept
                                                    : bid(0),
                                                      user_gesture(0),
                                                      is_redirect(0) {
  }

  virtual ~ClientHandlers_RequestHandler_OnBeforeBrowse_args() noexcept;
  int32_t bid;
   ::thrift_codegen::RObject request;
  bool user_gesture;
  bool is_redirect;

  _ClientHandlers_RequestHandler_OnBeforeBrowse_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_user_gesture(const bool val);

  void __set_is_redirect(const bool val);

  bool operator == (const ClientHandlers_RequestHandler_OnBeforeBrowse_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(user_gesture == rhs.user_gesture))
      return false;
    if (!(is_redirect == rhs.is_redirect))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_OnBeforeBrowse_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_OnBeforeBrowse_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RequestHandler_OnBeforeBrowse_pargs {
 public:


  virtual ~ClientHandlers_RequestHandler_OnBeforeBrowse_pargs() noexcept;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const bool* user_gesture;
  const bool* is_redirect;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_OnBeforeBrowse_result__isset {
  _ClientHandlers_RequestHandler_OnBeforeBrowse_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_OnBeforeBrowse_result__isset;

class ClientHandlers_RequestHandler_OnBeforeBrowse_result {
 public:

  ClientHandlers_RequestHandler_OnBeforeBrowse_result(const ClientHandlers_RequestHandler_OnBeforeBrowse_result&) noexcept;
  ClientHandlers_RequestHandler_OnBeforeBrowse_result& operator=(const ClientHandlers_RequestHandler_OnBeforeBrowse_result&) noexcept;
  ClientHandlers_RequestHandler_OnBeforeBrowse_result() noexcept
                                                      : success(0) {
  }

  virtual ~ClientHandlers_RequestHandler_OnBeforeBrowse_result() noexcept;
  bool success;

  _ClientHandlers_RequestHandler_OnBeforeBrowse_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_RequestHandler_OnBeforeBrowse_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_OnBeforeBrowse_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_OnBeforeBrowse_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_OnBeforeBrowse_presult__isset {
  _ClientHandlers_RequestHandler_OnBeforeBrowse_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_OnBeforeBrowse_presult__isset;

class ClientHandlers_RequestHandler_OnBeforeBrowse_presult {
 public:


  virtual ~ClientHandlers_RequestHandler_OnBeforeBrowse_presult() noexcept;
  bool* success;

  _ClientHandlers_RequestHandler_OnBeforeBrowse_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_RequestHandler_OnOpenURLFromTab_args__isset {
  _ClientHandlers_RequestHandler_OnOpenURLFromTab_args__isset() : bid(false), target_url(false), user_gesture(false) {}
  bool bid :1;
  bool target_url :1;
  bool user_gesture :1;
} _ClientHandlers_RequestHandler_OnOpenURLFromTab_args__isset;

class ClientHandlers_RequestHandler_OnOpenURLFromTab_args {
 public:

  ClientHandlers_RequestHandler_OnOpenURLFromTab_args(const ClientHandlers_RequestHandler_OnOpenURLFromTab_args&);
  ClientHandlers_RequestHandler_OnOpenURLFromTab_args& operator=(const ClientHandlers_RequestHandler_OnOpenURLFromTab_args&);
  ClientHandlers_RequestHandler_OnOpenURLFromTab_args() noexcept
                                                      : bid(0),
                                                        target_url(),
                                                        user_gesture(0) {
  }

  virtual ~ClientHandlers_RequestHandler_OnOpenURLFromTab_args() noexcept;
  int32_t bid;
  std::string target_url;
  bool user_gesture;

  _ClientHandlers_RequestHandler_OnOpenURLFromTab_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_target_url(const std::string& val);

  void __set_user_gesture(const bool val);

  bool operator == (const ClientHandlers_RequestHandler_OnOpenURLFromTab_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(target_url == rhs.target_url))
      return false;
    if (!(user_gesture == rhs.user_gesture))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_OnOpenURLFromTab_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_OnOpenURLFromTab_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RequestHandler_OnOpenURLFromTab_pargs {
 public:


  virtual ~ClientHandlers_RequestHandler_OnOpenURLFromTab_pargs() noexcept;
  const int32_t* bid;
  const std::string* target_url;
  const bool* user_gesture;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_OnOpenURLFromTab_result__isset {
  _ClientHandlers_RequestHandler_OnOpenURLFromTab_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_OnOpenURLFromTab_result__isset;

class ClientHandlers_RequestHandler_OnOpenURLFromTab_result {
 public:

  ClientHandlers_RequestHandler_OnOpenURLFromTab_result(const ClientHandlers_RequestHandler_OnOpenURLFromTab_result&) noexcept;
  ClientHandlers_RequestHandler_OnOpenURLFromTab_result& operator=(const ClientHandlers_RequestHandler_OnOpenURLFromTab_result&) noexcept;
  ClientHandlers_RequestHandler_OnOpenURLFromTab_result() noexcept
                                                        : success(0) {
  }

  virtual ~ClientHandlers_RequestHandler_OnOpenURLFromTab_result() noexcept;
  bool success;

  _ClientHandlers_RequestHandler_OnOpenURLFromTab_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_RequestHandler_OnOpenURLFromTab_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_OnOpenURLFromTab_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_OnOpenURLFromTab_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_OnOpenURLFromTab_presult__isset {
  _ClientHandlers_RequestHandler_OnOpenURLFromTab_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_OnOpenURLFromTab_presult__isset;

class ClientHandlers_RequestHandler_OnOpenURLFromTab_presult {
 public:


  virtual ~ClientHandlers_RequestHandler_OnOpenURLFromTab_presult() noexcept;
  bool* success;

  _ClientHandlers_RequestHandler_OnOpenURLFromTab_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_RequestHandler_GetAuthCredentials_args__isset {
  _ClientHandlers_RequestHandler_GetAuthCredentials_args__isset() : bid(false), origin_url(false), isProxy(false), host(false), port(false), realm(false), scheme(false), authCallback(false) {}
  bool bid :1;
  bool origin_url :1;
  bool isProxy :1;
  bool host :1;
  bool port :1;
  bool realm :1;
  bool scheme :1;
  bool authCallback :1;
} _ClientHandlers_RequestHandler_GetAuthCredentials_args__isset;

class ClientHandlers_RequestHandler_GetAuthCredentials_args {
 public:

  ClientHandlers_RequestHandler_GetAuthCredentials_args(const ClientHandlers_RequestHandler_GetAuthCredentials_args&);
  ClientHandlers_RequestHandler_GetAuthCredentials_args& operator=(const ClientHandlers_RequestHandler_GetAuthCredentials_args&);
  ClientHandlers_RequestHandler_GetAuthCredentials_args() noexcept
                                                        : bid(0),
                                                          origin_url(),
                                                          isProxy(0),
                                                          host(),
                                                          port(0),
                                                          realm(),
                                                          scheme() {
  }

  virtual ~ClientHandlers_RequestHandler_GetAuthCredentials_args() noexcept;
  int32_t bid;
  std::string origin_url;
  bool isProxy;
  std::string host;
  int32_t port;
  std::string realm;
  std::string scheme;
   ::thrift_codegen::RObject authCallback;

  _ClientHandlers_RequestHandler_GetAuthCredentials_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_origin_url(const std::string& val);

  void __set_isProxy(const bool val);

  void __set_host(const std::string& val);

  void __set_port(const int32_t val);

  void __set_realm(const std::string& val);

  void __set_scheme(const std::string& val);

  void __set_authCallback(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_RequestHandler_GetAuthCredentials_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(origin_url == rhs.origin_url))
      return false;
    if (!(isProxy == rhs.isProxy))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(realm == rhs.realm))
      return false;
    if (!(scheme == rhs.scheme))
      return false;
    if (!(authCallback == rhs.authCallback))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_GetAuthCredentials_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_GetAuthCredentials_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RequestHandler_GetAuthCredentials_pargs {
 public:


  virtual ~ClientHandlers_RequestHandler_GetAuthCredentials_pargs() noexcept;
  const int32_t* bid;
  const std::string* origin_url;
  const bool* isProxy;
  const std::string* host;
  const int32_t* port;
  const std::string* realm;
  const std::string* scheme;
  const  ::thrift_codegen::RObject* authCallback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_GetAuthCredentials_result__isset {
  _ClientHandlers_RequestHandler_GetAuthCredentials_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_GetAuthCredentials_result__isset;

class ClientHandlers_RequestHandler_GetAuthCredentials_result {
 public:

  ClientHandlers_RequestHandler_GetAuthCredentials_result(const ClientHandlers_RequestHandler_GetAuthCredentials_result&) noexcept;
  ClientHandlers_RequestHandler_GetAuthCredentials_result& operator=(const ClientHandlers_RequestHandler_GetAuthCredentials_result&) noexcept;
  ClientHandlers_RequestHandler_GetAuthCredentials_result() noexcept
                                                          : success(0) {
  }

  virtual ~ClientHandlers_RequestHandler_GetAuthCredentials_result() noexcept;
  bool success;

  _ClientHandlers_RequestHandler_GetAuthCredentials_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_RequestHandler_GetAuthCredentials_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_GetAuthCredentials_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_GetAuthCredentials_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_GetAuthCredentials_presult__isset {
  _ClientHandlers_RequestHandler_GetAuthCredentials_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_GetAuthCredentials_presult__isset;

class ClientHandlers_RequestHandler_GetAuthCredentials_presult {
 public:


  virtual ~ClientHandlers_RequestHandler_GetAuthCredentials_presult() noexcept;
  bool* success;

  _ClientHandlers_RequestHandler_GetAuthCredentials_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_RequestHandler_OnCertificateError_args__isset {
  _ClientHandlers_RequestHandler_OnCertificateError_args__isset() : bid(false), cert_error(false), request_url(false), sslInfo(false), callback(false) {}
  bool bid :1;
  bool cert_error :1;
  bool request_url :1;
  bool sslInfo :1;
  bool callback :1;
} _ClientHandlers_RequestHandler_OnCertificateError_args__isset;

class ClientHandlers_RequestHandler_OnCertificateError_args {
 public:

  ClientHandlers_RequestHandler_OnCertificateError_args(const ClientHandlers_RequestHandler_OnCertificateError_args&);
  ClientHandlers_RequestHandler_OnCertificateError_args& operator=(const ClientHandlers_RequestHandler_OnCertificateError_args&);
  ClientHandlers_RequestHandler_OnCertificateError_args() noexcept
                                                        : bid(0),
                                                          cert_error(),
                                                          request_url() {
  }

  virtual ~ClientHandlers_RequestHandler_OnCertificateError_args() noexcept;
  int32_t bid;
  std::string cert_error;
  std::string request_url;
   ::thrift_codegen::RObject sslInfo;
   ::thrift_codegen::RObject callback;

  _ClientHandlers_RequestHandler_OnCertificateError_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_cert_error(const std::string& val);

  void __set_request_url(const std::string& val);

  void __set_sslInfo(const  ::thrift_codegen::RObject& val);

  void __set_callback(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_RequestHandler_OnCertificateError_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(cert_error == rhs.cert_error))
      return false;
    if (!(request_url == rhs.request_url))
      return false;
    if (!(sslInfo == rhs.sslInfo))
      return false;
    if (!(callback == rhs.callback))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_OnCertificateError_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_OnCertificateError_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RequestHandler_OnCertificateError_pargs {
 public:


  virtual ~ClientHandlers_RequestHandler_OnCertificateError_pargs() noexcept;
  const int32_t* bid;
  const std::string* cert_error;
  const std::string* request_url;
  const  ::thrift_codegen::RObject* sslInfo;
  const  ::thrift_codegen::RObject* callback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_OnCertificateError_result__isset {
  _ClientHandlers_RequestHandler_OnCertificateError_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_OnCertificateError_result__isset;

class ClientHandlers_RequestHandler_OnCertificateError_result {
 public:

  ClientHandlers_RequestHandler_OnCertificateError_result(const ClientHandlers_RequestHandler_OnCertificateError_result&) noexcept;
  ClientHandlers_RequestHandler_OnCertificateError_result& operator=(const ClientHandlers_RequestHandler_OnCertificateError_result&) noexcept;
  ClientHandlers_RequestHandler_OnCertificateError_result() noexcept
                                                          : success(0) {
  }

  virtual ~ClientHandlers_RequestHandler_OnCertificateError_result() noexcept;
  bool success;

  _ClientHandlers_RequestHandler_OnCertificateError_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_RequestHandler_OnCertificateError_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_OnCertificateError_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_OnCertificateError_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_OnCertificateError_presult__isset {
  _ClientHandlers_RequestHandler_OnCertificateError_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_OnCertificateError_presult__isset;

class ClientHandlers_RequestHandler_OnCertificateError_presult {
 public:


  virtual ~ClientHandlers_RequestHandler_OnCertificateError_presult() noexcept;
  bool* success;

  _ClientHandlers_RequestHandler_OnCertificateError_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_RequestHandler_OnRenderProcessTerminated_args__isset {
  _ClientHandlers_RequestHandler_OnRenderProcessTerminated_args__isset() : bid(false), status(false) {}
  bool bid :1;
  bool status :1;
} _ClientHandlers_RequestHandler_OnRenderProcessTerminated_args__isset;

class ClientHandlers_RequestHandler_OnRenderProcessTerminated_args {
 public:

  ClientHandlers_RequestHandler_OnRenderProcessTerminated_args(const ClientHandlers_RequestHandler_OnRenderProcessTerminated_args&);
  ClientHandlers_RequestHandler_OnRenderProcessTerminated_args& operator=(const ClientHandlers_RequestHandler_OnRenderProcessTerminated_args&);
  ClientHandlers_RequestHandler_OnRenderProcessTerminated_args() noexcept
                                                               : bid(0),
                                                                 status() {
  }

  virtual ~ClientHandlers_RequestHandler_OnRenderProcessTerminated_args() noexcept;
  int32_t bid;
  std::string status;

  _ClientHandlers_RequestHandler_OnRenderProcessTerminated_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_status(const std::string& val);

  bool operator == (const ClientHandlers_RequestHandler_OnRenderProcessTerminated_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_OnRenderProcessTerminated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_OnRenderProcessTerminated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RequestHandler_OnRenderProcessTerminated_pargs {
 public:


  virtual ~ClientHandlers_RequestHandler_OnRenderProcessTerminated_pargs() noexcept;
  const int32_t* bid;
  const std::string* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_GetResourceRequestHandler_args__isset {
  _ClientHandlers_RequestHandler_GetResourceRequestHandler_args__isset() : bid(false), request(false), isNavigation(false), isDownload(false), requestInitiator(false) {}
  bool bid :1;
  bool request :1;
  bool isNavigation :1;
  bool isDownload :1;
  bool requestInitiator :1;
} _ClientHandlers_RequestHandler_GetResourceRequestHandler_args__isset;

class ClientHandlers_RequestHandler_GetResourceRequestHandler_args {
 public:

  ClientHandlers_RequestHandler_GetResourceRequestHandler_args(const ClientHandlers_RequestHandler_GetResourceRequestHandler_args&);
  ClientHandlers_RequestHandler_GetResourceRequestHandler_args& operator=(const ClientHandlers_RequestHandler_GetResourceRequestHandler_args&);
  ClientHandlers_RequestHandler_GetResourceRequestHandler_args() noexcept
                                                               : bid(0),
                                                                 isNavigation(0),
                                                                 isDownload(0),
                                                                 requestInitiator() {
  }

  virtual ~ClientHandlers_RequestHandler_GetResourceRequestHandler_args() noexcept;
  int32_t bid;
   ::thrift_codegen::RObject request;
  bool isNavigation;
  bool isDownload;
  std::string requestInitiator;

  _ClientHandlers_RequestHandler_GetResourceRequestHandler_args__isset __isset;

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_isNavigation(const bool val);

  void __set_isDownload(const bool val);

  void __set_requestInitiator(const std::string& val);

  bool operator == (const ClientHandlers_RequestHandler_GetResourceRequestHandler_args & rhs) const
  {
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(isNavigation == rhs.isNavigation))
      return false;
    if (!(isDownload == rhs.isDownload))
      return false;
    if (!(requestInitiator == rhs.requestInitiator))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_GetResourceRequestHandler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_GetResourceRequestHandler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_RequestHandler_GetResourceRequestHandler_pargs {
 public:


  virtual ~ClientHandlers_RequestHandler_GetResourceRequestHandler_pargs() noexcept;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const bool* isNavigation;
  const bool* isDownload;
  const std::string* requestInitiator;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_GetResourceRequestHandler_result__isset {
  _ClientHandlers_RequestHandler_GetResourceRequestHandler_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_GetResourceRequestHandler_result__isset;

class ClientHandlers_RequestHandler_GetResourceRequestHandler_result {
 public:

  ClientHandlers_RequestHandler_GetResourceRequestHandler_result(const ClientHandlers_RequestHandler_GetResourceRequestHandler_result&);
  ClientHandlers_RequestHandler_GetResourceRequestHandler_result& operator=(const ClientHandlers_RequestHandler_GetResourceRequestHandler_result&);
  ClientHandlers_RequestHandler_GetResourceRequestHandler_result() noexcept {
  }

  virtual ~ClientHandlers_RequestHandler_GetResourceRequestHandler_result() noexcept;
   ::thrift_codegen::RObject success;

  _ClientHandlers_RequestHandler_GetResourceRequestHandler_result__isset __isset;

  void __set_success(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_RequestHandler_GetResourceRequestHandler_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_RequestHandler_GetResourceRequestHandler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_RequestHandler_GetResourceRequestHandler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_RequestHandler_GetResourceRequestHandler_presult__isset {
  _ClientHandlers_RequestHandler_GetResourceRequestHandler_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_RequestHandler_GetResourceRequestHandler_presult__isset;

class ClientHandlers_RequestHandler_GetResourceRequestHandler_presult {
 public:


  virtual ~ClientHandlers_RequestHandler_GetResourceRequestHandler_presult() noexcept;
   ::thrift_codegen::RObject* success;

  _ClientHandlers_RequestHandler_GetResourceRequestHandler_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_ResourceRequestHandler_Dispose_args__isset {
  _ClientHandlers_ResourceRequestHandler_Dispose_args__isset() : rrHandler(false) {}
  bool rrHandler :1;
} _ClientHandlers_ResourceRequestHandler_Dispose_args__isset;

class ClientHandlers_ResourceRequestHandler_Dispose_args {
 public:

  ClientHandlers_ResourceRequestHandler_Dispose_args(const ClientHandlers_ResourceRequestHandler_Dispose_args&) noexcept;
  ClientHandlers_ResourceRequestHandler_Dispose_args& operator=(const ClientHandlers_ResourceRequestHandler_Dispose_args&) noexcept;
  ClientHandlers_ResourceRequestHandler_Dispose_args() noexcept
                                                     : rrHandler(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_Dispose_args() noexcept;
  int32_t rrHandler;

  _ClientHandlers_ResourceRequestHandler_Dispose_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_Dispose_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_Dispose_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_Dispose_pargs() noexcept;
  const int32_t* rrHandler;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args__isset {
  _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args__isset() : rrHandler(false), bid(false), request(false) {}
  bool rrHandler :1;
  bool bid :1;
  bool request :1;
} _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args__isset;

class ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args {
 public:

  ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args(const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args&);
  ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args& operator=(const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args&);
  ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args() noexcept
                                                                   : rrHandler(0),
                                                                     bid(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args() noexcept;
  int32_t rrHandler;
  int32_t bid;
   ::thrift_codegen::RObject request;

  _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_pargs() noexcept;
  const int32_t* rrHandler;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result__isset {
  _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result__isset;

class ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result {
 public:

  ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result(const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result&);
  ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result& operator=(const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result&);
  ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result() noexcept {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result() noexcept;
   ::thrift_codegen::RObject success;

  _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result__isset __isset;

  void __set_success(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_presult__isset {
  _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_presult__isset;

class ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_presult {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_presult() noexcept;
   ::thrift_codegen::RObject* success;

  _ClientHandlers_ResourceRequestHandler_GetCookieAccessFilter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_CookieAccessFilter_Dispose_args__isset {
  _ClientHandlers_CookieAccessFilter_Dispose_args__isset() : filter(false) {}
  bool filter :1;
} _ClientHandlers_CookieAccessFilter_Dispose_args__isset;

class ClientHandlers_CookieAccessFilter_Dispose_args {
 public:

  ClientHandlers_CookieAccessFilter_Dispose_args(const ClientHandlers_CookieAccessFilter_Dispose_args&) noexcept;
  ClientHandlers_CookieAccessFilter_Dispose_args& operator=(const ClientHandlers_CookieAccessFilter_Dispose_args&) noexcept;
  ClientHandlers_CookieAccessFilter_Dispose_args() noexcept
                                                 : filter(0) {
  }

  virtual ~ClientHandlers_CookieAccessFilter_Dispose_args() noexcept;
  int32_t filter;

  _ClientHandlers_CookieAccessFilter_Dispose_args__isset __isset;

  void __set_filter(const int32_t val);

  bool operator == (const ClientHandlers_CookieAccessFilter_Dispose_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_CookieAccessFilter_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_CookieAccessFilter_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_CookieAccessFilter_Dispose_pargs {
 public:


  virtual ~ClientHandlers_CookieAccessFilter_Dispose_pargs() noexcept;
  const int32_t* filter;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_CookieAccessFilter_CanSendCookie_args__isset {
  _ClientHandlers_CookieAccessFilter_CanSendCookie_args__isset() : filter(false), bid(false), request(false), cookie(false) {}
  bool filter :1;
  bool bid :1;
  bool request :1;
  bool cookie :1;
} _ClientHandlers_CookieAccessFilter_CanSendCookie_args__isset;

class ClientHandlers_CookieAccessFilter_CanSendCookie_args {
 public:

  ClientHandlers_CookieAccessFilter_CanSendCookie_args(const ClientHandlers_CookieAccessFilter_CanSendCookie_args&);
  ClientHandlers_CookieAccessFilter_CanSendCookie_args& operator=(const ClientHandlers_CookieAccessFilter_CanSendCookie_args&);
  ClientHandlers_CookieAccessFilter_CanSendCookie_args() noexcept
                                                       : filter(0),
                                                         bid(0) {
  }

  virtual ~ClientHandlers_CookieAccessFilter_CanSendCookie_args() noexcept;
  int32_t filter;
  int32_t bid;
   ::thrift_codegen::RObject request;
  std::vector<std::string>  cookie;

  _ClientHandlers_CookieAccessFilter_CanSendCookie_args__isset __isset;

  void __set_filter(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_cookie(const std::vector<std::string> & val);

  bool operator == (const ClientHandlers_CookieAccessFilter_CanSendCookie_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(cookie == rhs.cookie))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_CookieAccessFilter_CanSendCookie_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_CookieAccessFilter_CanSendCookie_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_CookieAccessFilter_CanSendCookie_pargs {
 public:


  virtual ~ClientHandlers_CookieAccessFilter_CanSendCookie_pargs() noexcept;
  const int32_t* filter;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const std::vector<std::string> * cookie;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_CookieAccessFilter_CanSendCookie_result__isset {
  _ClientHandlers_CookieAccessFilter_CanSendCookie_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_CookieAccessFilter_CanSendCookie_result__isset;

class ClientHandlers_CookieAccessFilter_CanSendCookie_result {
 public:

  ClientHandlers_CookieAccessFilter_CanSendCookie_result(const ClientHandlers_CookieAccessFilter_CanSendCookie_result&) noexcept;
  ClientHandlers_CookieAccessFilter_CanSendCookie_result& operator=(const ClientHandlers_CookieAccessFilter_CanSendCookie_result&) noexcept;
  ClientHandlers_CookieAccessFilter_CanSendCookie_result() noexcept
                                                         : success(0) {
  }

  virtual ~ClientHandlers_CookieAccessFilter_CanSendCookie_result() noexcept;
  bool success;

  _ClientHandlers_CookieAccessFilter_CanSendCookie_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_CookieAccessFilter_CanSendCookie_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_CookieAccessFilter_CanSendCookie_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_CookieAccessFilter_CanSendCookie_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_CookieAccessFilter_CanSendCookie_presult__isset {
  _ClientHandlers_CookieAccessFilter_CanSendCookie_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_CookieAccessFilter_CanSendCookie_presult__isset;

class ClientHandlers_CookieAccessFilter_CanSendCookie_presult {
 public:


  virtual ~ClientHandlers_CookieAccessFilter_CanSendCookie_presult() noexcept;
  bool* success;

  _ClientHandlers_CookieAccessFilter_CanSendCookie_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_CookieAccessFilter_CanSaveCookie_args__isset {
  _ClientHandlers_CookieAccessFilter_CanSaveCookie_args__isset() : filter(false), bid(false), request(false), response(false), cookie(false) {}
  bool filter :1;
  bool bid :1;
  bool request :1;
  bool response :1;
  bool cookie :1;
} _ClientHandlers_CookieAccessFilter_CanSaveCookie_args__isset;

class ClientHandlers_CookieAccessFilter_CanSaveCookie_args {
 public:

  ClientHandlers_CookieAccessFilter_CanSaveCookie_args(const ClientHandlers_CookieAccessFilter_CanSaveCookie_args&);
  ClientHandlers_CookieAccessFilter_CanSaveCookie_args& operator=(const ClientHandlers_CookieAccessFilter_CanSaveCookie_args&);
  ClientHandlers_CookieAccessFilter_CanSaveCookie_args() noexcept
                                                       : filter(0),
                                                         bid(0) {
  }

  virtual ~ClientHandlers_CookieAccessFilter_CanSaveCookie_args() noexcept;
  int32_t filter;
  int32_t bid;
   ::thrift_codegen::RObject request;
   ::thrift_codegen::RObject response;
  std::vector<std::string>  cookie;

  _ClientHandlers_CookieAccessFilter_CanSaveCookie_args__isset __isset;

  void __set_filter(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_response(const  ::thrift_codegen::RObject& val);

  void __set_cookie(const std::vector<std::string> & val);

  bool operator == (const ClientHandlers_CookieAccessFilter_CanSaveCookie_args & rhs) const
  {
    if (!(filter == rhs.filter))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(response == rhs.response))
      return false;
    if (!(cookie == rhs.cookie))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_CookieAccessFilter_CanSaveCookie_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_CookieAccessFilter_CanSaveCookie_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_CookieAccessFilter_CanSaveCookie_pargs {
 public:


  virtual ~ClientHandlers_CookieAccessFilter_CanSaveCookie_pargs() noexcept;
  const int32_t* filter;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const  ::thrift_codegen::RObject* response;
  const std::vector<std::string> * cookie;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_CookieAccessFilter_CanSaveCookie_result__isset {
  _ClientHandlers_CookieAccessFilter_CanSaveCookie_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_CookieAccessFilter_CanSaveCookie_result__isset;

class ClientHandlers_CookieAccessFilter_CanSaveCookie_result {
 public:

  ClientHandlers_CookieAccessFilter_CanSaveCookie_result(const ClientHandlers_CookieAccessFilter_CanSaveCookie_result&) noexcept;
  ClientHandlers_CookieAccessFilter_CanSaveCookie_result& operator=(const ClientHandlers_CookieAccessFilter_CanSaveCookie_result&) noexcept;
  ClientHandlers_CookieAccessFilter_CanSaveCookie_result() noexcept
                                                         : success(0) {
  }

  virtual ~ClientHandlers_CookieAccessFilter_CanSaveCookie_result() noexcept;
  bool success;

  _ClientHandlers_CookieAccessFilter_CanSaveCookie_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_CookieAccessFilter_CanSaveCookie_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_CookieAccessFilter_CanSaveCookie_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_CookieAccessFilter_CanSaveCookie_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_CookieAccessFilter_CanSaveCookie_presult__isset {
  _ClientHandlers_CookieAccessFilter_CanSaveCookie_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_CookieAccessFilter_CanSaveCookie_presult__isset;

class ClientHandlers_CookieAccessFilter_CanSaveCookie_presult {
 public:


  virtual ~ClientHandlers_CookieAccessFilter_CanSaveCookie_presult() noexcept;
  bool* success;

  _ClientHandlers_CookieAccessFilter_CanSaveCookie_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args__isset {
  _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args__isset() : rrHandler(false), bid(false), request(false) {}
  bool rrHandler :1;
  bool bid :1;
  bool request :1;
} _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args__isset;

class ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args {
 public:

  ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args(const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args&);
  ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args& operator=(const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args&);
  ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args() noexcept
                                                                  : rrHandler(0),
                                                                    bid(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args() noexcept;
  int32_t rrHandler;
  int32_t bid;
   ::thrift_codegen::RObject request;

  _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_pargs() noexcept;
  const int32_t* rrHandler;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result__isset {
  _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result__isset;

class ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result {
 public:

  ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result(const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result& operator=(const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result() noexcept
                                                                    : success(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result() noexcept;
  bool success;

  _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_presult__isset {
  _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_presult__isset;

class ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_presult {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_presult() noexcept;
  bool* success;

  _ClientHandlers_ResourceRequestHandler_OnBeforeResourceLoad_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_ResourceRequestHandler_GetResourceHandler_args__isset {
  _ClientHandlers_ResourceRequestHandler_GetResourceHandler_args__isset() : rrHandler(false), bid(false), request(false) {}
  bool rrHandler :1;
  bool bid :1;
  bool request :1;
} _ClientHandlers_ResourceRequestHandler_GetResourceHandler_args__isset;

class ClientHandlers_ResourceRequestHandler_GetResourceHandler_args {
 public:

  ClientHandlers_ResourceRequestHandler_GetResourceHandler_args(const ClientHandlers_ResourceRequestHandler_GetResourceHandler_args&);
  ClientHandlers_ResourceRequestHandler_GetResourceHandler_args& operator=(const ClientHandlers_ResourceRequestHandler_GetResourceHandler_args&);
  ClientHandlers_ResourceRequestHandler_GetResourceHandler_args() noexcept
                                                                : rrHandler(0),
                                                                  bid(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_GetResourceHandler_args() noexcept;
  int32_t rrHandler;
  int32_t bid;
   ::thrift_codegen::RObject request;

  _ClientHandlers_ResourceRequestHandler_GetResourceHandler_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_GetResourceHandler_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_GetResourceHandler_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_GetResourceHandler_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_GetResourceHandler_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_GetResourceHandler_pargs() noexcept;
  const int32_t* rrHandler;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_GetResourceHandler_result__isset {
  _ClientHandlers_ResourceRequestHandler_GetResourceHandler_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_GetResourceHandler_result__isset;

class ClientHandlers_ResourceRequestHandler_GetResourceHandler_result {
 public:

  ClientHandlers_ResourceRequestHandler_GetResourceHandler_result(const ClientHandlers_ResourceRequestHandler_GetResourceHandler_result&);
  ClientHandlers_ResourceRequestHandler_GetResourceHandler_result& operator=(const ClientHandlers_ResourceRequestHandler_GetResourceHandler_result&);
  ClientHandlers_ResourceRequestHandler_GetResourceHandler_result() noexcept {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_GetResourceHandler_result() noexcept;
   ::thrift_codegen::RObject success;

  _ClientHandlers_ResourceRequestHandler_GetResourceHandler_result__isset __isset;

  void __set_success(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_GetResourceHandler_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_GetResourceHandler_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_GetResourceHandler_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_GetResourceHandler_presult__isset {
  _ClientHandlers_ResourceRequestHandler_GetResourceHandler_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_GetResourceHandler_presult__isset;

class ClientHandlers_ResourceRequestHandler_GetResourceHandler_presult {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_GetResourceHandler_presult() noexcept;
   ::thrift_codegen::RObject* success;

  _ClientHandlers_ResourceRequestHandler_GetResourceHandler_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_ResourceHandler_Dispose_args__isset {
  _ClientHandlers_ResourceHandler_Dispose_args__isset() : resourceHandler(false) {}
  bool resourceHandler :1;
} _ClientHandlers_ResourceHandler_Dispose_args__isset;

class ClientHandlers_ResourceHandler_Dispose_args {
 public:

  ClientHandlers_ResourceHandler_Dispose_args(const ClientHandlers_ResourceHandler_Dispose_args&) noexcept;
  ClientHandlers_ResourceHandler_Dispose_args& operator=(const ClientHandlers_ResourceHandler_Dispose_args&) noexcept;
  ClientHandlers_ResourceHandler_Dispose_args() noexcept
                                              : resourceHandler(0) {
  }

  virtual ~ClientHandlers_ResourceHandler_Dispose_args() noexcept;
  int32_t resourceHandler;

  _ClientHandlers_ResourceHandler_Dispose_args__isset __isset;

  void __set_resourceHandler(const int32_t val);

  bool operator == (const ClientHandlers_ResourceHandler_Dispose_args & rhs) const
  {
    if (!(resourceHandler == rhs.resourceHandler))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceHandler_Dispose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceHandler_Dispose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceHandler_Dispose_pargs {
 public:


  virtual ~ClientHandlers_ResourceHandler_Dispose_pargs() noexcept;
  const int32_t* resourceHandler;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args__isset {
  _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args__isset() : rrHandler(false), bid(false), request(false), response(false), new_url(false) {}
  bool rrHandler :1;
  bool bid :1;
  bool request :1;
  bool response :1;
  bool new_url :1;
} _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args__isset;

class ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args {
 public:

  ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args(const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args&);
  ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args& operator=(const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args&);
  ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args() noexcept
                                                                : rrHandler(0),
                                                                  bid(0),
                                                                  new_url() {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args() noexcept;
  int32_t rrHandler;
  int32_t bid;
   ::thrift_codegen::RObject request;
   ::thrift_codegen::RObject response;
  std::string new_url;

  _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_response(const  ::thrift_codegen::RObject& val);

  void __set_new_url(const std::string& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(response == rhs.response))
      return false;
    if (!(new_url == rhs.new_url))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_OnResourceRedirect_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceRedirect_pargs() noexcept;
  const int32_t* rrHandler;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const  ::thrift_codegen::RObject* response;
  const std::string* new_url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result__isset {
  _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result__isset;

class ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result {
 public:

  ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result(const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result&);
  ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result& operator=(const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result&);
  ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result() noexcept
                                                                  : success() {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result() noexcept;
  std::string success;

  _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnResourceRedirect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_presult__isset {
  _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_presult__isset;

class ClientHandlers_ResourceRequestHandler_OnResourceRedirect_presult {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceRedirect_presult() noexcept;
  std::string* success;

  _ClientHandlers_ResourceRequestHandler_OnResourceRedirect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnResourceResponse_args__isset {
  _ClientHandlers_ResourceRequestHandler_OnResourceResponse_args__isset() : rrHandler(false), bid(false), request(false), response(false) {}
  bool rrHandler :1;
  bool bid :1;
  bool request :1;
  bool response :1;
} _ClientHandlers_ResourceRequestHandler_OnResourceResponse_args__isset;

class ClientHandlers_ResourceRequestHandler_OnResourceResponse_args {
 public:

  ClientHandlers_ResourceRequestHandler_OnResourceResponse_args(const ClientHandlers_ResourceRequestHandler_OnResourceResponse_args&);
  ClientHandlers_ResourceRequestHandler_OnResourceResponse_args& operator=(const ClientHandlers_ResourceRequestHandler_OnResourceResponse_args&);
  ClientHandlers_ResourceRequestHandler_OnResourceResponse_args() noexcept
                                                                : rrHandler(0),
                                                                  bid(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceResponse_args() noexcept;
  int32_t rrHandler;
  int32_t bid;
   ::thrift_codegen::RObject request;
   ::thrift_codegen::RObject response;

  _ClientHandlers_ResourceRequestHandler_OnResourceResponse_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_response(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnResourceResponse_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(response == rhs.response))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnResourceResponse_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnResourceResponse_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_OnResourceResponse_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceResponse_pargs() noexcept;
  const int32_t* rrHandler;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const  ::thrift_codegen::RObject* response;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnResourceResponse_result__isset {
  _ClientHandlers_ResourceRequestHandler_OnResourceResponse_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnResourceResponse_result__isset;

class ClientHandlers_ResourceRequestHandler_OnResourceResponse_result {
 public:

  ClientHandlers_ResourceRequestHandler_OnResourceResponse_result(const ClientHandlers_ResourceRequestHandler_OnResourceResponse_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnResourceResponse_result& operator=(const ClientHandlers_ResourceRequestHandler_OnResourceResponse_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnResourceResponse_result() noexcept
                                                                  : success(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceResponse_result() noexcept;
  bool success;

  _ClientHandlers_ResourceRequestHandler_OnResourceResponse_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnResourceResponse_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnResourceResponse_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnResourceResponse_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnResourceResponse_presult__isset {
  _ClientHandlers_ResourceRequestHandler_OnResourceResponse_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnResourceResponse_presult__isset;

class ClientHandlers_ResourceRequestHandler_OnResourceResponse_presult {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceResponse_presult() noexcept;
  bool* success;

  _ClientHandlers_ResourceRequestHandler_OnResourceResponse_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args__isset {
  _ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args__isset() : rrHandler(false), bid(false), request(false), response(false), status(false), receivedContentLength(false) {}
  bool rrHandler :1;
  bool bid :1;
  bool request :1;
  bool response :1;
  bool status :1;
  bool receivedContentLength :1;
} _ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args__isset;

class ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args {
 public:

  ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args(const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args&);
  ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args& operator=(const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args&);
  ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args() noexcept
                                                                    : rrHandler(0),
                                                                      bid(0),
                                                                      status(),
                                                                      receivedContentLength(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args() noexcept;
  int32_t rrHandler;
  int32_t bid;
   ::thrift_codegen::RObject request;
   ::thrift_codegen::RObject response;
  std::string status;
  int64_t receivedContentLength;

  _ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_response(const  ::thrift_codegen::RObject& val);

  void __set_status(const std::string& val);

  void __set_receivedContentLength(const int64_t val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(response == rhs.response))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(receivedContentLength == rhs.receivedContentLength))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_pargs() noexcept;
  const int32_t* rrHandler;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const  ::thrift_codegen::RObject* response;
  const std::string* status;
  const int64_t* receivedContentLength;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result {
 public:

  ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result(const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result& operator=(const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result() noexcept {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result() noexcept;

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_presult {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnResourceLoadComplete_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args__isset {
  _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args__isset() : rrHandler(false), bid(false), request(false), allowOsExecution(false) {}
  bool rrHandler :1;
  bool bid :1;
  bool request :1;
  bool allowOsExecution :1;
} _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args__isset;

class ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args {
 public:

  ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args(const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args&);
  ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args& operator=(const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args&);
  ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args() noexcept
                                                                 : rrHandler(0),
                                                                   bid(0),
                                                                   allowOsExecution(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args() noexcept;
  int32_t rrHandler;
  int32_t bid;
   ::thrift_codegen::RObject request;
  bool allowOsExecution;

  _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args__isset __isset;

  void __set_rrHandler(const int32_t val);

  void __set_bid(const int32_t val);

  void __set_request(const  ::thrift_codegen::RObject& val);

  void __set_allowOsExecution(const bool val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args & rhs) const
  {
    if (!(rrHandler == rhs.rrHandler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(allowOsExecution == rhs.allowOsExecution))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_ResourceRequestHandler_OnProtocolExecution_pargs {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnProtocolExecution_pargs() noexcept;
  const int32_t* rrHandler;
  const int32_t* bid;
  const  ::thrift_codegen::RObject* request;
  const bool* allowOsExecution;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result__isset {
  _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result__isset;

class ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result {
 public:

  ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result(const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result& operator=(const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result&) noexcept;
  ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result() noexcept
                                                                   : success(0) {
  }

  virtual ~ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result() noexcept;
  bool success;

  _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_ResourceRequestHandler_OnProtocolExecution_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_presult__isset {
  _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_presult__isset;

class ClientHandlers_ResourceRequestHandler_OnProtocolExecution_presult {
 public:


  virtual ~ClientHandlers_ResourceRequestHandler_OnProtocolExecution_presult() noexcept;
  bool* success;

  _ClientHandlers_ResourceRequestHandler_OnProtocolExecution_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_MessageRouterHandler_onQuery_args__isset {
  _ClientHandlers_MessageRouterHandler_onQuery_args__isset() : handler(false), bid(false), queryId(false), request(false), persistent(false), queryCallback(false) {}
  bool handler :1;
  bool bid :1;
  bool queryId :1;
  bool request :1;
  bool persistent :1;
  bool queryCallback :1;
} _ClientHandlers_MessageRouterHandler_onQuery_args__isset;

class ClientHandlers_MessageRouterHandler_onQuery_args {
 public:

  ClientHandlers_MessageRouterHandler_onQuery_args(const ClientHandlers_MessageRouterHandler_onQuery_args&);
  ClientHandlers_MessageRouterHandler_onQuery_args& operator=(const ClientHandlers_MessageRouterHandler_onQuery_args&);
  ClientHandlers_MessageRouterHandler_onQuery_args() noexcept
                                                   : bid(0),
                                                     queryId(0),
                                                     request(),
                                                     persistent(0) {
  }

  virtual ~ClientHandlers_MessageRouterHandler_onQuery_args() noexcept;
   ::thrift_codegen::RObject handler;
  int32_t bid;
  int64_t queryId;
  std::string request;
  bool persistent;
   ::thrift_codegen::RObject queryCallback;

  _ClientHandlers_MessageRouterHandler_onQuery_args__isset __isset;

  void __set_handler(const  ::thrift_codegen::RObject& val);

  void __set_bid(const int32_t val);

  void __set_queryId(const int64_t val);

  void __set_request(const std::string& val);

  void __set_persistent(const bool val);

  void __set_queryCallback(const  ::thrift_codegen::RObject& val);

  bool operator == (const ClientHandlers_MessageRouterHandler_onQuery_args & rhs) const
  {
    if (!(handler == rhs.handler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(queryId == rhs.queryId))
      return false;
    if (!(request == rhs.request))
      return false;
    if (!(persistent == rhs.persistent))
      return false;
    if (!(queryCallback == rhs.queryCallback))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_MessageRouterHandler_onQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_MessageRouterHandler_onQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_MessageRouterHandler_onQuery_pargs {
 public:


  virtual ~ClientHandlers_MessageRouterHandler_onQuery_pargs() noexcept;
  const  ::thrift_codegen::RObject* handler;
  const int32_t* bid;
  const int64_t* queryId;
  const std::string* request;
  const bool* persistent;
  const  ::thrift_codegen::RObject* queryCallback;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_MessageRouterHandler_onQuery_result__isset {
  _ClientHandlers_MessageRouterHandler_onQuery_result__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_MessageRouterHandler_onQuery_result__isset;

class ClientHandlers_MessageRouterHandler_onQuery_result {
 public:

  ClientHandlers_MessageRouterHandler_onQuery_result(const ClientHandlers_MessageRouterHandler_onQuery_result&) noexcept;
  ClientHandlers_MessageRouterHandler_onQuery_result& operator=(const ClientHandlers_MessageRouterHandler_onQuery_result&) noexcept;
  ClientHandlers_MessageRouterHandler_onQuery_result() noexcept
                                                     : success(0) {
  }

  virtual ~ClientHandlers_MessageRouterHandler_onQuery_result() noexcept;
  bool success;

  _ClientHandlers_MessageRouterHandler_onQuery_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const ClientHandlers_MessageRouterHandler_onQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_MessageRouterHandler_onQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_MessageRouterHandler_onQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientHandlers_MessageRouterHandler_onQuery_presult__isset {
  _ClientHandlers_MessageRouterHandler_onQuery_presult__isset() : success(false) {}
  bool success :1;
} _ClientHandlers_MessageRouterHandler_onQuery_presult__isset;

class ClientHandlers_MessageRouterHandler_onQuery_presult {
 public:


  virtual ~ClientHandlers_MessageRouterHandler_onQuery_presult() noexcept;
  bool* success;

  _ClientHandlers_MessageRouterHandler_onQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientHandlers_MessageRouterHandler_onQueryCanceled_args__isset {
  _ClientHandlers_MessageRouterHandler_onQueryCanceled_args__isset() : handler(false), bid(false), queryId(false) {}
  bool handler :1;
  bool bid :1;
  bool queryId :1;
} _ClientHandlers_MessageRouterHandler_onQueryCanceled_args__isset;

class ClientHandlers_MessageRouterHandler_onQueryCanceled_args {
 public:

  ClientHandlers_MessageRouterHandler_onQueryCanceled_args(const ClientHandlers_MessageRouterHandler_onQueryCanceled_args&);
  ClientHandlers_MessageRouterHandler_onQueryCanceled_args& operator=(const ClientHandlers_MessageRouterHandler_onQueryCanceled_args&);
  ClientHandlers_MessageRouterHandler_onQueryCanceled_args() noexcept
                                                           : bid(0),
                                                             queryId(0) {
  }

  virtual ~ClientHandlers_MessageRouterHandler_onQueryCanceled_args() noexcept;
   ::thrift_codegen::RObject handler;
  int32_t bid;
  int64_t queryId;

  _ClientHandlers_MessageRouterHandler_onQueryCanceled_args__isset __isset;

  void __set_handler(const  ::thrift_codegen::RObject& val);

  void __set_bid(const int32_t val);

  void __set_queryId(const int64_t val);

  bool operator == (const ClientHandlers_MessageRouterHandler_onQueryCanceled_args & rhs) const
  {
    if (!(handler == rhs.handler))
      return false;
    if (!(bid == rhs.bid))
      return false;
    if (!(queryId == rhs.queryId))
      return false;
    return true;
  }
  bool operator != (const ClientHandlers_MessageRouterHandler_onQueryCanceled_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientHandlers_MessageRouterHandler_onQueryCanceled_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientHandlers_MessageRouterHandler_onQueryCanceled_pargs {
 public:


  virtual ~ClientHandlers_MessageRouterHandler_onQueryCanceled_pargs() noexcept;
  const  ::thrift_codegen::RObject* handler;
  const int32_t* bid;
  const int64_t* queryId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class ClientHandlersClient : virtual public ClientHandlersIf {
 public:
  ClientHandlersClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ClientHandlersClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t connect() override;
  void send_connect();
  int32_t recv_connect();
  void log(const std::string& msg) override;
  void send_log(const std::string& msg);
  void AppHandler_OnContextInitialized() override;
  void send_AppHandler_OnContextInitialized();
  void RenderHandler_GetViewRect(Rect& _return, const int32_t bid) override;
  void send_RenderHandler_GetViewRect(const int32_t bid);
  void recv_RenderHandler_GetViewRect(Rect& _return);
  void RenderHandler_GetScreenInfo(ScreenInfo& _return, const int32_t bid) override;
  void send_RenderHandler_GetScreenInfo(const int32_t bid);
  void recv_RenderHandler_GetScreenInfo(ScreenInfo& _return);
  void RenderHandler_GetScreenPoint(Point& _return, const int32_t bid, const int32_t viewX, const int32_t viewY) override;
  void send_RenderHandler_GetScreenPoint(const int32_t bid, const int32_t viewX, const int32_t viewY);
  void recv_RenderHandler_GetScreenPoint(Point& _return);
  void RenderHandler_OnPaint(const int32_t bid, const bool popup, const int32_t dirtyRectsCount, const std::string& sharedMemName, const int64_t sharedMemHandle, const int32_t width, const int32_t height) override;
  void send_RenderHandler_OnPaint(const int32_t bid, const bool popup, const int32_t dirtyRectsCount, const std::string& sharedMemName, const int64_t sharedMemHandle, const int32_t width, const int32_t height);
  void recv_RenderHandler_OnPaint();
  bool LifeSpanHandler_OnBeforePopup(const int32_t bid, const std::string& url, const std::string& frameName, const bool gesture) override;
  void send_LifeSpanHandler_OnBeforePopup(const int32_t bid, const std::string& url, const std::string& frameName, const bool gesture);
  bool recv_LifeSpanHandler_OnBeforePopup();
  void LifeSpanHandler_OnAfterCreated(const int32_t bid) override;
  void send_LifeSpanHandler_OnAfterCreated(const int32_t bid);
  bool LifeSpanHandler_DoClose(const int32_t bid) override;
  void send_LifeSpanHandler_DoClose(const int32_t bid);
  bool recv_LifeSpanHandler_DoClose();
  void LifeSpanHandler_OnBeforeClose(const int32_t bid) override;
  void send_LifeSpanHandler_OnBeforeClose(const int32_t bid);
  void LoadHandler_OnLoadingStateChange(const int32_t bid, const bool isLoading, const bool canGoBack, const bool canGoForward) override;
  void send_LoadHandler_OnLoadingStateChange(const int32_t bid, const bool isLoading, const bool canGoBack, const bool canGoForward);
  void LoadHandler_OnLoadStart(const int32_t bid, const int32_t transition_type) override;
  void send_LoadHandler_OnLoadStart(const int32_t bid, const int32_t transition_type);
  void LoadHandler_OnLoadEnd(const int32_t bid, const int32_t httpStatusCode) override;
  void send_LoadHandler_OnLoadEnd(const int32_t bid, const int32_t httpStatusCode);
  void LoadHandler_OnLoadError(const int32_t bid, const int32_t errorCode, const std::string& errorText, const std::string& failedUrl) override;
  void send_LoadHandler_OnLoadError(const int32_t bid, const int32_t errorCode, const std::string& errorText, const std::string& failedUrl);
  void DisplayHandler_OnAddressChange(const int32_t bid, const std::string& url) override;
  void send_DisplayHandler_OnAddressChange(const int32_t bid, const std::string& url);
  void DisplayHandler_OnTitleChange(const int32_t bid, const std::string& title) override;
  void send_DisplayHandler_OnTitleChange(const int32_t bid, const std::string& title);
  bool DisplayHandler_OnTooltip(const int32_t bid, const std::string& text) override;
  void send_DisplayHandler_OnTooltip(const int32_t bid, const std::string& text);
  bool recv_DisplayHandler_OnTooltip();
  void DisplayHandler_OnStatusMessage(const int32_t bid, const std::string& value) override;
  void send_DisplayHandler_OnStatusMessage(const int32_t bid, const std::string& value);
  bool DisplayHandler_OnConsoleMessage(const int32_t bid, const int32_t level, const std::string& message, const std::string& source, const int32_t line) override;
  void send_DisplayHandler_OnConsoleMessage(const int32_t bid, const int32_t level, const std::string& message, const std::string& source, const int32_t line);
  bool recv_DisplayHandler_OnConsoleMessage();
  bool KeyboardHandler_OnPreKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) override;
  void send_KeyboardHandler_OnPreKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event);
  bool recv_KeyboardHandler_OnPreKeyEvent();
  bool KeyboardHandler_OnKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) override;
  void send_KeyboardHandler_OnKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event);
  bool recv_KeyboardHandler_OnKeyEvent();
  void FocusHandler_OnTakeFocus(const int32_t bid, const bool next) override;
  void send_FocusHandler_OnTakeFocus(const int32_t bid, const bool next);
  bool FocusHandler_OnSetFocus(const int32_t bid, const std::string& source) override;
  void send_FocusHandler_OnSetFocus(const int32_t bid, const std::string& source);
  bool recv_FocusHandler_OnSetFocus();
  void FocusHandler_OnGotFocus(const int32_t bid) override;
  void send_FocusHandler_OnGotFocus(const int32_t bid);
  bool RequestHandler_OnBeforeBrowse(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool user_gesture, const bool is_redirect) override;
  void send_RequestHandler_OnBeforeBrowse(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool user_gesture, const bool is_redirect);
  bool recv_RequestHandler_OnBeforeBrowse();
  bool RequestHandler_OnOpenURLFromTab(const int32_t bid, const std::string& target_url, const bool user_gesture) override;
  void send_RequestHandler_OnOpenURLFromTab(const int32_t bid, const std::string& target_url, const bool user_gesture);
  bool recv_RequestHandler_OnOpenURLFromTab();
  bool RequestHandler_GetAuthCredentials(const int32_t bid, const std::string& origin_url, const bool isProxy, const std::string& host, const int32_t port, const std::string& realm, const std::string& scheme, const  ::thrift_codegen::RObject& authCallback) override;
  void send_RequestHandler_GetAuthCredentials(const int32_t bid, const std::string& origin_url, const bool isProxy, const std::string& host, const int32_t port, const std::string& realm, const std::string& scheme, const  ::thrift_codegen::RObject& authCallback);
  bool recv_RequestHandler_GetAuthCredentials();
  bool RequestHandler_OnCertificateError(const int32_t bid, const std::string& cert_error, const std::string& request_url, const  ::thrift_codegen::RObject& sslInfo, const  ::thrift_codegen::RObject& callback) override;
  void send_RequestHandler_OnCertificateError(const int32_t bid, const std::string& cert_error, const std::string& request_url, const  ::thrift_codegen::RObject& sslInfo, const  ::thrift_codegen::RObject& callback);
  bool recv_RequestHandler_OnCertificateError();
  void RequestHandler_OnRenderProcessTerminated(const int32_t bid, const std::string& status) override;
  void send_RequestHandler_OnRenderProcessTerminated(const int32_t bid, const std::string& status);
  void RequestHandler_GetResourceRequestHandler( ::thrift_codegen::RObject& _return, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool isNavigation, const bool isDownload, const std::string& requestInitiator) override;
  void send_RequestHandler_GetResourceRequestHandler(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool isNavigation, const bool isDownload, const std::string& requestInitiator);
  void recv_RequestHandler_GetResourceRequestHandler( ::thrift_codegen::RObject& _return);
  void ResourceRequestHandler_Dispose(const int32_t rrHandler) override;
  void send_ResourceRequestHandler_Dispose(const int32_t rrHandler);
  void ResourceRequestHandler_GetCookieAccessFilter( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override;
  void send_ResourceRequestHandler_GetCookieAccessFilter(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request);
  void recv_ResourceRequestHandler_GetCookieAccessFilter( ::thrift_codegen::RObject& _return);
  void CookieAccessFilter_Dispose(const int32_t filter) override;
  void send_CookieAccessFilter_Dispose(const int32_t filter);
  bool CookieAccessFilter_CanSendCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const std::vector<std::string> & cookie) override;
  void send_CookieAccessFilter_CanSendCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const std::vector<std::string> & cookie);
  bool recv_CookieAccessFilter_CanSendCookie();
  bool CookieAccessFilter_CanSaveCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::vector<std::string> & cookie) override;
  void send_CookieAccessFilter_CanSaveCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::vector<std::string> & cookie);
  bool recv_CookieAccessFilter_CanSaveCookie();
  bool ResourceRequestHandler_OnBeforeResourceLoad(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override;
  void send_ResourceRequestHandler_OnBeforeResourceLoad(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request);
  bool recv_ResourceRequestHandler_OnBeforeResourceLoad();
  void ResourceRequestHandler_GetResourceHandler( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override;
  void send_ResourceRequestHandler_GetResourceHandler(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request);
  void recv_ResourceRequestHandler_GetResourceHandler( ::thrift_codegen::RObject& _return);
  void ResourceHandler_Dispose(const int32_t resourceHandler) override;
  void send_ResourceHandler_Dispose(const int32_t resourceHandler);
  void ResourceRequestHandler_OnResourceRedirect(std::string& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& new_url) override;
  void send_ResourceRequestHandler_OnResourceRedirect(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& new_url);
  void recv_ResourceRequestHandler_OnResourceRedirect(std::string& _return);
  bool ResourceRequestHandler_OnResourceResponse(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response) override;
  void send_ResourceRequestHandler_OnResourceResponse(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response);
  bool recv_ResourceRequestHandler_OnResourceResponse();
  void ResourceRequestHandler_OnResourceLoadComplete(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& status, const int64_t receivedContentLength) override;
  void send_ResourceRequestHandler_OnResourceLoadComplete(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& status, const int64_t receivedContentLength);
  void recv_ResourceRequestHandler_OnResourceLoadComplete();
  bool ResourceRequestHandler_OnProtocolExecution(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool allowOsExecution) override;
  void send_ResourceRequestHandler_OnProtocolExecution(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool allowOsExecution);
  bool recv_ResourceRequestHandler_OnProtocolExecution();
  bool MessageRouterHandler_onQuery(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId, const std::string& request, const bool persistent, const  ::thrift_codegen::RObject& queryCallback) override;
  void send_MessageRouterHandler_onQuery(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId, const std::string& request, const bool persistent, const  ::thrift_codegen::RObject& queryCallback);
  bool recv_MessageRouterHandler_onQuery();
  void MessageRouterHandler_onQueryCanceled(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId) override;
  void send_MessageRouterHandler_onQueryCanceled(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientHandlersProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ClientHandlersIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ClientHandlersProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AppHandler_OnContextInitialized(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RenderHandler_GetViewRect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RenderHandler_GetScreenInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RenderHandler_GetScreenPoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RenderHandler_OnPaint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LifeSpanHandler_OnBeforePopup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LifeSpanHandler_OnAfterCreated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LifeSpanHandler_DoClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LifeSpanHandler_OnBeforeClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LoadHandler_OnLoadingStateChange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LoadHandler_OnLoadStart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LoadHandler_OnLoadEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LoadHandler_OnLoadError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisplayHandler_OnAddressChange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisplayHandler_OnTitleChange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisplayHandler_OnTooltip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisplayHandler_OnStatusMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DisplayHandler_OnConsoleMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KeyboardHandler_OnPreKeyEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_KeyboardHandler_OnKeyEvent(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FocusHandler_OnTakeFocus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FocusHandler_OnSetFocus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FocusHandler_OnGotFocus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestHandler_OnBeforeBrowse(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestHandler_OnOpenURLFromTab(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestHandler_GetAuthCredentials(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestHandler_OnCertificateError(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestHandler_OnRenderProcessTerminated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RequestHandler_GetResourceRequestHandler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_GetCookieAccessFilter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CookieAccessFilter_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CookieAccessFilter_CanSendCookie(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CookieAccessFilter_CanSaveCookie(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_OnBeforeResourceLoad(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_GetResourceHandler(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceHandler_Dispose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_OnResourceRedirect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_OnResourceResponse(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_OnResourceLoadComplete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ResourceRequestHandler_OnProtocolExecution(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouterHandler_onQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_MessageRouterHandler_onQueryCanceled(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientHandlersProcessor(::std::shared_ptr<ClientHandlersIf> iface) :
    iface_(iface) {
    processMap_["connect"] = &ClientHandlersProcessor::process_connect;
    processMap_["log"] = &ClientHandlersProcessor::process_log;
    processMap_["AppHandler_OnContextInitialized"] = &ClientHandlersProcessor::process_AppHandler_OnContextInitialized;
    processMap_["RenderHandler_GetViewRect"] = &ClientHandlersProcessor::process_RenderHandler_GetViewRect;
    processMap_["RenderHandler_GetScreenInfo"] = &ClientHandlersProcessor::process_RenderHandler_GetScreenInfo;
    processMap_["RenderHandler_GetScreenPoint"] = &ClientHandlersProcessor::process_RenderHandler_GetScreenPoint;
    processMap_["RenderHandler_OnPaint"] = &ClientHandlersProcessor::process_RenderHandler_OnPaint;
    processMap_["LifeSpanHandler_OnBeforePopup"] = &ClientHandlersProcessor::process_LifeSpanHandler_OnBeforePopup;
    processMap_["LifeSpanHandler_OnAfterCreated"] = &ClientHandlersProcessor::process_LifeSpanHandler_OnAfterCreated;
    processMap_["LifeSpanHandler_DoClose"] = &ClientHandlersProcessor::process_LifeSpanHandler_DoClose;
    processMap_["LifeSpanHandler_OnBeforeClose"] = &ClientHandlersProcessor::process_LifeSpanHandler_OnBeforeClose;
    processMap_["LoadHandler_OnLoadingStateChange"] = &ClientHandlersProcessor::process_LoadHandler_OnLoadingStateChange;
    processMap_["LoadHandler_OnLoadStart"] = &ClientHandlersProcessor::process_LoadHandler_OnLoadStart;
    processMap_["LoadHandler_OnLoadEnd"] = &ClientHandlersProcessor::process_LoadHandler_OnLoadEnd;
    processMap_["LoadHandler_OnLoadError"] = &ClientHandlersProcessor::process_LoadHandler_OnLoadError;
    processMap_["DisplayHandler_OnAddressChange"] = &ClientHandlersProcessor::process_DisplayHandler_OnAddressChange;
    processMap_["DisplayHandler_OnTitleChange"] = &ClientHandlersProcessor::process_DisplayHandler_OnTitleChange;
    processMap_["DisplayHandler_OnTooltip"] = &ClientHandlersProcessor::process_DisplayHandler_OnTooltip;
    processMap_["DisplayHandler_OnStatusMessage"] = &ClientHandlersProcessor::process_DisplayHandler_OnStatusMessage;
    processMap_["DisplayHandler_OnConsoleMessage"] = &ClientHandlersProcessor::process_DisplayHandler_OnConsoleMessage;
    processMap_["KeyboardHandler_OnPreKeyEvent"] = &ClientHandlersProcessor::process_KeyboardHandler_OnPreKeyEvent;
    processMap_["KeyboardHandler_OnKeyEvent"] = &ClientHandlersProcessor::process_KeyboardHandler_OnKeyEvent;
    processMap_["FocusHandler_OnTakeFocus"] = &ClientHandlersProcessor::process_FocusHandler_OnTakeFocus;
    processMap_["FocusHandler_OnSetFocus"] = &ClientHandlersProcessor::process_FocusHandler_OnSetFocus;
    processMap_["FocusHandler_OnGotFocus"] = &ClientHandlersProcessor::process_FocusHandler_OnGotFocus;
    processMap_["RequestHandler_OnBeforeBrowse"] = &ClientHandlersProcessor::process_RequestHandler_OnBeforeBrowse;
    processMap_["RequestHandler_OnOpenURLFromTab"] = &ClientHandlersProcessor::process_RequestHandler_OnOpenURLFromTab;
    processMap_["RequestHandler_GetAuthCredentials"] = &ClientHandlersProcessor::process_RequestHandler_GetAuthCredentials;
    processMap_["RequestHandler_OnCertificateError"] = &ClientHandlersProcessor::process_RequestHandler_OnCertificateError;
    processMap_["RequestHandler_OnRenderProcessTerminated"] = &ClientHandlersProcessor::process_RequestHandler_OnRenderProcessTerminated;
    processMap_["RequestHandler_GetResourceRequestHandler"] = &ClientHandlersProcessor::process_RequestHandler_GetResourceRequestHandler;
    processMap_["ResourceRequestHandler_Dispose"] = &ClientHandlersProcessor::process_ResourceRequestHandler_Dispose;
    processMap_["ResourceRequestHandler_GetCookieAccessFilter"] = &ClientHandlersProcessor::process_ResourceRequestHandler_GetCookieAccessFilter;
    processMap_["CookieAccessFilter_Dispose"] = &ClientHandlersProcessor::process_CookieAccessFilter_Dispose;
    processMap_["CookieAccessFilter_CanSendCookie"] = &ClientHandlersProcessor::process_CookieAccessFilter_CanSendCookie;
    processMap_["CookieAccessFilter_CanSaveCookie"] = &ClientHandlersProcessor::process_CookieAccessFilter_CanSaveCookie;
    processMap_["ResourceRequestHandler_OnBeforeResourceLoad"] = &ClientHandlersProcessor::process_ResourceRequestHandler_OnBeforeResourceLoad;
    processMap_["ResourceRequestHandler_GetResourceHandler"] = &ClientHandlersProcessor::process_ResourceRequestHandler_GetResourceHandler;
    processMap_["ResourceHandler_Dispose"] = &ClientHandlersProcessor::process_ResourceHandler_Dispose;
    processMap_["ResourceRequestHandler_OnResourceRedirect"] = &ClientHandlersProcessor::process_ResourceRequestHandler_OnResourceRedirect;
    processMap_["ResourceRequestHandler_OnResourceResponse"] = &ClientHandlersProcessor::process_ResourceRequestHandler_OnResourceResponse;
    processMap_["ResourceRequestHandler_OnResourceLoadComplete"] = &ClientHandlersProcessor::process_ResourceRequestHandler_OnResourceLoadComplete;
    processMap_["ResourceRequestHandler_OnProtocolExecution"] = &ClientHandlersProcessor::process_ResourceRequestHandler_OnProtocolExecution;
    processMap_["MessageRouterHandler_onQuery"] = &ClientHandlersProcessor::process_MessageRouterHandler_onQuery;
    processMap_["MessageRouterHandler_onQueryCanceled"] = &ClientHandlersProcessor::process_MessageRouterHandler_onQueryCanceled;
  }

  virtual ~ClientHandlersProcessor() {}
};

class ClientHandlersProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientHandlersProcessorFactory(const ::std::shared_ptr< ClientHandlersIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ClientHandlersIfFactory > handlerFactory_;
};

class ClientHandlersMultiface : virtual public ClientHandlersIf {
 public:
  ClientHandlersMultiface(std::vector<std::shared_ptr<ClientHandlersIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientHandlersMultiface() {}
 protected:
  std::vector<std::shared_ptr<ClientHandlersIf> > ifaces_;
  ClientHandlersMultiface() {}
  void add(::std::shared_ptr<ClientHandlersIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t connect() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect();
    }
    return ifaces_[i]->connect();
  }

  void log(const std::string& msg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->log(msg);
    }
    ifaces_[i]->log(msg);
  }

  void AppHandler_OnContextInitialized() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AppHandler_OnContextInitialized();
    }
    ifaces_[i]->AppHandler_OnContextInitialized();
  }

  void RenderHandler_GetViewRect(Rect& _return, const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RenderHandler_GetViewRect(_return, bid);
    }
    ifaces_[i]->RenderHandler_GetViewRect(_return, bid);
    return;
  }

  void RenderHandler_GetScreenInfo(ScreenInfo& _return, const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RenderHandler_GetScreenInfo(_return, bid);
    }
    ifaces_[i]->RenderHandler_GetScreenInfo(_return, bid);
    return;
  }

  void RenderHandler_GetScreenPoint(Point& _return, const int32_t bid, const int32_t viewX, const int32_t viewY) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RenderHandler_GetScreenPoint(_return, bid, viewX, viewY);
    }
    ifaces_[i]->RenderHandler_GetScreenPoint(_return, bid, viewX, viewY);
    return;
  }

  void RenderHandler_OnPaint(const int32_t bid, const bool popup, const int32_t dirtyRectsCount, const std::string& sharedMemName, const int64_t sharedMemHandle, const int32_t width, const int32_t height) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RenderHandler_OnPaint(bid, popup, dirtyRectsCount, sharedMemName, sharedMemHandle, width, height);
    }
    ifaces_[i]->RenderHandler_OnPaint(bid, popup, dirtyRectsCount, sharedMemName, sharedMemHandle, width, height);
  }

  bool LifeSpanHandler_OnBeforePopup(const int32_t bid, const std::string& url, const std::string& frameName, const bool gesture) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LifeSpanHandler_OnBeforePopup(bid, url, frameName, gesture);
    }
    return ifaces_[i]->LifeSpanHandler_OnBeforePopup(bid, url, frameName, gesture);
  }

  void LifeSpanHandler_OnAfterCreated(const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LifeSpanHandler_OnAfterCreated(bid);
    }
    ifaces_[i]->LifeSpanHandler_OnAfterCreated(bid);
  }

  bool LifeSpanHandler_DoClose(const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LifeSpanHandler_DoClose(bid);
    }
    return ifaces_[i]->LifeSpanHandler_DoClose(bid);
  }

  void LifeSpanHandler_OnBeforeClose(const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LifeSpanHandler_OnBeforeClose(bid);
    }
    ifaces_[i]->LifeSpanHandler_OnBeforeClose(bid);
  }

  void LoadHandler_OnLoadingStateChange(const int32_t bid, const bool isLoading, const bool canGoBack, const bool canGoForward) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadHandler_OnLoadingStateChange(bid, isLoading, canGoBack, canGoForward);
    }
    ifaces_[i]->LoadHandler_OnLoadingStateChange(bid, isLoading, canGoBack, canGoForward);
  }

  void LoadHandler_OnLoadStart(const int32_t bid, const int32_t transition_type) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadHandler_OnLoadStart(bid, transition_type);
    }
    ifaces_[i]->LoadHandler_OnLoadStart(bid, transition_type);
  }

  void LoadHandler_OnLoadEnd(const int32_t bid, const int32_t httpStatusCode) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadHandler_OnLoadEnd(bid, httpStatusCode);
    }
    ifaces_[i]->LoadHandler_OnLoadEnd(bid, httpStatusCode);
  }

  void LoadHandler_OnLoadError(const int32_t bid, const int32_t errorCode, const std::string& errorText, const std::string& failedUrl) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LoadHandler_OnLoadError(bid, errorCode, errorText, failedUrl);
    }
    ifaces_[i]->LoadHandler_OnLoadError(bid, errorCode, errorText, failedUrl);
  }

  void DisplayHandler_OnAddressChange(const int32_t bid, const std::string& url) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisplayHandler_OnAddressChange(bid, url);
    }
    ifaces_[i]->DisplayHandler_OnAddressChange(bid, url);
  }

  void DisplayHandler_OnTitleChange(const int32_t bid, const std::string& title) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisplayHandler_OnTitleChange(bid, title);
    }
    ifaces_[i]->DisplayHandler_OnTitleChange(bid, title);
  }

  bool DisplayHandler_OnTooltip(const int32_t bid, const std::string& text) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisplayHandler_OnTooltip(bid, text);
    }
    return ifaces_[i]->DisplayHandler_OnTooltip(bid, text);
  }

  void DisplayHandler_OnStatusMessage(const int32_t bid, const std::string& value) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisplayHandler_OnStatusMessage(bid, value);
    }
    ifaces_[i]->DisplayHandler_OnStatusMessage(bid, value);
  }

  bool DisplayHandler_OnConsoleMessage(const int32_t bid, const int32_t level, const std::string& message, const std::string& source, const int32_t line) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DisplayHandler_OnConsoleMessage(bid, level, message, source, line);
    }
    return ifaces_[i]->DisplayHandler_OnConsoleMessage(bid, level, message, source, line);
  }

  bool KeyboardHandler_OnPreKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KeyboardHandler_OnPreKeyEvent(bid, event);
    }
    return ifaces_[i]->KeyboardHandler_OnPreKeyEvent(bid, event);
  }

  bool KeyboardHandler_OnKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->KeyboardHandler_OnKeyEvent(bid, event);
    }
    return ifaces_[i]->KeyboardHandler_OnKeyEvent(bid, event);
  }

  void FocusHandler_OnTakeFocus(const int32_t bid, const bool next) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FocusHandler_OnTakeFocus(bid, next);
    }
    ifaces_[i]->FocusHandler_OnTakeFocus(bid, next);
  }

  bool FocusHandler_OnSetFocus(const int32_t bid, const std::string& source) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FocusHandler_OnSetFocus(bid, source);
    }
    return ifaces_[i]->FocusHandler_OnSetFocus(bid, source);
  }

  void FocusHandler_OnGotFocus(const int32_t bid) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FocusHandler_OnGotFocus(bid);
    }
    ifaces_[i]->FocusHandler_OnGotFocus(bid);
  }

  bool RequestHandler_OnBeforeBrowse(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool user_gesture, const bool is_redirect) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestHandler_OnBeforeBrowse(bid, request, user_gesture, is_redirect);
    }
    return ifaces_[i]->RequestHandler_OnBeforeBrowse(bid, request, user_gesture, is_redirect);
  }

  bool RequestHandler_OnOpenURLFromTab(const int32_t bid, const std::string& target_url, const bool user_gesture) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestHandler_OnOpenURLFromTab(bid, target_url, user_gesture);
    }
    return ifaces_[i]->RequestHandler_OnOpenURLFromTab(bid, target_url, user_gesture);
  }

  bool RequestHandler_GetAuthCredentials(const int32_t bid, const std::string& origin_url, const bool isProxy, const std::string& host, const int32_t port, const std::string& realm, const std::string& scheme, const  ::thrift_codegen::RObject& authCallback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestHandler_GetAuthCredentials(bid, origin_url, isProxy, host, port, realm, scheme, authCallback);
    }
    return ifaces_[i]->RequestHandler_GetAuthCredentials(bid, origin_url, isProxy, host, port, realm, scheme, authCallback);
  }

  bool RequestHandler_OnCertificateError(const int32_t bid, const std::string& cert_error, const std::string& request_url, const  ::thrift_codegen::RObject& sslInfo, const  ::thrift_codegen::RObject& callback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestHandler_OnCertificateError(bid, cert_error, request_url, sslInfo, callback);
    }
    return ifaces_[i]->RequestHandler_OnCertificateError(bid, cert_error, request_url, sslInfo, callback);
  }

  void RequestHandler_OnRenderProcessTerminated(const int32_t bid, const std::string& status) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestHandler_OnRenderProcessTerminated(bid, status);
    }
    ifaces_[i]->RequestHandler_OnRenderProcessTerminated(bid, status);
  }

  void RequestHandler_GetResourceRequestHandler( ::thrift_codegen::RObject& _return, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool isNavigation, const bool isDownload, const std::string& requestInitiator) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RequestHandler_GetResourceRequestHandler(_return, bid, request, isNavigation, isDownload, requestInitiator);
    }
    ifaces_[i]->RequestHandler_GetResourceRequestHandler(_return, bid, request, isNavigation, isDownload, requestInitiator);
    return;
  }

  void ResourceRequestHandler_Dispose(const int32_t rrHandler) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_Dispose(rrHandler);
    }
    ifaces_[i]->ResourceRequestHandler_Dispose(rrHandler);
  }

  void ResourceRequestHandler_GetCookieAccessFilter( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_GetCookieAccessFilter(_return, rrHandler, bid, request);
    }
    ifaces_[i]->ResourceRequestHandler_GetCookieAccessFilter(_return, rrHandler, bid, request);
    return;
  }

  void CookieAccessFilter_Dispose(const int32_t filter) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CookieAccessFilter_Dispose(filter);
    }
    ifaces_[i]->CookieAccessFilter_Dispose(filter);
  }

  bool CookieAccessFilter_CanSendCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const std::vector<std::string> & cookie) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CookieAccessFilter_CanSendCookie(filter, bid, request, cookie);
    }
    return ifaces_[i]->CookieAccessFilter_CanSendCookie(filter, bid, request, cookie);
  }

  bool CookieAccessFilter_CanSaveCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::vector<std::string> & cookie) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CookieAccessFilter_CanSaveCookie(filter, bid, request, response, cookie);
    }
    return ifaces_[i]->CookieAccessFilter_CanSaveCookie(filter, bid, request, response, cookie);
  }

  bool ResourceRequestHandler_OnBeforeResourceLoad(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_OnBeforeResourceLoad(rrHandler, bid, request);
    }
    return ifaces_[i]->ResourceRequestHandler_OnBeforeResourceLoad(rrHandler, bid, request);
  }

  void ResourceRequestHandler_GetResourceHandler( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_GetResourceHandler(_return, rrHandler, bid, request);
    }
    ifaces_[i]->ResourceRequestHandler_GetResourceHandler(_return, rrHandler, bid, request);
    return;
  }

  void ResourceHandler_Dispose(const int32_t resourceHandler) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceHandler_Dispose(resourceHandler);
    }
    ifaces_[i]->ResourceHandler_Dispose(resourceHandler);
  }

  void ResourceRequestHandler_OnResourceRedirect(std::string& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& new_url) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_OnResourceRedirect(_return, rrHandler, bid, request, response, new_url);
    }
    ifaces_[i]->ResourceRequestHandler_OnResourceRedirect(_return, rrHandler, bid, request, response, new_url);
    return;
  }

  bool ResourceRequestHandler_OnResourceResponse(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_OnResourceResponse(rrHandler, bid, request, response);
    }
    return ifaces_[i]->ResourceRequestHandler_OnResourceResponse(rrHandler, bid, request, response);
  }

  void ResourceRequestHandler_OnResourceLoadComplete(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& status, const int64_t receivedContentLength) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_OnResourceLoadComplete(rrHandler, bid, request, response, status, receivedContentLength);
    }
    ifaces_[i]->ResourceRequestHandler_OnResourceLoadComplete(rrHandler, bid, request, response, status, receivedContentLength);
  }

  bool ResourceRequestHandler_OnProtocolExecution(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool allowOsExecution) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ResourceRequestHandler_OnProtocolExecution(rrHandler, bid, request, allowOsExecution);
    }
    return ifaces_[i]->ResourceRequestHandler_OnProtocolExecution(rrHandler, bid, request, allowOsExecution);
  }

  bool MessageRouterHandler_onQuery(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId, const std::string& request, const bool persistent, const  ::thrift_codegen::RObject& queryCallback) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouterHandler_onQuery(handler, bid, queryId, request, persistent, queryCallback);
    }
    return ifaces_[i]->MessageRouterHandler_onQuery(handler, bid, queryId, request, persistent, queryCallback);
  }

  void MessageRouterHandler_onQueryCanceled(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->MessageRouterHandler_onQueryCanceled(handler, bid, queryId);
    }
    ifaces_[i]->MessageRouterHandler_onQueryCanceled(handler, bid, queryId);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ClientHandlersConcurrentClient : virtual public ClientHandlersIf {
 public:
  ClientHandlersConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ClientHandlersConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t connect() override;
  int32_t send_connect();
  int32_t recv_connect(const int32_t seqid);
  void log(const std::string& msg) override;
  void send_log(const std::string& msg);
  void AppHandler_OnContextInitialized() override;
  void send_AppHandler_OnContextInitialized();
  void RenderHandler_GetViewRect(Rect& _return, const int32_t bid) override;
  int32_t send_RenderHandler_GetViewRect(const int32_t bid);
  void recv_RenderHandler_GetViewRect(Rect& _return, const int32_t seqid);
  void RenderHandler_GetScreenInfo(ScreenInfo& _return, const int32_t bid) override;
  int32_t send_RenderHandler_GetScreenInfo(const int32_t bid);
  void recv_RenderHandler_GetScreenInfo(ScreenInfo& _return, const int32_t seqid);
  void RenderHandler_GetScreenPoint(Point& _return, const int32_t bid, const int32_t viewX, const int32_t viewY) override;
  int32_t send_RenderHandler_GetScreenPoint(const int32_t bid, const int32_t viewX, const int32_t viewY);
  void recv_RenderHandler_GetScreenPoint(Point& _return, const int32_t seqid);
  void RenderHandler_OnPaint(const int32_t bid, const bool popup, const int32_t dirtyRectsCount, const std::string& sharedMemName, const int64_t sharedMemHandle, const int32_t width, const int32_t height) override;
  int32_t send_RenderHandler_OnPaint(const int32_t bid, const bool popup, const int32_t dirtyRectsCount, const std::string& sharedMemName, const int64_t sharedMemHandle, const int32_t width, const int32_t height);
  void recv_RenderHandler_OnPaint(const int32_t seqid);
  bool LifeSpanHandler_OnBeforePopup(const int32_t bid, const std::string& url, const std::string& frameName, const bool gesture) override;
  int32_t send_LifeSpanHandler_OnBeforePopup(const int32_t bid, const std::string& url, const std::string& frameName, const bool gesture);
  bool recv_LifeSpanHandler_OnBeforePopup(const int32_t seqid);
  void LifeSpanHandler_OnAfterCreated(const int32_t bid) override;
  void send_LifeSpanHandler_OnAfterCreated(const int32_t bid);
  bool LifeSpanHandler_DoClose(const int32_t bid) override;
  int32_t send_LifeSpanHandler_DoClose(const int32_t bid);
  bool recv_LifeSpanHandler_DoClose(const int32_t seqid);
  void LifeSpanHandler_OnBeforeClose(const int32_t bid) override;
  void send_LifeSpanHandler_OnBeforeClose(const int32_t bid);
  void LoadHandler_OnLoadingStateChange(const int32_t bid, const bool isLoading, const bool canGoBack, const bool canGoForward) override;
  void send_LoadHandler_OnLoadingStateChange(const int32_t bid, const bool isLoading, const bool canGoBack, const bool canGoForward);
  void LoadHandler_OnLoadStart(const int32_t bid, const int32_t transition_type) override;
  void send_LoadHandler_OnLoadStart(const int32_t bid, const int32_t transition_type);
  void LoadHandler_OnLoadEnd(const int32_t bid, const int32_t httpStatusCode) override;
  void send_LoadHandler_OnLoadEnd(const int32_t bid, const int32_t httpStatusCode);
  void LoadHandler_OnLoadError(const int32_t bid, const int32_t errorCode, const std::string& errorText, const std::string& failedUrl) override;
  void send_LoadHandler_OnLoadError(const int32_t bid, const int32_t errorCode, const std::string& errorText, const std::string& failedUrl);
  void DisplayHandler_OnAddressChange(const int32_t bid, const std::string& url) override;
  void send_DisplayHandler_OnAddressChange(const int32_t bid, const std::string& url);
  void DisplayHandler_OnTitleChange(const int32_t bid, const std::string& title) override;
  void send_DisplayHandler_OnTitleChange(const int32_t bid, const std::string& title);
  bool DisplayHandler_OnTooltip(const int32_t bid, const std::string& text) override;
  int32_t send_DisplayHandler_OnTooltip(const int32_t bid, const std::string& text);
  bool recv_DisplayHandler_OnTooltip(const int32_t seqid);
  void DisplayHandler_OnStatusMessage(const int32_t bid, const std::string& value) override;
  void send_DisplayHandler_OnStatusMessage(const int32_t bid, const std::string& value);
  bool DisplayHandler_OnConsoleMessage(const int32_t bid, const int32_t level, const std::string& message, const std::string& source, const int32_t line) override;
  int32_t send_DisplayHandler_OnConsoleMessage(const int32_t bid, const int32_t level, const std::string& message, const std::string& source, const int32_t line);
  bool recv_DisplayHandler_OnConsoleMessage(const int32_t seqid);
  bool KeyboardHandler_OnPreKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) override;
  int32_t send_KeyboardHandler_OnPreKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event);
  bool recv_KeyboardHandler_OnPreKeyEvent(const int32_t seqid);
  bool KeyboardHandler_OnKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event) override;
  int32_t send_KeyboardHandler_OnKeyEvent(const int32_t bid, const  ::thrift_codegen::KeyEvent& event);
  bool recv_KeyboardHandler_OnKeyEvent(const int32_t seqid);
  void FocusHandler_OnTakeFocus(const int32_t bid, const bool next) override;
  void send_FocusHandler_OnTakeFocus(const int32_t bid, const bool next);
  bool FocusHandler_OnSetFocus(const int32_t bid, const std::string& source) override;
  int32_t send_FocusHandler_OnSetFocus(const int32_t bid, const std::string& source);
  bool recv_FocusHandler_OnSetFocus(const int32_t seqid);
  void FocusHandler_OnGotFocus(const int32_t bid) override;
  void send_FocusHandler_OnGotFocus(const int32_t bid);
  bool RequestHandler_OnBeforeBrowse(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool user_gesture, const bool is_redirect) override;
  int32_t send_RequestHandler_OnBeforeBrowse(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool user_gesture, const bool is_redirect);
  bool recv_RequestHandler_OnBeforeBrowse(const int32_t seqid);
  bool RequestHandler_OnOpenURLFromTab(const int32_t bid, const std::string& target_url, const bool user_gesture) override;
  int32_t send_RequestHandler_OnOpenURLFromTab(const int32_t bid, const std::string& target_url, const bool user_gesture);
  bool recv_RequestHandler_OnOpenURLFromTab(const int32_t seqid);
  bool RequestHandler_GetAuthCredentials(const int32_t bid, const std::string& origin_url, const bool isProxy, const std::string& host, const int32_t port, const std::string& realm, const std::string& scheme, const  ::thrift_codegen::RObject& authCallback) override;
  int32_t send_RequestHandler_GetAuthCredentials(const int32_t bid, const std::string& origin_url, const bool isProxy, const std::string& host, const int32_t port, const std::string& realm, const std::string& scheme, const  ::thrift_codegen::RObject& authCallback);
  bool recv_RequestHandler_GetAuthCredentials(const int32_t seqid);
  bool RequestHandler_OnCertificateError(const int32_t bid, const std::string& cert_error, const std::string& request_url, const  ::thrift_codegen::RObject& sslInfo, const  ::thrift_codegen::RObject& callback) override;
  int32_t send_RequestHandler_OnCertificateError(const int32_t bid, const std::string& cert_error, const std::string& request_url, const  ::thrift_codegen::RObject& sslInfo, const  ::thrift_codegen::RObject& callback);
  bool recv_RequestHandler_OnCertificateError(const int32_t seqid);
  void RequestHandler_OnRenderProcessTerminated(const int32_t bid, const std::string& status) override;
  void send_RequestHandler_OnRenderProcessTerminated(const int32_t bid, const std::string& status);
  void RequestHandler_GetResourceRequestHandler( ::thrift_codegen::RObject& _return, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool isNavigation, const bool isDownload, const std::string& requestInitiator) override;
  int32_t send_RequestHandler_GetResourceRequestHandler(const int32_t bid, const  ::thrift_codegen::RObject& request, const bool isNavigation, const bool isDownload, const std::string& requestInitiator);
  void recv_RequestHandler_GetResourceRequestHandler( ::thrift_codegen::RObject& _return, const int32_t seqid);
  void ResourceRequestHandler_Dispose(const int32_t rrHandler) override;
  void send_ResourceRequestHandler_Dispose(const int32_t rrHandler);
  void ResourceRequestHandler_GetCookieAccessFilter( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override;
  int32_t send_ResourceRequestHandler_GetCookieAccessFilter(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request);
  void recv_ResourceRequestHandler_GetCookieAccessFilter( ::thrift_codegen::RObject& _return, const int32_t seqid);
  void CookieAccessFilter_Dispose(const int32_t filter) override;
  void send_CookieAccessFilter_Dispose(const int32_t filter);
  bool CookieAccessFilter_CanSendCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const std::vector<std::string> & cookie) override;
  int32_t send_CookieAccessFilter_CanSendCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const std::vector<std::string> & cookie);
  bool recv_CookieAccessFilter_CanSendCookie(const int32_t seqid);
  bool CookieAccessFilter_CanSaveCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::vector<std::string> & cookie) override;
  int32_t send_CookieAccessFilter_CanSaveCookie(const int32_t filter, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::vector<std::string> & cookie);
  bool recv_CookieAccessFilter_CanSaveCookie(const int32_t seqid);
  bool ResourceRequestHandler_OnBeforeResourceLoad(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override;
  int32_t send_ResourceRequestHandler_OnBeforeResourceLoad(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request);
  bool recv_ResourceRequestHandler_OnBeforeResourceLoad(const int32_t seqid);
  void ResourceRequestHandler_GetResourceHandler( ::thrift_codegen::RObject& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request) override;
  int32_t send_ResourceRequestHandler_GetResourceHandler(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request);
  void recv_ResourceRequestHandler_GetResourceHandler( ::thrift_codegen::RObject& _return, const int32_t seqid);
  void ResourceHandler_Dispose(const int32_t resourceHandler) override;
  void send_ResourceHandler_Dispose(const int32_t resourceHandler);
  void ResourceRequestHandler_OnResourceRedirect(std::string& _return, const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& new_url) override;
  int32_t send_ResourceRequestHandler_OnResourceRedirect(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& new_url);
  void recv_ResourceRequestHandler_OnResourceRedirect(std::string& _return, const int32_t seqid);
  bool ResourceRequestHandler_OnResourceResponse(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response) override;
  int32_t send_ResourceRequestHandler_OnResourceResponse(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response);
  bool recv_ResourceRequestHandler_OnResourceResponse(const int32_t seqid);
  void ResourceRequestHandler_OnResourceLoadComplete(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& status, const int64_t receivedContentLength) override;
  int32_t send_ResourceRequestHandler_OnResourceLoadComplete(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const  ::thrift_codegen::RObject& response, const std::string& status, const int64_t receivedContentLength);
  void recv_ResourceRequestHandler_OnResourceLoadComplete(const int32_t seqid);
  bool ResourceRequestHandler_OnProtocolExecution(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool allowOsExecution) override;
  int32_t send_ResourceRequestHandler_OnProtocolExecution(const int32_t rrHandler, const int32_t bid, const  ::thrift_codegen::RObject& request, const bool allowOsExecution);
  bool recv_ResourceRequestHandler_OnProtocolExecution(const int32_t seqid);
  bool MessageRouterHandler_onQuery(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId, const std::string& request, const bool persistent, const  ::thrift_codegen::RObject& queryCallback) override;
  int32_t send_MessageRouterHandler_onQuery(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId, const std::string& request, const bool persistent, const  ::thrift_codegen::RObject& queryCallback);
  bool recv_MessageRouterHandler_onQuery(const int32_t seqid);
  void MessageRouterHandler_onQueryCanceled(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId) override;
  void send_MessageRouterHandler_onQueryCanceled(const  ::thrift_codegen::RObject& handler, const int32_t bid, const int64_t queryId);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
